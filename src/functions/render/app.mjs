import {randomBytes, createHash} from "crypto";
import http from "http";
import https from "https";
import zlib from "zlib";
import Stream, {PassThrough, pipeline} from "stream";
import {types} from "util";
import {format, parse, resolve} from "url";
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function devalue(value) {
  var counts = new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new Error("Cannot stringify a function");
    }
    if (counts.has(thing)) {
      counts.set(thing, counts.get(thing) + 1);
      return;
    }
    counts.set(thing, 1);
    if (!isPrimitive(thing)) {
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach(walk);
          break;
        case "Set":
        case "Map":
          Array.from(thing).forEach(walk);
          break;
        default:
          var proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
            throw new Error("Cannot stringify arbitrary non-POJOs");
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new Error("Cannot stringify POJOs with symbolic keys");
          }
          Object.keys(thing).forEach(function(key) {
            return walk(thing[key]);
          });
      }
    }
  }
  walk(value);
  var names = new Map();
  Array.from(counts).filter(function(entry) {
    return entry[1] > 1;
  }).sort(function(a, b) {
    return b[1] - a[1];
  }).forEach(function(entry, i) {
    names.set(entry[0], getName(i));
  });
  function stringify(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (isPrimitive(thing)) {
      return stringifyPrimitive(thing);
    }
    var type = getType(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return "Object(" + stringify(thing.valueOf()) + ")";
      case "RegExp":
        return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
      case "Date":
        return "new Date(" + thing.getTime() + ")";
      case "Array":
        var members = thing.map(function(v, i) {
          return i in thing ? stringify(v) : "";
        });
        var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return "[" + members.join(",") + tail + "]";
      case "Set":
      case "Map":
        return "new " + type + "([" + Array.from(thing).map(stringify).join(",") + "])";
      default:
        var obj = "{" + Object.keys(thing).map(function(key) {
          return safeKey(key) + ":" + stringify(thing[key]);
        }).join(",") + "}";
        var proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
        }
        return obj;
    }
  }
  var str = stringify(value);
  if (names.size) {
    var params_1 = [];
    var statements_1 = [];
    var values_1 = [];
    names.forEach(function(name, thing) {
      params_1.push(name);
      if (isPrimitive(thing)) {
        values_1.push(stringifyPrimitive(thing));
        return;
      }
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values_1.push("Object(" + stringify(thing.valueOf()) + ")");
          break;
        case "RegExp":
          values_1.push(thing.toString());
          break;
        case "Date":
          values_1.push("new Date(" + thing.getTime() + ")");
          break;
        case "Array":
          values_1.push("Array(" + thing.length + ")");
          thing.forEach(function(v, i) {
            statements_1.push(name + "[" + i + "]=" + stringify(v));
          });
          break;
        case "Set":
          values_1.push("new Set");
          statements_1.push(name + "." + Array.from(thing).map(function(v) {
            return "add(" + stringify(v) + ")";
          }).join("."));
          break;
        case "Map":
          values_1.push("new Map");
          statements_1.push(name + "." + Array.from(thing).map(function(_a) {
            var k = _a[0], v = _a[1];
            return "set(" + stringify(k) + ", " + stringify(v) + ")";
          }).join("."));
          break;
        default:
          values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
          Object.keys(thing).forEach(function(key) {
            statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
          });
      }
    });
    statements_1.push("return " + str);
    return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
  } else {
    return str;
  }
}
function getName(num) {
  var name = "";
  do {
    name = chars[num % chars.length] + name;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
  return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
  if (typeof thing === "string")
    return stringifyString(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  var str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  return str;
}
function getType(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
  return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
  return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
  var result = '"';
  for (var i = 0; i < str.length; i += 1) {
    var char = str.charAt(i);
    var code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$1) {
      result += escaped$1[char];
    } else if (code >= 55296 && code <= 57343) {
      var next = str.charCodeAt(i + 1);
      if (code <= 56319 && (next >= 56320 && next <= 57343)) {
        result += char + str[++i];
      } else {
        result += "\\u" + code.toString(16).toUpperCase();
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
function noop$1() {
}
function safe_not_equal$1(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
const subscriber_queue$1 = [];
function writable$1(value, start = noop$1) {
  let stop;
  const subscribers = [];
  function set(new_value) {
    if (safe_not_equal$1(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue$1.length;
        for (let i = 0; i < subscribers.length; i += 1) {
          const s2 = subscribers[i];
          s2[1]();
          subscriber_queue$1.push(s2, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue$1.length; i += 2) {
            subscriber_queue$1[i][0](subscriber_queue$1[i + 1]);
          }
          subscriber_queue$1.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop$1) {
    const subscriber = [run2, invalidate];
    subscribers.push(subscriber);
    if (subscribers.length === 1) {
      stop = start(set) || noop$1;
    }
    run2(value);
    return () => {
      const index2 = subscribers.indexOf(subscriber);
      if (index2 !== -1) {
        subscribers.splice(index2, 1);
      }
      if (subscribers.length === 0) {
        stop();
        stop = null;
      }
    };
  }
  return {set, update, subscribe: subscribe2};
}
const s$1 = JSON.stringify;
async function render_response({
  options,
  $session,
  page_config,
  status,
  error: error2,
  branch,
  page: page2
}) {
  const css2 = new Set();
  const js = new Set();
  const styles = new Set();
  const serialized_data = [];
  let rendered;
  let is_private = false;
  let maxage;
  if (branch) {
    branch.forEach(({node, loaded, fetched, uses_credentials}) => {
      if (node.css)
        node.css.forEach((url) => css2.add(url));
      if (node.js)
        node.js.forEach((url) => js.add(url));
      if (node.styles)
        node.styles.forEach((content) => styles.add(content));
      if (fetched && page_config.hydrate)
        serialized_data.push(...fetched);
      if (uses_credentials)
        is_private = true;
      maxage = loaded.maxage;
    });
    if (error2) {
      if (options.dev) {
        error2.stack = await options.get_stack(error2);
      } else {
        error2.stack = String(error2);
      }
    }
    const session2 = writable$1($session);
    const props = {
      stores: {
        page: writable$1(null),
        navigating: writable$1(null),
        session: session2
      },
      page: page2,
      components: branch.map(({node}) => node.module.default)
    };
    for (let i = 0; i < branch.length; i += 1) {
      props[`props_${i}`] = await branch[i].loaded.props;
    }
    let session_tracking_active = false;
    const unsubscribe = session2.subscribe(() => {
      if (session_tracking_active)
        is_private = true;
    });
    session_tracking_active = true;
    try {
      rendered = options.root.render(props);
    } finally {
      unsubscribe();
    }
  } else {
    rendered = {head: "", html: "", css: ""};
  }
  const links = options.amp ? styles.size > 0 ? `<style amp-custom>${Array.from(styles).join("\n")}</style>` : "" : [
    ...Array.from(js).map((dep) => `<link rel="modulepreload" href="${dep}">`),
    ...Array.from(css2).map((dep) => `<link rel="stylesheet" href="${dep}">`)
  ].join("\n		");
  let init2 = "";
  if (options.amp) {
    init2 = `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"></script>`;
  } else if (page_config.router || page_config.hydrate) {
    init2 = `<script type="module">
			import { start } from ${s$1(options.entry)};
			start({
				target: ${options.target ? `document.querySelector(${s$1(options.target)})` : "document.body"},
				paths: ${s$1(options.paths)},
				session: ${try_serialize($session, (error3) => {
      throw new Error(`Failed to serialize session data: ${error3.message}`);
    })},
				host: ${page2.host ? s$1(page2.host) : "location.host"},
				route: ${!!page_config.router},
				spa: ${!page_config.ssr},
				hydrate: ${page_config.ssr && page_config.hydrate ? `{
					status: ${status},
					error: ${serialize_error(error2)},
					nodes: [
						${branch.map(({node}) => `import(${s$1(node.entry)})`).join(",\n						")}
					],
					page: {
						host: ${page2.host ? s$1(page2.host) : "location.host"}, // TODO this is redundant
						path: ${s$1(page2.path)},
						query: new URLSearchParams(${s$1(page2.query.toString())}),
						params: ${s$1(page2.params)}
					}
				}` : "null"}
			});
		</script>`;
  }
  const head = [
    rendered.head,
    styles.size && !options.amp ? `<style data-svelte>${Array.from(styles).join("\n")}</style>` : "",
    links,
    init2
  ].join("\n\n		");
  const body = options.amp ? rendered.html : `${rendered.html}

			${serialized_data.map(({url, json}) => `<script type="svelte-data" url="${url}">${json}</script>`).join("\n\n			")}
		`.replace(/^\t{2}/gm, "");
  const headers = {
    "content-type": "text/html"
  };
  if (maxage) {
    headers["cache-control"] = `${is_private ? "private" : "public"}, max-age=${maxage}`;
  }
  return {
    status,
    headers,
    body: options.template({head, body})
  };
}
function try_serialize(data, fail) {
  try {
    return devalue(data);
  } catch (err) {
    if (fail)
      fail(err);
    return null;
  }
}
function serialize_error(error2) {
  if (!error2)
    return null;
  let serialized = try_serialize(error2);
  if (!serialized) {
    const {name, message, stack} = error2;
    serialized = try_serialize({name, message, stack});
  }
  if (!serialized) {
    serialized = "{}";
  }
  return serialized;
}
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i = 1; i < meta.length; i++) {
    if (meta[i] === "base64") {
      base64 = true;
    } else {
      typeFull += `;${meta[i]}`;
      if (meta[i].indexOf("charset=") === 0) {
        charset = meta[i].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
var src = dataUriToBuffer;
const {Readable} = Stream;
const wm = new WeakMap();
async function* read(parts) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else {
      yield part;
    }
  }
}
class Blob {
  constructor(blobParts = [], options = {type: ""}) {
    let size = 0;
    const parts = blobParts.map((element) => {
      let buffer;
      if (element instanceof Buffer) {
        buffer = element;
      } else if (ArrayBuffer.isView(element)) {
        buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
      } else if (element instanceof ArrayBuffer) {
        buffer = Buffer.from(element);
      } else if (element instanceof Blob) {
        buffer = element;
      } else {
        buffer = Buffer.from(typeof element === "string" ? element : String(element));
      }
      size += buffer.length || buffer.size || 0;
      return buffer;
    });
    const type = options.type === void 0 ? "" : String(options.type).toLowerCase();
    wm.set(this, {
      type: /[^\u0020-\u007E]/.test(type) ? "" : type,
      size,
      parts
    });
  }
  get size() {
    return wm.get(this).size;
  }
  get type() {
    return wm.get(this).type;
  }
  async text() {
    return Buffer.from(await this.arrayBuffer()).toString();
  }
  async arrayBuffer() {
    const data = new Uint8Array(this.size);
    let offset = 0;
    for await (const chunk of this.stream()) {
      data.set(chunk, offset);
      offset += chunk.length;
    }
    return data.buffer;
  }
  stream() {
    return Readable.from(read(wm.get(this).parts));
  }
  slice(start = 0, end = this.size, type = "") {
    const {size} = this;
    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
    const span = Math.max(relativeEnd - relativeStart, 0);
    const parts = wm.get(this).parts.values();
    const blobParts = [];
    let added = 0;
    for (const part of parts) {
      const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
      if (relativeStart && size2 <= relativeStart) {
        relativeStart -= size2;
        relativeEnd -= size2;
      } else {
        const chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
        blobParts.push(chunk);
        added += ArrayBuffer.isView(chunk) ? chunk.byteLength : chunk.size;
        relativeStart = 0;
        if (added >= span) {
          break;
        }
      }
    }
    const blob = new Blob([], {type});
    Object.assign(wm.get(blob), {size: span, parts: blobParts});
    return blob;
  }
  get [Symbol.toStringTag]() {
    return "Blob";
  }
  static [Symbol.hasInstance](object) {
    return typeof object === "object" && typeof object.stream === "function" && object.stream.length === 0 && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
  }
}
Object.defineProperties(Blob.prototype, {
  size: {enumerable: true},
  type: {enumerable: true},
  slice: {enumerable: true}
});
var fetchBlob = Blob;
class FetchBaseError extends Error {
  constructor(message, type) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.type = type;
  }
  get name() {
    return this.constructor.name;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
}
class FetchError extends FetchBaseError {
  constructor(message, type, systemError) {
    super(message, type);
    if (systemError) {
      this.code = this.errno = systemError.code;
      this.erroredSysCall = systemError.syscall;
    }
  }
}
const NAME = Symbol.toStringTag;
const isURLSearchParameters = (object) => {
  return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
};
const isBlob = (object) => {
  return typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
};
function isFormData(object) {
  return typeof object === "object" && typeof object.append === "function" && typeof object.set === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.delete === "function" && typeof object.keys === "function" && typeof object.values === "function" && typeof object.entries === "function" && typeof object.constructor === "function" && object[NAME] === "FormData";
}
const isAbortSignal = (object) => {
  return typeof object === "object" && object[NAME] === "AbortSignal";
};
const carriage = "\r\n";
const dashes = "-".repeat(2);
const carriageLength = Buffer.byteLength(carriage);
const getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
function getHeader(boundary, name, field) {
  let header = "";
  header += `${dashes}${boundary}${carriage}`;
  header += `Content-Disposition: form-data; name="${name}"`;
  if (isBlob(field)) {
    header += `; filename="${field.name}"${carriage}`;
    header += `Content-Type: ${field.type || "application/octet-stream"}`;
  }
  return `${header}${carriage.repeat(2)}`;
}
const getBoundary = () => randomBytes(8).toString("hex");
async function* formDataIterator(form, boundary) {
  for (const [name, value] of form) {
    yield getHeader(boundary, name, value);
    if (isBlob(value)) {
      yield* value.stream();
    } else {
      yield value;
    }
    yield carriage;
  }
  yield getFooter(boundary);
}
function getFormDataLength(form, boundary) {
  let length = 0;
  for (const [name, value] of form) {
    length += Buffer.byteLength(getHeader(boundary, name, value));
    if (isBlob(value)) {
      length += value.size;
    } else {
      length += Buffer.byteLength(String(value));
    }
    length += carriageLength;
  }
  length += Buffer.byteLength(getFooter(boundary));
  return length;
}
const INTERNALS$2 = Symbol("Body internals");
class Body {
  constructor(body, {
    size = 0
  } = {}) {
    let boundary = null;
    if (body === null) {
      body = null;
    } else if (isURLSearchParameters(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (types.isAnyArrayBuffer(body)) {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof Stream)
      ;
    else if (isFormData(body)) {
      boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
      body = Stream.Readable.from(formDataIterator(body, boundary));
    } else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS$2] = {
      body,
      boundary,
      disturbed: false,
      error: null
    };
    this.size = size;
    if (body instanceof Stream) {
      body.on("error", (err) => {
        const error2 = err instanceof FetchBaseError ? err : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${err.message}`, "system", err);
        this[INTERNALS$2].error = error2;
      });
    }
  }
  get body() {
    return this[INTERNALS$2].body;
  }
  get bodyUsed() {
    return this[INTERNALS$2].disturbed;
  }
  async arrayBuffer() {
    const {buffer, byteOffset, byteLength} = await consumeBody(this);
    return buffer.slice(byteOffset, byteOffset + byteLength);
  }
  async blob() {
    const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
    const buf = await this.buffer();
    return new fetchBlob([buf], {
      type: ct
    });
  }
  async json() {
    const buffer = await consumeBody(this);
    return JSON.parse(buffer.toString());
  }
  async text() {
    const buffer = await consumeBody(this);
    return buffer.toString();
  }
  buffer() {
    return consumeBody(this);
  }
}
Object.defineProperties(Body.prototype, {
  body: {enumerable: true},
  bodyUsed: {enumerable: true},
  arrayBuffer: {enumerable: true},
  blob: {enumerable: true},
  json: {enumerable: true},
  text: {enumerable: true}
});
async function consumeBody(data) {
  if (data[INTERNALS$2].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS$2].disturbed = true;
  if (data[INTERNALS$2].error) {
    throw data[INTERNALS$2].error;
  }
  let {body} = data;
  if (body === null) {
    return Buffer.alloc(0);
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (!(body instanceof Stream)) {
    return Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const err = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(err);
        throw err;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error2) {
    if (error2 instanceof FetchBaseError) {
      throw error2;
    } else {
      throw new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error2.message}`, "system", error2);
    }
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return Buffer.from(accum.join(""));
      }
      return Buffer.concat(accum, accumBytes);
    } catch (error2) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error2.message}`, "system", error2);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
const clone = (instance, highWaterMark) => {
  let p1;
  let p2;
  let {body} = instance;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof Stream && typeof body.getBoundary !== "function") {
    p1 = new PassThrough({highWaterMark});
    p2 = new PassThrough({highWaterMark});
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS$2].body = p1;
    body = p2;
  }
  return body;
};
const extractContentType = (body, request) => {
  if (body === null) {
    return null;
  }
  if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  }
  if (isURLSearchParameters(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  }
  if (isBlob(body)) {
    return body.type || null;
  }
  if (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    return null;
  }
  if (body && typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  }
  if (isFormData(body)) {
    return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
  }
  if (body instanceof Stream) {
    return null;
  }
  return "text/plain;charset=UTF-8";
};
const getTotalBytes = (request) => {
  const {body} = request;
  if (body === null) {
    return 0;
  }
  if (isBlob(body)) {
    return body.size;
  }
  if (Buffer.isBuffer(body)) {
    return body.length;
  }
  if (body && typeof body.getLengthSync === "function") {
    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
  }
  if (isFormData(body)) {
    return getFormDataLength(request[INTERNALS$2].boundary);
  }
  return null;
};
const writeToStream = (dest, {body}) => {
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
};
const validateHeaderName = typeof http.validateHeaderName === "function" ? http.validateHeaderName : (name) => {
  if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
    const err = new TypeError(`Header name must be a valid HTTP token [${name}]`);
    Object.defineProperty(err, "code", {value: "ERR_INVALID_HTTP_TOKEN"});
    throw err;
  }
};
const validateHeaderValue = typeof http.validateHeaderValue === "function" ? http.validateHeaderValue : (name, value) => {
  if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
    const err = new TypeError(`Invalid character in header content ["${name}"]`);
    Object.defineProperty(err, "code", {value: "ERR_INVALID_CHAR"});
    throw err;
  }
};
class Headers extends URLSearchParams {
  constructor(init2) {
    let result = [];
    if (init2 instanceof Headers) {
      const raw = init2.raw();
      for (const [name, values] of Object.entries(raw)) {
        result.push(...values.map((value) => [name, value]));
      }
    } else if (init2 == null)
      ;
    else if (typeof init2 === "object" && !types.isBoxedPrimitive(init2)) {
      const method = init2[Symbol.iterator];
      if (method == null) {
        result.push(...Object.entries(init2));
      } else {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        result = [...init2].map((pair) => {
          if (typeof pair !== "object" || types.isBoxedPrimitive(pair)) {
            throw new TypeError("Each header pair must be an iterable object");
          }
          return [...pair];
        }).map((pair) => {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          return [...pair];
        });
      }
    } else {
      throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
    }
    result = result.length > 0 ? result.map(([name, value]) => {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return [String(name).toLowerCase(), String(value)];
    }) : void 0;
    super(result);
    return new Proxy(this, {
      get(target, p, receiver) {
        switch (p) {
          case "append":
          case "set":
            return (name, value) => {
              validateHeaderName(name);
              validateHeaderValue(name, String(value));
              return URLSearchParams.prototype[p].call(receiver, String(name).toLowerCase(), String(value));
            };
          case "delete":
          case "has":
          case "getAll":
            return (name) => {
              validateHeaderName(name);
              return URLSearchParams.prototype[p].call(receiver, String(name).toLowerCase());
            };
          case "keys":
            return () => {
              target.sort();
              return new Set(URLSearchParams.prototype.keys.call(target)).keys();
            };
          default:
            return Reflect.get(target, p, receiver);
        }
      }
    });
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  toString() {
    return Object.prototype.toString.call(this);
  }
  get(name) {
    const values = this.getAll(name);
    if (values.length === 0) {
      return null;
    }
    let value = values.join(", ");
    if (/^content-encoding$/i.test(name)) {
      value = value.toLowerCase();
    }
    return value;
  }
  forEach(callback) {
    for (const name of this.keys()) {
      callback(this.get(name), name);
    }
  }
  *values() {
    for (const name of this.keys()) {
      yield this.get(name);
    }
  }
  *entries() {
    for (const name of this.keys()) {
      yield [name, this.get(name)];
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  raw() {
    return [...this.keys()].reduce((result, key) => {
      result[key] = this.getAll(key);
      return result;
    }, {});
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return [...this.keys()].reduce((result, key) => {
      const values = this.getAll(key);
      if (key === "host") {
        result[key] = values[0];
      } else {
        result[key] = values.length > 1 ? values : values[0];
      }
      return result;
    }, {});
  }
}
Object.defineProperties(Headers.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
  result[property] = {enumerable: true};
  return result;
}, {}));
function fromRawHeaders(headers = []) {
  return new Headers(headers.reduce((result, value, index2, array) => {
    if (index2 % 2 === 0) {
      result.push(array.slice(index2, index2 + 2));
    }
    return result;
  }, []).filter(([name, value]) => {
    try {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return true;
    } catch (e) {
      return false;
    }
  }));
}
const redirectStatus = new Set([301, 302, 303, 307, 308]);
const isRedirect = (code) => {
  return redirectStatus.has(code);
};
const INTERNALS$1 = Symbol("Response internals");
class Response extends Body {
  constructor(body = null, options = {}) {
    super(body, options);
    const status = options.status || 200;
    const headers = new Headers(options.headers);
    if (body !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      url: options.url,
      status,
      statusText: options.statusText || "",
      headers,
      counter: options.counter,
      highWaterMark: options.highWaterMark
    };
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  get highWaterMark() {
    return this[INTERNALS$1].highWaterMark;
  }
  clone() {
    return new Response(clone(this, this.highWaterMark), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected,
      size: this.size
    });
  }
  static redirect(url, status = 302) {
    if (!isRedirect(status)) {
      throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    }
    return new Response(null, {
      headers: {
        location: new URL(url).toString()
      },
      status
    });
  }
  get [Symbol.toStringTag]() {
    return "Response";
  }
}
Object.defineProperties(Response.prototype, {
  url: {enumerable: true},
  status: {enumerable: true},
  ok: {enumerable: true},
  redirected: {enumerable: true},
  statusText: {enumerable: true},
  headers: {enumerable: true},
  clone: {enumerable: true}
});
const getSearch = (parsedURL) => {
  if (parsedURL.search) {
    return parsedURL.search;
  }
  const lastOffset = parsedURL.href.length - 1;
  const hash = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
  return parsedURL.href[lastOffset - hash.length] === "?" ? "?" : "";
};
const INTERNALS = Symbol("Request internals");
const isRequest = (object) => {
  return typeof object === "object" && typeof object[INTERNALS] === "object";
};
class Request extends Body {
  constructor(input, init2 = {}) {
    let parsedURL;
    if (isRequest(input)) {
      parsedURL = new URL(input.url);
    } else {
      parsedURL = new URL(input);
      input = {};
    }
    let method = init2.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init2.body != null || isRequest(input)) && input.body !== null && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    const inputBody = init2.body ? init2.body : isRequest(input) && input.body !== null ? clone(input) : null;
    super(inputBody, {
      size: init2.size || input.size || 0
    });
    const headers = new Headers(init2.headers || input.headers || {});
    if (inputBody !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody, this);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init2) {
      signal = init2.signal;
    }
    if (signal !== null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    }
    this[INTERNALS] = {
      method,
      redirect: init2.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init2.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init2.follow;
    this.compress = init2.compress === void 0 ? input.compress === void 0 ? true : input.compress : init2.compress;
    this.counter = init2.counter || input.counter || 0;
    this.agent = init2.agent || input.agent;
    this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
    this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
  }
  get method() {
    return this[INTERNALS].method;
  }
  get url() {
    return format(this[INTERNALS].parsedURL);
  }
  get headers() {
    return this[INTERNALS].headers;
  }
  get redirect() {
    return this[INTERNALS].redirect;
  }
  get signal() {
    return this[INTERNALS].signal;
  }
  clone() {
    return new Request(this);
  }
  get [Symbol.toStringTag]() {
    return "Request";
  }
}
Object.defineProperties(Request.prototype, {
  method: {enumerable: true},
  url: {enumerable: true},
  headers: {enumerable: true},
  redirect: {enumerable: true},
  clone: {enumerable: true},
  signal: {enumerable: true}
});
const getNodeRequestOptions = (request) => {
  const {parsedURL} = request[INTERNALS];
  const headers = new Headers(request[INTERNALS].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  let contentLengthValue = null;
  if (request.body === null && /^(post|put)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body !== null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate,br");
  }
  let {agent} = request;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  const search = getSearch(parsedURL);
  const requestOptions = {
    path: parsedURL.pathname + search,
    pathname: parsedURL.pathname,
    hostname: parsedURL.hostname,
    protocol: parsedURL.protocol,
    port: parsedURL.port,
    hash: parsedURL.hash,
    search: parsedURL.search,
    query: parsedURL.query,
    href: parsedURL.href,
    method: request.method,
    headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
    insecureHTTPParser: request.insecureHTTPParser,
    agent
  };
  return requestOptions;
};
class AbortError extends FetchBaseError {
  constructor(message, type = "aborted") {
    super(message, type);
  }
}
const supportedSchemas = new Set(["data:", "http:", "https:"]);
async function fetch(url, options_) {
  return new Promise((resolve2, reject) => {
    const request = new Request(url, options_);
    const options = getNodeRequestOptions(request);
    if (!supportedSchemas.has(options.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (options.protocol === "data:") {
      const data = src(request.url);
      const response2 = new Response(data, {headers: {"Content-Type": data.typeFull}});
      resolve2(response2);
      return;
    }
    const send = (options.protocol === "https:" ? https : http).request;
    const {signal} = request;
    let response = null;
    const abort = () => {
      const error2 = new AbortError("The operation was aborted.");
      reject(error2);
      if (request.body && request.body instanceof Stream.Readable) {
        request.body.destroy(error2);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(options);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (err) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      finalize();
    });
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        const locationURL = location === null ? null : new URL(location, request.url);
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (error2) {
                reject(error2);
              }
            }
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              size: request.size
            };
            if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            resolve2(fetch(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
        }
      }
      response_.once("end", () => {
        if (signal) {
          signal.removeEventListener("abort", abortAndFinalize);
        }
      });
      let body = pipeline(response_, new PassThrough(), (error2) => {
        reject(error2);
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      const zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = pipeline(body, zlib.createGunzip(zlibOptions), (error2) => {
          reject(error2);
        });
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = pipeline(response_, new PassThrough(), (error2) => {
          reject(error2);
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = pipeline(body, zlib.createInflate(), (error2) => {
              reject(error2);
            });
          } else {
            body = pipeline(body, zlib.createInflateRaw(), (error2) => {
              reject(error2);
            });
          }
          response = new Response(body, responseOptions);
          resolve2(response);
        });
        return;
      }
      if (codings === "br") {
        body = pipeline(body, zlib.createBrotliDecompress(), (error2) => {
          reject(error2);
        });
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve2(response);
    });
    writeToStream(request_, request);
  });
}
function normalize(loaded) {
  if (loaded.error) {
    const error2 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
    const status = loaded.status;
    if (!(error2 instanceof Error)) {
      return {
        status: 500,
        error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error2}"`)
      };
    }
    if (!status || status < 400 || status > 599) {
      console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
      return {status: 500, error: error2};
    }
    return {status, error: error2};
  }
  if (loaded.redirect) {
    if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
      };
    }
    if (typeof loaded.redirect !== "string") {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be a string')
      };
    }
  }
  return loaded;
}
const s = JSON.stringify;
async function load_node({
  request,
  options,
  route,
  page: page2,
  node,
  $session,
  context,
  is_leaf,
  is_error,
  status,
  error: error2
}) {
  const {module} = node;
  let uses_credentials = false;
  const fetched = [];
  let loaded;
  if (module.load) {
    const load_input = {
      page: page2,
      get session() {
        uses_credentials = true;
        return $session;
      },
      fetch: async (resource, opts = {}) => {
        let url;
        if (typeof resource === "string") {
          url = resource;
        } else {
          url = resource.url;
          opts = {
            method: resource.method,
            headers: resource.headers,
            body: resource.body,
            mode: resource.mode,
            credentials: resource.credentials,
            cache: resource.cache,
            redirect: resource.redirect,
            referrer: resource.referrer,
            integrity: resource.integrity,
            ...opts
          };
        }
        if (options.local && url.startsWith(options.paths.assets)) {
          url = url.replace(options.paths.assets, "");
        }
        const parsed = parse(url);
        let response;
        if (parsed.protocol) {
          response = await fetch(parsed.href, opts);
        } else {
          const resolved = resolve(request.path, parsed.pathname);
          const filename = resolved.slice(1);
          const filename_html = `${filename}/index.html`;
          const asset = options.manifest.assets.find((d2) => d2.file === filename || d2.file === filename_html);
          if (asset) {
            if (options.get_static_file) {
              response = new Response(options.get_static_file(asset.file), {
                headers: {
                  "content-type": asset.type
                }
              });
            } else {
              response = await fetch(`http://${page2.host}/${asset.file}`, opts);
            }
          }
          if (!response) {
            const headers = {...opts.headers};
            if (opts.credentials !== "omit") {
              uses_credentials = true;
              headers.cookie = request.headers.cookie;
              if (!headers.authorization) {
                headers.authorization = request.headers.authorization;
              }
            }
            const rendered = await ssr$1({
              host: request.host,
              method: opts.method || "GET",
              headers,
              path: resolved,
              body: opts.body,
              query: new URLSearchParams(parsed.query || "")
            }, {
              ...options,
              fetched: url,
              initiator: route
            });
            if (rendered) {
              if (options.dependencies) {
                options.dependencies.set(resolved, rendered);
              }
              response = new Response(rendered.body, {
                status: rendered.status,
                headers: rendered.headers
              });
            }
          }
        }
        if (response) {
          const proxy = new Proxy(response, {
            get(response2, key, receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                response2.headers.forEach((value, key2) => {
                  if (key2 !== "etag" && key2 !== "set-cookie")
                    headers[key2] = value;
                });
                fetched.push({
                  url,
                  json: `{"status":${response2.status},"statusText":${s(response2.statusText)},"headers":${s(headers)},"body":${escape$1(body)}}`
                });
                return body;
              }
              if (key === "text") {
                return text;
              }
              if (key === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key, receiver);
            }
          });
          return proxy;
        }
        return response || new Response("Not found", {
          status: 404
        });
      },
      context: {...context}
    };
    if (is_error) {
      load_input.status = status;
      load_input.error = error2;
    }
    loaded = await module.load.call(null, load_input);
  } else {
    loaded = {};
  }
  if (!loaded && is_leaf && !is_error)
    return;
  return {
    node,
    loaded: normalize(loaded),
    context: loaded.context || context,
    fetched,
    uses_credentials
  };
}
const escaped$2 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
function escape$1(str) {
  let result = '"';
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$2) {
      result += escaped$2[char];
    } else if (code >= 55296 && code <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += `\\u${code.toString(16).toUpperCase()}`;
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
async function respond_with_error({request, options, $session, status, error: error2}) {
  const default_layout = await options.load_component(options.manifest.layout);
  const default_error = await options.load_component(options.manifest.error);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params: {}
  };
  const loaded = await load_node({
    request,
    options,
    route: null,
    page: page2,
    node: default_layout,
    $session,
    context: {},
    is_leaf: false,
    is_error: false
  });
  const branch = [
    loaded,
    await load_node({
      request,
      options,
      route: null,
      page: page2,
      node: default_error,
      $session,
      context: loaded.context,
      is_leaf: false,
      is_error: true,
      status,
      error: error2
    })
  ];
  try {
    return await render_response({
      request,
      options,
      $session,
      page_config: {
        hydrate: options.hydrate,
        router: options.router,
        ssr: options.ssr
      },
      status,
      error: error2,
      branch,
      page: page2
    });
  } catch (error3) {
    return {
      status: 500,
      headers: {},
      body: options.dev ? error3.stack : error3.message
    };
  }
}
async function respond({request, options, $session, route}) {
  const match = route.pattern.exec(request.path);
  const params = route.params(match);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params
  };
  let nodes2;
  try {
    nodes2 = await Promise.all(route.a.map((id2) => id2 && options.load_component(id2)));
  } catch (error3) {
    return await respond_with_error({
      request,
      options,
      $session,
      status: 500,
      error: error3
    });
  }
  const leaf = nodes2[nodes2.length - 1].module;
  const page_config = {
    ssr: "ssr" in leaf ? leaf.ssr : options.ssr,
    router: "router" in leaf ? leaf.router : options.router,
    hydrate: "hydrate" in leaf ? leaf.hydrate : options.hydrate
  };
  if (options.only_render_prerenderable_pages && !leaf.prerender) {
    return {
      status: 204,
      headers: {},
      body: null
    };
  }
  let branch;
  let status = 200;
  let error2;
  ssr:
    if (page_config.ssr) {
      let context = {};
      branch = [];
      for (let i = 0; i < nodes2.length; i += 1) {
        const node = nodes2[i];
        let loaded;
        if (node) {
          try {
            loaded = await load_node({
              request,
              options,
              route,
              page: page2,
              node,
              $session,
              context,
              is_leaf: i === nodes2.length - 1,
              is_error: false
            });
            if (!loaded)
              return;
            if (loaded.loaded.redirect) {
              return {
                status: loaded.loaded.status,
                headers: {
                  location: loaded.loaded.redirect
                }
              };
            }
            if (loaded.loaded.error) {
              ({status, error: error2} = loaded.loaded);
            }
          } catch (e) {
            status = 500;
            error2 = e;
          }
          if (error2) {
            while (i--) {
              if (route.b[i]) {
                const error_node = await options.load_component(route.b[i]);
                let error_loaded;
                let node_loaded;
                let j = i;
                while (!(node_loaded = branch[j])) {
                  j -= 1;
                }
                try {
                  error_loaded = await load_node({
                    request,
                    options,
                    route,
                    page: page2,
                    node: error_node,
                    $session,
                    context: node_loaded.context,
                    is_leaf: false,
                    is_error: true,
                    status,
                    error: error2
                  });
                  if (error_loaded.loaded.error) {
                    continue;
                  }
                  branch = branch.slice(0, j + 1).concat(error_loaded);
                  break ssr;
                } catch (e) {
                  continue;
                }
              }
            }
            return await respond_with_error({
              request,
              options,
              $session,
              status,
              error: error2
            });
          }
        }
        branch.push(loaded);
        if (loaded && loaded.loaded.context) {
          context = {
            ...context,
            ...loaded.loaded.context
          };
        }
      }
    }
  try {
    return await render_response({
      request,
      options,
      $session,
      page_config,
      status,
      error: error2,
      branch: branch && branch.filter(Boolean),
      page: page2
    });
  } catch (error3) {
    return await respond_with_error({
      request,
      options,
      $session,
      status: 500,
      error: error3
    });
  }
}
async function render_page(request, route, options) {
  if (options.initiator === route) {
    return {
      status: 404,
      headers: {},
      body: `Not found: ${request.path}`
    };
  }
  const $session = await options.hooks.getSession({context: request.context});
  if (route) {
    const response = await respond({
      request,
      options,
      $session,
      route
    });
    if (response) {
      return response;
    }
    if (options.fetched) {
      return {
        status: 500,
        headers: {},
        body: `Bad request in load function: failed to fetch ${options.fetched}`
      };
    }
  } else {
    return await respond_with_error({
      request,
      options,
      $session,
      status: 404,
      error: new Error(`Not found: ${request.path}`)
    });
  }
}
async function render_route(request, route) {
  const mod = await route.load();
  const handler = mod[request.method.toLowerCase().replace("delete", "del")];
  if (handler) {
    const match = route.pattern.exec(request.path);
    const params = route.params(match);
    const response = await handler({...request, params});
    if (response) {
      if (typeof response !== "object" || response.body == null) {
        return {
          status: 500,
          body: `Invalid response from route ${request.path}; ${response.body == null ? "body is missing" : `expected an object, got ${typeof response}`}`,
          headers: {}
        };
      }
      let {status = 200, body, headers = {}} = response;
      headers = lowercase_keys(headers);
      if (typeof body === "object" && !("content-type" in headers) || headers["content-type"] === "application/json") {
        headers = {...headers, "content-type": "application/json"};
        body = JSON.stringify(body);
      }
      return {status, body, headers};
    }
  }
}
function lowercase_keys(obj) {
  const clone2 = {};
  for (const key in obj) {
    clone2[key.toLowerCase()] = obj[key];
  }
  return clone2;
}
function md5(body) {
  return createHash("md5").update(body).digest("hex");
}
async function ssr$1(incoming, options) {
  if (incoming.path.endsWith("/") && incoming.path !== "/") {
    const q = incoming.query.toString();
    return {
      status: 301,
      headers: {
        location: incoming.path.slice(0, -1) + (q ? `?${q}` : "")
      }
    };
  }
  const context = await options.hooks.getContext(incoming) || {};
  try {
    return await options.hooks.handle({
      request: {
        ...incoming,
        params: null,
        context
      },
      render: async (request) => {
        for (const route of options.manifest.routes) {
          if (!route.pattern.test(request.path))
            continue;
          const response = route.type === "endpoint" ? await render_route(request, route) : await render_page(request, route, options);
          if (response) {
            if (response.status === 200) {
              if (!/(no-store|immutable)/.test(response.headers["cache-control"])) {
                const etag = `"${md5(response.body)}"`;
                if (request.headers["if-none-match"] === etag) {
                  return {
                    status: 304,
                    headers: {},
                    body: null
                  };
                }
                response.headers["etag"] = etag;
              }
            }
            return response;
          }
        }
        return await render_page(request, null, options);
      }
    });
  } catch (e) {
    if (e && e.stack) {
      e.stack = await options.get_stack(e);
    }
    console.error(e && e.stack || e);
    return {
      status: 500,
      headers: {},
      body: options.dev ? e.stack : e.message
    };
  }
}
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function set_store_value(store, ret, value = ret) {
  store.set(value);
  return ret;
}
function custom_event(type, detail) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, false, false, detail);
  return e;
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext$1(key) {
  return get_current_component().$$.context.get(key);
}
const boolean_attributes = new Set([
  "allowfullscreen",
  "allowpaymentrequest",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "defer",
  "disabled",
  "formnovalidate",
  "hidden",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "selected"
]);
const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
function spread(args, classes_to_add) {
  const attributes = Object.assign({}, ...args);
  if (classes_to_add) {
    if (attributes.class == null) {
      attributes.class = classes_to_add;
    } else {
      attributes.class += " " + classes_to_add;
    }
  }
  let str = "";
  Object.keys(attributes).forEach((name) => {
    if (invalid_attribute_name_character.test(name))
      return;
    const value = attributes[name];
    if (value === true)
      str += " " + name;
    else if (boolean_attributes.has(name.toLowerCase())) {
      if (value)
        str += " " + name;
    } else if (value != null) {
      str += ` ${name}="${String(value).replace(/"/g, "&#34;").replace(/'/g, "&#39;")}"`;
    }
  });
  return str;
}
const escaped = {
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};
function escape(html2) {
  return String(html2).replace(/["'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
const missing_component = {
  $$render: () => ""
};
function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === "svelte:component")
      name += " this={...}";
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }
  return component;
}
let on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(parent_component ? parent_component.$$.context : context || []),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({$$});
    const html2 = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html2;
  }
  return {
    render: (props = {}, {$$slots = {}, context = new Map()} = {}) => {
      on_destroy = [];
      const result = {title: "", head: "", css: new Set()};
      const html2 = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html: html2,
        css: {
          code: Array.from(result.css).map((css2) => css2.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  return ` ${name}${value === true ? "" : `=${typeof value === "string" ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}
function add_classes(classes) {
  return classes ? ` class="${classes}"` : "";
}
var root_svelte = "#svelte-announcer.svelte-1y31lbn{position:absolute;left:0;top:0;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}";
const css$11 = {
  code: "#svelte-announcer.svelte-1y31lbn{position:absolute;left:0;top:0;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\texport let props_3 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title;\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n</script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}>\\n\\t\\t\\t\\t\\t{#if components[3]}\\n\\t\\t\\t\\t\\t\\t<svelte:component this={components[3]} {...(props_3 || {})}/>\\n\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t</svelte:component>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\tNavigated to {title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>#svelte-announcer{position:absolute;left:0;top:0;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}</style>"],"names":[],"mappings":"AA0DO,gCAAiB,CAAC,SAAS,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,SAAS,MAAM,CAAC,YAAY,MAAM,CAAC,MAAM,GAAG,CAAC,OAAO,GAAG,CAAC"}`
};
const Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {stores} = $$props;
  let {page: page2} = $$props;
  let {components} = $$props;
  let {props_0 = null} = $$props;
  let {props_1 = null} = $$props;
  let {props_2 = null} = $$props;
  let {props_3 = null} = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  let mounted = false;
  let navigated = false;
  let title = null;
  onMount(() => {
    const unsubscribe = stores.page.subscribe(() => {
      if (mounted) {
        navigated = true;
        title = document.title;
      }
    });
    mounted = true;
    return unsubscribe;
  });
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
    $$bindings.page(page2);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  if ($$props.props_3 === void 0 && $$bindings.props_3 && props_3 !== void 0)
    $$bindings.props_3(props_3);
  $$result.css.add(css$11);
  {
    stores.page.set(page2);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {
        default: () => `${components[3] ? `${validate_component(components[3] || missing_component, "svelte:component").$$render($$result, Object.assign(props_3 || {}), {}, {})}` : ``}`
      })}` : ``}`
    })}` : ``}`
  })}

${mounted ? `<div id="${"svelte-announcer"}" aria-live="${"assertive"}" aria-atomic="${"true"}" class="${"svelte-1y31lbn"}">${navigated ? `Navigated to ${escape(title)}` : ``}</div>` : ``}`;
});
const getContext = async () => {
  const posts = await Promise.all(Object.entries({"/src/routes/blog/a-day-with-gitpod.md": () => Promise.resolve().then(function() {
    return aDayWithGitpod;
  }), "/src/routes/blog/bitbucket.md": () => Promise.resolve().then(function() {
    return bitbucket;
  }), "/src/routes/blog/brew.md": () => Promise.resolve().then(function() {
    return brew;
  }), "/src/routes/blog/build-a-webhook-for-google-assistant.md": () => Promise.resolve().then(function() {
    return buildAWebhookForGoogleAssistant;
  }), "/src/routes/blog/continuous-dev-environment-in-devops.md": () => Promise.resolve().then(function() {
    return continuousDevEnvironmentInDevops;
  }), "/src/routes/blog/dev-env-as-code.md": () => Promise.resolve().then(function() {
    return devEnvAsCode;
  }), "/src/routes/blog/developing-nuxtjs-in-browser.md": () => Promise.resolve().then(function() {
    return developingNuxtjsInBrowser;
  }), "/src/routes/blog/devxconf-wrap.md": () => Promise.resolve().then(function() {
    return devxconfWrap;
  }), "/src/routes/blog/docker-in-gitpod.md": () => Promise.resolve().then(function() {
    return dockerInGitpod;
  }), "/src/routes/blog/frictionless-oss-contributions.md": () => Promise.resolve().then(function() {
    return frictionlessOssContributions;
  }), "/src/routes/blog/from-gatsby-to-svelte.md": () => Promise.resolve().then(function() {
    return fromGatsbyToSvelte;
  }), "/src/routes/blog/github-codespaces.md": () => Promise.resolve().then(function() {
    return githubCodespaces;
  }), "/src/routes/blog/github-flow.md": () => Promise.resolve().then(function() {
    return githubFlow;
  }), "/src/routes/blog/gitlab-integration.md": () => Promise.resolve().then(function() {
    return gitlabIntegration$1;
  }), "/src/routes/blog/gitlab-support.md": () => Promise.resolve().then(function() {
    return gitlabSupport;
  }), "/src/routes/blog/gitpod-launch.md": () => Promise.resolve().then(function() {
    return gitpodLaunch;
  }), "/src/routes/blog/gitpod-online-ide.md": () => Promise.resolve().then(function() {
    return gitpodOnlineIde;
  }), "/src/routes/blog/gitpod-open-source-sustainability-fund.md": () => Promise.resolve().then(function() {
    return gitpodOpenSourceSustainabilityFund;
  }), "/src/routes/blog/gitpod-self-hosted-0.4.0.md": () => Promise.resolve().then(function() {
    return gitpodSelfHosted0_4_0;
  }), "/src/routes/blog/gitpodify.md": () => Promise.resolve().then(function() {
    return gitpodify;
  }), "/src/routes/blog/journey-to-site-reliability-engineering-at-gitpod.md": () => Promise.resolve().then(function() {
    return journeyToSiteReliabilityEngineeringAtGitpod;
  }), "/src/routes/blog/local-app.md": () => Promise.resolve().then(function() {
    return localApp;
  }), "/src/routes/blog/local-services-in-gitpod.md": () => Promise.resolve().then(function() {
    return localServicesInGitpod;
  }), "/src/routes/blog/moving-software-development-to-the-cloud.md": () => Promise.resolve().then(function() {
    return movingSoftwareDevelopmentToTheCloud;
  }), "/src/routes/blog/native-ui-with-vnc.md": () => Promise.resolve().then(function() {
    return nativeUiWithVnc;
  }), "/src/routes/blog/next-chapter-for-gitpod.md": () => Promise.resolve().then(function() {
    return nextChapterForGitpod;
  }), "/src/routes/blog/node-js-development.md": () => Promise.resolve().then(function() {
    return nodeJsDevelopment;
  }), "/src/routes/blog/node-js-gitpod.md": () => Promise.resolve().then(function() {
    return nodeJsGitpod;
  }), "/src/routes/blog/october-2018-release.md": () => Promise.resolve().then(function() {
    return october2018Release;
  }), "/src/routes/blog/open-vsx-in-gitpod.md": () => Promise.resolve().then(function() {
    return openVsxInGitpod;
  }), "/src/routes/blog/open-vsx.md": () => Promise.resolve().then(function() {
    return openVsx;
  }), "/src/routes/blog/opensource.md": () => Promise.resolve().then(function() {
    return opensource;
  }), "/src/routes/blog/prebuilds.md": () => Promise.resolve().then(function() {
    return prebuilds$1;
  }), "/src/routes/blog/root-docker-and-vscode.md": () => Promise.resolve().then(function() {
    return rootDockerAndVscode;
  }), "/src/routes/blog/self-host-your-gitpod.md": () => Promise.resolve().then(function() {
    return selfHostYourGitpod;
  }), "/src/routes/blog/status-page.md": () => Promise.resolve().then(function() {
    return statusPage;
  }), "/src/routes/blog/update-december-2019.md": () => Promise.resolve().then(function() {
    return updateDecember2019;
  }), "/src/routes/blog/visual-studio-online-vs-gitpod.md": () => Promise.resolve().then(function() {
    return visualStudioOnlineVsGitpod;
  }), "/src/routes/blog/vscode-extension-in-online-ide.md": () => Promise.resolve().then(function() {
    return vscodeExtensionInOnlineIde;
  }), "/src/routes/blog/when-code-reviews-lgtm.md": () => Promise.resolve().then(function() {
    return whenCodeReviewsLgtm;
  }), "/src/routes/blog/workspace-snapshots.md": () => Promise.resolve().then(function() {
    return workspaceSnapshots;
  })}).map(async ([path, page2]) => {
    const {metadata: metadata2} = await page2();
    const filename = path.split("/").pop();
    return {...metadata2, filename};
  }));
  posts.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));
  const changelogEntries = await Promise.all(Object.entries({"/src/contents/changelog/2021-02.md": () => Promise.resolve().then(function() {
    return _202102;
  }), "/src/contents/changelog/2021-03.md": () => Promise.resolve().then(function() {
    return _202103;
  }), "/src/contents/changelog/2021-04.md": () => Promise.resolve().then(function() {
    return _202104;
  }), "/src/contents/changelog/2021-05.md": () => Promise.resolve().then(function() {
    return _202105;
  })}).map(async ([, mod]) => {
    const {default: content, metadata: metadata2} = await mod();
    return {
      ...metadata2,
      content: content.render().html
    };
  }));
  changelogEntries.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));
  return {
    changelogEntries,
    posts
  };
};
const getSession = async ({
  context
}) => {
  return {
    changelogEntries: context.changelogEntries,
    posts: context.posts
  };
};
const handle = async ({
  request,
  render: render2
}) => {
  const response = await render2(request);
  return {
    ...response,
    headers: {
      ...response.headers,
      "Set-Cookie": "gitpod-user=loggedIn; Domain=.gitpod.io; Path=/"
    }
  };
};
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  getContext,
  getSession,
  handle
});
const template = ({head, body}) => '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n    <meta name="theme-color" content="#333333" />\n    <meta name="google-site-verification" content="NBio3hCkfn2FKJpqZritJpXuyKo54noPGZzWsjDIp-M" />\n\n    <script>\n      if (window.location.pathname.length <= 1 && window.location.hash.indexOf("https://") > -1) {\n        window.location.replace("https://gitpod.io/" + window.location.hash);\n      }\n    </script>\n\n    <link rel="stylesheet" rel="preload" href="/font.css" as="style" />\n    <link rel="stylesheet" href="/global.css" />\n    <link rel="stylesheet" href="/styles.css" />\n    <link rel="manifest" href="/manifest.json" crossorigin="use-credentials" />\n    <link rel="icon" type="image/png" href="/favicon192.png" />\n\n    <!-- This contains the contents of the <svelte:head> component, if\n	     the current page has one -->\n    ' + head + '\n  </head>\n  <body>\n    <div id="svelte">' + body + "</div>\n  </body>\n</html>\n";
function init({paths, prerendering}) {
}
const d = decodeURIComponent;
const empty = () => ({});
const manifest = {
  assets: [{file: ".well-known/security.txt", size: 150, type: "text/plain"}, {file: "arrow-grey.svg", size: 326, type: "image/svg+xml"}, {file: "arrow-long.svg", size: 260, type: "image/svg+xml"}, {file: "arrow.svg", size: 324, type: "image/svg+xml"}, {file: "assets/style-guide.pdf", size: 883100, type: "application/pdf"}, {file: "cross.svg", size: 225, type: "image/svg+xml"}, {file: "favicon192.png", size: 26042, type: "image/png"}, {file: "favicon512.png", size: 100720, type: "image/png"}, {file: "font.css", size: 336, type: "text/css"}, {file: "fonts/ABCDiatype-Bold.woff", size: 85340, type: "font/woff"}, {file: "fonts/ABCDiatype-BoldItalic.woff", size: 87552, type: "font/woff"}, {file: "fonts/ABCDiatype-Regular.woff", size: 75508, type: "font/woff"}, {file: "fonts/ABCDiatype-RegularItalic.woff", size: 79812, type: "font/woff"}, {file: "global.css", size: 18398, type: "text/css"}, {file: "images/about/DevOpsDotCom.svg", size: 14599, type: "image/svg+xml"}, {file: "images/about/InfoQ.svg", size: 2196, type: "image/svg+xml"}, {file: "images/about/TheNewStack.svg", size: 2501, type: "image/svg+xml"}, {file: "images/about/TheRegister.svg", size: 8400, type: "image/svg+xml"}, {file: "images/about/about-5.png", size: 128256, type: "image/png"}, {file: "images/about/about-6.png", size: 187627, type: "image/png"}, {file: "images/about/team-1.jpg", size: 138649, type: "image/jpeg"}, {file: "images/about/team-2.jpg", size: 110191, type: "image/jpeg"}, {file: "images/about/team-3.jpg", size: 138925, type: "image/jpeg"}, {file: "images/about/team-4.jpg", size: 119778, type: "image/jpeg"}, {file: "images/avatars/alejandro-sanchez.jpeg", size: 24235, type: "image/jpeg"}, {file: "images/avatars/ben-halpern.jpg", size: 11093, type: "image/jpeg"}, {file: "images/avatars/brendan-o-leary.jpg", size: 32797, type: "image/jpeg"}, {file: "images/avatars/bwplotka.jpg", size: 28005, type: "image/jpeg"}, {file: "images/avatars/david-ressler.jpg", size: 33768, type: "image/jpeg"}, {file: "images/avatars/hugh-durkin.jpg", size: 18344, type: "image/jpeg"}, {file: "images/avatars/jonathan-lister-parsons.jpg", size: 11183, type: "image/jpeg"}, {file: "images/avatars/joonas-lehtinen.png", size: 117304, type: "image/png"}, {file: "images/avatars/julius-volz.jpg", size: 37369, type: "image/jpeg"}, {file: "images/avatars/k33g.jpg", size: 47334, type: "image/jpeg"}, {file: "images/avatars/marcel-van-remmerden.jpg", size: 17286, type: "image/jpeg"}, {file: "images/avatars/michael-friedrich.jpg", size: 22447, type: "image/jpeg"}, {file: "images/avatars/mrugesh-mohapatra.jpg", size: 26220, type: "image/jpeg"}, {file: "images/avatars/roman-kuba.jpg", size: 31449, type: "image/jpeg"}, {file: "images/avatars/sven-peters.jpg", size: 18077, type: "image/jpeg"}, {file: "images/avatars/yogi.jpg", size: 12293, type: "image/jpeg"}, {file: "images/blog/a-day-with-gitpod/teaser.jpg", size: 64637, type: "image/jpeg"}, {file: "images/blog/bitbucket/teaser.jpg", size: 159169, type: "image/jpeg"}, {file: "images/blog/brew/homebrew-in-gitpod.png", size: 38653, type: "image/png"}, {file: "images/blog/brew/teaser-brew.png", size: 41235, type: "image/png"}, {file: "images/blog/build-a-webhook-for-google-assistant/Build-and-test-your-webhook.png", size: 59528, type: "image/png"}, {file: "images/blog/continuous-dev-environment-in-devops/devops.jpg", size: 452998, type: "image/jpeg"}, {file: "images/blog/continuous-dev-environment-in-devops/gears.jpg", size: 416273, type: "image/jpeg"}, {file: "images/blog/continuous-dev-environment-in-devops/individual.jpg", size: 642898, type: "image/jpeg"}, {file: "images/blog/continuous-dev-environment-in-devops/prebuilds.png", size: 20082, type: "image/png"}, {file: "images/blog/continuous-dev-environment-in-devops/same-shoes.jpg", size: 232259, type: "image/jpeg"}, {file: "images/blog/continuous-dev-environment-in-devops/share.jpg", size: 532002, type: "image/jpeg"}, {file: "images/blog/continuous-dev-environment-in-devops/theia.png", size: 651955, type: "image/png"}, {file: "images/blog/dev-env-as-code/clement-h.jpeg", size: 233724, type: "image/jpeg"}, {file: "images/blog/dev-env-as-code/dev-env-gilbert.gif", size: 110213, type: "image/gif"}, {file: "images/blog/dev-env-as-code/dev-env-gilbert.png", size: 165605, type: "image/png"}, {file: "images/blog/dev-env-as-code/jeeshoots.jpeg", size: 417231, type: "image/jpeg"}, {file: "images/blog/developing-nuxtjs-in-browser/developing-nuxtjs-in-a-browser.jpeg", size: 3082058, type: "image/jpeg"}, {file: "images/blog/devxconf-wrap/pre-commit-sponsorship.png", size: 119615, type: "image/png"}, {file: "images/blog/devxconf-wrap/shellcheck-email.png", size: 64969, type: "image/png"}, {file: "images/blog/devxconf-wrap/shellcheck-sponsorship.png", size: 121597, type: "image/png"}, {file: "images/blog/devxconf-wrap/teaser.png", size: 61383, type: "image/png"}, {file: "images/blog/devxconf-wrap/tweet-codewithanthony.png", size: 98864, type: "image/png"}, {file: "images/blog/devxconf-wrap/tweet-djsheldrick.png", size: 104488, type: "image/png"}, {file: "images/blog/devxconf-wrap/tweet-mxstbr.png", size: 116216, type: "image/png"}, {file: "images/blog/devxconf-wrap/tweet-yonchovski.png", size: 78666, type: "image/png"}, {file: "images/blog/docker-in-gitpod/docker-in-gitpod.jpeg", size: 4609010, type: "image/jpeg"}, {file: "images/blog/docker-in-gitpod/tweet.png", size: 76216, type: "image/png"}, {file: "images/blog/frictionless-oss-contributions/frictionless-oss-contributions.png", size: 608543, type: "image/png"}, {file: "images/blog/from-gatsby-to-svelte/sveltekit-devx-vote.png", size: 32051, type: "image/png"}, {file: "images/blog/from-gatsby-to-svelte/teaser.png", size: 19116, type: "image/png"}, {file: "images/blog/github-codespaces/gh-cs-bg.jpg", size: 105191, type: "image/jpeg"}, {file: "images/blog/github-flow/a-better-github-flow.png", size: 327139, type: "image/png"}, {file: "images/blog/gitlab-integration/gitlab-integration-quote.png", size: 57477, type: "image/png"}, {file: "images/blog/gitlab-integration/gitlab-vscode-extension.png", size: 29517, type: "image/png"}, {file: "images/blog/gitlab-integration/gitpod-button-on-gitlab.png", size: 353453, type: "image/png"}, {file: "images/blog/gitlab-integration/teaser.jpg", size: 248604, type: "image/jpeg"}, {file: "images/blog/gitlab-support/gitlab-issue-context-status.png", size: 52518, type: "image/png"}, {file: "images/blog/gitlab-support/gitlab-issue-context.png", size: 813266, type: "image/png"}, {file: "images/blog/gitlab-support/teaser-gitlab-cover.png", size: 211498, type: "image/png"}, {file: "images/blog/gitlab-support/teaser-gitlab-gitpod.jpg", size: 77251, type: "image/jpeg"}, {file: "images/blog/gitpod-launch/browser-ext.png", size: 131689, type: "image/png"}, {file: "images/blog/gitpod-launch/collaboration.png", size: 100133, type: "image/png"}, {file: "images/blog/gitpod-launch/inline-comments.png", size: 118175, type: "image/png"}, {file: "images/blog/gitpod-launch/prebuilt-workspaces.png", size: 179145, type: "image/png"}, {file: "images/blog/gitpod-launch/teaser-launch-min.jpg", size: 1089865, type: "image/jpeg"}, {file: "images/blog/gitpod-launch/tinyrt.png", size: 653344, type: "image/png"}, {file: "images/blog/gitpod-online-ide/gitpod-online-ide.png", size: 728381, type: "image/png"}, {file: "images/blog/gitpod-open-source-sustainability-fund/decision-tree.png", size: 110917, type: "image/png"}, {file: "images/blog/gitpod-open-source-sustainability-fund/email.png", size: 119715, type: "image/png"}, {file: "images/blog/gitpod-open-source-sustainability-fund/maintainer-community.png", size: 96548, type: "image/png"}, {file: "images/blog/gitpod-open-source-sustainability-fund/teaser.jpg", size: 844921, type: "image/jpeg"}, {file: "images/blog/gitpod-open-source-sustainability-fund/thank-you-tweet.png", size: 86741, type: "image/png"}, {file: "images/blog/gitpod-open-source-sustainability-fund/xkcd.png", size: 53966, type: "image/png"}, {file: "images/blog/gitpod-self-hosted-0.4.0/cloud-download.png", size: 175527, type: "image/png"}, {file: "images/blog/gitpod-self-hosted-0.4.0/sh-userdetails2.png", size: 213967, type: "image/png"}, {file: "images/blog/gitpod-self-hosted-0.4.0/sh-userlist2.png", size: 256398, type: "image/png"}, {file: "images/blog/gitpodify/port-notification.png", size: 18162, type: "image/png"}, {file: "images/blog/gitpodify/teaser-gitpodify.jpg", size: 735586, type: "image/jpeg"}, {file: "images/blog/gitpodify/virtual-x-sever-running-on-a-remote-desktop-client.png", size: 462775, type: "image/png"}, {file: "images/blog/journey-to-site-reliability-engineering-at-gitpod/incident-report.png", size: 86572, type: "image/png"}, {file: "images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-latency.gif", size: 2032, type: "image/gif"}, {file: "images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-liveness.gif", size: 1496, type: "image/gif"}, {file: "images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-start.gif", size: 1476, type: "image/gif"}, {file: "images/blog/journey-to-site-reliability-engineering-at-gitpod/teaser.png", size: 22016, type: "image/png"}, {file: "images/blog/journey-to-site-reliability-engineering-at-gitpod/too-many-nodes.png", size: 119852, type: "image/png"}, {file: "images/blog/local-app/header-desktop.png", size: 329913, type: "image/png"}, {file: "images/blog/local-app/tunnel-on-all.png", size: 35671, type: "image/png"}, {file: "images/blog/local-app/tunnel-on-localhost.png", size: 38959, type: "image/png"}, {file: "images/blog/local-app/tunnel-on-random.png", size: 17592, type: "image/png"}, {file: "images/blog/local-services-in-gitpod/concept.png", size: 20313, type: "image/png"}, {file: "images/blog/local-services-in-gitpod/local-services.jpg", size: 721414, type: "image/jpeg"}, {file: "images/blog/moving-software-development-to-the-cloud/teaser.jpg", size: 136398, type: "image/jpeg"}, {file: "images/blog/native-ui-with-vnc/virtual-x-sever-running-on-a-remote-desktop-client.png", size: 462775, type: "image/png"}, {file: "images/blog/next-chapter-for-gitpod/brand.jpg", size: 5406, type: "image/jpeg"}, {file: "images/blog/next-chapter-for-gitpod/devxconf.jpg", size: 9161, type: "image/jpeg"}, {file: "images/blog/next-chapter-for-gitpod/funding.jpg", size: 5223, type: "image/jpeg"}, {file: "images/blog/next-chapter-for-gitpod/product.jpg", size: 8040, type: "image/jpeg"}, {file: "images/blog/next-chapter-for-gitpod/teaser.jpg", size: 99901, type: "image/jpeg"}, {file: "images/blog/node-js-development/create-a-new-project-on-gh-then-open-in-gp.gif", size: 864576, type: "image/gif"}, {file: "images/blog/node-js-development/gp-init-to-generate-the-gitpod-config.gif", size: 781130, type: "image/gif"}, {file: "images/blog/node-js-development/how-to-debug-a-nodejs-app-in-gitpod.gif", size: 890041, type: "image/gif"}, {file: "images/blog/node-js-development/how-to-make-a-pr-in-gitpod.gif", size: 1274362, type: "image/gif"}, {file: "images/blog/node-js-development/how-to-open-a-gitpod-workspace-from-a-pr.gif", size: 2428059, type: "image/gif"}, {file: "images/blog/node-js-development/node-js-development-with-only-a-browser.jpeg", size: 286502, type: "image/jpeg"}, {file: "images/blog/node-js-development/share-a-gitpod-workspace-snapshot.gif", size: 1097433, type: "image/gif"}, {file: "images/blog/node-js-development/share-a-running-workspace-in-gitpod.gif", size: 1268545, type: "image/gif"}, {file: "images/blog/node-js-gitpod/node-js-gitpod.png", size: 116276, type: "image/png"}, {file: "images/blog/october-2018-release/gitpod-bot-for-gh.png", size: 473795, type: "image/png"}, {file: "images/blog/october-2018-release/october-2018-release.jpeg", size: 970113, type: "image/jpeg"}, {file: "images/blog/open-vsx/open.jpg", size: 365959, type: "image/jpeg"}, {file: "images/blog/open-vsx/openvsx-screenshot.png", size: 204006, type: "image/png"}, {file: "images/blog/open-vsx-in-gitpod/teaser.jpg", size: 186635, type: "image/jpeg"}, {file: "images/blog/opensource/teaser.jpg", size: 196375, type: "image/jpeg"}, {file: "images/blog/prebuilds/colored-hands.jpg", size: 197260, type: "image/jpeg"}, {file: "images/blog/prebuilds/compiling-xkcd.png", size: 28315, type: "image/png"}, {file: "images/blog/root-docker-and-vscode/teaser-gitlab-gitpod.jpg", size: 77251, type: "image/jpeg"}, {file: "images/blog/root-docker-and-vscode/teaser.jpg", size: 197555, type: "image/jpeg"}, {file: "images/blog/self-host-your-gitpod/globe.png", size: 179115, type: "image/png"}, {file: "images/blog/status-page/teaser-status-page.png", size: 71916, type: "image/png"}, {file: "images/blog/update-december-2019/pin-gc.jpg", size: 214888, type: "image/jpeg"}, {file: "images/blog/update-december-2019/timeout-boost.png", size: 71322, type: "image/png"}, {file: "images/blog/update-december-2019/winter.jpeg", size: 187964, type: "image/jpeg"}, {file: "images/blog/visual-studio-online-vs-gitpod/gitpod-vs-code-online.png", size: 772734, type: "image/png"}, {file: "images/blog/vscode-extension-in-online-ide/tools.jpg", size: 836516, type: "image/jpeg"}, {file: "images/blog/when-code-reviews-lgtm/when-code-reviews-lgtm.jpeg", size: 1247516, type: "image/jpeg"}, {file: "images/blog/workspace-snapshots/workspace-snapshots.jpeg", size: 475878, type: "image/jpeg"}, {file: "images/changelog/2021-02-28.jpg", size: 127198, type: "image/jpeg"}, {file: "images/changelog/2021-03-31.png", size: 181976, type: "image/png"}, {file: "images/changelog/2021-04-30.png", size: 191690, type: "image/png"}, {file: "images/changelog/2021-05-31.jpg", size: 15271, type: "image/jpeg"}, {file: "images/codespace/spaces-1.svg", size: 11689, type: "image/svg+xml"}, {file: "images/codespace/spaces-2.svg", size: 12184, type: "image/svg+xml"}, {file: "images/codespace/spaces-3.svg", size: 20443, type: "image/svg+xml"}, {file: "images/contact/icon-cube.svg", size: 65482, type: "image/svg+xml"}, {file: "images/contact/icon-enter.svg", size: 359053, type: "image/svg+xml"}, {file: "images/docs/AReplExample.gif", size: 1009938, type: "image/gif"}, {file: "images/docs/AfterSyntaxHighlighting.png", size: 3814, type: "image/png"}, {file: "images/docs/AmmoniteRepl.png", size: 19905, type: "image/png"}, {file: "images/docs/CSharpDemo.png", size: 102485, type: "image/png"}, {file: "images/docs/DartIntellisenseExample.png", size: 25260, type: "image/png"}, {file: "images/docs/GoDebug.gif", size: 4700064, type: "image/gif"}, {file: "images/docs/HTML-Snippets-Example.gif", size: 390683, type: "image/gif"}, {file: "images/docs/HTML_CSS_Extension.png", size: 15613, type: "image/png"}, {file: "images/docs/Iondine_Example.png", size: 85765, type: "image/png"}, {file: "images/docs/JavaDebug.gif", size: 1653168, type: "image/gif"}, {file: "images/docs/PythonDebug.gif", size: 1853316, type: "image/gif"}, {file: "images/docs/RGitpod.png", size: 77016, type: "image/png"}, {file: "images/docs/RTools.png", size: 84338, type: "image/png"}, {file: "images/docs/RustDebug.gif", size: 8150061, type: "image/gif"}, {file: "images/docs/Vetur.png", size: 110656, type: "image/png"}, {file: "images/docs/bashIDE.png", size: 135612, type: "image/png"}, {file: "images/docs/beta/configure/environment-variables/environment-variables-account-settings.png", size: 188827, type: "image/png"}, {file: "images/docs/beta/configure/start-tasks/prebuilds-new-workspace.png", size: 1088476, type: "image/png"}, {file: "images/docs/beta/configure/start-tasks/restart-workspace.png", size: 564383, type: "image/png"}, {file: "images/docs/beta/configure/start-tasks/start-snapshot.png", size: 494759, type: "image/png"}, {file: "images/docs/beta/getting-started/java-with-spring-boot-workspace.png", size: 847208, type: "image/png"}, {file: "images/docs/beta/getting-started/quite-light-theme.png", size: 215054, type: "image/png"}, {file: "images/docs/beta/getting-started/select-color-theme.png", size: 13349, type: "image/png"}, {file: "images/docs/beta/getting-started/simple-browser.png", size: 305031, type: "image/png"}, {file: "images/docs/beta/getting-started/terminal-message.png", size: 108091, type: "image/png"}, {file: "images/docs/beta/integrations/authorize-gitpod.png", size: 178749, type: "image/png"}, {file: "images/docs/beta/integrations/edit-permissions.png", size: 117635, type: "image/png"}, {file: "images/docs/beta/integrations/git-integrations.png", size: 97460, type: "image/png"}, {file: "images/docs/beta/integrations/gitlab-integration-actions-menu.png", size: 114365, type: "image/png"}, {file: "images/docs/beta/integrations/gitlab-integration-connect-menu-item.png", size: 95069, type: "image/png"}, {file: "images/docs/beta/integrations/gitlab-integration-connected.png", size: 97456, type: "image/png"}, {file: "images/docs/beta/integrations/gitpod-button-project-page.png", size: 72352, type: "image/png"}, {file: "images/docs/beta/integrations/new-git-integration.png", size: 174760, type: "image/png"}, {file: "images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-badge.png", size: 97433, type: "image/png"}, {file: "images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-comment.png", size: 151371, type: "image/png"}, {file: "images/docs/browser-ext.png", size: 131689, type: "image/png"}, {file: "images/docs/browser-extension-lense.png", size: 44639, type: "image/png"}, {file: "images/docs/command_palette.jpg", size: 38775, type: "image/jpeg"}, {file: "images/docs/cppTools.png", size: 175356, type: "image/png"}, {file: "images/docs/cratesDemo.gif", size: 220734, type: "image/gif"}, {file: "images/docs/discourse.svg", size: 440, type: "image/svg+xml"}, {file: "images/docs/emmet.png", size: 180221, type: "image/png"}, {file: "images/docs/env-var-dashboard.png", size: 67451, type: "image/png"}, {file: "images/docs/eslint-extension.png", size: 23138, type: "image/png"}, {file: "images/docs/feature_syntax_highlight.png", size: 55692, type: "image/png"}, {file: "images/docs/feedback-widget/1.svg", size: 1055, type: "image/svg+xml"}, {file: "images/docs/feedback-widget/2.svg", size: 634, type: "image/svg+xml"}, {file: "images/docs/feedback-widget/3.svg", size: 698, type: "image/svg+xml"}, {file: "images/docs/feedback-widget/4.svg", size: 1026, type: "image/svg+xml"}, {file: "images/docs/find-command.png", size: 11361, type: "image/png"}, {file: "images/docs/fork-success.png", size: 3589, type: "image/png"}, {file: "images/docs/fork-to.png", size: 41325, type: "image/png"}, {file: "images/docs/fork.png", size: 7327, type: "image/png"}, {file: "images/docs/gitpod-architecture.png", size: 299834, type: "image/png"}, {file: "images/docs/gitpod-button.jpg", size: 112873, type: "image/jpeg"}, {file: "images/docs/gitpod-clusters-dark.png", size: 1073836, type: "image/png"}, {file: "images/docs/gitpod-clusters.jpg", size: 280113, type: "image/jpeg"}, {file: "images/docs/gitpod-logo.png", size: 15567, type: "image/png"}, {file: "images/docs/gitpod-logo.svg", size: 3186, type: "image/svg+xml"}, {file: "images/docs/gitpod-prefix.png", size: 365954, type: "image/png"}, {file: "images/docs/gitpod-settings-integrations-git-integrations.png", size: 92528, type: "image/png"}, {file: "images/docs/gitpod_prefix.jpg", size: 57260, type: "image/jpeg"}, {file: "images/docs/go_to_line_w_editor.jpg", size: 19135, type: "image/jpeg"}, {file: "images/docs/install-extension-for-user.png", size: 36284, type: "image/png"}, {file: "images/docs/light-theme.png", size: 31139, type: "image/png"}, {file: "images/docs/live_preview.png", size: 62773, type: "image/png"}, {file: "images/docs/logo.svg", size: 2620, type: "image/svg+xml"}, {file: "images/docs/metals-demo.png", size: 117136, type: "image/png"}, {file: "images/docs/open-file.png", size: 153709, type: "image/png"}, {file: "images/docs/phpDebug.gif", size: 1196829, type: "image/gif"}, {file: "images/docs/ports-notification.png", size: 33901, type: "image/png"}, {file: "images/docs/ports-onOpen.png", size: 60321, type: "image/png"}, {file: "images/docs/prebuild-done.svg", size: 808, type: "image/svg+xml"}, {file: "images/docs/prebuild-failed.svg", size: 808, type: "image/svg+xml"}, {file: "images/docs/prebuild-ongoing.svg", size: 808, type: "image/svg+xml"}, {file: "images/docs/prefix-lense.png", size: 373392, type: "image/png"}, {file: "images/docs/prefix-screenshot.png", size: 72244, type: "image/png"}, {file: "images/docs/preview.png", size: 383, type: "image/png"}, {file: "images/docs/python_Test_In_Gitpod.png", size: 50402, type: "image/png"}, {file: "images/docs/release-notes/2019-02-15/asciidoc-support.gif", size: 1615290, type: "image/gif"}, {file: "images/docs/release-notes/2019-02-15/debug-java.jpg", size: 155020, type: "image/jpeg"}, {file: "images/docs/release-notes/2019-02-15/github-navi.jpg", size: 112619, type: "image/jpeg"}, {file: "images/docs/release-notes/2019-02-15/icon.jpg", size: 6706, type: "image/jpeg"}, {file: "images/docs/release-notes/2019-02-15/snapshots.png", size: 115572, type: "image/png"}, {file: "images/docs/release-notes/2019-02-15/terminal-split.png", size: 56893, type: "image/png"}, {file: "images/docs/release-notes/2019-02-15/xml-support.png", size: 117459, type: "image/png"}, {file: "images/docs/release-notes/2019-02-15/yaml-support.png", size: 63712, type: "image/png"}, {file: "images/docs/release-notes/2019-04-05/dashboard-design.png", size: 177435, type: "image/png"}, {file: "images/docs/release-notes/2019-04-05/prebuilt-check.png", size: 17757, type: "image/png"}, {file: "images/docs/release-notes/2019-04-05/vscode-go.png", size: 67771, type: "image/png"}, {file: "images/docs/release-notes/2019-06-17/emmet-preview.png", size: 16409, type: "image/png"}, {file: "images/docs/release-notes/2019-06-17/emmet.png", size: 30406, type: "image/png"}, {file: "images/docs/release-notes/2019-06-17/git-amend.gif", size: 1274515, type: "image/gif"}, {file: "images/docs/release-notes/2019-06-17/maximize.gif", size: 945509, type: "image/gif"}, {file: "images/docs/release-notes/2019-06-17/scroll-sync.gif", size: 3229537, type: "image/gif"}, {file: "images/docs/release-notes/2019-06-17/terminal-link.png", size: 29204, type: "image/png"}, {file: "images/docs/release-notes/2019-06-17/upload.gif", size: 1077115, type: "image/gif"}, {file: "images/docs/ruby_test_ui.png", size: 281701, type: "image/png"}, {file: "images/docs/rustTest.png", size: 317157, type: "image/png"}, {file: "images/docs/scala-debug.gif", size: 1283629, type: "image/gif"}, {file: "images/docs/scala-syntax.png", size: 8375, type: "image/png"}, {file: "images/docs/searchCratesio.gif", size: 73548, type: "image/gif"}, {file: "images/docs/share-running-ws.gif", size: 161039, type: "image/gif"}, {file: "images/docs/share-snapshot-menu.png", size: 63722, type: "image/png"}, {file: "images/docs/share-snapshot.png", size: 43295, type: "image/png"}, {file: "images/docs/spectrum.svg", size: 370, type: "image/svg+xml"}, {file: "images/docs/svelte-template-in-gitpod.png", size: 134340, type: "image/png"}, {file: "images/docs/team-subscription-add-member.png", size: 61798, type: "image/png"}, {file: "images/docs/team-subscription.png", size: 48363, type: "image/png"}, {file: "images/docs/toolbar.png", size: 2233, type: "image/png"}, {file: "images/docs/user-extensions.png", size: 135904, type: "image/png"}, {file: "images/docs/vscode-extensions.png", size: 373337, type: "image/png"}, {file: "images/docs/workbench-shell.jpg", size: 213432, type: "image/jpeg"}, {file: "images/docs/workspace-entry.png", size: 33543, type: "image/png"}, {file: "images/extension-activation/collaborate.svg", size: 6375, type: "image/svg+xml"}, {file: "images/extension-activation/extension-screenshot.png", size: 80135, type: "image/png"}, {file: "images/extension-activation/fresh.svg", size: 5927, type: "image/svg+xml"}, {file: "images/extension-activation/prebuild.svg", size: 2409, type: "image/svg+xml"}, {file: "images/features/features-1.png", size: 441875, type: "image/png"}, {file: "images/features/features-2.png", size: 396980, type: "image/png"}, {file: "images/features/features-3.svg", size: 335429, type: "image/svg+xml"}, {file: "images/features/features-4.svg", size: 43776, type: "image/svg+xml"}, {file: "images/features/features-5.svg", size: 1472, type: "image/svg+xml"}, {file: "images/features/features-6.svg", size: 5472, type: "image/svg+xml"}, {file: "images/features/features-7.svg", size: 1645, type: "image/svg+xml"}, {file: "images/features/gitpod-extensions.jpg", size: 280053, type: "image/jpeg"}, {file: "images/founders/jan.png", size: 114959, type: "image/png"}, {file: "images/founders/johannes.png", size: 96938, type: "image/png"}, {file: "images/founders/moritz.png", size: 144107, type: "image/png"}, {file: "images/founders/sven.png", size: 171490, type: "image/png"}, {file: "images/gitpod-editor.jpg", size: 216562, type: "image/jpeg"}, {file: "images/gitpod-logo.svg", size: 845, type: "image/svg+xml"}, {file: "images/illustration-crop.jpg", size: 112695, type: "image/jpeg"}, {file: "images/illustration-grid.jpg", size: 172667, type: "image/jpeg"}, {file: "images/illustration-large.jpg", size: 330312, type: "image/jpeg"}, {file: "images/illustration-small.jpg", size: 123194, type: "image/jpeg"}, {file: "images/illustration-zoom.jpg", size: 108857, type: "image/jpeg"}, {file: "images/media-image.jpg", size: 45148, type: "image/jpeg"}, {file: "images/media-kit/founders.jpg", size: 115737, type: "image/jpeg"}, {file: "images/media-kit/logo-dark-theme.png", size: 6893, type: "image/png"}, {file: "images/media-kit/logo-light-theme.png", size: 7073, type: "image/png"}, {file: "images/media-kit/logo-mark.png", size: 5991, type: "image/png"}, {file: "images/media-kit/media-kit.png", size: 166271, type: "image/png"}, {file: "images/screencasts/gitpod-editor.jpg", size: 33406, type: "image/jpeg"}, {file: "images/screencasts/preview.jpg", size: 5327, type: "image/jpeg"}, {file: "images/twitter-preview.jpg", size: 65372, type: "image/jpeg"}, {file: "manifest.json", size: 374, type: "application/json"}, {file: "robots.txt", size: 22, type: "text/plain"}, {file: "styles.css", size: 24098, type: "text/css"}, {file: "svg/bitbucket.svg", size: 787, type: "image/svg+xml"}, {file: "svg/brands/4-geeks-academy.png", size: 6038, type: "image/png"}, {file: "svg/brands/amazon.svg", size: 7239, type: "image/svg+xml"}, {file: "svg/brands/aws.svg", size: 2838, type: "image/svg+xml"}, {file: "svg/brands/bitbucket-white.svg", size: 305, type: "image/svg+xml"}, {file: "svg/brands/code-institute.svg", size: 3848, type: "image/svg+xml"}, {file: "svg/brands/discourse.svg", size: 931, type: "image/svg+xml"}, {file: "svg/brands/dwave.svg", size: 15375, type: "image/svg+xml"}, {file: "svg/brands/facebook.svg", size: 2383, type: "image/svg+xml"}, {file: "svg/brands/freecodecamp.svg", size: 8774, type: "image/svg+xml"}, {file: "svg/brands/gcp.svg", size: 1231, type: "image/svg+xml"}, {file: "svg/brands/github.svg", size: 2086, type: "image/svg+xml"}, {file: "svg/brands/gitlab-logo.svg", size: 4696, type: "image/svg+xml"}, {file: "svg/brands/gitlab-white.svg", size: 757, type: "image/svg+xml"}, {file: "svg/brands/google.svg", size: 1829, type: "image/svg+xml"}, {file: "svg/brands/intel.svg", size: 2919, type: "image/svg+xml"}, {file: "svg/brands/kubernetes.svg", size: 3571, type: "image/svg+xml"}, {file: "svg/brands/mastercard.svg", size: 4902, type: "image/svg+xml"}, {file: "svg/brands/octocat-white.svg", size: 967, type: "image/svg+xml"}, {file: "svg/brands/openai.svg", size: 3087, type: "image/svg+xml"}, {file: "svg/brands/reddit.svg", size: 3549, type: "image/svg+xml"}, {file: "svg/brands/sauce-labs.svg", size: 4386, type: "image/svg+xml"}, {file: "svg/brands/theia.svg", size: 6839, type: "image/svg+xml"}, {file: "svg/brands/twitter.svg", size: 1901, type: "image/svg+xml"}, {file: "svg/brands/uber.svg", size: 2960, type: "image/svg+xml"}, {file: "svg/brands/visa.svg", size: 1439, type: "image/svg+xml"}, {file: "svg/browsers/chrome.svg", size: 5828, type: "image/svg+xml"}, {file: "svg/browsers/firefox.svg", size: 10494, type: "image/svg+xml"}, {file: "svg/external.svg", size: 216, type: "image/svg+xml"}, {file: "svg/github.svg", size: 794, type: "image/svg+xml"}, {file: "svg/gitlab.svg", size: 1699, type: "image/svg+xml"}, {file: "svg/headling-link.svg", size: 267, type: "image/svg+xml"}, {file: "svg/logo-textless.svg", size: 1079, type: "image/svg+xml"}, {file: "svg/mag-glass.svg", size: 1083, type: "image/svg+xml"}, {file: "svg/media-kit/gradient.svg", size: 3973, type: "image/svg+xml"}, {file: "svg/media-kit/logo-dark-theme.svg", size: 2748, type: "image/svg+xml"}, {file: "svg/media-kit/logo-light-theme.svg", size: 2748, type: "image/svg+xml"}, {file: "svg/media-kit/logo-mark.svg", size: 926, type: "image/svg+xml"}, {file: "svg/projects/docker.svg", size: 867, type: "image/svg+xml"}, {file: "svg/projects/dotnet-core.svg", size: 2540, type: "image/svg+xml"}, {file: "svg/projects/go.svg", size: 2410, type: "image/svg+xml"}, {file: "svg/projects/java.svg", size: 3379, type: "image/svg+xml"}, {file: "svg/projects/php.svg", size: 1227, type: "image/svg+xml"}, {file: "svg/projects/python.svg", size: 4875, type: "image/svg+xml"}, {file: "svg/projects/rust.svg", size: 2396, type: "image/svg+xml"}, {file: "svg/projects/svelte.svg", size: 1581, type: "image/svg+xml"}, {file: "svg/projects/ts.svg", size: 2024, type: "image/svg+xml"}, {file: "terminal.png", size: 49086, type: "image/png"}, {file: "tick.svg", size: 267, type: "image/svg+xml"}, {file: "x.svg", size: 195, type: "image/svg+xml"}],
  layout: "src/routes/$layout.svelte",
  error: "src/routes/$error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/index.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/github-student-developer-pack\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/github-student-developer-pack.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/gitpod-vs-github-codespaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/gitpod-vs-github-codespaces.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/github-teacher-toolbox\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/github-teacher-toolbox.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/extension-activation\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/extension-activation.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/extension-uninstall\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/extension-uninstall.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/enterprise-license\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/enterprise-license.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/screencasts\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/screencasts/index.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/screencasts\/([^/]+?)\/?$/,
      params: (m) => ({title: d(m[1])}),
      a: ["src/routes/$layout.svelte", "src/routes/screencasts/[title].svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/self-hosted.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/changelog\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/changelog/index.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/changelog\/rss\.xml$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return rss_xml;
      })
    },
    {
      type: "page",
      pattern: /^\/education\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/education.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/media-kit\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/media-kit.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/features\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/features.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/patterns\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/patterns.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/careers\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/careers.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/contact\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/contact.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/imprint\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/imprint.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/pricing\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/pricing.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/privacy\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/privacy.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/about\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/about.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/terms\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/terms.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/index.svelte"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/journey-to-site-reliability-engineering-at-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/journey-to-site-reliability-engineering-at-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/moving-software-development-to-the-cloud\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/moving-software-development-to-the-cloud.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitpod-open-source-sustainability-fund\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitpod-open-source-sustainability-fund.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/build-a-webhook-for-google-assistant\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/build-a-webhook-for-google-assistant.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/continuous-dev-environment-in-devops\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/continuous-dev-environment-in-devops.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/frictionless-oss-contributions\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/frictionless-oss-contributions.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/visual-studio-online-vs-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/visual-studio-online-vs-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/vscode-extension-in-online-ide\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/vscode-extension-in-online-ide.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/developing-nuxtjs-in-browser\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/developing-nuxtjs-in-browser.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitpod-self-hosted-0\.4\.0\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitpod-self-hosted-0.4.0.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/local-services-in-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/local-services-in-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/next-chapter-for-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/next-chapter-for-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/root-docker-and-vscode\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/root-docker-and-vscode.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/when-code-reviews-lgtm\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/when-code-reviews-lgtm.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/from-gatsby-to-svelte\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/from-gatsby-to-svelte.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/self-host-your-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/self-host-your-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/october-2018-release\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/october-2018-release.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/update-december-2019\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/update-december-2019.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/node-js-development\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/node-js-development.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/workspace-snapshots\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/workspace-snapshots.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitlab-integration\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitlab-integration.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/native-ui-with-vnc\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/native-ui-with-vnc.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/open-vsx-in-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/open-vsx-in-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/a-day-with-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/a-day-with-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/github-codespaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/github-codespaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitpod-online-ide\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitpod-online-ide.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/docker-in-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/docker-in-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/dev-env-as-code\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/dev-env-as-code.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitlab-support\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitlab-support.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/node-js-gitpod\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/node-js-gitpod.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/devxconf-wrap\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/devxconf-wrap.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitpod-launch\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitpod-launch.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/github-flow\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/github-flow.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/status-page\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/status-page.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/opensource\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/opensource.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/bitbucket\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/bitbucket.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/gitpodify\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/gitpodify.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/local-app\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/local-app.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/prebuilds\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/prebuilds.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/open-vsx\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/open-vsx.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blog\/brew\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blog/brew.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/index.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/sharing-and-collaboration\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/sharing-and-collaboration.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages-and-frameworks\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages-and-frameworks.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/professional-open-source\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/professional-open-source.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/command-line-interface\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/command-line-interface.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/bitbucket-integration\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/bitbucket-integration.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/environment-variables\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/environment-variables.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/config-gitpod-file\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/config-gitpod-file.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/config-start-tasks\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/config-start-tasks.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/github-integration\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/github-integration.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/gitlab-integration\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/gitlab-integration.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/browser-extension\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/browser-extension.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/checkout-location\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/checkout-location.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/life-of-workspace\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/life-of-workspace.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/vscode-extensions\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/vscode-extensions.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/getting-started\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/getting-started.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/config-docker\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/config-docker.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/release-notes\/2019-02-15\/february-2019\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/release-notes/2019-02-15/february-2019.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/release-notes\/2019-04-05\/april-2019\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/release-notes/2019-04-05/april-2019.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/release-notes\/2019-06-17\/june-2019\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/release-notes/2019-06-17/june-2019.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/subscriptions\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/subscriptions.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/config-ports\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/config-ports.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/context-urls\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/context-urls.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/integrations\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/integrations/index.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/self-hosted.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/install-on-aws-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/install-on-aws-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/install-on-gcp-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/install-on-gcp-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/install-on-kubernetes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/install-on-kubernetes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/configure-ingress\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/configure-ingress.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/docker-registry\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/docker-registry.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/troubleshooting\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/troubleshooting.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/install-on-gcp\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/install-on-gcp.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/database\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/database.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/storage\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/storage.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/upgrade\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/upgrade.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/install\/nodes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/install/nodes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/latest\/admin\/admin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/latest/admin/admin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/self-hosted.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/install-on-gcp-manual\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/install-on-gcp-manual.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/install-on-gcp-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/install-on-gcp-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/install-on-kubernetes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/install-on-kubernetes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/prepare-installation\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/prepare-installation.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/docker-registry\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/docker-registry.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/https-certs\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/https-certs.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/database\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/database.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/helm-2x\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/helm-2x.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/storage\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/storage.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/nodes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/nodes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/install\/oauth\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/install/oauth.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.3\.0\/admin\/admin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.3.0/admin/admin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/self-hosted.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/install-on-gcp-manual\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/install-on-gcp-manual.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/install-on-gcp-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/install-on-gcp-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/install-on-kubernetes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/install-on-kubernetes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/docker-registry\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/docker-registry.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/https-certs\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/https-certs.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/database\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/database.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/helm-2x\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/helm-2x.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/storage\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/storage.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/domain\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/domain.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/nodes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/nodes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/install\/oauth\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/install/oauth.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.4\.0\/admin\/admin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.4.0/admin/admin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/self-hosted.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/install-on-aws-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/install-on-aws-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/install-on-gcp-manual\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/install-on-gcp-manual.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/install-on-gcp-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/install-on-gcp-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/install-on-kubernetes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/install-on-kubernetes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/docker-registry\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/docker-registry.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/https-certs\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/https-certs.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/database\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/database.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/helm-2x\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/helm-2x.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/storage\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/storage.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/domain\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/domain.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/nodes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/nodes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/install\/oauth\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/install/oauth.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.5\.0\/admin\/admin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.5.0/admin/admin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/self-hosted.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/install-on-aws-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/install-on-aws-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/install-on-gcp-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/install-on-gcp-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/install-on-kubernetes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/install-on-kubernetes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/configure-ingress\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/configure-ingress.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/docker-registry\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/docker-registry.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/troubleshooting\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/troubleshooting.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/database\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/database.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/storage\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/storage.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/upgrade\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/upgrade.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/nodes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/nodes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/install\/oauth\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/install/oauth.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.7\.0\/admin\/admin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.7.0/admin/admin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/self-hosted\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/self-hosted.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/install-on-aws-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/install-on-aws-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/install-on-gcp-script\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/install-on-gcp-script.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/install-on-kubernetes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/install-on-kubernetes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/configure-ingress\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/configure-ingress.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/docker-registry\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/docker-registry.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/troubleshooting\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/troubleshooting.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/database\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/database.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/storage\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/storage.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/upgrade\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/upgrade.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/nodes\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/nodes.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/install\/oauth\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/install/oauth.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/self-hosted\/0\.8\.0\/admin\/admin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/self-hosted/0.8.0/admin/admin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/index.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/ruby-on-rails\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/ruby-on-rails.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/typescript\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/typescript.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/laravel\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/laravel.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/drupal\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/drupal.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/python\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/python.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/svelte\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/svelte.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/flask\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/flask.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/react\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/react.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/deno\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/deno.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/java\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/java.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/rust\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/rust.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/quickstart\/go\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/quickstart/go.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/index.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/gitpod-dockerfile\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/gitpod-dockerfile.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/troubleshooting\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/troubleshooting.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/architecture\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/architecture.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/gitpod-yml\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/gitpod-yml.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/changelog\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/changelog.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/references\/roadmap\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/references/roadmap.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/workspaces\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/workspaces.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/changelog\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/changelog.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/configure\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/configure/index.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/javascript\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/javascript.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/dotnet\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/dotnet.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/kotlin\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/kotlin.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/python\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/python.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/svelte\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/svelte.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/julia\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/julia.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/latex\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/latex.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/scala\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/scala.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/bash\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/bash.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/dart\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/dart.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/deno\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/deno.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/html\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/html.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/java\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/java.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/ruby\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/ruby.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/rust\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/rust.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/cpp\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/cpp.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/php\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/php.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/vue\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/vue.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/go\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/go.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/languages\/r\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/languages/r.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/prebuilds\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/prebuilds.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/examples\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/examples.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/develop\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/develop/index.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/docs\/teams\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/docs/$layout.svelte", "src/routes/docs/teams.md"],
      b: ["src/routes/$error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/docs\/menu\/?$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return menu;
      })
    }
  ]
};
const get_hooks = (hooks2) => ({
  getContext: hooks2.getContext || (() => ({})),
  getSession: hooks2.getSession || (() => ({})),
  handle: hooks2.handle || (({request, render: render2}) => render2(request))
});
const hooks = get_hooks(user_hooks);
const module_lookup = {
  "src/routes/$layout.svelte": () => Promise.resolve().then(function() {
    return $layout$3;
  }),
  "src/routes/$error.svelte": () => Promise.resolve().then(function() {
    return $error$1;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index$9;
  }),
  "src/routes/github-student-developer-pack.svelte": () => Promise.resolve().then(function() {
    return githubStudentDeveloperPack;
  }),
  "src/routes/gitpod-vs-github-codespaces.svelte": () => Promise.resolve().then(function() {
    return gitpodVsGithubCodespaces;
  }),
  "src/routes/github-teacher-toolbox.svelte": () => Promise.resolve().then(function() {
    return githubTeacherToolbox;
  }),
  "src/routes/extension-activation.svelte": () => Promise.resolve().then(function() {
    return extensionActivation;
  }),
  "src/routes/extension-uninstall.svelte": () => Promise.resolve().then(function() {
    return extensionUninstall;
  }),
  "src/routes/enterprise-license.svelte": () => Promise.resolve().then(function() {
    return enterpriseLicense;
  }),
  "src/routes/screencasts/index.svelte": () => Promise.resolve().then(function() {
    return index$8;
  }),
  "src/routes/screencasts/[title].svelte": () => Promise.resolve().then(function() {
    return _title_;
  }),
  "src/routes/self-hosted.svelte": () => Promise.resolve().then(function() {
    return selfHosted$6;
  }),
  "src/routes/changelog/index.svelte": () => Promise.resolve().then(function() {
    return index$7;
  }),
  "src/routes/education.svelte": () => Promise.resolve().then(function() {
    return education;
  }),
  "src/routes/media-kit.svelte": () => Promise.resolve().then(function() {
    return mediaKit;
  }),
  "src/routes/features.svelte": () => Promise.resolve().then(function() {
    return features;
  }),
  "src/routes/patterns.svelte": () => Promise.resolve().then(function() {
    return patterns;
  }),
  "src/routes/careers.svelte": () => Promise.resolve().then(function() {
    return careers;
  }),
  "src/routes/contact.svelte": () => Promise.resolve().then(function() {
    return contact;
  }),
  "src/routes/imprint.svelte": () => Promise.resolve().then(function() {
    return imprint;
  }),
  "src/routes/pricing.svelte": () => Promise.resolve().then(function() {
    return pricing;
  }),
  "src/routes/privacy.svelte": () => Promise.resolve().then(function() {
    return privacy;
  }),
  "src/routes/about.svelte": () => Promise.resolve().then(function() {
    return about;
  }),
  "src/routes/terms.svelte": () => Promise.resolve().then(function() {
    return terms;
  }),
  "src/routes/blog/index.svelte": () => Promise.resolve().then(function() {
    return index$6;
  }),
  "src/routes/blog/journey-to-site-reliability-engineering-at-gitpod.md": () => Promise.resolve().then(function() {
    return journeyToSiteReliabilityEngineeringAtGitpod;
  }),
  "src/routes/blog/moving-software-development-to-the-cloud.md": () => Promise.resolve().then(function() {
    return movingSoftwareDevelopmentToTheCloud;
  }),
  "src/routes/blog/gitpod-open-source-sustainability-fund.md": () => Promise.resolve().then(function() {
    return gitpodOpenSourceSustainabilityFund;
  }),
  "src/routes/blog/build-a-webhook-for-google-assistant.md": () => Promise.resolve().then(function() {
    return buildAWebhookForGoogleAssistant;
  }),
  "src/routes/blog/continuous-dev-environment-in-devops.md": () => Promise.resolve().then(function() {
    return continuousDevEnvironmentInDevops;
  }),
  "src/routes/blog/frictionless-oss-contributions.md": () => Promise.resolve().then(function() {
    return frictionlessOssContributions;
  }),
  "src/routes/blog/visual-studio-online-vs-gitpod.md": () => Promise.resolve().then(function() {
    return visualStudioOnlineVsGitpod;
  }),
  "src/routes/blog/vscode-extension-in-online-ide.md": () => Promise.resolve().then(function() {
    return vscodeExtensionInOnlineIde;
  }),
  "src/routes/blog/developing-nuxtjs-in-browser.md": () => Promise.resolve().then(function() {
    return developingNuxtjsInBrowser;
  }),
  "src/routes/blog/gitpod-self-hosted-0.4.0.md": () => Promise.resolve().then(function() {
    return gitpodSelfHosted0_4_0;
  }),
  "src/routes/blog/local-services-in-gitpod.md": () => Promise.resolve().then(function() {
    return localServicesInGitpod;
  }),
  "src/routes/blog/next-chapter-for-gitpod.md": () => Promise.resolve().then(function() {
    return nextChapterForGitpod;
  }),
  "src/routes/blog/root-docker-and-vscode.md": () => Promise.resolve().then(function() {
    return rootDockerAndVscode;
  }),
  "src/routes/blog/when-code-reviews-lgtm.md": () => Promise.resolve().then(function() {
    return whenCodeReviewsLgtm;
  }),
  "src/routes/blog/from-gatsby-to-svelte.md": () => Promise.resolve().then(function() {
    return fromGatsbyToSvelte;
  }),
  "src/routes/blog/self-host-your-gitpod.md": () => Promise.resolve().then(function() {
    return selfHostYourGitpod;
  }),
  "src/routes/blog/october-2018-release.md": () => Promise.resolve().then(function() {
    return october2018Release;
  }),
  "src/routes/blog/update-december-2019.md": () => Promise.resolve().then(function() {
    return updateDecember2019;
  }),
  "src/routes/blog/node-js-development.md": () => Promise.resolve().then(function() {
    return nodeJsDevelopment;
  }),
  "src/routes/blog/workspace-snapshots.md": () => Promise.resolve().then(function() {
    return workspaceSnapshots;
  }),
  "src/routes/blog/gitlab-integration.md": () => Promise.resolve().then(function() {
    return gitlabIntegration$1;
  }),
  "src/routes/blog/native-ui-with-vnc.md": () => Promise.resolve().then(function() {
    return nativeUiWithVnc;
  }),
  "src/routes/blog/open-vsx-in-gitpod.md": () => Promise.resolve().then(function() {
    return openVsxInGitpod;
  }),
  "src/routes/blog/a-day-with-gitpod.md": () => Promise.resolve().then(function() {
    return aDayWithGitpod;
  }),
  "src/routes/blog/github-codespaces.md": () => Promise.resolve().then(function() {
    return githubCodespaces;
  }),
  "src/routes/blog/gitpod-online-ide.md": () => Promise.resolve().then(function() {
    return gitpodOnlineIde;
  }),
  "src/routes/blog/docker-in-gitpod.md": () => Promise.resolve().then(function() {
    return dockerInGitpod;
  }),
  "src/routes/blog/dev-env-as-code.md": () => Promise.resolve().then(function() {
    return devEnvAsCode;
  }),
  "src/routes/blog/gitlab-support.md": () => Promise.resolve().then(function() {
    return gitlabSupport;
  }),
  "src/routes/blog/node-js-gitpod.md": () => Promise.resolve().then(function() {
    return nodeJsGitpod;
  }),
  "src/routes/blog/devxconf-wrap.md": () => Promise.resolve().then(function() {
    return devxconfWrap;
  }),
  "src/routes/blog/gitpod-launch.md": () => Promise.resolve().then(function() {
    return gitpodLaunch;
  }),
  "src/routes/blog/github-flow.md": () => Promise.resolve().then(function() {
    return githubFlow;
  }),
  "src/routes/blog/status-page.md": () => Promise.resolve().then(function() {
    return statusPage;
  }),
  "src/routes/blog/opensource.md": () => Promise.resolve().then(function() {
    return opensource;
  }),
  "src/routes/blog/bitbucket.md": () => Promise.resolve().then(function() {
    return bitbucket;
  }),
  "src/routes/blog/gitpodify.md": () => Promise.resolve().then(function() {
    return gitpodify;
  }),
  "src/routes/blog/local-app.md": () => Promise.resolve().then(function() {
    return localApp;
  }),
  "src/routes/blog/prebuilds.md": () => Promise.resolve().then(function() {
    return prebuilds$1;
  }),
  "src/routes/blog/open-vsx.md": () => Promise.resolve().then(function() {
    return openVsx;
  }),
  "src/routes/blog/brew.md": () => Promise.resolve().then(function() {
    return brew;
  }),
  "src/routes/docs/$layout.svelte": () => Promise.resolve().then(function() {
    return $layout$1;
  }),
  "src/routes/docs/index.md": () => Promise.resolve().then(function() {
    return index$5;
  }),
  "src/routes/docs/sharing-and-collaboration.md": () => Promise.resolve().then(function() {
    return sharingAndCollaboration;
  }),
  "src/routes/docs/languages-and-frameworks.md": () => Promise.resolve().then(function() {
    return languagesAndFrameworks;
  }),
  "src/routes/docs/professional-open-source.md": () => Promise.resolve().then(function() {
    return professionalOpenSource;
  }),
  "src/routes/docs/command-line-interface.md": () => Promise.resolve().then(function() {
    return commandLineInterface;
  }),
  "src/routes/docs/bitbucket-integration.md": () => Promise.resolve().then(function() {
    return bitbucketIntegration;
  }),
  "src/routes/docs/environment-variables.md": () => Promise.resolve().then(function() {
    return environmentVariables;
  }),
  "src/routes/docs/config-gitpod-file.md": () => Promise.resolve().then(function() {
    return configGitpodFile;
  }),
  "src/routes/docs/config-start-tasks.md": () => Promise.resolve().then(function() {
    return configStartTasks;
  }),
  "src/routes/docs/github-integration.md": () => Promise.resolve().then(function() {
    return githubIntegration;
  }),
  "src/routes/docs/gitlab-integration.md": () => Promise.resolve().then(function() {
    return gitlabIntegration;
  }),
  "src/routes/docs/browser-extension.md": () => Promise.resolve().then(function() {
    return browserExtension;
  }),
  "src/routes/docs/checkout-location.md": () => Promise.resolve().then(function() {
    return checkoutLocation;
  }),
  "src/routes/docs/life-of-workspace.md": () => Promise.resolve().then(function() {
    return lifeOfWorkspace;
  }),
  "src/routes/docs/vscode-extensions.md": () => Promise.resolve().then(function() {
    return vscodeExtensions;
  }),
  "src/routes/docs/getting-started.md": () => Promise.resolve().then(function() {
    return gettingStarted;
  }),
  "src/routes/docs/config-docker.md": () => Promise.resolve().then(function() {
    return configDocker;
  }),
  "src/routes/docs/release-notes/2019-02-15/february-2019.md": () => Promise.resolve().then(function() {
    return february2019;
  }),
  "src/routes/docs/release-notes/2019-04-05/april-2019.md": () => Promise.resolve().then(function() {
    return april2019;
  }),
  "src/routes/docs/release-notes/2019-06-17/june-2019.md": () => Promise.resolve().then(function() {
    return june2019;
  }),
  "src/routes/docs/subscriptions.md": () => Promise.resolve().then(function() {
    return subscriptions;
  }),
  "src/routes/docs/config-ports.md": () => Promise.resolve().then(function() {
    return configPorts;
  }),
  "src/routes/docs/context-urls.md": () => Promise.resolve().then(function() {
    return contextUrls;
  }),
  "src/routes/docs/integrations/index.md": () => Promise.resolve().then(function() {
    return index$4;
  }),
  "src/routes/docs/self-hosted/latest/self-hosted.md": () => Promise.resolve().then(function() {
    return selfHosted$5;
  }),
  "src/routes/docs/self-hosted/latest/install/install-on-aws-script.md": () => Promise.resolve().then(function() {
    return installOnAwsScript$3;
  }),
  "src/routes/docs/self-hosted/latest/install/install-on-gcp-script.md": () => Promise.resolve().then(function() {
    return installOnGcpScript$5;
  }),
  "src/routes/docs/self-hosted/latest/install/install-on-kubernetes.md": () => Promise.resolve().then(function() {
    return installOnKubernetes$5;
  }),
  "src/routes/docs/self-hosted/latest/install/configure-ingress.md": () => Promise.resolve().then(function() {
    return configureIngress$2;
  }),
  "src/routes/docs/self-hosted/latest/install/docker-registry.md": () => Promise.resolve().then(function() {
    return dockerRegistry$5;
  }),
  "src/routes/docs/self-hosted/latest/install/troubleshooting.md": () => Promise.resolve().then(function() {
    return troubleshooting$3;
  }),
  "src/routes/docs/self-hosted/latest/install/install-on-gcp.md": () => Promise.resolve().then(function() {
    return installOnGcp;
  }),
  "src/routes/docs/self-hosted/latest/install/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces$6;
  }),
  "src/routes/docs/self-hosted/latest/install/database.md": () => Promise.resolve().then(function() {
    return database$5;
  }),
  "src/routes/docs/self-hosted/latest/install/storage.md": () => Promise.resolve().then(function() {
    return storage$5;
  }),
  "src/routes/docs/self-hosted/latest/install/upgrade.md": () => Promise.resolve().then(function() {
    return upgrade$2;
  }),
  "src/routes/docs/self-hosted/latest/install/nodes.md": () => Promise.resolve().then(function() {
    return nodes$5;
  }),
  "src/routes/docs/self-hosted/latest/admin/admin.md": () => Promise.resolve().then(function() {
    return admin$5;
  }),
  "src/routes/docs/self-hosted/0.3.0/self-hosted.md": () => Promise.resolve().then(function() {
    return selfHosted$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/install-on-gcp-manual.md": () => Promise.resolve().then(function() {
    return installOnGcpManual$2;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/install-on-gcp-script.md": () => Promise.resolve().then(function() {
    return installOnGcpScript$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/install-on-kubernetes.md": () => Promise.resolve().then(function() {
    return installOnKubernetes$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/prepare-installation.md": () => Promise.resolve().then(function() {
    return prepareInstallation;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/docker-registry.md": () => Promise.resolve().then(function() {
    return dockerRegistry$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/https-certs.md": () => Promise.resolve().then(function() {
    return httpsCerts$2;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces$5;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/database.md": () => Promise.resolve().then(function() {
    return database$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/helm-2x.md": () => Promise.resolve().then(function() {
    return helm2x$2;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/storage.md": () => Promise.resolve().then(function() {
    return storage$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/nodes.md": () => Promise.resolve().then(function() {
    return nodes$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/install/oauth.md": () => Promise.resolve().then(function() {
    return oauth$4;
  }),
  "src/routes/docs/self-hosted/0.3.0/admin/admin.md": () => Promise.resolve().then(function() {
    return admin$4;
  }),
  "src/routes/docs/self-hosted/0.4.0/self-hosted.md": () => Promise.resolve().then(function() {
    return selfHosted$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/install-on-gcp-manual.md": () => Promise.resolve().then(function() {
    return installOnGcpManual$1;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/install-on-gcp-script.md": () => Promise.resolve().then(function() {
    return installOnGcpScript$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/install-on-kubernetes.md": () => Promise.resolve().then(function() {
    return installOnKubernetes$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/docker-registry.md": () => Promise.resolve().then(function() {
    return dockerRegistry$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/https-certs.md": () => Promise.resolve().then(function() {
    return httpsCerts$1;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces$4;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/database.md": () => Promise.resolve().then(function() {
    return database$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/helm-2x.md": () => Promise.resolve().then(function() {
    return helm2x$1;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/storage.md": () => Promise.resolve().then(function() {
    return storage$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/domain.md": () => Promise.resolve().then(function() {
    return domain$1;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/nodes.md": () => Promise.resolve().then(function() {
    return nodes$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/install/oauth.md": () => Promise.resolve().then(function() {
    return oauth$3;
  }),
  "src/routes/docs/self-hosted/0.4.0/admin/admin.md": () => Promise.resolve().then(function() {
    return admin$3;
  }),
  "src/routes/docs/self-hosted/0.5.0/self-hosted.md": () => Promise.resolve().then(function() {
    return selfHosted$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/install-on-aws-script.md": () => Promise.resolve().then(function() {
    return installOnAwsScript$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/install-on-gcp-manual.md": () => Promise.resolve().then(function() {
    return installOnGcpManual;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/install-on-gcp-script.md": () => Promise.resolve().then(function() {
    return installOnGcpScript$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/install-on-kubernetes.md": () => Promise.resolve().then(function() {
    return installOnKubernetes$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/docker-registry.md": () => Promise.resolve().then(function() {
    return dockerRegistry$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/https-certs.md": () => Promise.resolve().then(function() {
    return httpsCerts;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces$3;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/database.md": () => Promise.resolve().then(function() {
    return database$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/helm-2x.md": () => Promise.resolve().then(function() {
    return helm2x;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/storage.md": () => Promise.resolve().then(function() {
    return storage$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/domain.md": () => Promise.resolve().then(function() {
    return domain;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/nodes.md": () => Promise.resolve().then(function() {
    return nodes$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/install/oauth.md": () => Promise.resolve().then(function() {
    return oauth$2;
  }),
  "src/routes/docs/self-hosted/0.5.0/admin/admin.md": () => Promise.resolve().then(function() {
    return admin$2;
  }),
  "src/routes/docs/self-hosted/0.7.0/self-hosted.md": () => Promise.resolve().then(function() {
    return selfHosted$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/install-on-aws-script.md": () => Promise.resolve().then(function() {
    return installOnAwsScript$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/install-on-gcp-script.md": () => Promise.resolve().then(function() {
    return installOnGcpScript$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/install-on-kubernetes.md": () => Promise.resolve().then(function() {
    return installOnKubernetes$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/configure-ingress.md": () => Promise.resolve().then(function() {
    return configureIngress$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/docker-registry.md": () => Promise.resolve().then(function() {
    return dockerRegistry$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/troubleshooting.md": () => Promise.resolve().then(function() {
    return troubleshooting$2;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces$2;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/database.md": () => Promise.resolve().then(function() {
    return database$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/storage.md": () => Promise.resolve().then(function() {
    return storage$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/upgrade.md": () => Promise.resolve().then(function() {
    return upgrade$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/nodes.md": () => Promise.resolve().then(function() {
    return nodes$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/install/oauth.md": () => Promise.resolve().then(function() {
    return oauth$1;
  }),
  "src/routes/docs/self-hosted/0.7.0/admin/admin.md": () => Promise.resolve().then(function() {
    return admin$1;
  }),
  "src/routes/docs/self-hosted/0.8.0/self-hosted.md": () => Promise.resolve().then(function() {
    return selfHosted;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/install-on-aws-script.md": () => Promise.resolve().then(function() {
    return installOnAwsScript;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/install-on-gcp-script.md": () => Promise.resolve().then(function() {
    return installOnGcpScript;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/install-on-kubernetes.md": () => Promise.resolve().then(function() {
    return installOnKubernetes;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/configure-ingress.md": () => Promise.resolve().then(function() {
    return configureIngress;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/docker-registry.md": () => Promise.resolve().then(function() {
    return dockerRegistry;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/troubleshooting.md": () => Promise.resolve().then(function() {
    return troubleshooting$1;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces$1;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/database.md": () => Promise.resolve().then(function() {
    return database;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/storage.md": () => Promise.resolve().then(function() {
    return storage;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/upgrade.md": () => Promise.resolve().then(function() {
    return upgrade;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/nodes.md": () => Promise.resolve().then(function() {
    return nodes;
  }),
  "src/routes/docs/self-hosted/0.8.0/install/oauth.md": () => Promise.resolve().then(function() {
    return oauth;
  }),
  "src/routes/docs/self-hosted/0.8.0/admin/admin.md": () => Promise.resolve().then(function() {
    return admin;
  }),
  "src/routes/docs/quickstart/index.md": () => Promise.resolve().then(function() {
    return index$3;
  }),
  "src/routes/docs/quickstart/ruby-on-rails.md": () => Promise.resolve().then(function() {
    return rubyOnRails;
  }),
  "src/routes/docs/quickstart/typescript.md": () => Promise.resolve().then(function() {
    return typescript;
  }),
  "src/routes/docs/quickstart/laravel.md": () => Promise.resolve().then(function() {
    return laravel;
  }),
  "src/routes/docs/quickstart/drupal.md": () => Promise.resolve().then(function() {
    return drupal;
  }),
  "src/routes/docs/quickstart/python.md": () => Promise.resolve().then(function() {
    return python$1;
  }),
  "src/routes/docs/quickstart/svelte.md": () => Promise.resolve().then(function() {
    return svelte$1;
  }),
  "src/routes/docs/quickstart/flask.md": () => Promise.resolve().then(function() {
    return flask;
  }),
  "src/routes/docs/quickstart/react.md": () => Promise.resolve().then(function() {
    return react;
  }),
  "src/routes/docs/quickstart/deno.md": () => Promise.resolve().then(function() {
    return deno$1;
  }),
  "src/routes/docs/quickstart/java.md": () => Promise.resolve().then(function() {
    return java$1;
  }),
  "src/routes/docs/quickstart/rust.md": () => Promise.resolve().then(function() {
    return rust$1;
  }),
  "src/routes/docs/quickstart/go.md": () => Promise.resolve().then(function() {
    return go$1;
  }),
  "src/routes/docs/references/index.md": () => Promise.resolve().then(function() {
    return index$2;
  }),
  "src/routes/docs/references/gitpod-dockerfile.md": () => Promise.resolve().then(function() {
    return gitpodDockerfile;
  }),
  "src/routes/docs/references/troubleshooting.md": () => Promise.resolve().then(function() {
    return troubleshooting;
  }),
  "src/routes/docs/references/architecture.md": () => Promise.resolve().then(function() {
    return architecture;
  }),
  "src/routes/docs/references/gitpod-yml.md": () => Promise.resolve().then(function() {
    return gitpodYml;
  }),
  "src/routes/docs/references/changelog.md": () => Promise.resolve().then(function() {
    return changelog$1;
  }),
  "src/routes/docs/references/roadmap.md": () => Promise.resolve().then(function() {
    return roadmap;
  }),
  "src/routes/docs/workspaces.md": () => Promise.resolve().then(function() {
    return workspaces;
  }),
  "src/routes/docs/changelog.md": () => Promise.resolve().then(function() {
    return changelog;
  }),
  "src/routes/docs/configure/index.md": () => Promise.resolve().then(function() {
    return index$1;
  }),
  "src/routes/docs/languages/javascript.md": () => Promise.resolve().then(function() {
    return javascript;
  }),
  "src/routes/docs/languages/dotnet.md": () => Promise.resolve().then(function() {
    return dotnet;
  }),
  "src/routes/docs/languages/kotlin.md": () => Promise.resolve().then(function() {
    return kotlin;
  }),
  "src/routes/docs/languages/python.md": () => Promise.resolve().then(function() {
    return python;
  }),
  "src/routes/docs/languages/svelte.md": () => Promise.resolve().then(function() {
    return svelte;
  }),
  "src/routes/docs/languages/julia.md": () => Promise.resolve().then(function() {
    return julia;
  }),
  "src/routes/docs/languages/latex.md": () => Promise.resolve().then(function() {
    return latex;
  }),
  "src/routes/docs/languages/scala.md": () => Promise.resolve().then(function() {
    return scala;
  }),
  "src/routes/docs/languages/bash.md": () => Promise.resolve().then(function() {
    return bash;
  }),
  "src/routes/docs/languages/dart.md": () => Promise.resolve().then(function() {
    return dart;
  }),
  "src/routes/docs/languages/deno.md": () => Promise.resolve().then(function() {
    return deno;
  }),
  "src/routes/docs/languages/html.md": () => Promise.resolve().then(function() {
    return html;
  }),
  "src/routes/docs/languages/java.md": () => Promise.resolve().then(function() {
    return java;
  }),
  "src/routes/docs/languages/ruby.md": () => Promise.resolve().then(function() {
    return ruby;
  }),
  "src/routes/docs/languages/rust.md": () => Promise.resolve().then(function() {
    return rust;
  }),
  "src/routes/docs/languages/cpp.md": () => Promise.resolve().then(function() {
    return cpp;
  }),
  "src/routes/docs/languages/php.md": () => Promise.resolve().then(function() {
    return php;
  }),
  "src/routes/docs/languages/vue.md": () => Promise.resolve().then(function() {
    return vue;
  }),
  "src/routes/docs/languages/go.md": () => Promise.resolve().then(function() {
    return go;
  }),
  "src/routes/docs/languages/r.md": () => Promise.resolve().then(function() {
    return r;
  }),
  "src/routes/docs/prebuilds.md": () => Promise.resolve().then(function() {
    return prebuilds;
  }),
  "src/routes/docs/examples.md": () => Promise.resolve().then(function() {
    return examples;
  }),
  "src/routes/docs/develop/index.md": () => Promise.resolve().then(function() {
    return index;
  }),
  "src/routes/docs/teams.md": () => Promise.resolve().then(function() {
    return teams;
  })
};
const metadata_lookup = {"src/routes/$layout.svelte": {entry: "/./_app/pages/$layout.svelte-4d4501b5.js", css: ["/./_app/assets/pages/$layout.svelte-1ea0ac91.css"], js: ["/./_app/pages/$layout.svelte-4d4501b5.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/index-f37a303e.js", "/./_app/chunks/logo-eb799597.js", "/./_app/chunks/index-f7a2942f.js"], styles: null}, "src/routes/$error.svelte": {entry: "/./_app/pages/$error.svelte-007db480.js", css: ["/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/$error.svelte-007db480.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/section-449da20b.js"], styles: null}, "src/routes/index.svelte": {entry: "/./_app/pages/index.svelte-0dbad83f.js", css: ["/./_app/assets/pages/index.svelte-e871633d.css", "/./_app/assets/console-30e7d330.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/index.svelte-0dbad83f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/console-41c79eab.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/preload-helper-9f12a5fd.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/github-student-developer-pack.svelte": {entry: "/./_app/pages/github-student-developer-pack.svelte-9a483796.js", css: ["/./_app/assets/github-page-0e054f50.css", "/./_app/assets/pricing-boxes-c8b8fe61.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/github-student-developer-pack.svelte-9a483796.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/github-page-44c476d5.js", "/./_app/chunks/pricing-boxes-25046a5b.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/helper-78d34608.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/explore-12aa6e25.js"], styles: null}, "src/routes/gitpod-vs-github-codespaces.svelte": {entry: "/./_app/pages/gitpod-vs-github-codespaces.svelte-de6b0035.js", css: ["/./_app/assets/pages/gitpod-vs-github-codespaces.svelte-c4417b04.css"], js: ["/./_app/pages/gitpod-vs-github-codespaces.svelte-de6b0035.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/github-teacher-toolbox.svelte": {entry: "/./_app/pages/github-teacher-toolbox.svelte-fe7f8acc.js", css: ["/./_app/assets/github-page-0e054f50.css", "/./_app/assets/pricing-boxes-c8b8fe61.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/github-teacher-toolbox.svelte-fe7f8acc.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/github-page-44c476d5.js", "/./_app/chunks/pricing-boxes-25046a5b.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/helper-78d34608.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/explore-12aa6e25.js"], styles: null}, "src/routes/extension-activation.svelte": {entry: "/./_app/pages/extension-activation.svelte-1b813494.js", css: ["/./_app/assets/pages/extension-activation.svelte-26a0b237.css"], js: ["/./_app/pages/extension-activation.svelte-1b813494.js", "/./_app/chunks/index-11c21a1c.js"], styles: null}, "src/routes/extension-uninstall.svelte": {entry: "/./_app/pages/extension-uninstall.svelte-d0a88cc8.js", css: ["/./_app/assets/pages/extension-uninstall.svelte-8eea40aa.css"], js: ["/./_app/pages/extension-uninstall.svelte-d0a88cc8.js", "/./_app/chunks/index-11c21a1c.js"], styles: null}, "src/routes/enterprise-license.svelte": {entry: "/./_app/pages/enterprise-license.svelte-193654c4.js", css: ["/./_app/assets/pages/enterprise-license.svelte-f161afb1.css", "/./_app/assets/submission-success-f8d2916e.css"], js: ["/./_app/pages/enterprise-license.svelte-193654c4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/submission-success-5833df62.js", "/./_app/chunks/helper-78d34608.js"], styles: null}, "src/routes/screencasts/index.svelte": {entry: "/./_app/pages/screencasts/index.svelte-bc3f5110.js", css: ["/./_app/assets/pages/screencasts/index.svelte-d83dbf6d.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/screencasts/index.svelte-bc3f5110.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/screencasts-cdf9d1db.js", "/./_app/chunks/logo-eb799597.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/explore-12aa6e25.js"], styles: null}, "src/routes/screencasts/[title].svelte": {entry: "/./_app/pages/screencasts/[title].svelte-a64185eb.js", css: ["/./_app/assets/pages/screencasts/[title].svelte-630f6d91.css"], js: ["/./_app/pages/screencasts/[title].svelte-a64185eb.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/screencasts-cdf9d1db.js", "/./_app/chunks/logo-eb799597.js", "/./_app/chunks/helper-78d34608.js"], styles: null}, "src/routes/self-hosted.svelte": {entry: "/./_app/pages/self-hosted.svelte-2bb169a4.js", css: ["/./_app/assets/pages/self-hosted.svelte-ecad875e.css", "/./_app/assets/section-225cb734.css", "/./_app/assets/faq-b8dc5196.css", "/./_app/assets/pricing-boxes-c8b8fe61.css"], js: ["/./_app/pages/self-hosted.svelte-2bb169a4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/explore-12aa6e25.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/faq-db059194.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/helper-78d34608.js", "/./_app/chunks/pricing-boxes-25046a5b.js"], styles: null}, "src/routes/changelog/index.svelte": {entry: "/./_app/pages/changelog/index.svelte-2e23febf.js", css: ["/./_app/assets/pages/changelog/index.svelte-11090a22.css", "/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/changelog/index.svelte-2e23febf.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/education.svelte": {entry: "/./_app/pages/education.svelte-b6daef65.js", css: ["/./_app/assets/pages/education.svelte-0d0df29b.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/education.svelte-b6daef65.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/explore-12aa6e25.js", "/./_app/chunks/section-449da20b.js"], styles: null}, "src/routes/media-kit.svelte": {entry: "/./_app/pages/media-kit.svelte-005f2e13.js", css: ["/./_app/assets/pages/media-kit.svelte-994fbf61.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/media-kit.svelte-005f2e13.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/features.svelte": {entry: "/./_app/pages/features.svelte-0a7ef630.js", css: ["/./_app/assets/pages/features.svelte-7fbd758c.css", "/./_app/assets/console-30e7d330.css"], js: ["/./_app/pages/features.svelte-0a7ef630.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/console-41c79eab.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/screencasts-cdf9d1db.js", "/./_app/chunks/logo-eb799597.js", "/./_app/chunks/index-f7a2942f.js"], styles: null}, "src/routes/patterns.svelte": {entry: "/./_app/pages/patterns.svelte-6e4a8b91.js", css: ["/./_app/assets/pages/patterns.svelte-d67a4655.css"], js: ["/./_app/pages/patterns.svelte-6e4a8b91.js", "/./_app/chunks/index-11c21a1c.js"], styles: null}, "src/routes/careers.svelte": {entry: "/./_app/pages/careers.svelte-63aae0b2.js", css: ["/./_app/assets/pages/careers.svelte-5c7fd16f.css"], js: ["/./_app/pages/careers.svelte-63aae0b2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/helper-78d34608.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/careers-d676fc4d.js"], styles: null}, "src/routes/contact.svelte": {entry: "/./_app/pages/contact.svelte-4a4ff7ba.js", css: ["/./_app/assets/pages/contact.svelte-6b1b7a03.css", "/./_app/assets/submission-success-f8d2916e.css"], js: ["/./_app/pages/contact.svelte-4a4ff7ba.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/submission-success-5833df62.js"], styles: null}, "src/routes/imprint.svelte": {entry: "/./_app/pages/imprint.svelte-c5f9c5e9.js", css: [], js: ["/./_app/pages/imprint.svelte-c5f9c5e9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/pricing.svelte": {entry: "/./_app/pages/pricing.svelte-925f0c3e.js", css: ["/./_app/assets/pages/pricing.svelte-b6e16ae0.css", "/./_app/assets/section-225cb734.css", "/./_app/assets/faq-b8dc5196.css", "/./_app/assets/pricing-boxes-c8b8fe61.css"], js: ["/./_app/pages/pricing.svelte-925f0c3e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/explore-12aa6e25.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/helper-78d34608.js", "/./_app/chunks/faq-db059194.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/pricing-boxes-25046a5b.js"], styles: null}, "src/routes/privacy.svelte": {entry: "/./_app/pages/privacy.svelte-eebfc01e.js", css: [], js: ["/./_app/pages/privacy.svelte-eebfc01e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/about.svelte": {entry: "/./_app/pages/about.svelte-1b6297a0.js", css: ["/./_app/assets/pages/about.svelte-ecd650da.css", "/./_app/assets/section-225cb734.css"], js: ["/./_app/pages/about.svelte-1b6297a0.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/explore-12aa6e25.js", "/./_app/chunks/section-449da20b.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/careers-d676fc4d.js"], styles: null}, "src/routes/terms.svelte": {entry: "/./_app/pages/terms.svelte-a7be5ace.js", css: [], js: ["/./_app/pages/terms.svelte-a7be5ace.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/blog/index.svelte": {entry: "/./_app/pages/blog/index.svelte-a71b88a9.js", css: ["/./_app/assets/pages/blog/index.svelte-3c978bd4.css"], js: ["/./_app/pages/blog/index.svelte-a71b88a9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/post-preview-5d46542d.js"], styles: null}, "src/routes/blog/journey-to-site-reliability-engineering-at-gitpod.md": {entry: "/./_app/pages/blog/journey-to-site-reliability-engineering-at-gitpod.md-854c2f7b.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/journey-to-site-reliability-engineering-at-gitpod.md-854c2f7b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/moving-software-development-to-the-cloud.md": {entry: "/./_app/pages/blog/moving-software-development-to-the-cloud.md-458f4c4d.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/moving-software-development-to-the-cloud.md-458f4c4d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitpod-open-source-sustainability-fund.md": {entry: "/./_app/pages/blog/gitpod-open-source-sustainability-fund.md-7ffcc5f0.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitpod-open-source-sustainability-fund.md-7ffcc5f0.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/build-a-webhook-for-google-assistant.md": {entry: "/./_app/pages/blog/build-a-webhook-for-google-assistant.md-fbcb647a.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/build-a-webhook-for-google-assistant.md-fbcb647a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/continuous-dev-environment-in-devops.md": {entry: "/./_app/pages/blog/continuous-dev-environment-in-devops.md-ab9977ca.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/continuous-dev-environment-in-devops.md-ab9977ca.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/frictionless-oss-contributions.md": {entry: "/./_app/pages/blog/frictionless-oss-contributions.md-216a3585.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/frictionless-oss-contributions.md-216a3585.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/visual-studio-online-vs-gitpod.md": {entry: "/./_app/pages/blog/visual-studio-online-vs-gitpod.md-8b786d90.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/visual-studio-online-vs-gitpod.md-8b786d90.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/vscode-extension-in-online-ide.md": {entry: "/./_app/pages/blog/vscode-extension-in-online-ide.md-d97feadf.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/vscode-extension-in-online-ide.md-d97feadf.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/developing-nuxtjs-in-browser.md": {entry: "/./_app/pages/blog/developing-nuxtjs-in-browser.md-9cc26445.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/developing-nuxtjs-in-browser.md-9cc26445.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitpod-self-hosted-0.4.0.md": {entry: "/./_app/pages/blog/gitpod-self-hosted-0.4.0.md-fbfb1d4b.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitpod-self-hosted-0.4.0.md-fbfb1d4b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/local-services-in-gitpod.md": {entry: "/./_app/pages/blog/local-services-in-gitpod.md-d06380dc.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/local-services-in-gitpod.md-d06380dc.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/next-chapter-for-gitpod.md": {entry: "/./_app/pages/blog/next-chapter-for-gitpod.md-2be9dcb7.js", css: ["/./_app/assets/pages/blog/next-chapter-for-gitpod.md-1a3d545f.css", "/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/next-chapter-for-gitpod.md-2be9dcb7.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/root-docker-and-vscode.md": {entry: "/./_app/pages/blog/root-docker-and-vscode.md-8337ec0f.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/root-docker-and-vscode.md-8337ec0f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/when-code-reviews-lgtm.md": {entry: "/./_app/pages/blog/when-code-reviews-lgtm.md-d9b3dbf9.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/when-code-reviews-lgtm.md-d9b3dbf9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/from-gatsby-to-svelte.md": {entry: "/./_app/pages/blog/from-gatsby-to-svelte.md-553f0c5e.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/from-gatsby-to-svelte.md-553f0c5e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/self-host-your-gitpod.md": {entry: "/./_app/pages/blog/self-host-your-gitpod.md-51061765.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/self-host-your-gitpod.md-51061765.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/october-2018-release.md": {entry: "/./_app/pages/blog/october-2018-release.md-4fb2539b.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/october-2018-release.md-4fb2539b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/update-december-2019.md": {entry: "/./_app/pages/blog/update-december-2019.md-3e37fc57.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/update-december-2019.md-3e37fc57.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/node-js-development.md": {entry: "/./_app/pages/blog/node-js-development.md-2e667803.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/node-js-development.md-2e667803.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/workspace-snapshots.md": {entry: "/./_app/pages/blog/workspace-snapshots.md-9dc70308.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/workspace-snapshots.md-9dc70308.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitlab-integration.md": {entry: "/./_app/pages/blog/gitlab-integration.md-7ef22f20.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitlab-integration.md-7ef22f20.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/native-ui-with-vnc.md": {entry: "/./_app/pages/blog/native-ui-with-vnc.md-d2e85e13.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/native-ui-with-vnc.md-d2e85e13.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/open-vsx-in-gitpod.md": {entry: "/./_app/pages/blog/open-vsx-in-gitpod.md-e13a4721.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/open-vsx-in-gitpod.md-e13a4721.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/a-day-with-gitpod.md": {entry: "/./_app/pages/blog/a-day-with-gitpod.md-df1d523b.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/a-day-with-gitpod.md-df1d523b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/github-codespaces.md": {entry: "/./_app/pages/blog/github-codespaces.md-d8a54317.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/github-codespaces.md-d8a54317.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitpod-online-ide.md": {entry: "/./_app/pages/blog/gitpod-online-ide.md-1465b3a1.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitpod-online-ide.md-1465b3a1.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/docker-in-gitpod.md": {entry: "/./_app/pages/blog/docker-in-gitpod.md-3d15b938.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/docker-in-gitpod.md-3d15b938.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/dev-env-as-code.md": {entry: "/./_app/pages/blog/dev-env-as-code.md-42d67c94.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/dev-env-as-code.md-42d67c94.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitlab-support.md": {entry: "/./_app/pages/blog/gitlab-support.md-8c90ba07.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitlab-support.md-8c90ba07.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/node-js-gitpod.md": {entry: "/./_app/pages/blog/node-js-gitpod.md-fcffaf94.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/node-js-gitpod.md-fcffaf94.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/devxconf-wrap.md": {entry: "/./_app/pages/blog/devxconf-wrap.md-53bb2126.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/devxconf-wrap.md-53bb2126.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitpod-launch.md": {entry: "/./_app/pages/blog/gitpod-launch.md-3282bb60.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitpod-launch.md-3282bb60.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/github-flow.md": {entry: "/./_app/pages/blog/github-flow.md-fa1de7d2.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/github-flow.md-fa1de7d2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/status-page.md": {entry: "/./_app/pages/blog/status-page.md-b1a9df99.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/status-page.md-b1a9df99.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/opensource.md": {entry: "/./_app/pages/blog/opensource.md-96769837.js", css: ["/./_app/assets/pages/blog/opensource.md-22cbdd26.css", "/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/opensource.md-96769837.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/bitbucket.md": {entry: "/./_app/pages/blog/bitbucket.md-fce15662.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/bitbucket.md-fce15662.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/gitpodify.md": {entry: "/./_app/pages/blog/gitpodify.md-c8718f4f.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/gitpodify.md-c8718f4f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/local-app.md": {entry: "/./_app/pages/blog/local-app.md-f7c36806.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/local-app.md-f7c36806.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/prebuilds.md": {entry: "/./_app/pages/blog/prebuilds.md-1d120a28.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/prebuilds.md-1d120a28.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/open-vsx.md": {entry: "/./_app/pages/blog/open-vsx.md-e792a2f4.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/open-vsx.md-e792a2f4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/blog/brew.md": {entry: "/./_app/pages/blog/brew.md-89e3db3f.js", css: ["/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/blog/brew.md-89e3db3f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/blog-content-layout-d81fcd32.js", "/./_app/chunks/post-preview-5d46542d.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js"], styles: null}, "src/routes/docs/$layout.svelte": {entry: "/./_app/pages/docs/$layout.svelte-216867bc.js", css: ["/./_app/assets/pages/docs/$layout.svelte-82bcc25a.css", "/./_app/assets/markdown-commons-38e6f3a0.css"], js: ["/./_app/pages/docs/$layout.svelte-216867bc.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js", "/./_app/chunks/stores-db007e79.js"], styles: null}, "src/routes/docs/index.md": {entry: "/./_app/pages/docs/index.md-da297df4.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/index.md-da297df4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/sharing-and-collaboration.md": {entry: "/./_app/pages/docs/sharing-and-collaboration.md-9fcba8aa.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/sharing-and-collaboration.md-9fcba8aa.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages-and-frameworks.md": {entry: "/./_app/pages/docs/languages-and-frameworks.md-18e85a89.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages-and-frameworks.md-18e85a89.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/professional-open-source.md": {entry: "/./_app/pages/docs/professional-open-source.md-4ec1c0a2.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/professional-open-source.md-4ec1c0a2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/command-line-interface.md": {entry: "/./_app/pages/docs/command-line-interface.md-4e604b41.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/command-line-interface.md-4e604b41.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/bitbucket-integration.md": {entry: "/./_app/pages/docs/bitbucket-integration.md-eaddcfd5.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/bitbucket-integration.md-eaddcfd5.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/environment-variables.md": {entry: "/./_app/pages/docs/environment-variables.md-c497be15.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/environment-variables.md-c497be15.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/config-gitpod-file.md": {entry: "/./_app/pages/docs/config-gitpod-file.md-6ec25f37.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/config-gitpod-file.md-6ec25f37.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/config-start-tasks.md": {entry: "/./_app/pages/docs/config-start-tasks.md-3a128f74.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/config-start-tasks.md-3a128f74.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/github-integration.md": {entry: "/./_app/pages/docs/github-integration.md-18080aef.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/github-integration.md-18080aef.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/gitlab-integration.md": {entry: "/./_app/pages/docs/gitlab-integration.md-1eee4b2e.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/gitlab-integration.md-1eee4b2e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/browser-extension.md": {entry: "/./_app/pages/docs/browser-extension.md-4cc8ea4b.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/browser-extension.md-4cc8ea4b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/checkout-location.md": {entry: "/./_app/pages/docs/checkout-location.md-5e4d6873.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/checkout-location.md-5e4d6873.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/life-of-workspace.md": {entry: "/./_app/pages/docs/life-of-workspace.md-30578db3.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/life-of-workspace.md-30578db3.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/vscode-extensions.md": {entry: "/./_app/pages/docs/vscode-extensions.md-578d8aa8.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/vscode-extensions.md-578d8aa8.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/getting-started.md": {entry: "/./_app/pages/docs/getting-started.md-01c95850.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/getting-started.md-01c95850.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/config-docker.md": {entry: "/./_app/pages/docs/config-docker.md-32d7e68a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/config-docker.md-32d7e68a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/release-notes/2019-02-15/february-2019.md": {entry: "/./_app/pages/docs/release-notes/2019-02-15/february-2019.md-8308155e.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/release-notes/2019-02-15/february-2019.md-8308155e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/release-notes/2019-04-05/april-2019.md": {entry: "/./_app/pages/docs/release-notes/2019-04-05/april-2019.md-640c3560.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/release-notes/2019-04-05/april-2019.md-640c3560.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/release-notes/2019-06-17/june-2019.md": {entry: "/./_app/pages/docs/release-notes/2019-06-17/june-2019.md-5c4b274c.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/release-notes/2019-06-17/june-2019.md-5c4b274c.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/subscriptions.md": {entry: "/./_app/pages/docs/subscriptions.md-0b1c4cc2.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/subscriptions.md-0b1c4cc2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/config-ports.md": {entry: "/./_app/pages/docs/config-ports.md-b6441959.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/config-ports.md-b6441959.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/context-urls.md": {entry: "/./_app/pages/docs/context-urls.md-e205e0bc.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/context-urls.md-e205e0bc.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/integrations/index.md": {entry: "/./_app/pages/docs/integrations/index.md-2e906bf1.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/integrations/index.md-2e906bf1.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/self-hosted.md": {entry: "/./_app/pages/docs/self-hosted/latest/self-hosted.md-85e85c10.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/self-hosted.md-85e85c10.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/install-on-aws-script.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/install-on-aws-script.md-a198cde0.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/install-on-aws-script.md-a198cde0.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/install-on-gcp-script.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/install-on-gcp-script.md-0c6dfec1.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/install-on-gcp-script.md-0c6dfec1.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/install-on-kubernetes.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/install-on-kubernetes.md-74849664.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/install-on-kubernetes.md-74849664.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/configure-ingress.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/configure-ingress.md-dc4f25f3.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/configure-ingress.md-dc4f25f3.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/docker-registry.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/docker-registry.md-778f740b.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/docker-registry.md-778f740b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/troubleshooting.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/troubleshooting.md-05b11aab.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/troubleshooting.md-05b11aab.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/install-on-gcp.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/install-on-gcp.md-14235263.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/install-on-gcp.md-14235263.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/workspaces.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/workspaces.md-4c9873b7.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/workspaces.md-4c9873b7.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/database.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/database.md-92e55def.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/database.md-92e55def.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/storage.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/storage.md-be71caeb.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/storage.md-be71caeb.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/upgrade.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/upgrade.md-cfebf7c9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/upgrade.md-cfebf7c9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/install/nodes.md": {entry: "/./_app/pages/docs/self-hosted/latest/install/nodes.md-0798049f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/install/nodes.md-0798049f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/latest/admin/admin.md": {entry: "/./_app/pages/docs/self-hosted/latest/admin/admin.md-ba776c13.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/latest/admin/admin.md-ba776c13.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/self-hosted.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/self-hosted.md-013548a6.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/self-hosted.md-013548a6.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/install-on-gcp-manual.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/install-on-gcp-manual.md-b0d07dd6.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/install-on-gcp-manual.md-b0d07dd6.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/install-on-gcp-script.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/install-on-gcp-script.md-ddee5ea6.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/install-on-gcp-script.md-ddee5ea6.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/install-on-kubernetes.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/install-on-kubernetes.md-1b33edbe.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/install-on-kubernetes.md-1b33edbe.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/prepare-installation.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/prepare-installation.md-659fb918.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/prepare-installation.md-659fb918.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/docker-registry.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/docker-registry.md-8945c6e4.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/docker-registry.md-8945c6e4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/https-certs.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/https-certs.md-8cb143df.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/https-certs.md-8cb143df.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/workspaces.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/workspaces.md-b31b8e80.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/workspaces.md-b31b8e80.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/database.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/database.md-85bfda24.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/database.md-85bfda24.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/helm-2x.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/helm-2x.md-c47735ed.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/helm-2x.md-c47735ed.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/storage.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/storage.md-526ce918.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/storage.md-526ce918.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/nodes.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/nodes.md-32fea543.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/nodes.md-32fea543.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/install/oauth.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/install/oauth.md-9cf7ac68.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/install/oauth.md-9cf7ac68.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.3.0/admin/admin.md": {entry: "/./_app/pages/docs/self-hosted/0.3.0/admin/admin.md-b57a829e.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.3.0/admin/admin.md-b57a829e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/self-hosted.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/self-hosted.md-ed497d72.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/self-hosted.md-ed497d72.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/install-on-gcp-manual.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/install-on-gcp-manual.md-03aa7789.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/install-on-gcp-manual.md-03aa7789.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/install-on-gcp-script.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/install-on-gcp-script.md-51ecc8b4.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/install-on-gcp-script.md-51ecc8b4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/install-on-kubernetes.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/install-on-kubernetes.md-f87c8e6d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/install-on-kubernetes.md-f87c8e6d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/docker-registry.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/docker-registry.md-4423fff2.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/docker-registry.md-4423fff2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/https-certs.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/https-certs.md-5dc18857.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/https-certs.md-5dc18857.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/workspaces.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/workspaces.md-0bf4453d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/workspaces.md-0bf4453d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/database.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/database.md-22c80bc4.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/database.md-22c80bc4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/helm-2x.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/helm-2x.md-f33b4bb5.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/helm-2x.md-f33b4bb5.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/storage.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/storage.md-b2b2fc8a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/storage.md-b2b2fc8a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/domain.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/domain.md-97c6e05f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/domain.md-97c6e05f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/nodes.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/nodes.md-d2f68169.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/nodes.md-d2f68169.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/install/oauth.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/install/oauth.md-e8b2c803.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/install/oauth.md-e8b2c803.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.4.0/admin/admin.md": {entry: "/./_app/pages/docs/self-hosted/0.4.0/admin/admin.md-86b3a75d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.4.0/admin/admin.md-86b3a75d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/self-hosted.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/self-hosted.md-3ebb02dc.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/self-hosted.md-3ebb02dc.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/install-on-aws-script.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/install-on-aws-script.md-301e4572.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/install-on-aws-script.md-301e4572.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/install-on-gcp-manual.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/install-on-gcp-manual.md-b8815b32.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/install-on-gcp-manual.md-b8815b32.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/install-on-gcp-script.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/install-on-gcp-script.md-ac02dd70.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/install-on-gcp-script.md-ac02dd70.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/install-on-kubernetes.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/install-on-kubernetes.md-1506ab95.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/install-on-kubernetes.md-1506ab95.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/docker-registry.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/docker-registry.md-a0dcf2ac.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/docker-registry.md-a0dcf2ac.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/https-certs.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/https-certs.md-56cdc801.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/https-certs.md-56cdc801.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/workspaces.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/workspaces.md-51fafa1d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/workspaces.md-51fafa1d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/database.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/database.md-c4b2e7d7.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/database.md-c4b2e7d7.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/helm-2x.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/helm-2x.md-bde5a1dd.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/helm-2x.md-bde5a1dd.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/storage.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/storage.md-af21d27f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/storage.md-af21d27f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/domain.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/domain.md-ee355fbd.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/domain.md-ee355fbd.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/nodes.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/nodes.md-61e11654.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/nodes.md-61e11654.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/install/oauth.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/install/oauth.md-ffbbb1a9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/install/oauth.md-ffbbb1a9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.5.0/admin/admin.md": {entry: "/./_app/pages/docs/self-hosted/0.5.0/admin/admin.md-f8be717f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.5.0/admin/admin.md-f8be717f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/self-hosted.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/self-hosted.md-1ed1c84d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/self-hosted.md-1ed1c84d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/install-on-aws-script.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/install-on-aws-script.md-6f124d10.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/install-on-aws-script.md-6f124d10.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/install-on-gcp-script.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/install-on-gcp-script.md-3a5bcf3e.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/install-on-gcp-script.md-3a5bcf3e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/install-on-kubernetes.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/install-on-kubernetes.md-001ce6c9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/install-on-kubernetes.md-001ce6c9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/configure-ingress.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/configure-ingress.md-f5e1e1d2.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/configure-ingress.md-f5e1e1d2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/docker-registry.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/docker-registry.md-1f19aaa7.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/docker-registry.md-1f19aaa7.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/troubleshooting.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/troubleshooting.md-791ff230.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/troubleshooting.md-791ff230.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/workspaces.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/workspaces.md-a5bbc4d9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/workspaces.md-a5bbc4d9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/database.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/database.md-f0cbb54d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/database.md-f0cbb54d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/storage.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/storage.md-73473255.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/storage.md-73473255.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/upgrade.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/upgrade.md-cea2139b.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/upgrade.md-cea2139b.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/nodes.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/nodes.md-2f515f62.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/nodes.md-2f515f62.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/install/oauth.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/install/oauth.md-9bd53776.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/install/oauth.md-9bd53776.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.7.0/admin/admin.md": {entry: "/./_app/pages/docs/self-hosted/0.7.0/admin/admin.md-055cc855.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.7.0/admin/admin.md-055cc855.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/self-hosted.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/self-hosted.md-ae12895f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/self-hosted.md-ae12895f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/install-on-aws-script.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/install-on-aws-script.md-77d206a9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/install-on-aws-script.md-77d206a9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/install-on-gcp-script.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/install-on-gcp-script.md-250df08d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/install-on-gcp-script.md-250df08d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/install-on-kubernetes.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/install-on-kubernetes.md-8501f6bf.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/install-on-kubernetes.md-8501f6bf.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/configure-ingress.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/configure-ingress.md-306ca625.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/configure-ingress.md-306ca625.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/docker-registry.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/docker-registry.md-cdf8cf40.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/docker-registry.md-cdf8cf40.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/troubleshooting.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/troubleshooting.md-9f4cd76a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/troubleshooting.md-9f4cd76a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/workspaces.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/workspaces.md-97c77e10.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/workspaces.md-97c77e10.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/database.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/database.md-666b9e4d.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/database.md-666b9e4d.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/storage.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/storage.md-9640d13f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/storage.md-9640d13f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/upgrade.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/upgrade.md-26f9e7bb.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/upgrade.md-26f9e7bb.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/nodes.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/nodes.md-9436d9ac.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/nodes.md-9436d9ac.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/install/oauth.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/install/oauth.md-54b932fa.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/install/oauth.md-54b932fa.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/self-hosted/0.8.0/admin/admin.md": {entry: "/./_app/pages/docs/self-hosted/0.8.0/admin/admin.md-ae355f68.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/self-hosted/0.8.0/admin/admin.md-ae355f68.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/index.md": {entry: "/./_app/pages/docs/quickstart/index.md-50cf41d5.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/index.md-50cf41d5.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/ruby-on-rails.md": {entry: "/./_app/pages/docs/quickstart/ruby-on-rails.md-2f3093b1.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/ruby-on-rails.md-2f3093b1.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/typescript.md": {entry: "/./_app/pages/docs/quickstart/typescript.md-89c9a7dc.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/typescript.md-89c9a7dc.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/laravel.md": {entry: "/./_app/pages/docs/quickstart/laravel.md-4d11953c.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/laravel.md-4d11953c.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/drupal.md": {entry: "/./_app/pages/docs/quickstart/drupal.md-b081b63f.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/drupal.md-b081b63f.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/python.md": {entry: "/./_app/pages/docs/quickstart/python.md-ae235132.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/python.md-ae235132.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/svelte.md": {entry: "/./_app/pages/docs/quickstart/svelte.md-c73b4548.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/svelte.md-c73b4548.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/flask.md": {entry: "/./_app/pages/docs/quickstart/flask.md-807d6bc9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/flask.md-807d6bc9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/react.md": {entry: "/./_app/pages/docs/quickstart/react.md-a7ed0fbd.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/react.md-a7ed0fbd.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/deno.md": {entry: "/./_app/pages/docs/quickstart/deno.md-37236572.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/deno.md-37236572.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/java.md": {entry: "/./_app/pages/docs/quickstart/java.md-ac4f152a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/java.md-ac4f152a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/rust.md": {entry: "/./_app/pages/docs/quickstart/rust.md-1d578223.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/rust.md-1d578223.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/quickstart/go.md": {entry: "/./_app/pages/docs/quickstart/go.md-ab7a8944.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/quickstart/go.md-ab7a8944.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/index.md": {entry: "/./_app/pages/docs/references/index.md-f5a18a19.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/index.md-f5a18a19.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/gitpod-dockerfile.md": {entry: "/./_app/pages/docs/references/gitpod-dockerfile.md-850ac3ee.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/gitpod-dockerfile.md-850ac3ee.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/troubleshooting.md": {entry: "/./_app/pages/docs/references/troubleshooting.md-b147b5c8.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/troubleshooting.md-b147b5c8.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/architecture.md": {entry: "/./_app/pages/docs/references/architecture.md-342223c2.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/architecture.md-342223c2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/gitpod-yml.md": {entry: "/./_app/pages/docs/references/gitpod-yml.md-94479a44.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/gitpod-yml.md-94479a44.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/changelog.md": {entry: "/./_app/pages/docs/references/changelog.md-0dcea7f9.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/changelog.md-0dcea7f9.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/references/roadmap.md": {entry: "/./_app/pages/docs/references/roadmap.md-56bc0b70.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/references/roadmap.md-56bc0b70.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/workspaces.md": {entry: "/./_app/pages/docs/workspaces.md-8888f58e.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/workspaces.md-8888f58e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/changelog.md": {entry: "/./_app/pages/docs/changelog.md-7562848c.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/changelog.md-7562848c.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/configure/index.md": {entry: "/./_app/pages/docs/configure/index.md-f5b68817.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/configure/index.md-f5b68817.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/javascript.md": {entry: "/./_app/pages/docs/languages/javascript.md-183480bd.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/javascript.md-183480bd.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/dotnet.md": {entry: "/./_app/pages/docs/languages/dotnet.md-9d4be937.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/dotnet.md-9d4be937.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/kotlin.md": {entry: "/./_app/pages/docs/languages/kotlin.md-eaf461cd.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/kotlin.md-eaf461cd.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/python.md": {entry: "/./_app/pages/docs/languages/python.md-aad79826.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/python.md-aad79826.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/svelte.md": {entry: "/./_app/pages/docs/languages/svelte.md-7603a464.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/svelte.md-7603a464.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/julia.md": {entry: "/./_app/pages/docs/languages/julia.md-a38d37fa.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/julia.md-a38d37fa.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/latex.md": {entry: "/./_app/pages/docs/languages/latex.md-f2d8fc56.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/latex.md-f2d8fc56.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/scala.md": {entry: "/./_app/pages/docs/languages/scala.md-48ef1a28.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/scala.md-48ef1a28.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/bash.md": {entry: "/./_app/pages/docs/languages/bash.md-15059871.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/bash.md-15059871.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/dart.md": {entry: "/./_app/pages/docs/languages/dart.md-916b5225.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/dart.md-916b5225.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/deno.md": {entry: "/./_app/pages/docs/languages/deno.md-c2dba3ce.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/deno.md-c2dba3ce.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/html.md": {entry: "/./_app/pages/docs/languages/html.md-ebbbb74e.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/html.md-ebbbb74e.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/java.md": {entry: "/./_app/pages/docs/languages/java.md-85bed54a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/java.md-85bed54a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/ruby.md": {entry: "/./_app/pages/docs/languages/ruby.md-3d314c4a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/ruby.md-3d314c4a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/rust.md": {entry: "/./_app/pages/docs/languages/rust.md-193ae92a.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/rust.md-193ae92a.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/cpp.md": {entry: "/./_app/pages/docs/languages/cpp.md-de08baf4.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/cpp.md-de08baf4.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/php.md": {entry: "/./_app/pages/docs/languages/php.md-abf3b700.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/php.md-abf3b700.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/vue.md": {entry: "/./_app/pages/docs/languages/vue.md-ddd7a372.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/vue.md-ddd7a372.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/go.md": {entry: "/./_app/pages/docs/languages/go.md-7219b8af.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/go.md-7219b8af.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/languages/r.md": {entry: "/./_app/pages/docs/languages/r.md-33ddaffd.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/languages/r.md-33ddaffd.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/prebuilds.md": {entry: "/./_app/pages/docs/prebuilds.md-18d771f6.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/prebuilds.md-18d771f6.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/examples.md": {entry: "/./_app/pages/docs/examples.md-cf573a12.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/examples.md-cf573a12.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/develop/index.md": {entry: "/./_app/pages/docs/develop/index.md-6b5ee3d2.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/develop/index.md-6b5ee3d2.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}, "src/routes/docs/teams.md": {entry: "/./_app/pages/docs/teams.md-3bc90396.js", css: ["/./_app/assets/docs-content-layout-8345662d.css"], js: ["/./_app/pages/docs/teams.md-3bc90396.js", "/./_app/chunks/index-11c21a1c.js", "/./_app/chunks/docs-content-layout-6b421f4a.js", "/./_app/chunks/stores-db007e79.js", "/./_app/chunks/open-graph-dae0365b.js", "/./_app/chunks/menu-158e9ee3.js", "/./_app/chunks/index-f37a303e.js"], styles: null}};
async function load_component(file) {
  if (!module_lookup[file]) {
    console.log({file});
  }
  return {
    module: await module_lookup[file](),
    ...metadata_lookup[file]
  };
}
function render(request, {
  paths = {base: "", assets: "/."},
  local = false,
  dependencies,
  only_render_prerenderable_pages = false,
  get_static_file
} = {}) {
  return ssr$1({
    ...request,
    host: request.headers["host"]
  }, {
    paths,
    local,
    template,
    manifest,
    load_component,
    target: "#svelte",
    entry: "/./_app/start-aa480bf4.js",
    root: Root,
    hooks,
    dev: false,
    amp: false,
    dependencies,
    only_render_prerenderable_pages,
    get_component_path: (id2) => "/./_app/" + entry_lookup[id2],
    get_stack: (error2) => error2.stack,
    get_static_file,
    ssr: true,
    router: true,
    hydrate: true
  });
}
const Avatars = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {usernames} = $$props;
  let {displayNames = null} = $$props;
  let {socialMediaLinks = null} = $$props;
  let {socialMediaLinkClasses = ""} = $$props;
  let {socialMediaImgClasses = ""} = $$props;
  let {showAvatar = true} = $$props;
  const trimmedUsernames = usernames.split(",").map((username) => username.trim());
  const getSocialMediaLink = (username) => socialMediaLinks ? socialMediaLinks[username] : `https://github.com/${username}`;
  if ($$props.usernames === void 0 && $$bindings.usernames && usernames !== void 0)
    $$bindings.usernames(usernames);
  if ($$props.displayNames === void 0 && $$bindings.displayNames && displayNames !== void 0)
    $$bindings.displayNames(displayNames);
  if ($$props.socialMediaLinks === void 0 && $$bindings.socialMediaLinks && socialMediaLinks !== void 0)
    $$bindings.socialMediaLinks(socialMediaLinks);
  if ($$props.socialMediaLinkClasses === void 0 && $$bindings.socialMediaLinkClasses && socialMediaLinkClasses !== void 0)
    $$bindings.socialMediaLinkClasses(socialMediaLinkClasses);
  if ($$props.socialMediaImgClasses === void 0 && $$bindings.socialMediaImgClasses && socialMediaImgClasses !== void 0)
    $$bindings.socialMediaImgClasses(socialMediaImgClasses);
  if ($$props.showAvatar === void 0 && $$bindings.showAvatar && showAvatar !== void 0)
    $$bindings.showAvatar(showAvatar);
  return `<span class="${"avatars"}">${each(trimmedUsernames, (username) => `<a${add_attribute("href", getSocialMediaLink(username), 0)} class="${[
    "no-underline transition-none " + escape(socialMediaLinkClasses),
    showAvatar ? "showAvatar" : ""
  ].join(" ").trim()}">${showAvatar ? `
        <img src="${"https://github.com/" + escape(username) + ".png"}" alt="${"Avatar of " + escape(username)}" height="${"24"}" width="${"24"}" class="${"inline rounded-full border border-solid border-off-white " + escape(socialMediaImgClasses)}">` : ``}
      ${displayNames ? `${escape(displayNames[username])}` : ``}
    </a>`)}</span>`;
});
const ssr = typeof window === "undefined";
const getStores = () => {
  const stores = getContext$1("__svelte__");
  return {
    page: {
      subscribe: stores.page.subscribe
    },
    navigating: {
      subscribe: stores.navigating.subscribe
    },
    get preloading() {
      console.error("stores.preloading is deprecated; use stores.navigating instead");
      return {
        subscribe: stores.navigating.subscribe
      };
    },
    session: stores.session
  };
};
const page = {
  subscribe(fn) {
    const store = getStores().page;
    return store.subscribe(fn);
  }
};
const error = (verb) => {
  throw new Error(ssr ? `Can only ${verb} session store in browser` : `Cannot ${verb} session store before subscribing`);
};
const session = {
  subscribe(fn) {
    const store = getStores().session;
    if (!ssr) {
      session.set = store.set;
      session.update = store.update;
    }
    return store.subscribe(fn);
  },
  set: (value) => {
    error("set");
  },
  update: (updater) => {
    error("update");
  }
};
const authors = {
  svenefftinge: {
    name: "Sven Efftinge",
    socialProfiles: {
      github: "svenefftinge",
      twitter: "svenefftinge",
      linkedin: "efftinge"
    },
    description: "Sven loves finding sweet spots in product development. Always keeping an eye on pragmatism and the real benefit for the end user, he has proven to be a creative source for many successful technologies. He is a co-founder of TypeFox, co-lead of Eclipse Theia and product manager of Gitpod."
  },
  meysholdt: {
    name: "Moritz Eysholdt",
    socialProfiles: {
      github: "meysholdt",
      twitter: "meysholdt",
      linkedin: "moritzeysholdt"
    },
    description: "Moritz loves to make things works. He is a co-founder of TypeFox and Gitpod."
  },
  akosyakov: {
    name: "Anton Kosyakov",
    socialProfiles: {
      github: "akosyakov",
      twitter: "akosyakov",
      linkedin: "anton-kosyakov-4093b610"
    },
    description: "Anton is core committer and co-architect of Eclipse Theia. He is an exceptionally productive coder and a great team player. At the moment he works primarily on Theia, Gitpod, the monaco language client and various associated satellite projects. He also is committer of Xtext."
  },
  geropl: {
    name: "Gero Posmyk-Leinemann",
    socialProfiles: {
      github: "geropl",
      twitter: "geropl2"
    },
    description: "Gero is a passionate software developer with a strong interest in programming languages. He likes to learn new stuff but somehow always turns out to work on the backend side of things. His current pet peeve is Kubernetes and everything around it."
  },
  csweichel: {
    name: "Christian Weichel",
    socialProfiles: {
      github: "csweichel",
      twitter: "csweichel",
      linkedin: "christian-weichel-740b4224"
    },
    description: "Christian loves building things, systems and software. Ever keen to solve cross-cutting problems, he has experience in human-computer interaction, embedded software development, and the backend side of things (Kubernetes, Docker). He is also co-leading Eclipse Mita."
  },
  jankeromnes: {
    name: "Jan Keromnes",
    socialProfiles: {
      github: "jankeromnes",
      twitter: "jankeromnes",
      linkedin: "jankeromnes"
    },
    description: "Jan is the creator of Janitor, and he has been automating development environments for almost a decade. He is passionate about making software development saner, easier, and more accessible for all humans."
  },
  nisarhassan12: {
    name: "Nisar Hassan",
    socialProfiles: {
      github: "nisarhassan12",
      twitter: "nisarhassan12",
      linkedin: "nisar-hassan-naqvi-413466199"
    },
    description: "Nisar is a web developer who creates UX rich performant websites and web applications."
  },
  anudeepreddy: {
    name: "Anudeep Reddy",
    socialProfiles: {
      github: "anudeepreddy",
      twitter: "",
      linkedin: ""
    },
    description: "Anudeep is a developer advocate at Gitpod."
  },
  spoenemann: {
    name: "Miro Sp\xF6nemann",
    socialProfiles: {
      github: "spoenemann",
      twitter: "sponemann",
      linkedin: "mirospoenemann"
    },
    description: "Miro is thrilled about innovation on programming languages, DSLs, graphical modeling and web technologies."
  },
  JesterOrNot: {
    name: "Sean Hellum",
    socialProfiles: {
      github: "JesterOrNot",
      twitter: "",
      linkedin: "sean-hellum-84ba401a2"
    },
    description: "Sean is a developer advocate and rustacean with a passion for Docker, Linux, Bash, Rust, and CLIs"
  },
  JohannesLandgraf: {
    name: "Johannes Landgraf",
    socialProfiles: {
      github: "JohannesLandgraf",
      twitter: "jolandgraf",
      linkedin: "johanneslandgraf"
    },
    description: "Johannes is CCO at Gitpod and helps professional development teams to embrace fully set-up, remote dev environments. Before that he worked in Venture Capital focusing on everything around open source and developer tools."
  },
  corneliusludmann: {
    name: "Cornelius Ludmann",
    socialProfiles: {
      github: "corneliusludmann",
      twitter: "ludmann",
      linkedin: "corneliusludmann"
    },
    description: ""
  },
  ghuntley: {
    name: "Geoffrey Huntley",
    socialProfiles: {
      github: "ghuntley",
      twitter: "geoffreyhuntley",
      linkedin: "geoffreyhuntley"
    },
    description: "After many previous adventures involving cycling through many countries on a unicycle Geoff now lives a minimalist lifestyle in a van that is slowly working its' way around Australia. On an average day\u2122 at Gitpod you'll find him shipping features along side the engineering team, crafting code examples and authoring documentation."
  },
  mikenikles: {
    name: "Mike Nikles",
    socialProfiles: {
      github: "mikenikles",
      twitter: "mikenikles",
      linkedin: "mikenikles"
    },
    description: "Mike is a software architect who values developer experience, productivity and team morale. He is on a journey to help developers let go of their local development environments and embrace automated, ephemeral development environments."
  },
  arthursens: {
    name: "Arthur Sens",
    socialProfiles: {
      github: "arthursens",
      twitter: "ArthurSilvaSens",
      linkedin: "arthursilvasens"
    },
    description: "A big open-source fan, Arthur is a SRE focused on cloud-native observability. When not training backflips and gymnastics, you can find him chit-chatting at CNCF's slack channels."
  },
  christinfrohne: {
    name: "Christin Frohne",
    socialProfiles: {
      github: "ChristinFrohne",
      twitter: "christinfrohne",
      linkedin: "christin-frohne-91a4b0173"
    },
    description: "Christin is our Marketing Manager at Gitpod. She is eager to create a great brand experience and favors going the unconventional way. In her free time, she loves to be out in the nature, climbing rocks and practising yoga."
  },
  "rl-gitpod": {
    name: "Robert Leftwich",
    socialProfiles: {
      github: "rl-gitpod",
      twitter: "",
      linkedin: "robert-leftwich"
    },
    description: "Robert loves to code and lives off-grid... although the other way around is probably more accurate. Engineering systems of all shapes and sizes with many different teams highlighted the need for Gitpod's blazingly fast, ephemeral and secure development environments time and time again - he is helping make that happen."
  }
};
const Post_preview = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {post} = $$props;
  let {isMostRecent = false} = $$props;
  const authorSocialMediaLinks = Object.entries(authors).reduce((displayNames, [username, profile]) => {
    displayNames[username] = `https://twitter.com/${profile.socialProfiles.twitter}`;
    return displayNames;
  }, {});
  let {headlineOrder} = $$props;
  if ($$props.post === void 0 && $$bindings.post && post !== void 0)
    $$bindings.post(post);
  if ($$props.isMostRecent === void 0 && $$bindings.isMostRecent && isMostRecent !== void 0)
    $$bindings.isMostRecent(isMostRecent);
  if ($$props.headlineOrder === void 0 && $$bindings.headlineOrder && headlineOrder !== void 0)
    $$bindings.headlineOrder(headlineOrder);
  return `<div class="${["blogPreview", !isMostRecent ? "previous" : ""].join(" ").trim()}">${isMostRecent ? `<a href="${"/blog/" + escape(post.slug)}" sveltekit:prefetch><img src="${"/images/blog/" + escape(post.slug) + "/" + escape(post.image)}"${add_attribute("alt", `Blog post: ${post.title}`, 0)} height="${"248"}" width="${"400"}"></a>` : ``}
  <div class="${"blurb"}">${headlineOrder === "h3" ? `<h3 class="${"h2"}"><a href="${"/blog/" + escape(post.slug)}" sveltekit:prefetch>${escape(post.title)}</a></h3>` : `<h2><a href="${"/blog/" + escape(post.slug)}" sveltekit:prefetch>${escape(post.title)}</a></h2>`}
    <p class="${"excerpt"}">${escape(post.excerpt)}</p>
    <p><span>${validate_component(Avatars, "Avatars").$$render($$result, {
    usernames: post.author,
    socialMediaLinks: authorSocialMediaLinks,
    socialMediaLinkClasses: "filter hover:drop-shadow"
  }, {}, {})}
        <a href="${"/blog/" + escape(post.slug)}" class="${"date"}" sveltekit:prefetch>${escape(new Date(Date.parse(post.date)).toLocaleDateString(void 0, {
    year: "numeric",
    month: "short",
    day: "numeric"
  }))}</a></span></p></div></div>`;
});
const Recent_articles_preview = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let moreRecentPostsWithoutCurrent;
  let $session, $$unsubscribe_session;
  let $page, $$unsubscribe_page;
  $$unsubscribe_session = subscribe(session, (value) => $session = value);
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  const moreRecentPosts = $session.posts.slice(0, 4);
  moreRecentPostsWithoutCurrent = moreRecentPosts.filter((post) => $page.path.indexOf(post.slug) === -1).slice(0, 3);
  $$unsubscribe_session();
  $$unsubscribe_page();
  return `<div><section class="${"mb-40"}"><h2 class="${" mt-6 mb-16 text-center text-h2"}">More articles</h2>
    <div class="${"posts-grid"}">${each(moreRecentPostsWithoutCurrent, (post) => `<div class="${"posts-grid__item"}">${validate_component(Post_preview, "PostPreview").$$render($$result, {
    post,
    isMostRecent: true,
    headlineOrder: "h3"
  }, {}, {})}
        </div>`)}</div></section></div>`;
});
const Open_graph = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  let {data} = $$props;
  const {description, image = "images/media-image.jpg", title, type = "website", imageTwitter = "images/twitter-preview.jpg"} = data || {};
  const url = `https://${$page.host}${$page.path}`;
  if ($$props.data === void 0 && $$bindings.data && data !== void 0)
    $$bindings.data(data);
  $$unsubscribe_page();
  return `${$$result.head += `${$$result.title = `<title>${escape(title)}</title>`, ""}<meta name="${"keywords"}" content="${"dev environment, development environment, devops, cloud ide, github ide, gitlab ide, javascript, online ide, web ide, code review"}" data-svelte="svelte-14iaoq6"><meta name="${"description"}"${add_attribute("content", description, 0)} data-svelte="svelte-14iaoq6"><meta property="${"og:image"}" content="${"https://www.gitpod.io/" + escape(image)}" data-svelte="svelte-14iaoq6"><meta property="${"og:description"}"${add_attribute("content", description, 0)} data-svelte="svelte-14iaoq6"><meta property="${"og:title"}"${add_attribute("content", title, 0)} data-svelte="svelte-14iaoq6"><meta property="${"og:type"}"${add_attribute("content", type, 0)} data-svelte="svelte-14iaoq6"><meta property="${"og:url"}"${add_attribute("content", url, 0)} data-svelte="svelte-14iaoq6"><meta name="${"twitter:card"}" content="${"summary"}" data-svelte="svelte-14iaoq6"><meta name="${"twitter:site"}" content="${"@gitpod"}" data-svelte="svelte-14iaoq6"><meta name="${"twitter:creator"}" content="${"@gitpod"}" data-svelte="svelte-14iaoq6"><meta name="${"twitter:image"}" content="${"https://www.gitpod.io/" + escape(imageTwitter)}" data-svelte="svelte-14iaoq6">`, ""}`;
});
var markdownCommons = '@charset "UTF-8";.content-blog,.content-docs{line-height:177.7%}.content-blog h1,.content-blog h2,.content-blog h3,.content-docs h1,.content-docs h2,.content-docs h3{margin-bottom:var(--xx-small);font-weight:700}.content-blog .h1,.content-blog h1,.content-docs .h1,.content-docs h1{font-size:var(--h3)}.content-blog .h2,.content-blog h2,.content-docs .h2,.content-docs h2{font-size:var(--h4)}.content-blog .h3,.content-blog h3,.content-docs .h3,.content-docs h3{font-size:var(--p-large)}.content-blog h3 em,.content-docs h3 em{font-style:normal}.content-blog *+.h2,.content-blog *+h2,.content-docs *+.h2,.content-docs *+h2{margin-top:var(--medium)}.content-blog *+.h3,.content-blog *+h3,.content-docs *+.h3,.content-docs *+h3{margin-top:var(--large)}.content-blog h4,.content-docs h4{margin-bottom:var(--macro)}.content-blog h4~h4,.content-blog p+h4,.content-docs h4~h4,.content-docs p+h4{margin-top:var(--xx-small)}.content-blog p+p,.content-blog p+ul,.content-blog ul+p,.content-docs p+p,.content-docs p+ul,.content-docs ul+p{margin-top:var(--micro)}.content-blog blockquote,.content-docs blockquote{margin:2rem 0;padding:1.5rem;border-radius:.75rem;background:var(--brand-light)}.content-blog blockquote code,.content-docs blockquote code{background:var(--brand-almost-ripe)}.content-blog ol,.content-blog ul:not(.share>ul),.content-docs ol,.content-docs ul:not(.share>ul){margin:var(--micro) 0}.content-blog ol,.content-docs ol{margin-left:var(--x-small);list-style-type:decimal}.content-blog ul:not(.share>ul),.content-docs ul:not(.share>ul){padding-left:var(--x-small)}.content-blog ul:not(.share>ul)>li,.content-docs ul:not(.share>ul)>li{position:relative;margin-bottom:0}.content-blog ul:not(.share>ul)>li:before,.content-docs ul:not(.share>ul)>li:before{content:"\u2014";position:absolute;left:calc(var(--x-small)*-1);color:var(--brand-ripe)}.content-blog li,.content-docs li{margin-bottom:0}.content-blog li+li,.content-docs li+li{margin-top:var(--macro)}.content-blog li::marker,.content-docs li::marker{color:var(--brand-ripe)}.content-blog :not(pre)>code,.content-docs :not(pre)>code{padding:.3rem .5rem;border-radius:.75rem;background:var(--brand-light);white-space:pre}.content-blog pre,.content-docs pre{overflow:auto;display:block;margin:var(--micro) 0;padding:1.25rem 1.5rem;border-radius:.75rem;background:var(--sand-dark)}.content-blog pre:not(.language-null),.content-docs pre:not(.language-null){background:var(--off-white)}.content-blog p>.video-container,.content-docs p>.video-container{margin-top:var(--medium)}.content-blog .video-container,.content-docs .video-container{position:relative;overflow:hidden;display:block;max-width:100%}.content-blog .video-container:after,.content-docs .video-container:after{display:block;content:"";padding-top:56.25%}.content-blog .video-container iframe,.content-docs .video-container iframe{position:absolute;top:0;left:0;width:100%;height:100%}.content-blog .table-container,.content-docs .table-container{overflow-x:auto}.content-blog table,.content-docs table{width:100%;min-width:31.25rem;margin:var(--micro) 0;overflow:hidden;border-radius:1rem;font-size:var(--p-small)}.content-blog thead,.content-docs thead{background:var(--sand-dark)}.content-blog tbody,.content-docs tbody{background:var(--off-white)}.content-blog td,.content-blog th,.content-docs td,.content-docs th{padding:.75rem 1.5rem;text-align:left}.content-blog td,.content-docs td{padding-top:1rem;padding-bottom:1rem;line-height:150%}.content-blog th,.content-docs th{font-weight:400}.content-blog td,.content-docs td{vertical-align:top}.content-blog td:first-child,.content-docs td:first-child{font-weight:700;color:var(--black)}.content-blog td+td,.content-blog th+th,.content-docs td+td,.content-docs th+th{border-color:var(--divider);border-left:1px var(--divider);border-style:solid}.content-blog tr+tr,.content-docs tr+tr{border-color:var(--divider);border-top:1px var(--divider);border-style:solid}.content-blog h2,.content-blog h3,.content-blog h4,.content-blog h5,.content-blog h6,.content-docs h2,.content-docs h3,.content-docs h4,.content-docs h5,.content-docs h6{display:inline-block;position:relative}.content-blog h2 .icon-link,.content-blog h3 .icon-link,.content-blog h4 .icon-link,.content-blog h5 .icon-link,.content-blog h6 .icon-link,.content-docs h2 .icon-link,.content-docs h3 .icon-link,.content-docs h4 .icon-link,.content-docs h5 .icon-link,.content-docs h6 .icon-link{position:absolute;top:50%;transform:translateY(-50%);right:-2rem;display:flex;align-items:center;margin-left:.5rem}.content-blog h2 .icon-link:after,.content-blog h3 .icon-link:after,.content-blog h4 .icon-link:after,.content-blog h5 .icon-link:after,.content-blog h6 .icon-link:after,.content-docs h2 .icon-link:after,.content-docs h3 .icon-link:after,.content-docs h4 .icon-link:after,.content-docs h5 .icon-link:after,.content-docs h6 .icon-link:after{content:"";display:inline-block;height:1.4rem;width:1.4rem;background-image:url(/svg/headling-link.svg);background-size:cover;opacity:0;transition:all .2s 50ms}.content-blog h2:focus .icon-link:after,.content-blog h2:hover .icon-link:after,.content-blog h3:focus .icon-link:after,.content-blog h3:hover .icon-link:after,.content-blog h4:focus .icon-link:after,.content-blog h4:hover .icon-link:after,.content-blog h5:focus .icon-link:after,.content-blog h5:hover .icon-link:after,.content-blog h6:focus .icon-link:after,.content-blog h6:hover .icon-link:after,.content-docs h2:focus .icon-link:after,.content-docs h2:hover .icon-link:after,.content-docs h3:focus .icon-link:after,.content-docs h3:hover .icon-link:after,.content-docs h4:focus .icon-link:after,.content-docs h4:hover .icon-link:after,.content-docs h5:focus .icon-link:after,.content-docs h5:hover .icon-link:after,.content-docs h6:focus .icon-link:after,.content-docs h6:hover .icon-link:after{opacity:1}.content-blog a[href*="http://"]:not([href*="www.gitpod.io"]),.content-blog a[href*="https://"]:not([href*="www.gitpod.io"]),.content-docs a[href*="http://"]:not([href*="www.gitpod.io"]),.content-docs a[href*="https://"]:not([href*="www.gitpod.io"]){white-space:nowrap}.content-blog a[href*="http://"]:not([href*="www.gitpod.io"]):after,.content-blog a[href*="https://"]:not([href*="www.gitpod.io"]):after,.content-docs a[href*="http://"]:not([href*="www.gitpod.io"]):after,.content-docs a[href*="https://"]:not([href*="www.gitpod.io"]):after{display:inline;content:url(/svg/external.svg);margin-left:.2rem;margin-right:.1rem;opacity:.6;transition:all .2s 50ms}.content-blog a[href*="http://"]:not([href*="www.gitpod.io"]):hover:after,.content-blog a[href*="https://"]:not([href*="www.gitpod.io"]):hover:after,.content-docs a[href*="http://"]:not([href*="www.gitpod.io"]):hover:after,.content-docs a[href*="https://"]:not([href*="www.gitpod.io"]):hover:after{opacity:1}.content-blog .avatars a:after,.content-blog .link-with-image-as-only-child:after,.content-blog a[href*="https://gitpod.io/#"]:after,.content-docs .avatars a:after,.content-docs .link-with-image-as-only-child:after,.content-docs a[href*="https://gitpod.io/#"]:after{display:none!important}.content-blog .no-nowrap,.content-docs .no-nowrap{white-space:normal!important;text-decoration:underline}';
const blogBaseUrl = "https://www.gitpod.io/blog/";
const Blog_content_layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {date} = $$props;
  let {author} = $$props;
  let {slug} = $$props;
  let {title} = $$props;
  let {image} = $$props;
  let {teaserImage} = $$props;
  let {excerpt} = $$props;
  let dateDisplay = new Date(Date.parse(date)).toLocaleDateString(void 0, {
    year: "numeric",
    month: "short",
    day: "numeric"
  });
  const authorDisplayNames = Object.entries(authors).reduce((displayNames, [username, profile]) => {
    displayNames[username] = profile.name;
    return displayNames;
  }, {});
  const authorSocialMediaLinks = Object.entries(authors).reduce((displayNames, [username, profile]) => {
    displayNames[username] = `https://twitter.com/${profile.socialProfiles.twitter}`;
    return displayNames;
  }, {});
  const socialLinks = [
    {
      href: `https://twitter.com/intent/tweet?text=${encodeURIComponent(`${title} by ${author.split(", ").map((username) => "@" + authors[username].socialProfiles.twitter).join(", ")} ${blogBaseUrl}${slug}`)}`,
      alt: "Twitter",
      icon: "/svg/brands/twitter.svg"
    },
    {
      href: `http://www.reddit.com/submit?url=${encodeURIComponent(`${blogBaseUrl}${slug}&title=${title}`)}`,
      alt: "Reddit",
      icon: "/svg/brands/reddit.svg"
    }
  ];
  if ($$props.date === void 0 && $$bindings.date && date !== void 0)
    $$bindings.date(date);
  if ($$props.author === void 0 && $$bindings.author && author !== void 0)
    $$bindings.author(author);
  if ($$props.slug === void 0 && $$bindings.slug && slug !== void 0)
    $$bindings.slug(slug);
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.image === void 0 && $$bindings.image && image !== void 0)
    $$bindings.image(image);
  if ($$props.teaserImage === void 0 && $$bindings.teaserImage && teaserImage !== void 0)
    $$bindings.teaserImage(teaserImage);
  if ($$props.excerpt === void 0 && $$bindings.excerpt && excerpt !== void 0)
    $$bindings.excerpt(excerpt);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: excerpt,
      title,
      type: "article",
      image: `images/blog/${slug}/${image}`,
      imageTwitter: `images/blog/${slug}/${image}`
    }
  }, {}, {})}
<div class="${"post content-blog"}"><img src="${"/images/blog/" + escape(slug) + "/" + escape(teaserImage || image)}"${add_attribute("alt", `${title}`, 0)} class="${"headerImage"}">
  <p class="${"date"}">${escape(dateDisplay)}</p>
  <h1>${escape(title)}</h1>
  <p><span>${validate_component(Avatars, "Avatars").$$render($$result, {
    usernames: author,
    displayNames: authorDisplayNames,
    socialMediaLinks: authorSocialMediaLinks,
    socialMediaLinkClasses: "inline-flex mr-4 px-2 bg-white rounded-xl text-light-grey focus:bg-off-white focus:text-dark-grey hover:bg-off-white hover:text-dark-grey",
    socialMediaImgClasses: "mr-2 h-6 w-6 place-self-center"
  }, {}, {})}</span></p>
  <div>${slots.default ? slots.default({}) : ``}</div>
  <section class="${"share"}"><h2 class="${"h4"}">Share this post:</h2>
    <ul>${each(socialLinks, (link) => `<li><a${add_attribute("href", link.href, 0)}><img${add_attribute("src", link.icon, 0)}${add_attribute("alt", link.alt, 0)} height="${"24"}" width="${"24"}"></a>
        </li>`)}</ul></section></div>

${validate_component(Recent_articles_preview, "RecentArticlesPreview").$$render($$result, {}, {}, {})}`;
});
const metadata$35 = {
  author: "ghuntley",
  date: "Friday, 16 Apr 2021 11:00:00 UTC",
  excerpt: "On the 27th of April there will be a one-day virtual conference where members from the Gitpod team will be spending dedicated time with you, our community.",
  image: "teaser.jpg",
  slug: "a-day-with-gitpod",
  subtitle: null,
  teaserImage: "teaser.jpg",
  title: "A day with Gitpod"
};
const prerender$3h = true;
const A_day_with_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$35), {}, {
    default: () => `<p>On the <a href="${"https://gitpodcommunityday.org"}" rel="${"nofollow"}">27th of April there will be a one-day virtual conference</a> where members from the Gitpod team will be spending dedicated time with you, our community.</p>
<p>At the Gitpod Community day you\u2019ll learn about the north stars that are guiding product development from our CEO - Sven Efftinge and the inner technical architecture of Gitpod from our Chief Architect - Christian Weichel. Michael Friedrich from GitLab will be making an appearance to provide insights into how Gitpod makes it easier for open-source maintainers to attract contributors and, finally, Gitpod will also be revealing some exciting initiatives but Shhh\u2026Spoilers!</p>
<p>After the talks, the conference is largely unstructured as it is about spending time with each other. Sven, Christian and other members of Gitpod will be available all day to spend time with you.</p>
<p>Last week we announced a <a href="${"/blog/next-chapter-for-gitpod"}">$13m funding round</a> led by General Catalyst to accelerate our roadmap and continue to build out a fully distributed world-class team to define a new product category in modern software development and move software development to the cloud. <a href="${"/careers"}">We are hiring</a> (<a href="${"https://ghuntley.com/a-new-chapter"}" rel="${"nofollow"}">internationally + remote</a>) and this the perfect opportunity to ask any questions you may have about life at Gitpod.</p>
<p>The Gitpod <a href="${"https://www.gitpod.io/chat"}" rel="${"nofollow"}">discord channel</a> is where the event will be taking place. Make sure you have your microphone + camera set up and ready as there will be many video breakout opportunities.</p>
<p>Registration for the Gitpod Community Day is now open and more information can be found at <a href="${"https://gitpodcommunityday.org/"}" rel="${"nofollow"}">https://gitpodcommunityday.org/</a></p>`
  })}`;
});
var aDayWithGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: A_day_with_gitpod,
  metadata: metadata$35,
  prerender: prerender$3h
});
const metadata$34 = {
  author: "jankeromnes",
  date: "Thu, 02 Jul 2020 14:00:00 UTC",
  excerpt: "We\u2019re excited to bring you instant development environments for all Bitbucket projects.",
  image: "teaser.jpg",
  slug: "bitbucket",
  subtitle: "Instant dev environments for all Bitbucket projects",
  teaserImage: "teaser.jpg",
  title: "Gitpod for Bitbucket \u{1F680}"
};
const prerender$3g = true;
const Bitbucket = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$34), {}, {
    default: () => `<p>Today, we\u2019re excited to bring you instant development environments for all Bitbucket projects.</p>
<p>Simply type <code>gitpod.io/#</code> in front of any Bitbucket repository URL, and get a fully prebuilt and ready-to-code dev environment in seconds.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/hIpFTGwsv-o?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 class="${"h1"}">Getting Started with Gitpod for Bitbucket</h2>
<p>Starting a fresh dev environment for a Bitbucket project works just as with GitLab and GitHub: Simply prefix your Bitbucket project URL with <code>gitpod.io/#</code>.</p>
<p>For example, you could try opening this Spring PetClinic (Java) repository in Gitpod:</p>
<p><a href="${"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic"}" rel="${"nofollow"}">https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic</a></p>
<p>For more convenience, you can also install Gitpod\u2019s browser extension (for <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chrome</a> and <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a>), which will add a <code>Gitpod</code> button to all Bitbucket projects.</p>
<p>Gitpod also supports other types of Bitbucket URLs, like:</p>
<ul><li><p>Opening file URLs</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/src/master/src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/.../petclinic/PetClinicApplication.java</a></p></li>
<li><p>Opening branches</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/src/my-branch/"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/src/my-branch/</a></p></li>
<li><p>Opening issues</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/issues/1/make-first-name-optional"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/issues/1/make-first-name-optional</a></p></li>
<li><p>Opening pull requests</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/pull-requests/1/allow-omitting-first-name/diff"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/pull-requests/1/allow-omitting-first-name/diff</a></p></li></ul>
<p>Depending on the context, your dev environment will be initialized differently.</p>
<p>For instance, if you start a workspace from the issue context above, you\u2019ll get a fresh workspace with a new local branch based on the repository\u2019s default branch (e.g. <code>master</code>).</p>
<p>The new local branch will be named like <code>&lt;username&gt;/&lt;issue-title&gt;-&lt;issue-nr&gt;</code>, in my case it is:
<code>svenefftinge/allow-skip-first-name-1</code> (if the issue title is too long, only the first few words will be included in the branch name).</p>
<p><img src="${"/images/blog/gitlab-support/gitlab-issue-context-status.png"}" alt="${"GitLab Issue Context"}"></p>
<h3 class="${"h2"}">Configure your project</h3>
<p>To get the most out of Gitpod, you should describe your project\u2019s dev environment with code. Dev environments are based on containers which you can configure through a custom <code>Dockerfile</code>.</p>
<p>Furthermore you can specify which tasks should run after a fresh checkout in a <code>.gitpod.yml</code> file. Usually these tasks include build steps, downloading dependencies and running some unit tests. Read the section below on prebuilds to make Gitpod automatically run these steps ahead of time, as a CI pipeline whenever some changes are pushed to your project.</p>
<p>There is much more you can do to make sure every team member gets a ready-to-code dev environment when they need one. Please refer to the <a href="${"/docs/configure"}">docs</a> for details.</p>
<h3 class="${"h2"}">Prebuilds</h3>
<p>Gitpod\u2019s <a href="${"/docs/prebuilds"}">prebuilt workspaces</a> are key to providing ephemeral, ready-to-code dev environments for your branches and projects. You can configure Gitpod to run your project\u2019s build asynchronously every time someone pushes new commits or branches to your repository. So when a developer wants to start coding, she can start immediately, because everything is already prepared.</p>
<p>Enabling prebuilds on your Bitbucket project is done by configuring a Webhook. This can be done automatically: Just trigger the first prebuild on your project manually, and Gitpod will take it from there. To do that, use the prefix <code>https://gitpod.io/#prebuild/</code>, as in</p>
<blockquote><p><strong><a href="${"https://gitpod.io/#prebuild/"}" rel="${"nofollow"}">https://gitpod.io/#prebuild/</a></strong><code>https://bitbucket.org/&lt;myuser&gt;/&lt;myrepo&gt;</code></p></blockquote>
<h2 id="${"we-need-your-feedback"}">We Need Your Feedback<a href="${"#we-need-your-feedback"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you have ideas how Gitpod can be improved for you, or if you notice a bug, please always feel free to <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">reach out</a>. We would also be glad to welcome you in our <a href="${"https://community.gitpod.io"}" rel="${"nofollow"}">community</a>. \u2764\uFE0F</p>`
  })}`;
});
var bitbucket = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Bitbucket,
  metadata: metadata$34,
  prerender: prerender$3g
});
const metadata$33 = {
  author: "jankeromnes",
  date: "Wed Jan 8 2020 09:00:00 GMT+0000 UTC",
  excerpt: "Are you tired of apt-get? Can\u2019t use sudo right now? ... You can now \u2019brew install anything\u2019 in Gitpod! \u{1F389}",
  image: "teaser-brew.png",
  slug: "brew",
  subtitle: "'brew install anything' in Gitpod",
  teaserImage: "teaser-brew.png",
  title: "Gitpod \u2764\uFE0F Homebrew"
};
const prerender$3f = true;
const Brew = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$33), {}, {
    default: () => `<p>Are you tired of <strong>apt-get</strong>? Can\u2019t use <strong>sudo</strong> right now? \u2026</p>
<h2 id="${"you-can-now-brew-install-anything-in-gitpod-"}">You can now \u2019<strong>brew install anything</strong>\u2019 in Gitpod! \u{1F389}<a href="${"#you-can-now-brew-install-anything-in-gitpod-"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>\u2713 Easily install any Linux tool or package with one command</li>
<li>\u2713 Doesn\u2019t require <code>sudo</code> permission</li>
<li>\u2713 Works in your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> or directly in Gitpod\u2019s Terminal</li></ul>
<p>If you use a Mac, or have friends who use a Mac, you\u2019ve probably heard of the trusty <a href="${"https://brew.sh/"}" rel="${"nofollow"}">brew</a> command which allows you to install pretty much any software, from <code>git</code> to <code>clang</code> to <code>htop</code>.</p>
<p>Homebrew is quite convenient, and its packages are very well maintained: You\u2019ll usually get the latest stable version of any tool (e.g. Git <code>2.24.1</code>) while other package managers can typically lag several versions behind (e.g. Ubuntu 18.04 only gives you Git <code>2.17.1</code> by default).</p>
<p>What you may not necessarily know is that Homebrew now works on Linux too (it was originally announced as \u201CLinuxbrew\u201D, but now it\u2019s just called <a href="${"https://docs.brew.sh/Homebrew-on-Linux"}" rel="${"nofollow"}">Homebrew on Linux</a>). This got us pretty excited, because we saw it as an opportunity for developers to easily install any software package in Gitpod, without needing to set up a Dockerfile and then fire up another workspace to test it. With Homebrew you can simply run <code>brew install z</code> and get going!</p>
<p>We\u2019ve pre-installed <code>brew</code> for all Gitpod workspaces (using <a href="${"https://github.com/gitpod-io/workspace-images/blob/d353ffe08c602095a8f3df7d690934c25643a6ca/full/Dockerfile#L104-L107"}" rel="${"nofollow"}">workspace-full</a>) and now that we\u2019ve played with it for a while and are happy with the experience, we\u2019re excited to announce it so that you can try it too:</p>
<ol><li>Just open any repository in Gitpod (e.g. the <a href="${"https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}">Spring PetClinic</a>)</li>
<li>Try running <code>brew install fzf</code> (this should give you the awesome <a href="${"https://github.com/junegunn/fzf"}" rel="${"nofollow"}">fzf</a> tool)</li></ol>
<p><img src="${"/images/blog/brew/homebrew-in-gitpod.png"}" alt="${"Homebrew in Gitpod screenshot"}"></p>
<p>Here are a couple details to be aware of:</p>
<ul><li><p>Packages installed with <code>brew</code> have a low priority in the <code>$PATH</code>. This means that if you <code>brew install</code> a package that already exists in Gitpod, you\u2019ll just continue using the old package. If you don\u2019t like that, simply <code>apt-get remove</code> the old package in your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>.</p></li>
<li><p><code>brew</code> installs everything under <code>/home/linuxbrew/</code>, but Gitpod only backs up your Docker image plus everything inside <code>/workspace/</code>. This means that if you <code>brew install fzf</code> in a Gitpod terminal, and then your workspace stops running, when you restart it later the package <code>fzf</code> will be gone. If that\u2019s a problem, simply move the <code>brew install fzf</code> command into your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> to make it permanent.</p></li></ul>
<p>We hope this feature makes you as happy as it made us! Please share any <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">feedback, thoughts</a> or <a href="${"https://github.com/gitpod-io/gitpod/issues/new/choose"}" rel="${"nofollow"}">bugs</a> you found.</p>`
  })}`;
});
var brew = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Brew,
  metadata: metadata$33,
  prerender: prerender$3f
});
const metadata$32 = {
  author: "anudeepreddy",
  date: "Wed Jun 26 2019 11:57:00 GMT+0000 (UTC)",
  excerpt: "Build your webhook for your Google Assistant action and host it temporarily on Gitpod and test your code.",
  image: "Build-and-test-your-webhook.png",
  slug: "build-a-webhook-for-google-assistant",
  subtitle: "Build and test your webhook using Gitpod",
  title: "Build a Webhook for Google Assistant Action",
  url: "https://blog.anudeepreddy.ml/build-a-webhook-for-google-assistant/"
};
const prerender$3e = true;
const Build_a_webhook_for_google_assistant = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$32), {}, {
    default: () => `<p>This post is all about how to build your webhook for your Google Assistant action and host it temporarily on Gitpod and test your code.</p>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Node JS</li>
<li>Express JS</li>
<li>Basics on how to use Github</li></ul>
<p>If you have these in place, Let\u2019s get started.</p>
<h2 id="${"what-is-gitpod"}">What is Gitpod?<a href="${"#what-is-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>First of all I would like to start this section by saying, I \u2764 Gitpod. Gitpod is an online IDE for Github. Gitpod provides you with a fully working development environment, including a VS Code-powered IDE and a cloud-based Linux container configured specifically for the project at hand. Just prefix your Github repo URL with \u201D<a href="${"https://gitpod.io/#%22"}" rel="${"nofollow"}">https://gitpod.io/#\u201D</a>, So that the final link looks something like this \u201D<a href="${"https://gitpod.io/#https://github.com/"}" rel="${"nofollow"}">https://gitpod.io/#https://github.com/</a><username>/<repo-name>\u201D or you can also use the Gitpod <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki?hl=en"}" rel="${"nofollow"}">browser extension</a> to add the Gitpod button to Github page.</repo-name></username></p>
<iframe width="${"560"}" height="${"315"}" src="${"https://www.youtube.com/embed/bFZMKpDV3GQ"}" frameborder="${"0"}" allow="${"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"}" title="${"Gitpod Always Ready-to-Code video"}" allowfullscreen></iframe>
<h2 id="${"lets-start-building"}">Let\u2019s start building<a href="${"#lets-start-building"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>I have created a Github repo which will help you get started without any hassle. The repo is basically a boilerplate to get started with building your webhook. The code is written in Node JS, So it would be easier for you to build on top of it if you are already familiar with Node JS. We will be using the <a href="${"https://www.npmjs.com/package/actions-on-google"}" rel="${"nofollow"}">action-on-google</a> Node JS library (This client library makes it easy to create Actions for the Google Assistant and supports Dialogflow, Actions SDK, and Smart Home fulfillment.).</p>
<h3 id="${"create-your-action"}">Create your Action<a href="${"#create-your-action"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Head over to <a href="${"https://console.actions.google.com/"}" rel="${"nofollow"}">https://console.actions.google.com/</a> and click on New Project.</li></ul>
<p><img src="${"https://res-2.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-28-141627.png"}" alt="${"Google Actions Console"}"></p>
<ul><li>Enter your project name and click on create project.</li></ul>
<p><img src="${"https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/gitpod-action.png"}" alt="${"Google Actions Create New Project Prompt"}"></p>
<ul><li>Now select a category for your Action.</li>
<li>Now under the Develop menu, give your action a name.</li>
<li>Now head over to actions menu in Develop tab and click on <strong>Add your first action</strong>.</li></ul>
<p><img src="${"https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/temp2.png"}" alt="${"'Add your first action' button"}"></p>
<ul><li>In the next section choose <strong>custom intent</strong> and click on <strong>build</strong>. Doing this will redirect you to the <strong>Dialogflow console</strong> and it should look something like this.</li></ul>
<p><img src="${"https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/temp3.png"}" alt="${"Dialogflow console"}"></p>
<ul><li>Click on create to <strong>create</strong> your agent on Dialogflow.</li>
<li>Once your agent is ready, you will already have two default Intents (Default Fallback Intent and Default Welcome Intent) in place and these two do pretty good at their job.</li>
<li>Now it\u2019s time to create a new intent and enable fulfillments for that intent so that we can serve responses from the webhook that we will be building in the next section.</li>
<li>Click on create a new intent, give it a name and training phrase (training phrase will be used to invoke the intent). Now that your intent is almost ready scroll down and under fulfillments <strong>enable webhook call</strong> for the new Default welcome intent and the new intent you just created.</li></ul>
<h3 id="${"understanding-gitpodyml"}">Understanding .gitpod.yml<a href="${"#understanding-gitpodyml"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The .gitpod.yml file is used to automate setting up the environment required to run your app.</p>
<p><img src="${"https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--4-.png"}" alt="${".gitpod.yml environment setup for running your app"}"></p>
<p>If you want to access services running in your workspace, e.g. a development HTTP server on port 8080, you need to expose that port first. Gitpod has two means of doing that:</p>
<ol><li>On-the-fly: when you start a process which listens on a port in your workspace, Gitpod will ask you if you want to expose that port to the internet.</li>
<li>In your configuration: if you already know that you want a particular port exposed, you can configure it in the .gitpod.yml file and skip the extra click later on. For example:</li></ol>
<pre class="${"language-null"}">${`<code class="language-null">ports:
  - port: 3000</code>`}</pre>
<p>When starting or restarting a workspace you typically want to run certain tasks. Most probably that includes the build and maybe also running tests and automatically start the application in e.g. a dev server.</p>
<p>Gitpod allows you to configure start tasks in the .gitpod.yml file.</p>
<p>For instance, the start script for this repository is defined as:</p>
<pre class="${"language-null"}">${`<code class="language-null">tasks:
- init: npm install
  command: npm start</code>`}</pre>
<p>You can have multiple tasks, which are opened on separated terminals.</p>
<pre class="${"language-null"}">${`<code class="language-null">tasks:
- init: npm install
  command: npm start
- command: echo -e &quot;&#92;n&#92;nwebhook url - $(gp url 3000)/webhook &#92;n&#92;nCopy and paste this url in the Dialogflow console&quot;</code>`}</pre>
<h4 id="${"init-command"}"><code>init</code> command<a href="${"#init-command"}"><span class="${"icon icon-link"}"></span></a></h4>
<p>The init property can be used to specify shell commands that should only be executed after a workspace was freshly cloned and needs to be initialized somehow. Such tasks are usually builds or downloading dependencies. Anything you only want to do once but not when you restart a workspace or start a snapshot.</p>
<p>In our case the <code>init</code> command is</p>
<pre class="${"language-null"}">${`<code class="language-null">tasks:
- init: npm install</code>`}</pre>
<h3 id="${"get-the-gitpod-setup-running"}">Get the Gitpod setup running<a href="${"#get-the-gitpod-setup-running"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Fork my <a href="${"https://github.com/anudeepreddy/dialogflow-webhook-boilerplate-nodejs"}" rel="${"nofollow"}">repo (dialogflow-webhook-boilerplate-nodejs)</a> <strong>or</strong> just click on the run in gitpod button in my repo. (If you do this you have to fork it from the workspace so that you can commit your own changes to your repo).</li>
<li>Now you can just prefix your repo url with \u201D<a href="${"https://gitpod.io/#%22"}" rel="${"nofollow"}">https://gitpod.io/#\u201D</a>. This should take you to Gitpod and start your workspace. The workspace take a little while to start.</li>
<li>Once the workspace is running you should see something like this.</li></ul>
<p><img src="${"https://res-2.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-25-171555.png"}" alt="${"Gitpod Workspace"}"></p>
<ul><li>If you notice the Node app is already running in the first terminal. This is automated by a Gitpod configuration file. And the webhook URL is printed on to the second terminal. All the dependencies that are required are also installed while creating the workspace.</li></ul>
<p><img src="${"https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-25-171555-crop.png"}" alt="${"Gitpod integrated Linux Terminals"}"></p>
<ul><li>Now that the webhook is running and i presume that you already have your agent on Dialogflow (If not create an agent), Next thing you need to do is to copy the webhook URL from the terminal and paste it in the Fulfillments section in the Dialogflow Console.</li></ul>
<p><img src="${"https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-25-172359.png"}" alt="${"Dialogflow console Fullfillments section"}"></p>
<ul><li>Open the index.js file which contains the code for the webhook.</li></ul>
<p><img src="${"https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--1-.png"}" alt="${"File index.js which contains the source code for the webhook"}"></p>
<p>The file initially contains this code. Now lets add some more code to it to display a card when we invoke the new intent we created in the previous section.
actions-on-google library provides many functionalities to can simplify your task to render rich responses in your action.</p>
<p>We will be adding the following code to display a card when the new intent is invoked.</p>
<p><img src="${"https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--3-.png"}" alt="${"Code to display a card when the new intent is invoked"}"></p>
<p>Replace the URL\u2019s and other contents in the code and stop the previous instance of the app from running and start it again after you have made changes to the code by running <code>npm start</code> in the terminal.</p>
<ul><li>To test your action you can click on <strong>See how it works in Google Assistant</strong> in the Dialogflow console.</li></ul>
<p><img src="${"https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-28-175558.png"}" alt="${"See how it works in Google Assistant"}"></p>
<ul><li>Invoking the intent would give you response similar to this.</li></ul>
<p><img src="${"https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Screenshot_20190628-181019.png"}" alt="${"Response on invoking the intent"}"></p>
<p>Refer to the links below to add your own functionalities.</p>
<h2 id="${"links-to-refer"}">Links to Refer<a href="${"#links-to-refer"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>If you would like to learn more about the actions-on-google library, you can find it here - <a href="${"https://www.npmjs.com/package/actions-on-google"}" rel="${"nofollow"}">https://www.npmjs.com/package/actions-on-google</a></li>
<li>Go through these examples - <a href="${"https://developers.google.com/assistant/conversational/df-asdk/samples/github"}" rel="${"nofollow"}">https://developers.google.com/assistant/conversational/df-asdk/samples/github</a></li>
<li>Rich responses example - <a href="${"https://github.com/actions-on-google/dialogflow-conversation-components-nodejs"}" rel="${"nofollow"}">https://github.com/actions-on-google/dialogflow-conversation-components-nodejs</a></li></ul>
<h2 id="${"conclusion"}">Conclusion<a href="${"#conclusion"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod can make your life much simpler by automating your development setup just by adding a simple configuration file to your repo. You can refer to the Gitpod <a href="${"https://www.gitpod.io/docs"}" rel="${"nofollow"}">Docs</a> to learn more about the platform. Gitpod lets you work with unlimited workspace but with 100hrs/month runtime. It also provides Personal and unlimited plans as well. If you are a student then you can claim Gitpod Unlimited plan for just $9.</p>
<p><img src="${"https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/character.gif"}" alt="${"Animated character waving hand with a smile"}"></p>
<h1>Happy coding with Gitpod \u2728</h1>`
  })}`;
});
var buildAWebhookForGoogleAssistant = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Build_a_webhook_for_google_assistant,
  metadata: metadata$32,
  prerender: prerender$3e
});
const metadata$31 = {
  author: "svenefftinge",
  date: "Wed Aug 07 2019 11:57:00 GMT+0000 (UTC)",
  excerpt: "Continuous dev environments reduce friction in onboarding and task switching and improves reproducibility across the project.",
  image: "devops.jpg",
  slug: "continuous-dev-environment-in-devops",
  subtitle: "The Missing Piece in DevOps?",
  teaserImage: "devops.jpg",
  title: "Continuous Dev Environments"
};
const prerender$3d = true;
const Continuous_dev_environment_in_devops = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$31), {}, {
    default: () => `<p><a href="${"https://en.wikipedia.org/wiki/DevOps"}" rel="${"nofollow"}">DevOps</a> has been all the rage for the last couple of years. Today, something like GitHub / GitLab with Continuous Integration seems to be the absolute minimum for a decent development toolchain. Such tools allow faster feedback cycles, better reproducibility, and generally more productivity.</p>
<blockquote><p>However, in one crucial aspect most of us are still wasting many hours every day.</p></blockquote>
<p>Getting our dev environments into a ready-to-code state is usually still done manually, wasting an endless amount of precious developer time and energy.</p>
<blockquote><p>Dev environment provisioning can and should be automated.</p></blockquote>
<p><strong>Continuous dev environments</strong> are a crucial part in a fully optimized DevOps toolchain, that allow to instantaneously spin up a ready-to-code development environment from any git state. Continuous dev environments reduce friction in onboarding and task switching and improves reproducibility across the project.</p>
<h2 id="${"automated-dev-environments"}">Automated Dev Environments<a href="${"#automated-dev-environments"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Automating dev environments is not new and usually focusses on the initial setup, but that doesn\u2019t quite cut it. Of course, we all have felt the pain of being on-boarded in a new project, spending the first week figuring out what tools to install and how to configure them correctly. Manually setting up a dev environment is a waste of energy. Surprising that we still do such things, given that we developers are usually busy automating everything else in the world.</p>
<p><img src="${"/images/blog/continuous-dev-environment-in-devops/gears.jpg"}" alt="${"disposable dev environments"}"></p>
<p>But it is not only the one-off onboarding I want to discuss. Our projects change over time, and so do our dev environments. Developers are switching between different versions of a project. They, therefore, have to adjust parts of the dev environment accordingly, all the time.</p>
<p>We should automate dev environments using code, just as we do with testing, staging and production environments for continuous deployments.</p>
<blockquote><p>When a developer wants to start a task, on some branch, in some project, she should be able to do so without spending hours on getting into the right environment.</p></blockquote>
<h2 id="${"disposable-dev-environments"}">Disposable Dev Environments<a href="${"#disposable-dev-environments"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Automating a dev environment means we can recreate it any time. Starting fresh every time will make sure the setup works correctly and that you get a clean state.\xA0Since the build and the tests ran through and the dependencies are all fresh, you can be sure that any problems come from your changes. Such a setup makes it super easy to reproduce bugs, as well.</p>
<p><img src="${"/images/blog/continuous-dev-environment-in-devops/same-shoes.jpg"}" alt="${"Self-service rack with available pairs of bowling shoes"}"></p>
<p>Moreover, a use-once dev environment frees you from cleaning up afterward. You never pollute your local system with any heavy checkouts, dependencies, builds, databases, and the like. Enter zero-waste coding.</p>
<p>It\u2019s almost 2020 and we understand that automating complex systems through code and configuration is vital. Now, let\u2019s apply those lessons learned to our dev environments.</p>
<h2 id="${"prebuilt-dev-environments---no-more-waiting-for-builds"}">Prebuilt Dev Environments - No More Waiting for Builds!<a href="${"#prebuilt-dev-environments---no-more-waiting-for-builds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Initial setups are annoying, but the real time sink is <a href="${"/blog/prebuilds"}">waiting for builds</a>. Compilers, generators, downloading dependencies, and running tests all need to be executed before you can use your dev environment.</p>
<p>Just like CI tools that build your project after you have submitted a change, a continuous dev environment service builds your project <strong>before</strong> you need it. That way you can start on a clean state immediately.</p>
<blockquote><p>A tool for providing continuous automated dev environments should prebuild your project, so you don\u2019t have to wait.</p></blockquote>
<p>Gitpod prebuilds your branches continuously, so that you can start coding immediately without having to wait for builds to complete. Starting a new dev environment and seeing below output in the terminal makes me smile every time:</p>
<p><img src="${"/images/blog/continuous-dev-environment-in-devops/prebuilds.png"}" alt="${"\u{1F34C} This task ran as part of a workspace prebuild. \u{1F389} You just saved 5 minutes of watching your code build."}"></p>
<p>Try below\u2019s example to see the effect of prebuilds in action. \u{1F447}</p>
<h2 id="${"browser-based-dev-environments"}">Browser-based Dev Environments?<a href="${"#browser-based-dev-environments"}"><span class="${"icon icon-link"}"></span></a></h2>
<blockquote><p>\u201CBrowser-based? I need professional tools!\u201D</p></blockquote>
<p>Yes, I hear you. Until recently, browser-based tools haven\u2019t been as powerful as what we use locally.</p>
<p>But times have changed. Today, <a href="${"https://theia-ide.org"}" rel="${"nofollow"}">we can run a VS Code compatible IDE in a browser tab</a> together with complete terminals to dedicated Linux containers. And everything is specially configured for your project.</p>
<p>The Theia IDE open-source project is fully configured with continuously prebuilt dev environments. You can try it out yourself by clicking the link below.</p>
<blockquote><p><a href="${"https://gitpod.io/#https://github.com/theia-ide/theia"}" rel="${"nofollow"}">https://gitpod.io/#https://github.com/theia-ide/theia</a></p></blockquote>
<p><img src="${"/images/blog/continuous-dev-environment-in-devops/theia.png"}" alt="${"Theia in Gitpod"}"></p>
<h2 id="${"but-my-environment-is-different-than-those-from-my-teammates"}">But my environment is different than those from my teammates!<a href="${"#but-my-environment-is-different-than-those-from-my-teammates"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Yes, of course, there are personal preferences like themes, keybindings, or even one or the other tool. Some developers heavily use command-line tools and have very advanced configurations. Others use particular VS Code extensions that improve their workflow significantly.</p>
<p><img src="${"/images/blog/continuous-dev-environment-in-devops/share.jpg"}" alt="${"Individual"}"></p>
<blockquote><p>Why don\u2019t we share all that goodness within the team?</p></blockquote>
<p>While <a href="${"/"}">Gitpod</a> lets you have user-specific settings, we see an opportunity in sharing the wisdom within the team to <strong><em>build a perfect, friction-free setup for everyone</em></strong>. This way, you can share your impressive terminal skills and configuration with your team, and you might learn a new thing or two as well.</p>
<h2 id="${"the-missing-piece-in-devops"}">The missing piece in DevOps<a href="${"#the-missing-piece-in-devops"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>I\u2019m pretty sure, automated ready-to-code dev environments will become mainstream. The advantages and implications are just too good to be ignored. Everyone who has understood and experienced the benefits of a proper DevOps toolchain should understand how providing dev environments on-demand completes that experience. Ironing out that last area of non-reproducible and very annoying yak-shaving should be high on our todo list as it will improve developer productivity drastically.</p>
<p>Gitpod is available <a href="${"/pricing"}">to open-source projects for free and affordable for commercial projects</a>, through the Saas offering (<a href="${"http://www.gitpod.io"}" rel="${"nofollow"}">www.gitpod.io</a>). <a href="${"/pricing#enterprise"}">Gitpod Enterprise</a> will soon be released, allows self-hosting Gitpod on any Kubernetes cluster, and integrates with GitHub Enterprise, GitLab, Jenkins, JIRA and other tools in your DevOps toolchain.</p>
<p><a href="${"https://dev.to/svenefftinge/continuous-dev-environments-the-next-step-in-devops-4ab7"}" rel="${"nofollow"}">Comments?</a></p>`
  })}`;
});
var continuousDevEnvironmentInDevops = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Continuous_dev_environment_in_devops,
  metadata: metadata$31,
  prerender: prerender$3d
});
const metadata$30 = {
  author: "svenefftinge",
  date: "Mon Nov 19 2018 15:39:56 GMT+0000 (UTC)",
  excerpt: "Imagine that only a decade ago system administrators deployed, configured, and maintained software systems manually.",
  image: "dev-env-gilbert.png",
  slug: "dev-env-as-code",
  subtitle: "How to streamline developer onboarding",
  title: "Dev environments as code",
  url: "dev-env-gilbert.gif"
};
const prerender$3c = true;
const Dev_env_as_code = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$30), {}, {
    default: () => `<p><img src="${"/images/blog/dev-env-as-code/dev-env-gilbert.gif"}" alt="${"Source: http://dilbert.com/strip/2017-01-02"}"></p>
<p>Imagine that only a decade ago system administrators deployed, configured, and maintained software systems manually. Doing so burned an endless amount of their precious lifetimes and energy.</p>
<p>Today, in the age of microservice architectures, systems have become even more complicated. Trying to maintain operations and deployments by hand isn\u2019t optional anymore. These days we do \u201CDevOps\u201D or \u201CInfrastructure as code\u201D. We have learned that describing a software system in a declarative and formal way is mandatory to deploy applications automatically and continuously.</p>
<h2 id="${"what-about-our-dev-environments"}"><strong>What about our dev environments?</strong><a href="${"#what-about-our-dev-environments"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While we have automated deployments of our applications, most of us don\u2019t apply the same techniques to development environments, yet. Instead, on-boarding a new team member on any non-trivial project usually is a multiple hour (if not days) exercise.</p>
<p>It often goes like that:</p>
<ol><li><p><strong>A new developer gets pointed to the readme</strong></p></li>
<li><p><strong>Reads lengthy, mostly outdated setup procedure</strong></p></li>
<li><p><strong>Installs requirements on the developer machine,
updates/downgrades versions, etc.</strong></p></li>
<li><p><strong>Tries to run the build \u2026 waits 20 minutes</strong></p></li>
<li><p><strong>Build Fails. Try figure out what went wrong.</strong></p></li>
<li><p><strong>Asks colleague. \u201COh, yes. You also need to do X &amp; Y\u201D</strong></p></li>
<li><p><strong>goto 3</strong></p></li></ol>
<p>After many iterations at some point, the build somehow works. You don\u2019t know why, but that doesn\u2019t matter now. Of course, you are not updating the document, as you are not sure and don\u2019t know how you ended up with a working setup. Is that current state even reproducible? So if you update the readme, you better only add what you figured out. You don\u2019t dare to remove parts that you didn\u2019t understand or skipped because they didn\u2019t work for you.</p>
<p>Too bad the setup only worked on first glance. During the following weeks, you will have to solve smaller issues here and there and add some tools that were not listed. Maybe debugging doesn\u2019t work yet, or you don\u2019t see the sources from upstream dependencies. Eventually, it smoothes out. Only when a colleague changes something in the requirements, it usually takes two days until the whole team has noticed and changes their environments accordingly.</p>
<p>Unfortunately, the pain doesn\u2019t stop here.</p>
<h2 id="${"it-works-on-my-machine"}"><strong>It works on my machine</strong><a href="${"#it-works-on-my-machine"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You probably know the famous phrase \u201CIt works on my machine\u201D? The situation when a bug only appears on one machine and is hard to reproduce on others? <strong>That feeling when a bad thing happens in production, but you can\u2019t reproduce it locally?</strong> Not very surprising, though, as long you are running the code on a different platform based on a different setup.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2000/1*I3-fRXyMaZDfesAxyA2eKw.jpeg"}" alt="${"But it works... On my machine"}"></p>
<h2 id="${"going-back-to-fix-something-on-an-old-branch"}"><strong>Going back to fix something on an old branch</strong><a href="${"#going-back-to-fix-something-on-an-old-branch"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Another pet peeve is when you need to fix something on a maintenance branch. Fixing the actual bug could have been so easy, as you know how to fix it. However, before you can call it done you need to be able to build and test that old beast. This is costing you an endless amount of time.</p>
<p>Tinkering with a six months old technology stack can be so annoying. You have to deal with all those old libraries and versions of them. However, you still have to make it work somehow.</p>
<p><img src="${"/images/blog/dev-env-as-code/jeeshoots.jpeg"}" alt="${"Woman biting a pen in front of a laptop"}"><em>Photo by <a href="${"https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral"}" rel="${"nofollow"}">JESHOOTS.COM</a> on <a href="${"https://unsplash.com?utm_source=medium&utm_medium=referral"}" rel="${"nofollow"}">Unsplash</a></em></p>
<p>All this suffering can end if we applied the \u2018infrastructure as code\u2019 idea to our dev environments, too. Why not make dev environment setups automated, reliably reproducible, and versioned by writing them down in an executable format and checking them into the project\u2019s source code repository?</p>
<h2 id="${"dev-environment-as-code"}"><strong>Dev environment as code</strong><a href="${"#dev-environment-as-code"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>After all, dev environments are often even more complicated than the runtime application they are used for. You typically need to add all the development tools such as build tools, compilers, linters, and a decent editor / IDE on top of the runtime requirements.</p>
<p>If you want to ensure that changes don\u2019t break anything down the line, everybody needs to code, run, and test on the same environment the CI builds run on.</p>
<p>So let\u2019s please stop polluting our readme files and start writing setup instructions down formally, so they can be executed.</p>
<h3 id="${"dockerfiles"}">Dockerfiles<a href="${"#dockerfiles"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Docker files are a pretty neat way to describe a development environment. Imagine you want to add something like \u2018<em>asciidoctor</em>\u2019 to your project\u2019s toolchain. You could just add the following line to your dev environment\u2019s Dockerfile:</p>
<p>RUN apt-get install -y asciidoctor</p>
<p>Once you push the change to the repository and the docker image gets updated (automatically), all team members have the new tool in their development environment. We need to get to coding with a single click.</p>
<p><img src="${"/images/blog/dev-env-as-code/clement-h.jpeg"}" alt="${"Laptop with code on the screen"}"><em>Photo by <a href="${"https://unsplash.com/@clemhlrdt?utm_source=medium&utm_medium=referral"}" rel="${"nofollow"}">Cl\xE9ment H</a> on <a href="${"https://unsplash.com?utm_source=medium&utm_medium=referral"}" rel="${"nofollow"}">Unsplash</a></em></p>
<h3 id="${"automated-ide-setup"}"><strong>Automated IDE Setup</strong><a href="${"#automated-ide-setup"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The Docker approach gets a bit clumsy if your development tools have a UI such as a desktop IDE. You can package them in Docker, but you have to expose the IDE\u2019s UI through X11. Another alternative is to go with a terminal editor like vim, but of course, that is not an option for most of us.</p>
<p>Some desktop IDEs have tools that allow automating setups. Eclipse, for instance, has a tool called Oomph. Oomph allows you to declaratively describe an Eclipse IDE including plug-ins, configuration and even workspace setup. (i.e. git information).</p>
<p>By far the best option is an IDE that runs in browsers, like the new <a href="${"https://theia-ide.org"}" rel="${"nofollow"}">Theia I</a>DE. Theia is open-source under the Eclipse Foundation. It can be seen as VS Code that runs on browsers and desktops and is a bit more customizable.</p>
<p>For a simple Docker-based dev environment you could add Theia to your Docker image. It offers a full IDE including terminals to your workspace image.</p>
<p>The next step would be to treat your development environment as some serverless function which you only spawn when needed and forget about when done. The online service <a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">Gitpod</a> does exactly that.</p>
<p>It integrates with code hosting platforms such as GitHub. It eliminates all the tedious transitions by automating them. You see code on some website and want to give it a spin in a real dev environment? Gitpod does everything it can to get you there with a single click. It lets you provide custom Docker files or Docker images and runs Theia IDE.</p>
<h2 id="${"summary"}"><strong>Summary</strong><a href="${"#summary"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Applying the lessons learned from DevOps to our development setup can save us so much precious time and energy. <a href="${"https://www.activestate.com/developer-survey-2018-open-source-runtime-pains/"}" rel="${"nofollow"}">ActiveState\u2019s Developer Survey 2018 </a>underlines this with some numbers:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3200/1*Vvl3N-1hDANiy15Pc9xeiQ.png"}" alt="${"ActiveState\u2019s Developer Survey 2018: How much time do you spent on managing dependencies and development tools"}"></p>
<p>Do we really need to welcome new colleagues or contributors with a painful on-boarding experience? Let\u2019s skip the prose in the <em>readme</em> and write code to have our dev environment setup <strong>automated, reproducible, and versioned.</strong></p>`
  })}`;
});
var devEnvAsCode = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Dev_env_as_code,
  metadata: metadata$30,
  prerender: prerender$3c
});
const metadata$2$ = {
  url: "https://medium.com/gitpod/developing-a-nuxt-js-app-entirely-in-your-browser-94e7525f5eca",
  date: "Fri Sep 21 2018 13:23:34 GMT+0000 (UTC)",
  author: "svenefftinge",
  title: "Developing a Nuxt.js app entirely in your browser",
  image: "developing-nuxtjs-in-a-browser.jpeg",
  excerpt: "A walkthrough to create a fully working Nuxt.js web application with only a browser, using Gitpod.io the online IDE for GitHub.",
  slug: "developing-nuxtjs-in-browser"
};
const prerender$3b = true;
const Developing_nuxtjs_in_browser = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2$), {}, {
    default: () => `<p>A walkthrough to create a fully working Nuxt.js web application with only a browser, using Gitpod.io the online IDE for GitHub.</p>
<p>Version 2.0 of <a href="${"https://medium.com/@nuxt_js/nuxt-js-2-0-webpack-4-esm-modules-create-nuxt-app-and-more-6936ce80d94c"}" rel="${"nofollow"}">Nuxt.js has just been released</a>. It comes with a convenient scaffolding tool that let\u2019s you get started in no time. In the following I will explain the steps necessary to create, run and <strong>develop a Nuxt.js application with only a browser using Gitpod.io</strong>.</p>
<h2 id="${"step-1-go-to-github-and-create-a-fresh-repository"}"><strong>Step 1: Go to GitHub and create a fresh repository.</strong><a href="${"#step-1-go-to-github-and-create-a-fresh-repository"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><a href="${"http://gitpod.io"}" rel="${"nofollow"}">Gitpod.io</a> uses GitHub as its dashboard. That means you start your workspaces from any states of any GitHub project. So new projects are created through GitHub, too:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2048/0*I9sury8siGTS6GtF"}" alt="${"GitHub Dashboard 'repositories' tab"}"></p>
<p>Clicking anywhere on Github\u2019s Octocat logo on the top left will bring you to your dashboard, where you can create a new repository.</p>
<p>Enter any name description, you can later change it.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3200/0*bY21cCYdJYoj7B48"}" alt="${"GitHub 'Create a new repository' page"}"></p>
<h2 id="${"step-2-start-a-gitpod-workspace"}"><strong>Step 2: Start a Gitpod workspace</strong><a href="${"#step-2-start-a-gitpod-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>From your newly created but still empty project you can now start a Gitpod workspace. To do so prefix the GitHub URL with <strong>gitpod.io/#</strong>:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2776/0*NjvEmIjiTVwbTIaA"}" alt="${"Start a new Gitpod workspace by prefixng the repo URL with gitpod.io#"}"></p>
<h2 id="${"step-3-run-yarn-create-nuxt-app"}"><strong>Step 3: Run <code>yarn create nuxt-app</code>.</strong><a href="${"#step-3-run-yarn-create-nuxt-app"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Now a workspace with an online IDE is started for you. It will open up the readme (if you have created one) and a terminal.</p>
<p>Using the terminal you can use create-nuxt-app to create an initial project:</p>
<pre class="${"language-null"}">${`<code class="language-null">**yarn create nuxt-app**</code>`}</pre>
<p>Now simply answer all the prompts as you want.</p>
<h2 id="${"step-4-allow-external-access-to-the-dev-server"}"><strong>Step 4: Allow external access to the dev server</strong><a href="${"#step-4-allow-external-access-to-the-dev-server"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By default the dev server doesn\u2019t allow external IPs. To change that so we can access the application running in our cloud container, we need to pass an additional argument to the dev command.</p>
<p>To do so open the package.json file and add the parameter</p>
<pre class="${"language-null"}">${`<code class="language-null">**\u2014-hostname 0.0.0.0**</code>`}</pre>
<p>as shown below:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2468/0*WrSSKAEkumvfIv6d"}" alt="${"package.json allow external access to the dev server"}"></p>
<h2 id="${"step-5-start-the-dev-server"}">Step 5: Start the dev server<a href="${"#step-5-start-the-dev-server"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Now we can start the dev server and see the application in action.</p>
<p>In the terminal type</p>
<pre class="${"language-null"}">${`<code class="language-null">**yarn dev**</code>`}</pre>
<p>A notification window will pop up asking you to either open the web app externally or in a view side-by-side to the editor area.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3200/0*psT2Ar8PKkWYVpKV"}" alt="${"Running app in the Gitpod workspace"}"><em>Running app in the Gitpod workspace</em></p>
<h2 id="${"bonus-points"}"><strong>Bonus Points</strong><a href="${"#bonus-points"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Now you can start changing the application and of course committing to your repo. Also you should consider adding a <em>.gitpod</em> file to the root directory, so the build and dev server automatically startup next time you open a Gitpod workspace.</p>
<p>Here\u2019s the contents:</p>
<pre class="${"language-null"}">${`<code class="language-null">ports:
    - port: 3000
    protocol: &quot;http&quot;
tasks:
    - command: |
        yarn install
        yarn dev</code>`}</pre>
<h2 id="${"dive-deeper-into-nuxtjs"}">Dive deeper into Nuxt.js<a href="${"#dive-deeper-into-nuxtjs"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Now you are all set to dive a bit deeper into Nuxt.js. Checkout the <a href="${"https://github.com/nuxt-community/awesome-nuxt"}" rel="${"nofollow"}">awesome-nuxt</a> repository or the <a href="${"https://nuxtjs.org/"}" rel="${"nofollow"}">website</a> for further tips and tutorials.</p>
<p>Have fun!</p>`
  })}`;
});
var developingNuxtjsInBrowser = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Developing_nuxtjs_in_browser,
  metadata: metadata$2$,
  prerender: prerender$3b
});
const metadata$2_ = {
  author: "christinfrohne, ghuntley",
  date: "Thursday, 3 Jun 2021 11:00:00 UTC",
  excerpt: "As part of Gitpod\u2019s Open-Source Sustainability Fund initiative attendees of DevX Conf were able to decide where $10,000 USD of funds (the profits from DevX Conf plus an additional donation by Gitpod) were to be distributed. Here's the breakdown how the fund was split and our retrospective on running our first-ever conference.",
  image: "teaser.png",
  slug: "devxconf-wrap",
  subtitle: null,
  teaserImage: "teaser.png",
  title: "DevX Conf wrap & distributing $10k of open-source funding"
};
const Devxconf_wrap = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2_), {}, {
    default: () => `<p>On April 28- 29 we hosted the <a href="${"http://www.devxconf.org"}" rel="${"nofollow"}">DevX Conference</a>, a space where creators could collaborate, listen, discuss and declutter dev workflows, toolchains and minds. To improve developer experience. We wanted to foster an ecosystem that sparks dialogue and establishes best practices and frameworks across the areas of coding, testing, building, deploying, collaborating on, and running software.</p>
<p>Speakers included <a href="${"https://twitter.com/jasoncwarner"}" rel="${"nofollow"}">Jason Warner</a> (CTO Github), <a href="${"https://twitter.com/beyang"}" rel="${"nofollow"}">Beyang Liu</a> (CTO Sourcegraph), <a href="${"https://twitter.com/starbuxman"}" rel="${"nofollow"}">Josh Long</a> (Spring), <a href="${"https://www.linkedin.com/in/shaneak/"}" rel="${"nofollow"}">Shanea Leven</a> (Founder Codesee), <a href="${"https://twitter.com/ellenchisa"}" rel="${"nofollow"}">Ellen Chisa</a> (Founder Darklang), <a href="${"https://twitter.com/left_pad"}" rel="${"nofollow"}">Henry Zhu</a> (Steward of BabelJS), <a href="${"https://twitter.com/arcanis"}" rel="${"nofollow"}">Ma\xEBl Nison</a> (Creator Yarn), <a href="${"https://twitter.com/dabit3"}" rel="${"nofollow"}">Nader Dabit</a> (GraphQL &amp; Serverless), <a href="${"https://www.linkedin.com/in/anuragoel/"}" rel="${"nofollow"}">Anurag Goel</a> (Founder Render), <a href="${"https://github.com/xcv58"}" rel="${"nofollow"}">Yihong Cheng</a> (Github1s), <a href="${"https://twitter.com/artman"}" rel="${"nofollow"}">Tuomas Artman</a> (Founder Linear) and many more.</p>
<h2 id="${"event-retrospective"}">Event retrospective<a href="${"#event-retrospective"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>First of all, we were amazed by the attention that was drawn by this topic. It was the first conference ever organized by this team and it was being driven by a Gitpod, a company that\u2019s still on the starting line of its potential. More than 1.5k curious minds signed up for the event and more than 40% of them attended the live conference. There, 28 great speakers shared their expertise and unique knowledge with us. In case you missed a talk or would like to see them again, all recordings are now available on YouTube. To provide a space for attendees and speakers to interact live during the talks, we created a discord server. In total 550+ users signed up to join the live discussions. If you haven\u2019t joined the channel yet and would like to stay connected with the community, <a href="${"https://www.gitpod.io/chat"}" rel="${"nofollow"}">you can still join</a>.</p>
<p><a href="${"https://twitter.com/mxstbr/status/1385511937845387269"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/devxconf-wrap/tweet-mxstbr.png"}" alt="${"I'm very glad developer experience is picking up so much steam that there's now a dedicated conference for it: http://devxconf.org. Not only that, Gitpod is donating all the commercial proceeds from sponsors to open source projects they rely on!! Exploding \u{1F92F}\u{1F44F}"}"></a></p>
<h2 id="${"event-highlights"}">Event Highlights<a href="${"#event-highlights"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are just a few highlights of the event:</p>
<ul><li>An interview with Erich Gamma, the lead developer of VS Code, about the <a href="${"https://www.youtube.com/watch?v=JiBUDS9odA8&list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&index=2&t=1277s"}" rel="${"nofollow"}">Evolution of DevX Conf</a></li>
<li>A talk by Ellen Chisa, the co-founder of Dark Lang, who discussed the hypothesis that <a href="${"https://www.youtube.com/watch?v=nPO4QL0Q85s&list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&index=4&t=17s"}" rel="${"nofollow"}">DevX isn\u2019t good, because developers don\u2019t want it to be</a></li>
<li>A talk about <a href="${"https://www.youtube.com/watch?v=0wRUU0ln9-0&list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&index=4&t=17s"}" rel="${"nofollow"}">being trapped in the open source supply chain</a> by Henry Zhu, the Steward of BabelJS</li></ul>
<p>All talks are now available for watching via this <a href="${"https://www.youtube.com/playlist?list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui"}" rel="${"nofollow"}">playlist on YouTube</a>.</p>
<h2 id="${"funding-open-source"}">Funding open source<a href="${"#funding-open-source"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><a href="${"https://twitter.com/yonchovski/status/1390659877740158976"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/devxconf-wrap/tweet-yonchovski.png"}" alt="${"\u{1F92F} @gitpod is starting an Open-Source Sustainability Fund to help FOSS maintainers. What is more amazing that based on voting, Emacs's lsp-mode received almost 3% of the initial pool from @devxconf! Check https://gitpod.io/blog/gitpod-open-source-sustainability-fund/ for more."}"></a></p>
<p>The truth is free software isn\u2019t free. How much is a task going to cost in person hours? Hours have rates. Rates require payment. Yet, an entire community of developers provide their services outside of their day job to produce tools consumed by businesses.</p>
<p>Did you know there are less than 2100 people in the inner GitHub open-source maintainer community?</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/maintainer-community.png"}" alt="${"Maintainer Community"}"></p>
<p><strong>At Gitpod, we often wonder what the future would look like if these high achievers that our digital society is built upon were empowered to become independent artists.</strong> If just one of those people can help more people better understand a technology or improve the developer experience for an entire ecosystem what is the worth/value of that and why isn\u2019t our industry doing that yet?</p>
<p>The word volunteer, by definition, means those who have the ability and time to give freely.</p>
<p>Paying for resources that are being consumed broadens the list of people who can do open-source. Additionally, money enables open-source maintainers to buy services and outsource the activities that do not bring them joy.</p>
<p>At Gitpod, we firmly believe that working for an open-source project should be a legitimate alternative to a career working for a for-profit corporation. Additionally, we\u2019d like everyone to be able to maintain open-source projects, not just people with the right financial background or youth that enables the ability to volunteer.</p>
<p>The myriad of tools that are relied upon by developers everyday are built and maintained almost exclusively by unpaid volunteers, and the maintainers of open-source projects, our digital infrastructure. Just like physical infrastructure, digital infrastructure needs regular upkeep and maintenance. Without effective support for open-source authors work, not only will their labor go uncompensated, but the digital world risks security breaches, interruptions in service, and slowed innovation.</p>
<p><img src="${"https://images.unsplash.com/photo-1555058948-15e4e2a1ba93?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80"}" alt="${"Credit: Sajjad Ahmadi"}">
<em>Credit: <a href="${"https://unsplash.com/photos/96m9K49qaPw"}" rel="${"nofollow"}">Sajjad Ahmadi</a></em></p>
<p>As part of Gitpod\u2019s <a href="${"/blog/gitpod-open-source-sustainability-fund/"}">Open-Source Sustainability Fund initiative</a> attendees of the DevX Conf <a href="${"https://devxconf.org/opensource"}" rel="${"nofollow"}">were able to decide where $10,000 USD of funds</a> (the profits from DevX Conf plus an additional donation by Gitpod) were to be distributed. We thought long and hard about <em>what</em> projects to include in the competition and pondered about:</p>
<ul><li><strong>what exactly is digital infrastructure?</strong></li>
<li><strong>what tools are relied upon by developers every day that are built and maintained almost exclusively by unpaid volunteers?</strong>.</li></ul>
<p>After some dialectical thinking, the answer became clear: projects built by unpaid volunteers in the category of <a href="${"https://en.wikipedia.org/wiki/Lint_(software)"}" rel="${"nofollow"}">linters</a> and <a href="${"https://langserver.org/"}" rel="${"nofollow"}">language server protocol</a> implementations.</p>
<p>Over the last month Gitpod has been emailing maintainers and distributing the funds.</p>
<p><a href="${"https://github.com/koalaman/shellcheck"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/devxconf-wrap/shellcheck-email.png"}" alt="${"\u{1F92F}\u{1F44F}"}"></a></p>
<p><a href="${"https://github.com/koalaman/shellcheck"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/devxconf-wrap/shellcheck-sponsorship.png"}" alt="${"\u{1F92F}\u{1F44F}"}"></a></p>
<p>Attendees of the DevX Conference were able to vote once for each of the projects, and the distribution of funds was calculated using Quadratic Funding (<a href="${"https://arxiv.org/pdf/1809.06421.pdf"}" rel="${"nofollow"}">Paper</a>). See <a href="${"https://wtfisqf.com/?grant=4&grant=4&grant=3&grant=4&grant=11&grant=7&grant=5&grant=4&grant=9&grant=12&grant=6&grant=24&grant=3&grant=7&grant=17&grant=7&grant=15&match=10000"}" rel="${"nofollow"}">wtfisqf.com</a> for a breakdown of how the fund was split. Each vote was considered a share (or $1 matched), and then a total amount was set to $10,000.</p>
<p><a href="${"https://twitter.com/djsheldrick/status/1392419294852550656"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/devxconf-wrap/tweet-djsheldrick.png"}" alt="${"\u{1F92F} Woah Gitpod just donated \u2728$212\u2728 to patch-package! They're democratically dividing $10k between a small set of OSS dev tools https://devxconf.org/opensource \u2013 what a lovely idea, I'm so honored to be included Smiling face I'll keep $5 for a beer and forward the rest to worthy causes. "}"></a></p>
<p>In total there were 17 projects that were available for voting:</p>
<table><thead><tr><th>Name</th>
<th>URL</th>
<th>Split of funding from $10k USD</th></tr></thead>
<tbody><tr><td>01. <strong>ccls</strong> is a C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting.</td>
<td><a href="${"https://github.com/MaskRay/ccls"}" rel="${"nofollow"}">https://github.com/MaskRay/ccls</a></td>
<td>$281.69</td></tr>
<tr><td>02. <strong>erlang_ls</strong> is an implementation of Language Server Protocol for the Erlang programming language.</td>
<td><a href="${"https://github.com/erlang-ls/erlang_ls"}" rel="${"nofollow"}">https://github.com/erlang-ls/erlang_ls</a></td>
<td>$281.69</td></tr>
<tr><td>03. <strong>ElixirLS</strong> is a frontend-independent IDE \u201Csmartness\u201D server for Elixir. Implements the \u201CLanguage Server Protocol\u201D standard and provides debugger support via the \u201CDebug Adapter Protocol\u201D</td>
<td><a href="${"https://github.com/elixir-lsp/elixir-ls"}" rel="${"nofollow"}">https://github.com/elixir-lsp/elixir-ls</a></td>
<td>$211.27</td></tr>
<tr><td>04. <strong>elm-language-server</strong> is an implementation of Language Server Protocol for the ELM programming language.</td>
<td><a href="${"https://github.com/elm-tooling/elm-language-server"}" rel="${"nofollow"}">https://github.com/elm-tooling/elm-language-server</a></td>
<td>$281.69</td></tr>
<tr><td>05. <strong>hadolint</strong> is a smarter Dockerfile linter that helps you build best practice Docker images. The linter is parsing the Dockerfile into an AST and performs rules on top of the AST. It is standing on the shoulders of ShellCheck to lint the Bash code inside RUN instructions.</td>
<td><a href="${"https://github.com/hadolint/hadolint"}" rel="${"nofollow"}">https://github.com/hadolint/hadolint</a></td>
<td>$774.65</td></tr>
<tr><td>06. <strong>Haskell IDE Engine</strong> aims to be the universal interface to a growing number of Haskell tools, providing a fully-featured Language Server Protocol server for editors and IDEs that require Haskell-specific functionality.</td>
<td><a href="${"https://github.com/haskell/haskell-ide-engine"}" rel="${"nofollow"}">https://github.com/haskell/haskell-ide-engine</a></td>
<td>$492.96</td></tr>
<tr><td>07. <strong>Ionide</strong> is an organization which builds high quality, cross platform developer tools for F#. Our flagship project is Ionide-VSCode - a Visual Studio Code plugin, with more than 1 million downloads, transforming VSCode into a fully-fledged F# IDE</td>
<td><a href="${"https://github.com/ionide"}" rel="${"nofollow"}">https://github.com/ionide</a></td>
<td>$352.11</td></tr>
<tr><td>08. <strong>lsp-mode</strong> is a Emacs client/library for the Language Server Protocol with multiples languages support.</td>
<td><a href="${"https://github.com/emacs-lsp/lsp-mode"}" rel="${"nofollow"}">https://github.com/emacs-lsp/lsp-mode</a></td>
<td>$281.69</td></tr>
<tr><td>09. <strong>ruby-together</strong> is a grassroots initiative committed to supporting the critical Ruby infrastructure you rely on: Bundler, RubyGems, and other shared tools.</td>
<td><a href="${"https://rubytogether.org/"}" rel="${"nofollow"}">https://rubytogether.org/</a></td>
<td>$633.8</td></tr>
<tr><td>10. Rust-analyzer is an implementation of Language Server Protocol for the Rust programming language. It provides features like completion and goto definition for many code editors, including VS Code, Emacs and Vim.</td>
<td><a href="${"https://github.com/rust-analyzer/rust-analyzer"}" rel="${"nofollow"}">https://github.com/rust-analyzer/rust-analyzer</a></td>
<td>$845.07</td></tr>
<tr><td>11. <strong>rvm</strong> is the acronym of Ruby enVironment Manager. It manages Ruby application environments and enables switching between them..</td>
<td><a href="${"https://github.com/rvm/rvm"}" rel="${"nofollow"}">https://github.com/rvm/rvm</a></td>
<td>$422.54</td></tr>
<tr><td>12. <strong>shellcheck</strong> is a tool that gives warnings and suggestions for bash/sh shell scripts:</td>
<td><a href="${"https://github.com/koalaman/shellcheck"}" rel="${"nofollow"}">https://github.com/koalaman/shellcheck</a></td>
<td>$1690.14</td></tr>
<tr><td>13. <strong>patch-package</strong> lets app authors instantly make and keep fixes to npm dependencies. A vital band-aid for javascript developers living on the bleeding edge.</td>
<td><a href="${"https://github.com/ds300/patch-package"}" rel="${"nofollow"}">https://github.com/ds300/patch-package</a></td>
<td>$211.27</td></tr>
<tr><td>14. <strong>php-language-server</strong> is an implementation of Language Server Protocol for the PHP programming language.</td>
<td><a href="${"https://github.com/felixfbecker/php-language-server"}" rel="${"nofollow"}">https://github.com/felixfbecker/php-language-server</a></td>
<td>$492.96</td></tr>
<tr><td>15. pre-commit is a framework for managing and maintaining multi-language pre-commit git hooks.</td>
<td><a href="${"https://github.com/pre-commit/pre-commit"}" rel="${"nofollow"}">https://github.com/pre-commit/pre-commit</a></td>
<td>$1197.18</td></tr>
<tr><td>16. <strong>vim-lsp</strong> is an async Language Server Protocol plugin for vim8 and neovim.</td>
<td><a href="${"https://github.com/prabirshrestha/vim-lsp"}" rel="${"nofollow"}">https://github.com/prabirshrestha/vim-lsp</a></td>
<td>$492.96</td></tr>
<tr><td>17. <strong>yamllint</strong> is a linter for YAML.</td>
<td><a href="${"https://github.com/adrienverge/yamllint"}" rel="${"nofollow"}">https://github.com/adrienverge/yamllint</a></td>
<td>$1056.34</td></tr></tbody></table>
<br>
<p>Only a fraction of funds has been distributed at this stage because, as an industry, we haven\u2019t documented and established straightforward ways where companies can give open-source projects money.</p>
<p><a href="${"https://github.com/pre-commit/pre-commit"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/devxconf-wrap/pre-commit-sponsorship.png"}" alt="${"\u{1F92F}\u{1F44F}"}"></a></p>
<p>Sending hand crafted emails (assuming an email address is publically available \u{1F622}) asking projects these questions isn\u2019t scalable, and most companies would not do this manual grunt work. \u{1F609}</p>

<p>If you are the steward of one of the above, open-source projects, then there\u2019s one simple, easy step you can do to enable Gitpod and other companies to provide financial support\u2026</p>
<ul><li><ol><li>Go sign up to <a href="${"https://github.com/sponsors"}" rel="${"nofollow"}">GitHub Sponsors</a> or <a href="${"https://www.opencollective.com"}" rel="${"nofollow"}">Open Collective</a></li></ol></li>
<li><ol start="${"2"}"><li>Publically document the process of how companies can support your project.</li></ol></li>
<li><ol start="${"3"}"><li>Send an email to <a href="${"mailto:contact@gitpod.io?subject=Distribution of DevX Open-source Funding"}">contact@gitpod.io</a>.</li></ol></li>
<li><ol start="${"4"}"><li>Nominate where funding should be directed (if you wish to divert the funds to a cause that helps improve diversity in open-source such as <a href="${"https://www.outreachy.org/"}" rel="${"nofollow"}">Outreachy</a> thats possible!)</li></ol></li></ul>
<h2 id="${"thanks"}">Thanks<a href="${"#thanks"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Thanks to everyone who participated in DevX Conf and who voted to support these great open-source projects. Shout out to Vercel for creating the <a href="${"https://vercel.com/virtual-event-starter-kit"}" rel="${"nofollow"}">Event Starter Kit</a> and making it open-source. It facilitated our lives a lot and basically gave us the confidence to organize the conference in the first place. Thanks a lot! \u{1F647}\u200D\u2640\uFE0F \u{1F647}\u200D\u2642\uFE0F</p>
<p>A big thanks also goes to the whole team organizing the event including Johannes Landgraf, Nisar Hassan Naqvi, and Mike Nikles \u{1F64C}</p>
<p>We\u2019re looking forward to growing the community around developer experience and can\u2019t wait to see you all at the next DevX Conf! \u{1F9E1}</p>`
  })}`;
});
var devxconfWrap = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Devxconf_wrap,
  metadata: metadata$2_
});
const metadata$2Z = {
  author: "geropl",
  date: "Wed Sep 12 2018 08:25:15 GMT+0000 (UTC)",
  excerpt: "Since we released Gitpod into Public Beta it has been incredibly exciting to see people from all over the world use our service.",
  image: "docker-in-gitpod.jpeg",
  slug: "docker-in-gitpod",
  title: "Bring your own (Docker) image to Gitpod",
  url: "https://medium.com/gitpod/bring-your-own-docker-image-to-gitpod-52db1aa861de"
};
const prerender$3a = true;
const Docker_in_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2Z), {}, {
    default: () => `<p>Since we released Gitpod into Public Beta it has been incredibly exciting to see people from all over the world use our service. Even more so with feedback like this:</p>
<p><a href="${"https://twitter.com/gkalpakas/status/1037800090977619973"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/docker-in-gitpod/tweet.png"}" alt="${"George Kalpakas Tweet about Gitpod"}"></a></p>
<p>Of course, there is always room for improvement, especially with a service as new as Gitpod. Luckily, people have started to share their questions and ideas with us on <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">https://github.com/gitpod-io/gitpod</a>. One of the most often asked questions was:</p>
<h2>\u201CHow do I add tool XYZ to my workspace?\u201D</h2>
<p>And indeed that hasn\u2019t been straight forward. You had to:</p>
<ul><li><p>create a Dockerfile on your machine</p></li>
<li><p>build that Dockerfile on your machine</p></li>
<li><p>push it to hub.docker.com (no account? Create one first!)</p></li>
<li><p>create a branch in your project with a customized .gitpod.yml file which references that specific image</p></li>
<li><p>visit <em>gitpod.io/#<your-repos-branch-url></your-repos-branch-url></em></p></li>
<li><p>get no feedback except \u2018Build has status FAILURE\u2019\u2026</p></li>
<li><p>rinse and repeat from step 2</p></li></ul>
<p>That was way too tedious for everyone to start playing around.</p>
<h2>Let Gitpod do the heavy lifting</h2>
<p>To improve this experience we introduced<a href="${"https://github.com/gitpod-io/gitpod/issues/62"}" rel="${"nofollow"}">Dockerfile support (#62)</a>, which lets you reference your Dockerfile directly from inside your .gitpod.yml file:</p>
<pre class="${"language-null"}">${`<code class="language-null">image:
  file: docker/Dockerfile</code>`}</pre>
<p>Now, Gitpod knows about the Dockerfile and builds that image for you. Whenever you access the repository on Gitpod it checks whether the Dockerfile has been updated and rebuilds the image if needed. When this happens you\u2019ll be shown the log output of the build for easier debugging, too.</p>
<h2>An example, please!</h2>
<p>Let\u2019s get concrete. As an exercise we\u2019ll use <a href="${"https://github.com/lankydan/rust-web-with-rocket"}" rel="${"nofollow"}">a minimal REST service</a> written in<a href="${"https://www.rust-lang.org/"}" rel="${"nofollow"}">Rust</a> using Rocket and Diesel that talks to a PostgreSQL DB. It also has a nice<a href="${"https://lankydanblog.com/2018/05/20/creating-a-rusty-rocket-fuelled-with-diesel/"}" rel="${"nofollow"}">blog post</a> to get started.</p>
<p>The example relies on a very specific nightly build of the Rust compiler from May 2018. Thus, a simple git clone \u2026 &amp;&amp; cargo build &amp;&amp; cargo run won\u2019t get you up-and-running. Of course, you could switch Rust toolchains but then other projects on your machine might stop working. Furthermore, there is more setup and tools to install: A database, a CLI tool\u2026
Gitpod to the rescue!</p>
<p>I went to <a href="${"https://github.com/gitpod-io/definitely-gp/"}" rel="${"nofollow"}">gitpod-io/definitely-gp</a> and added a <a href="${"https://github.com/gitpod-io/definitely-gp/blob/master/rust-web-with-rocket/.gitpod.yml"}" rel="${"nofollow"}"><em>.</em>gitpod.yml</a> and <a href="${"https://github.com/gitpod-io/definitely-gp/blob/master/rust-web-with-rocket/Dockerfile"}" rel="${"nofollow"}">Dockerfile</a> there. The <em>.</em>gitpod.yml file looks like this:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> Dockerfile
<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
      echo DATABASE_URL=$DATABASE_URL >> .env
      echo ROCKET_ADDRESS=$ROCKET_ADDRESS >> .env
      echo ROCKET_PORT=$ROCKET_PORT >> .env
      pg_start.sh
      diesel setup
      cargo build
      cargo run</span>
<span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span></code>`}</pre>
<p>It references the Dockerfile next to it, says that the resulting app should be accessible on port 8000 and contains the command executed on workspace startup: set config, start postgres, build and run app (I basically copied those from the repo\u2019s .md file).</p>
<p>The Dockerfile itself inherits from our default image <a href="${"https://hub.docker.com/r/gitpod/workspace-full/"}" rel="${"nofollow"}">gitpod/workspace-full</a>\xB9 and contains:</p>
<ul><li><p>PostgreSQL (+ some configuration for the gitpod user)</p></li>
<li><p>specific Rust toolchain</p></li>
<li><p>some project specific setup</p></li></ul>
<p>Here it is:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">FROM gitpod/workspace-full:latest

<span class="token comment"># Install postgres</span>
<span class="token environment constant">USER</span> root
RUN <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token punctuation"></span>
        postgresql <span class="token punctuation"></span>
        postgresql-contrib <span class="token punctuation"></span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /var/cache/apt/* <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /var/lib/apt/lists/* <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /tmp/*

<span class="token comment"># Setup postgres server for user gitpod</span>
<span class="token environment constant">USER</span> gitpod
ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/lib/postgresql/10/bin:<span class="token environment constant">$PATH</span>"</span>
RUN <span class="token function">mkdir</span> -p ~/pg/data<span class="token punctuation">;</span> <span class="token function">mkdir</span> -p ~/pg/scripts<span class="token punctuation">;</span> <span class="token function">mkdir</span> -p ~/pg/logs<span class="token punctuation">;</span> <span class="token function">mkdir</span> -p ~/pg/sockets<span class="token punctuation">;</span> initdb -D pg/data/
RUN <span class="token builtin class-name">echo</span> <span class="token string">'#!/bin/bash<span class="token entity" title="&#92;n">&#92;n</span>pg_ctl -D ~/pg/data/ -l ~/pg/logs/log -o "-k ~/pg/sockets" start'</span> <span class="token operator">></span> ~/pg/scripts/pg_start.sh
RUN <span class="token builtin class-name">echo</span> <span class="token string">'#!/bin/bash<span class="token entity" title="&#92;n">&#92;n</span>pg_ctl -D ~/pg/data/ -l ~/pg/logs/log -o "-k ~/pg/sockets" stop'</span> <span class="token operator">></span> ~/pg/scripts/pg_stop.sh
RUN <span class="token function">chmod</span> +x ~/pg/scripts/*
ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/pg/scripts:<span class="token environment constant">$PATH</span>"</span>

<span class="token comment"># Project specifics</span>
<span class="token comment"># Setup diesel_cli</span>
ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.cargo/bin:<span class="token environment constant">$PATH</span>"</span>
RUN cargo <span class="token function">install</span> diesel_cli --no-default-features --features postgres

<span class="token comment"># Some transitive dependencies are very picky: We need the nightly build build on the 2018-04-14, meant for the 2018-04-15</span>
RUN rustup default nightly-2018-04-15
<span class="token comment"># Set some environment variables</span>
ENV <span class="token assign-left variable">DATABASE_URL</span><span class="token operator">=</span>postgres://gitpod@127.0.0.1/rust-web-with-rocket
ENV <span class="token assign-left variable">ROCKET_ADDRESS</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0
ENV <span class="token assign-left variable">ROCKET_PORT</span><span class="token operator">=</span><span class="token number">8000</span>

<span class="token comment"># Give back control</span>
<span class="token environment constant">USER</span> root</code>`}</pre>
<p>Remember, this is done once per project. Most projects already have those setup descriptions, they are just buried inside their README.</p>
<p>Now whenever anyone accesses the repository through Gitpod, be it a branch, a particular commit, an issue or a<a href="${"/blog/when-code-reviews-lgtm"}">PR,</a> they will get a custom workspace with all the tools set up and running, out of the box. <a href="${"http://gitpod.io/#https://github.com/lankydan/rust-web-with-rocket"}" rel="${"nofollow"}">Give it a spin</a>!</p>
<p>Once the service has build and is running, we just follow the tutorial:</p>
<ul><li><p>Open /people: Click Open on the appearing messagebox\xB2 and change the path in the integrated browser to http://8000-<your-workspace-url>/people , click Reload : The query results in an empty []</your-workspace-url></p></li>
<li><p>Hit F1 -&gt; \u201COpen new Terminal\u201D and paste:</p></li></ul>
<pre class="${"language-null"}">${`<code class="language-null">curl -XPOST [http://localhost:8000/people](http://localhost:8000/people) -H &quot;Content-Type: application/json&quot; --data &#39;&#123;&quot;id&quot;: 123, &quot;first_name&quot;: &quot;Jon&quot;, &quot;last_name&quot;: &quot;Doe&quot;, &quot;age&quot;: 64, &quot;profession&quot;: &quot;Engineer&quot;, &quot;salary&quot;: 1024&#125;&#39;</code>`}</pre>
<ul><li>Hit Reload again to see Jon Doe\u2019s people entry</li></ul>
<h2 id="${"try-it-yourself"}">Try it yourself<a href="${"#try-it-yourself"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can either create a PR on<a href="${"https://github.com/gitpod-io/definitely-gp"}" rel="${"nofollow"}">gitpod-io/definitely-gp</a> \u2014 or dive right in and create the <a href="${"/docs/config-gitpod-file#checked-in-gitpod-config-file"}">.gitpod.yml in your repositories</a>! For details on how this works and what is possible please head over to <a href="${"/docs/config-gitpod-file"}">the docs</a>.</p>
<p>\xB9 It is not required to inherit from that image at all. You can even start with a plain alpine or debian based image. I used it here for convenience.</p>
<p>\xB2 Alternatively, go to View -&gt; Ports and click Open</p>`
  })}`;
});
var dockerInGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_in_gitpod,
  metadata: metadata$2Z,
  prerender: prerender$3a
});
const metadata$2Y = {
  author: "nisarhassan12",
  date: "Mon Oct 7 2019",
  excerpt: "To celebrate Open Source and Hacktoberfest, we're stoked \u{1F9D9}\u2728\u{1F970} to announce contribute.dev, a list of welcoming open-source projects.",
  image: "frictionless-oss-contributions.png",
  slug: "frictionless-oss-contributions",
  subtitle: "Frictionless Open Source Contributions For Everyone",
  title: "Announcing contribute.dev \u2014 Open Source in One Click"
};
const prerender$39 = true;
const Frictionless_oss_contributions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2Y), {}, {
    default: () => `<p>To celebrate Open Source and Hacktoberfest, we\u2019re stoked <span aria-hidden="${"true"}">\u{1F9D9}\u2728\u{1F970}</span> to announce <a href="${"https://contribute.dev"}" target="${"blank"}">contribute.dev</a>, a list of welcoming open-source projects featuring ready-to-code Gitpod setups.</p>
<p><img src="${"https://user-images.githubusercontent.com/46004116/66307071-d695ac00-e91c-11e9-9eb1-8aa97bb6ca67.png"}" alt="${"contribute.dev projects list"}"></p>
<p>Setup for all of the listed projects is completely automated with the help of <a href="${"https://gitpod.io"}" rel="${"nofollow"}">Gitpod</a>. So within seconds, you get a fully working development environment, including a VS Code-like interface and a cloud-based Linux container configured specifically for the project. All you need is a browser!</p>
<p>For getting started with the project of your choice just hit the blue <code>Open in Gitpod</code> button in the bottom right corner:</p>
<p><img src="${"https://user-images.githubusercontent.com/46004116/66307306-82d79280-e91d-11e9-9c8b-00d92b710892.png"}" alt="${"carbon, a project on contribute.dev"}"></p>
<p>This will launch a ready-to-code environment with everything setup (like the dependencies pre-installed and the web server running) as shown below.</p>
<p><img src="${"https://user-images.githubusercontent.com/46004116/66307804-d5fe1500-e91e-11e9-9032-b5efa3cb8ff8.png"}" alt="${"Gitpod Workspace"}"></p>
<p>Now you can make your contribution and once you\u2019re done you can do all sorts of cool stuff from within the full-featured Gitpod IDE like reviewing the changes that you made in the diff editor or making a Pull Request.</p>
<p>##Want the same for your project?</p>
<p>If the project that you\u2019re looking for is not in the list please file an issue <a href="${"https://github.com/gitpod-io/contribute.dev/issues/new?labels=&template=add-project.md&title=Add+%3CRepo+URL+here%3E"}" rel="${"nofollow"}">here \u2192</a> with a link to your repository and we\u2019ll help you set it up. Once the experience is great we\u2019re happy to add your project to the list.</p>
<p>Happy contributing! <span aria-hidden="${"true"}">\u{1F970}</span></p>`
  })}`;
});
var frictionlessOssContributions = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Frictionless_oss_contributions,
  metadata: metadata$2Y,
  prerender: prerender$39
});
const metadata$2X = {
  author: "mikenikles",
  date: "Sat, 08 May 2021 18:00:00 UTC",
  excerpt: "A very tight deadline, a small team and a complete redesign - insights into why we use Svelte.",
  image: "teaser.png",
  slug: "from-gatsby-to-svelte",
  subtitle: null,
  teaserImage: "teaser.png",
  title: "From Gatsby to Svelte in 3 weeks"
};
const From_gatsby_to_svelte = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2X), {}, {
    default: () => `<p><strong>tl;dr:</strong></p>
<ul><li><a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">Gitpod</a> recently announced new funding and a completely new brand (<a href="${"https://www.gitpod.io/blog/next-chapter-for-gitpod"}" rel="${"nofollow"}">read more</a>) \u{1F34A}.</li>
<li>As part of that, we rebuilt the website from scratch, replacing React &amp; Gatsby with <a href="${"https://svelte.dev"}" rel="${"nofollow"}">Svelte</a> &amp; <a href="${"https://kit.svelte.dev"}" rel="${"nofollow"}">SvelteKit</a>.</li>
<li>Look at the <a href="${"https://github.com/gitpod-io/website"}" rel="${"nofollow"}">source code on GitHub</a> or start the website in a Gitpod development environment by visiting <a href="${"https://gitpod.io#https://github.com/gitpod-io/website"}" rel="${"nofollow"}">https://gitpod.io#https://github.com/gitpod-io/website</a>.</li>
<li>Listen to the Svelte Radio episode \u201D<a href="${"https://share.transistor.fm/s/507ad528"}" rel="${"nofollow"}">Migrating from Sapper to SvelteKit</a>\u201D where I shared more details.</li></ul>
<h2 id="${"what-we-had-previously"}">What we had previously\u2026<a href="${"#what-we-had-previously"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Prior to April 8, 2021 the Gitpod website was built with React &amp; Gatsby and the source code is <a href="${"https://github.com/gitpod-io/retired-gatsby-website"}" rel="${"nofollow"}">available on GitHub</a>. A static site was deployed to Netlify and a Netlify function took care of processing HTML form submissions by sending the form content via email to the Gitpod team (e.g. contact us, enterprise license requests, etc.)
We leveraged the Gatsby ecosystem by adding plugins to the <a href="${"https://github.com/gitpod-io/retired-gatsby-website/blob/master/gatsby-config.js"}" rel="${"nofollow"}"><code>gatsby-config.js</code></a> file which took care of things like Markdown parsing and embedding Youtube videos, among other things.</p>
<h3 id="${"-and-why-we-started-from-scratch"}">\u2026 and why we started from scratch<a href="${"#-and-why-we-started-from-scratch"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>What was wrong with the previous stack? Why did we decide to rewrite the website with different technologies?
Overall, Gatsby &amp; React is a great choice and gets the job done just fine. Many people are already familiar with React and are ready to contribute with minimal effort.</p>
<p><strong>However</strong>, at Gitpod we care deeply about developer experience &amp; productivity - this is what our product is all about afterall. This is where we believe <a href="${"https://svelte.dev"}" rel="${"nofollow"}">Svelte</a> and <a href="${"https://kit.svelte.dev"}" rel="${"nofollow"}">SvelteKit</a> lead the pack in today\u2019s web application development. By leveraging <a href="${"https://vitejs.dev"}" rel="${"nofollow"}">Vite</a>, developing a SvelteKit web app is as instant as it gets, it even persists local state when hot reloading the web application!</p>
<p>In addition, we had an extremely tight timeframe from the start of the project to the <a href="${"https://www.gitpod.io/blog/next-chapter-for-gitpod"}" rel="${"nofollow"}">announcement of our funding and the new brand</a>. While I have had two years of experience with Svelte &amp; Sapper, the other three developers had not worked together previously and were not familiar with Svelte. Nevertheless, I was confident the rest of the team would pick up Svelte and be productive right away. To learn Svelte, all you really need is work your way through the <a href="${"https://svelte.dev/tutorial"}" rel="${"nofollow"}">tutorial</a>.</p>
<p><strong>To me, building a SvelteKit app from scratch felt less risky than modifying an existing Gatsby codebase!</strong></p>
<p>This is especially true in our case where we had to apply a completely new brand across all pages and would have had to learn Gatsby too.</p>
<h2 id="${"the-implementation"}">The implementation<a href="${"#the-implementation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>SvelteKit\u2019s public beta <a href="${"https://svelte.dev/blog/sveltekit-beta"}" rel="${"nofollow"}">was announced</a> at around the same time as we started our project. Knowing there would be bugs - the maintainers explicitly warned about that - we decided to start with a <a href="${"https://sapper.svelte.dev"}" rel="${"nofollow"}">Sapper</a> app. Sapper is the predecessor of SvelteKit and was well established. There was also a promise from the maintainers to provide a <a href="${"https://kit.svelte.dev/migrating"}" rel="${"nofollow"}">frictionless migration path</a>.</p>
<p>With one week to go, we migrated from Sapper to SvelteKit (<a href="${"https://github.com/gitpod-io/website/pull/120"}" rel="${"nofollow"}">pull request</a>). The team\u2019s feedback was clear:</p>
<p><img src="${"/images/blog/from-gatsby-to-svelte/sveltekit-devx-vote.png"}" alt="${"Vote on the SvelteKit developer experience"}"></p>
<p>Remember that frictionless migration we were promised? It was indeed smooth as butter! At this point, a huge thank you to the Svelte maintainers &amp; contributors for their incredible work \u2764\uFE0F !</p>
<p>We also configured <a href="${"https://tailwindcss.com"}" rel="${"nofollow"}">Tailwind CSS</a>, <a href="${"https://mdsvex.com"}" rel="${"nofollow"}">mdsvex</a> and the <a href="${"https://github.com/sveltejs/kit/tree/master/packages/adapter-netlify"}" rel="${"nofollow"}"><code>adapter-netlify</code></a>.</p>
<h3 id="${"gatsby-plugins"}">Gatsby plugins<a href="${"#gatsby-plugins"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The Svelte ecosystem is not (yet) as established as the Gatsby ecosystem. However, thanks to the flexibility of mdsvex, we were able to use some Markdown related <a href="${"https://github.com/remarkjs/remark"}" rel="${"nofollow"}">remark</a> plugins. For some use cases, we wrote <a href="${"https://github.com/gitpod-io/website/tree/main/src/utils"}" rel="${"nofollow"}">our own plugins</a> to cover specific needs.</p>
<p>Dana Woodman recently shared an interesting <a href="${"https://twitter.com/DanaWoodman/status/1390030682789859329"}" rel="${"nofollow"}">thought on the Svelte ecosystem</a> that is worth paraphrasing: Many existing, vanilla JS libraries work effortlessly with Svelte which opens up an even wider ecosystem than what you get with React.</p>
<h2 id="${"lessons-learned"}">Lessons learned<a href="${"#lessons-learned"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"svelte--sveltekit"}">Svelte &amp; SvelteKit<a href="${"#svelte--sveltekit"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>SvelteKit is in public beta and you may run into a rough edge or two - nothing though that makes it a showstopper. For example, we weren\u2019t able to use prerendering to deploy static pages and launched the website with server-side rendering through a Netlify function instead. This has since been fixed, we upgraded to the latest version and the majority of pages are now static HTML files - taking full advantage of SvelteKit\u2019s flexibility to mix &amp; match SSR, SPA and static pages.</p>
<h3 id="${"tailwind-css"}">Tailwind CSS<a href="${"#tailwind-css"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>We configured Tailwind because the product team uses it and we want to align as much as possible. On the website team, only one out of four team members was familiar with it and we decided not to enforce the use of Tailwind. In hindsight, this was probably a mistake as there is now a mix of custom CSS and Tailwind that needs to be cleaned up over time. However, it was a risk mitigation worth applying given the tight deadline.</p>
<p>Going forward, we are likely going to develop a lightweight pattern library either by abstracting Tailwind classes in Svelte components or <a href="${"https://tailwindcss.com/docs/extracting-components"}" rel="${"nofollow"}">extracting components</a> as per the Tailwind CSS docs.</p>
<h3 id="${"netlify-adapter"}">Netlify adapter<a href="${"#netlify-adapter"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A <a href="${"https://github.com/sveltejs/kit/issues/930"}" rel="${"nofollow"}">bug</a> in the Netlify adapter caused a short-term headache because it completely ignored any redirects configured in the <code>netlify.toml</code> file. This is being worked on at the moment and we were able to apply <a href="${"https://github.com/sveltejs/kit/issues/930#issuecomment-817216700"}" rel="${"nofollow"}">a temporary workaround</a>.</p>
<h3 id="${"differences-between-development--production-environments"}">Differences between development &amp; production environments<a href="${"#differences-between-development--production-environments"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Due to the use of SvelteKit adapters, you may run into different behavior when you run in development vs production. I recommend you set up automated preview deployments for each pull request and also test locally with the generated production web app. In our case, we can start a production-like environment with <code>npm run deploy &amp;&amp; npm start</code> to verify code changes before we push the code.</p>
<h3 id="${"no-css-on-the-error-page"}">No CSS on the error page<a href="${"#no-css-on-the-error-page"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>We noticed the <code>routes/$error.svelte</code> page lost all CSS when we deployed the web app (<a href="${"https://github.com/sveltejs/kit/issues/715"}" rel="${"nofollow"}">GitHub issue</a>). We had to extract the header, footer and error page CSS into a separate CSS file and include it on the error page. Three days before our go-live date, that bug was fixed in SvelteKit.</p>
<h2 id="${"conclusion"}">Conclusion<a href="${"#conclusion"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><strong>Would we do it again?</strong>
Absolutely!</p>
<p><strong>Was it risky?</strong>
A bit, due to the unknowns of SvelteKit\u2019s beta label when we started the project, but given we had Sapper as a fallback option it was calculated risk. With today\u2019s state of SvelteKit and the very recent bug fixes, the Sapper fallback is no longer needed and I recommend starting with SvelteKit.</p>
<p><strong>Should you use SvelteKit in production?</strong>
I can now say with confidence, go for it. As you work on your web app, deploy it to a production-like environment frequently to avoid any deployment surprises.</p>
<p>All in all, I am excited about the future of web development not least because Svelte is redefining what modern web development looks like - both from a developer and end user experience!</p>
<h3 id="${"whats-next"}">What\u2019s next?<a href="${"#whats-next"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Head over to <a href="${"https://github.com/gitpod-io/website"}" rel="${"nofollow"}">https://github.com/gitpod-io/website</a> to look at the source code or experience how we work by opening an ephemeral development environment with the following button:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/website"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<p>To explore your own project in an online development environment, prefix your GitHub, GitLab or Bitbucket repository URL with <code>gitpod.io#</code>. <a href="${"/docs/context-urls"}">Learn more about that in the documentation</a>.</p>
<p>We welcome community contributions \u{1F64F} . Please let us know what you think of the website and its implementation.</p>`
  })}`;
});
var fromGatsbyToSvelte = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: From_gatsby_to_svelte,
  metadata: metadata$2X
});
const metadata$2W = {
  author: "svenefftinge",
  date: "Wed May 06 2020 16:00:00 GMT+0000 (UTC)",
  excerpt: "Today, GitHub announced the private beta of GitHub Codespaces, which provide container-based dev environments for GitHub projects.",
  image: "gh-cs-bg.jpg",
  slug: "github-codespaces",
  subtitle: "A Milestone for Automated Development Environments",
  title: "GitHub Codespaces, Welcome to the Party!"
};
const prerender$38 = true;
const Github_codespaces = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2W), {}, {
    default: () => `<p>Today, GitHub announced the private beta of <a href="${"https://github.com/features/codespaces"}" rel="${"nofollow"}">GitHub Codespaces</a>, which provide container-based dev environments for GitHub projects. At Gitpod, we are building a similar solution, and while GitHub\u2019s Codespaces don\u2019t fully implement everything we do, they truly embrace the notion of dev environments as code.</p>
<p>This is great news, because it really helps to explain why this is going to change professional software development entirely.</p>
<h2>Dev Environment As Code</h2>
<p>Describing development environments in code has many benefits:</p>
<ul><li><p>It eliminates onboarding friction: no matter if you are new to a project, need to go back to an old branch or just picking up development after a few weeks. Just go to your project and start coding immediately.</p></li>
<li><p>Remote work becomes a breeze: now everyone can access source code more securely (no local copies) from any device, including Chromebooks and tablets.</p></li>
<li><p>Everybody gets the same setup: this means that \u201Cworks on my machine\u201D situations are a problem of the past.</p></li>
<li><p>With Gitpod, you can even take snapshots of any state of your dev environment and share exact clones of it.</p></li></ul>
<p>It is our vision that <strong>everybody can immediately start working in a fully set-up dev environment on any project, any branch, with any device, and at any time.</strong></p>
<h2>A Lifesaver for Professional Teams</h2>
<p>As software systems become more complex so do dev environments. Have you ever tried to develop a Kubernetes application locally, set up all the required infrastructure, and launch all microservices on your local machine? Halfway through you\u2019ll find that your expensive MacBook Pro is not a suitable replacement for a datacenter. Even if you eventually manage to get things working it won\u2019t be smooth or remotely close to what you run in production.</p>
<p>When we started working on Gitpod, we had everything running locally in minikube, too. Very quickly we realized that this would not scale. Our SaaS offering is deployed in Kubernetes clusters across the globe\u2014that\u2019s nothing you\u2019d want to replicate locally.</p>
<p>For the past year the whole team has developed Gitpod in Gitpod. Everyone in the team can start coding on any branch immediately. That includes their own preview deployment which is already connected to and fully debuggable from their browser-based development environment. For a more in-depth look at our development pipeline\u2014and what\u2019s in it for you\u2014check out <a href="${"https://www.youtube.com/watch?v=dFMpXUsJcGM"}" rel="${"nofollow"}">Chris\u2019 talk</a> (inlined below) and our <a href="${"https://www.freecodecamp.org/news/developing-kubernetes-applications-with-joy/"}" rel="${"nofollow"}">previous post</a> on the matter.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/dFMpXUsJcGM?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2>Pre-build Everything!</h2>
<p>When reviewing a PR or starting work on that new cool feature, no developer wants to accidentally work with an old state. Imagine wasting hours hunting a bug that\u2019s already fixed on master. Fresh working copies\u2014and ideally dev environments\u2014for each task would be great.</p>
<p>Once dev environments have become code you can pre-build those dev environments ahead of time. <strong>Think CI for your development setup</strong>: on each change in the repository, Gitpod prepares a new dev environment for that change. Rather than having to manually adjust the tool versions, wait for all dependencies to download and for the code to compile, things are ready when you are. We call this <a href="${"/blog/continuous-dev-environment-in-devops"}">continuous dev environments</a>.</p>
<h2>At Last a Good Browser IDE</h2>
<p>Given all these benefits, you might wonder why no one did this earlier. After all, developers automate the world on a daily basis. Thinking about it, it\u2019s strange that most developers still set things up manually before they can get down to business.</p>
<p>There have been attempts to automate dev environments in the past (e.g. Docker, Vagrant, Cloud9). These early approaches always came with too many compromises, and their benefits did not quite outweigh the drawbacks. The biggest blocker was that developers could no longer use the powerful tools they normally would, most importantly an awesome Editor/IDE.</p>
<p>This has changed since, with VS Code, a web-technology based IDE has become so popular among developers. However, Microsoft has not open-sourced the browser version of VS Code. For GitHub, a Microsoft-owned company, this is obviously not an issue. For everyone else we have developed Eclipse <a href="${"https://dev.to/svenefftinge/theia-1-0-finally-a-good-browser-ide-3ok0"}" rel="${"nofollow"}">Theia</a>.</p>
<p>Theia provides the same functionality as VS Code, even supports VS Code extensions, and comes with an architecture that allows everyone to customize the IDE easily. It is developed as a true open-source, vendor-neutral project at the Eclipse Foundation *) and is adopted by Google, IBM, RedHat, SAP, arm, Arduino and many more. Mike Milinkovich wrote about the <a href="${"https://blogs.eclipse.org/post/mike-milinkovich/eclipse-theia-and-vs-code-differences-explained"}" rel="${"nofollow"}">differences between Theia and VS Code</a> recently.</p>
<p>This new generation of Theia-based Web-IDEs go way beyond online-playgrounds which are barely sufficient for web development or quick prototypes. Today, we can finally run a professional IDE in a browser tab.</p>
<sub>\\*) To avoid misunderstandings: Theia has technically nothing in common with the classic Eclipse IDE, but is an independent project under the umbrella of the Eclipse Foundation.</sub>
<h2>What About GitLab, Atlassian\u2019s Bitbucket, and Other Git Hosting?</h2>
<p>We are thrilled to see GitHub/Microsoft investing in automated development environments as it will help convince developers around the world and get this new way of developing software adopted faster.</p>
<p>But most professional development happens on other platforms such as GitLab, Atlassian\u2019s stack and of course good old GitWeb. Oftentimes companies even employ a mixture of these.</p>
<p>To also serve users beyond just GitHub, we have been focussing on integrating Gitpod with other platforms as well. In December we released support for GitLab, and integration with Atlassian\u2019s Bitbucket (and Jira) will be available soon.</p>
<h2>Closer to Home: Gitpod Self-Hosted</h2>
<p>Chances are that you host your Git repositories or other dev infrastructure in a private cloud, or on a local network where they can\u2019t be accessed from the outside. Thus, a hosted IDE service must be on the same private cloud or network. This is possible with <a href="${"/self-hosted"}">Gitpod Self-Hosted</a> which can be installed on Kubernetes and does not require a connection to the public internet.</p>
<p>Today we are releasing a new version which brings Gitpod Self-Hosted on par with Gitpod.io. The new release includes better GitLab integration and a new admin UI. With Gitpod Self-Hosted you can now enjoy this liberating way of developing software with your own GitLab installation.</p>
<p><strong>Gitpod Self-Hosted is free for up to five users, and a free trial month for unlimited users is available, too.</strong></p>
<h2>Summary</h2>
<p>We are quickly headed into a wonderful future, where developers are no longer intimidated by tedious and outdated setup procedures. Professional software projects will provide automated, prebuilt development environments that enable teams to start contributing, doing code reviews, reproducing bugs or just exploring new ideas immediately from any device securely.</p>
<p>CI/CD has taught us how versioned, reproducible infrastructure as code is key to scale modern software development. Now it is time to apply these lessons to our development environments and furthermore improve our lead times getting from ideas to production.</p>
<p>Experience the future of software development now!</p>
<div style="${"text-align: center; margin: 2rem;"}"><a href="${"https://www.gitpod.io/"}"><button style="${"cursor: pointer; border: none; padding: 1.5rem 3rem; border-radius: 100px; background-color: #0087BE; color: white; font-weight: 600"}">Try Gitpod.io</button></a></div>`
  })}`;
});
var githubCodespaces = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Github_codespaces,
  metadata: metadata$2W,
  prerender: prerender$38
});
const metadata$2V = {
  author: "svenefftinge",
  date: "Thu Jul 05 2018 11:49:24 GMT+0000 (UTC)",
  excerpt: "As software developers, we already spend a lot of our time in browsers.",
  image: "a-better-github-flow.png",
  slug: "github-flow",
  subtitle: "Stop setting up, start coding!",
  title: "A Better GitHub Flow",
  url: "https://medium.com/gitpod/github-flows-better-with-gitpod-e455d17990f9"
};
const prerender$37 = true;
const Github_flow = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2V), {}, {
    default: () => `<p>As software developers, we already spend a lot of our time in browsers. Be it for searching Google/StackOverflow, checking our latest Continuous Integration builds on Jenkins resp. Travis, or doing code reviews on GitHub, Bitbucket, or Gerrit. Also, communication with the team happens in web applications, such as Gmail, Google Hangout or Slack. The convenience of web applications and OAuth-based authentication allows us to use any computer to do most of our work immediately.</p>
<p>However, when it comes to the actual coding and debugging, we have to prepare our local development environments manually. We do this based on often outdated, incomplete or just plain wrong documentation. The transition from an online repository to the actual coding is a barrier that hinders thousands of possible contributions every day. Coding needs to get more accessible.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2048/0*f260tcqJvgvCguFu"}" alt="${"(Programming Environment - Dilbert by Scott Adams. Source: [http://dilbert.com/strip/2017-01-02)](http://dilbert.com/strip/2017-01-02))"}"><em>(Source: <a href="${"http://dilbert.com/strip/2017-01-02"}" rel="${"nofollow"}">http://dilbert.com/strip/2017-01-02)</a>)</em></p>
<p>But that only needs to be done once, right? Unfortunately, no. Coding is a team sport. We are not just adding code, but also do code reviews or fix bugs on maintenance branches which often require a different setup. Moreover, today\u2019s applications are loosely coupled compositions of independent microservices and sub-projects, written in different languages requiring different development setups. Consequently, we have to maintain setups for multiple projects and branches, trying to keep documentation in sync including all the cases for the different platforms. As a result, we are wasting precious time every day. We should spend this time and effort on more fun and productive things.</p>
<p>Once we have the setup, we run builds and test suites. Those processes are usually an excellent reason to grab a coffee because it is blocking our machine. Wouldn\u2019t it be nice to push such workload to the cloud, where it not only runs faster but can easily be parallelized? Your computer stays calm and cool, and you still can have your coffee if you want.</p>
<p>In this article, I will walk you through an automated, cloud-based development workflow. <a href="${"https://gitpod.io"}" rel="${"nofollow"}">Gitpod</a> is based on Kubernetes, GitHub, and the new Eclipse Theia project \u2014 a VS Code-like IDE that runs in modern browsers. You can think of it as an online IDE with deep GitHub integration (and soon other platforms), providing fully-featured development environments with a single click for any GitHub project, issue, branch or pull request.</p>
<p><strong>Automation</strong></p>
<p>Starting a workspace with Gitpod is much easier than with other cloud IDEs. Gitpod doesn\u2019t require you to configure workspaces with container images, Git information and so on. Instead, you directly go to a GitHub repository and click the Gitpod-Button [see below]. Gitpod provides you with a ready to use workspace, so that you can immediately start coding without any configuration steps.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3200/0*MjUIJ1zspz3CF8oo"}" alt="${"Button provided by Gitpod\u2019s browser extension"}"><em>Button provided by Gitpod\u2019s browser extension</em></p>
<blockquote><p>To see the Gitpod button on the GitHub page, you would have to <a href="${"https://gitpod.io"}" rel="${"nofollow"}">install a browser extension</a>. Alternatively, you can manually prefix any GitHub URL with <code>https://gitpod.io/#</code>. For instance, clicking the following link will instantly provide you a development workspace for the Eclipse Theia project: <a href="${"https://gitpod.io/#https://github.com/theia-ide/theia"}" rel="${"nofollow"}">https://gitpod.io/#https://github.com/theia-ide/theia</a></p></blockquote>
<p>Of course, different projects need different setups. Gitpod has a three-stage process to determine the workspace configuration, e.g. what docker image to use for development, what startup script to run, and which ports to expose:</p>
<ol><li><p>It first looks for a <em>.gitpod</em> configuration file in the repository. Note, that it will check the state of the currently viewed commit. This allows you to keep working configuration for old states as well as trying a new configuration in a pull request.</p></li>
<li><p>Second, if there is no configuration in the cloned repository, a central repository called \u2018<a href="${"https://github.com/gitpod-io/definitely-gp"}" rel="${"nofollow"}">definitely-gp</a>\u2019 is checked for configuration. It is a public repository which contains configurations for arbitrary GitHub projects. That is useful if you want to provide configuration for a repository you don\u2019t have write access to. Everybody is invited to contribute to this.</p></li>
<li><p>As a last resort, Gitpod analyzes the repository and derives a suitable configuration from there. For instance, if the repository contains a <code>yarn.lock</code> file it will automatically run <code>yarn install</code> in the beginning.</p></li></ol>
<p>The key takeaway here is that you can handcraft a Docker file that includes all the development tools you need for your project as well as any ports to be exposed or scripts you want to run when a workspace starts. You can put that configuration under version control, replacing the onboarding documentation with a formal, executable description. But there is more information in a GitHub URL that can be leveraged to keep us in the flow.</p>
<p><strong>It\u2019s All About The Context</strong></p>
<p>When creating a workspace, Gitpod will analyze the provided GitHub URL. If you are looking at a particular branch it will check out that branch; if you are looking at a specific file, it will automatically open that file in Gitpod\u2019s IDE.</p>
<p>Some great features, which are heavily used on GitHub, are issues and pull requests. If you want to start working on a GitHub issue, you simply spawn a fresh workspace from the issue page on GitHub. Gitpod puts you into the right context, by automatically creating a local branch using the issue number and even pre-configures the commit message accordingly. All is set up for you to start coding and testing. Once you are happy with the changes you made, use the Git integration to create a commit and push it to a remote branch. Finally, you can even create the actual pull request right from within Gitpod.</p>
<p>Lastly, of course, when clicking the Gitpod button on a pull request, Gitpod beams you right into code review mode. A panel on the left will list the changed files, allowing you to go through them one by one. Changes are opened in the diff editor where you can also read and add review comments. And because it is a full IDE, we can navigate through the entire code base, run code or add commits at will. Approving the pull request is supported, too.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3200/0*8N39dT5P6Q1zQdIR"}" alt="${"Inline code review comments"}"><em>Inline code review comments</em></p>
<p><strong>Theia IDE</strong></p>
<p>All the smart automation doesn\u2019t help if you end up with a bad development experience. So let\u2019s talk about the IDE that powers Gitpod.</p>
<p>Theia is an open-source project that has been in development for over a year now. In addition to the TypeFox team, other companies like Ericsson and RedHat are actively contributing to it. The Eclipse Che team is replacing their existing IDE with Theia, and companies like IBM already have <a href="${"https://microclimate-dev2ops.github.io/"}" rel="${"nofollow"}">public offers</a> based on it. Theia just recently became an Eclipse project, to make sure it is developed in a truly open and democratic manner and that no single company is controlling its future.</p>
<p>Even with all that momentum, it seems to be an unrealistic effort to develop a new IDE from scratch. Just consider how many years of development were put into projects like the classic Eclipse IDE or Visual Studio. Gladly, this is not what the Theia team is doing.</p>
<p>The most important building blocks for Theia are probably the Monaco editor and the use of protocols. Monaco is the code editor that supports VS Code and is very flexible, high-quality code editor written in TypeScript (JavaScript). Unlike VS Code, the Monaco editor widget can run in browsers.</p>
<p>The second ingredient is the use of protocols. The most popular one being the language server protocol [4].</p>
<p><strong>The <a href="${"https://microsoft.github.io/language-server-protocol/"}" rel="${"nofollow"}">Language Server Protocol (LSP)</a></strong></p>
<p>The LSP is an effort started by VS Code to allow using language services in a technology- and UI-independent manner. One of the first popular reusable language services came from the TypeScript team. Such a service is a simple headless process that provides language smartness to an editor / IDE through messaging.</p>
<p>For instance, a text editor, supporting the LSP, can ask a language server for completion proposals given a document and a cursor position. All the heavy lifting such as parsing, type resolution, and linting is done in the language server. The IDE only needs to know how to represent the returned information for the user, e.g. propose the completion proposals in a pop-up.</p>
<p>As of May 2018, there are 64 language servers listed on the <a href="${"https://microsoft.github.io/language-server-protocol/implementors/servers/"}" rel="${"nofollow"}">official site</a> covering all of the mainstream programming languages, such as JavaScript, Python, Java, C++ or Go. If something is missing, it is a good idea to search the web as the list is incomplete and new language servers are released every other week. If you want to build your own language server, there are SDKs for various languages ranging from TypeScript, Java and C# to Haskell. Finally, <a href="${"https://github.com/theia-ide/theia-xtext"}" rel="${"nofollow"}">Xtext</a> provides a full framework for implementing a language server for domain-specific languages.</p>
<p>The LSP allows moving mature code bases for language smartness to the future. The very popular Java language server which is not only used in Theia but also in Atom and VS Code is really a headless version of Eclipse\u2019s Java Development tools.</p>
<p>Theia uses and supports other protocols as well. For instance, debugging support is in the works and will support the Debug Adapter Protocol which connects Theia to 50+ existing debuggers.</p>
<p><strong>Extensibility</strong></p>
<p>Besides the ability to run Theia in browsers there is another important difference to VS Code: VS Code extensions are limited to what is exposed in the VS Code\u2019s extension API. For instance, it is not possible to create a new view in a VS code extension. This is a serious blocker for more advanced extensions. Contrarily in Theia where extensions are first class building blocks an extension can deep integration and make use of everything. Even fully white-labeled products are possible due to its flexible architecture. That said, the Theia team is working on supporting VS Code extensions, additionally.</p>
<p><strong>Outlook</strong></p>
<p>Providing automated and disposable workspaces that tightly integrate with GitHub projects and the different contexts eliminates time-consuming transitions and streamlines the developer experience. No more \u2018it works on my machine\u2019 conversations can happen, because everybody uses the very same setup, which matches the production environment. The smooth onboarding experience will not only help professional developers but lower the barrier for contributions on open-source projects and start coding in general.</p>
<p>Gitpod is currently going through a public beta phase, where it can be used on public repositories. We are working on improved security, better performance and more cool features. Also, Gitpod is getting support for integration with additional applications, such as Bitbucket, Gitlab, and Gerrit.</p>
<p>Open-source projects like Kubernetes, Theia, TypeScript, VS Code and thousands of other libraries are the giant\u2019s shoulders Gitpod is based on. We hope by offering free usage of Gitpod for public GitHub projects we can further support the flourishing landscape of open-source projects, making it easier for everyone to contribute and for maintainers to review those contributions.</p>`
  })}`;
});
var githubFlow = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Github_flow,
  metadata: metadata$2V,
  prerender: prerender$37
});
const metadata$2U = {
  author: "corneliusludmann, svenefftinge",
  date: "Thu, 06 Oct 2020 14:00:00 UTC",
  excerpt: "Today, we are super excited to share that we\u2019ve partnered with GitLab and built a native Gitpod integration in GitLab\u2019s UI.",
  image: "teaser.jpg",
  slug: "gitlab-integration",
  subtitle: "Launch Gitpod workspace from GitLab",
  title: "Native GitLab Integration"
};
const prerender$36 = true;
const Gitlab_integration$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2U), {}, {
    default: () => `<p>At Gitpod we want to make developers\u2019 lives easier. Starting automated dev environments for your daily coding tasks is already very easy: Just prefix your repository URL with <code>gitpod.io/#</code> and you are ready to go. To make this even better, you can install a browser extension which adds a convenient button to any GitLab, GitHub, or Bitbucket repository that lets you launch a Gitpod workspace with one click.</p>
<p>Recently we asked ourselves how we could streamline the integration with your daily routine even more. Today, we are super excited to share that we\u2019ve partnered with GitLab and built a <a href="${"https://gitlab.com/gitlab-org/gitlab/-/merge_requests/37985"}" rel="${"nofollow"}">native Gitpod integration in GitLab\u2019s UI</a>.</p>
<h2 class="${"h1"}">The last missing piece in your GitLab DevOps pipeline</h2>
<p>GitLab is one of the most popular DevOps tools/platforms out there, used by more than 100,000 organizations across the globe. Through its Web IDE, simple edits can already be made today from within the application. However, for more advanced programming tasks, developers require a full development environment.</p>
<p>Such dev environments not only include a professional IDE/editor with all the convenient plugins for the project at hand, but also things like compilers, build tools, code generators, databases, and application servers.</p>
<p>Until now GitLab users would set up and maintain a single dev environment on their local machines. It\u2019s time to free engineers from wasting their time with such tedious tasks and apply the lessons learned from CI/CD and infrastructure as code to dev environments.</p>
<p>Why not automate the provisioning of dev environments? Teams should be able to spin up fresh environments for each new task without waiting or any manual steps involved.</p>
<p>GitLab and Gitpod started a partnership to bring Gitpod\u2019s ready-to-code dev environments to GitLab. As a first result of this collaboration you can now launch cloud-based dev environments with one click directly from gitlab.com (even without the Gitpod browser extension).</p>
<p><img src="${"/images/blog/gitlab-integration/gitpod-button-on-gitlab.png"}" alt="${"Gitpod button on GitLab project page"}"></p>
<h2 class="${"h1"}">\u201CEveryone can contribute\u201D</h2>
<p>GitLab\u2019s credo \u201CEveryone can contribute\u201D is a perfect fit for Gitpod because contributing becomes much simpler when you allow anyone to spin up a ready-to-code development environment in a few seconds.</p>
<p>GitLab\u2019s engineers have worked on lowering the barrier to contributions on GitLab itself through a comprehensive <a href="${"https://about.gitlab.com/community/contribute/"}" rel="${"nofollow"}">contribution guide</a> and even a <a href="${"https://gitlab.com/gitlab-org/gitlab-development-kit"}" rel="${"nofollow"}">GitLab Development Kit (GDK)</a> that sets up your dev environment on your machine. But still, running the GDK installer takes at least 30 minutes to download and install dependencies, clone the GitLab repository, and start all services you need like the database, a webserver, etc.</p>
<p>We are currently helping the GitLab team <a href="${"https://gitlab.com/gitlab-org/gitlab/-/merge_requests/43103"}" rel="${"nofollow"}">to build a fully-automated Gitpod configuration for the GitLab source code</a>. This makes contributing to the GitLab source code itself as easy as clicking a button. Instead of waiting half an hour for a bunch of libs and tools to get installed, with Gitpod you are productive within just a few minutes. Once this configuration is merged, you will be able to just click on the Gitpod button of the <a href="${"https://gitlab.com/gitlab-org/gitlab"}" rel="${"nofollow"}">GitLab repository</a>, and everything will be set up for your first GitLab contribution.</p>
<p><a href="${"https://gitlab.com/gitlab-org/gitlab-development-kit/-/issues/1076#note_419638250"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"/images/blog/gitlab-integration/gitlab-integration-quote.png"}" alt="${"GitLab integration quote"}"></a></p>
<h2 class="${"h1"}">Hook up your GitLab Self-Managed with Gitpod.io</h2>
<p>The Gitpod integration is already live on gitlab.com today and is going to be part of <a href="${"https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/61933"}" rel="${"nofollow"}">GitLab\xA013.5</a> which is released on October 22nd. At that point, you\u2019ll be able to connect your GitLab self-managed installation to gitpod.io, through a new feature that lets you register additional Git providers.</p>
<p>Furthermore, you can <a href="${"https://www.gitpod.io/self-hosted/"}" rel="${"nofollow"}">self-host Gitpod</a> (which is <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">open source</a>) on your own Kubernetes cluster and configure it with your GitLab instance. We have convenient installation scripts for GCP and AWS.</p>
<h2 class="${"h1"}">What\u2019s next?</h2>
<p>We are continuously working on improving the GitLab integration and implementing new features for GitLab users (e.g. managing merge requests within Gitpod, <a href="${"https://gitlab.com/gitlab-org/gitlab/-/merge_requests/43352"}" rel="${"nofollow"}">adding a Gitpod button on Merge Requests</a>, etc.). You can also install the <a href="${"https://open-vsx.org/extension/GitLab/gitlab-workflow"}" rel="${"nofollow"}">GitLab VS Code Extension</a> in Gitpod to interact with GitLab. Just go to the Extensions view (in the left vertical menu), search for \u201CGitLab\u201D and choose \u201CInstall\u201D.</p>
<p><img src="${"/images/blog/gitlab-integration/gitlab-vscode-extension.png"}" alt="${"Gitpod button on GitLab project page"}"></p>
<h2 class="${"h1"}">Try the Gitpod integration now!</h2>
<p>The GitLab integration is available at GitLab.com and in your <a href="${"https://gitlab.com/help/integration/gitpod.md"}" rel="${"nofollow"}">self-managed GitLab</a> soon. Don\u2019t have a project at hand? Try the demo project <a href="${"https://gitlab.com/gitpod/spring-petclinic"}" rel="${"nofollow"}">Spring PetClinic</a> which has a proper Gitpod configuration committed.</p>
<p>You are a passionate GitLab user? Please share your experiences with the Gitpod integration with us! Visit our community forum at <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">community.gitpod.io</a>, report bugs in the <a href="${"https://github.com/gitpod-io/gitpod/"}" rel="${"nofollow"}">Gitpod repository</a>, or send us an e-mail at <a href="${"mailto:support@gitpod.io"}">support@gitpod.io</a>!</p>`
  })}`;
});
var gitlabIntegration$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitlab_integration$1,
  metadata: metadata$2U,
  prerender: prerender$36
});
const metadata$2T = {
  author: "svenefftinge",
  date: "Wed Dec 04 2019 13:49:24 GMT+0000 (UTC)",
  excerpt: "We are happy to announce that you can finally enjoy Gitpod's frictionless ready-to-code dev environments on GitLab as well.",
  image: "teaser-gitlab-cover.png",
  slug: "gitlab-support",
  subtitle: "Your devops toolchain is finally complete!",
  title: "GitLab Support for Gitpod is Here \u{1F389}"
};
const prerender$35 = true;
const Gitlab_support = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2T), {}, {
    default: () => `<p>We are happy to announce that you can finally enjoy Gitpod\u2019s frictionless ready-to-code dev environments on GitLab as well.</p>
<p><img src="${"/images/blog/gitlab-support/teaser-gitlab-gitpod.jpg"}" alt="${"gitpod loves gitlab"}"></p>
<h2 class="${"h1"}">Getting Started with GitLab and Gitpod</h2>
<p>Starting a dev environment for a GitLab project works just as with GitHub, i.e. you prefix any GitLab project URL with <code>gitpod.io/#</code>.</p>
<p>You can try it out with the Spring PetClinic example:
<a href="${"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic"}" rel="${"nofollow"}">https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic</a></p>
<p>Besides the standard project URL, Gitpod supports</p>
<ul><li><p>opening file URLs</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/blob/master/src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/.../petclinic/PetClinicApplication.java</a></p></li>
<li><p>opening branches</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/tree/my-branch"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/tree/my-branch</a></p></li>
<li><p>opening issues</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/issues/1"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/issues/1</a></p></li>
<li><p>opening merge requests</p>
<p style="${"font-size: 70%;"}">Example: <a href="${"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/merge_requests/1"}" target="${"blank"}"><b style="${"font-weight:700;"}">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/merge_requests/1</a></p></li></ul>
<p>Depending on the context, your dev environment will be initialized differently.</p>
<p>For instance, if you start a workspace from the issue context above, you\u2019ll get a fresh workspace with a new local branch based on <code>master</code>.</p>
<p>The new local branch will be named like <code>&lt;username&gt;/&lt;issue-title&gt;-&lt;issue-nr&gt;</code>, in my case it is:
<code>svenefftinge/allow-skip-first-name-1</code> (if the issue title is too long, only the first few words will be included in the branch name).</p>
<p><img src="${"/images/blog/gitlab-support/gitlab-issue-context-status.png"}" alt="${"GitLab Issue Context"}"></p>
<h2 id="${"configure-your-project"}">Configure your project<a href="${"#configure-your-project"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To get the most out of Gitpod, you need to tell it how a perfect dev environment for your project looks like. Dev environments run as containers which you can configure through custom Docker files.</p>
<p>Furthermore you can specify which tasks should run after a fresh checkout. Usually this includes build steps, downloading dependencies and running some unit tests. Read below\u2019s section on prebuilds, to make Gitpod automatically run these steps as a CI pipeline whenever someone pushes changes to your project.</p>
<p>There is much more you can do to make sure every team member gets a ready-to-code dev environment when they need one. Please refer to the <a href="${"/docs/configure"}">docs</a> for details.</p>
<h2 id="${"prebuilds"}">Prebuilds<a href="${"#prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod\u2019s <a href="${"/docs/prebuilds"}">prebuilt workspaces</a> are key to providing ephemeral, ready-to-code dev environments for your branches and projects. You can configure Gitpod to run your project\u2019s build asynchronously every time someone pushes new commits or branches to your repository. So when a developer wants to start coding, she can, because everything is already prepared.</p>
<p>Enabling prebuilds on your GitLab project is done by configuring a Webhook. But don\u2019t fear, you don\u2019t have to do that manually, just run a prebuild on your project and it will be configured automatically. To do that, use the prefix <code>https://gitpod.io/#prebuild/</code>, as in</p>
<blockquote><p><strong><a href="${"https://gitpod.io/#prebuild/"}" rel="${"nofollow"}">https://gitpod.io/#prebuild/</a></strong><code>https://gitlab.com/&lt;myuser&gt;/&lt;myrepo&gt;</code></p></blockquote>
<h2 id="${"we-need-your-feedback"}">We Need Your Feedback<a href="${"#we-need-your-feedback"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>All important features in Gitpod go through a beta phase, so you get the chance to try it early and participate in further development of the feature. So, please <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">reach out</a> with anything that bugs you or any ideas you have that could make your daily life with GitLab and Gitpod more seamless. <span aria-hidden="${"true"}">\u2764\uFE0F</span></p>
<h2 id="${"i-run-gitlab-self-managed"}">I run GitLab Self-Managed!<a href="${"#i-run-gitlab-self-managed"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you want to use Gitpod with your self-managed instance of GitLab, you\u2019ll need to wait a bit longer for Gitpod Enterprise (or <a href="${"https://www.gitpod.io/contact"}" rel="${"nofollow"}">apply for our private beta</a>).</p>
<p>Gitpod Enterprise will be released soon and allows to run Gitpod either self-managed or managed by us. Gitpod Enterprise runs on Google Cloud or any vanilla Kubernetes installation and can be configured to connect with any GitLab or GitHub installation.</p>`
  })}`;
});
var gitlabSupport = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitlab_support,
  metadata: metadata$2T,
  prerender: prerender$35
});
const metadata$2S = {
  author: "svenefftinge",
  date: "Mon Apr 5 2019 15:00:00 GMT+0000 (UTC)",
  excerpt: "Every day developers waste millions of hours switching contexts between projects and branches, setting up development environments, or",
  image: "teaser-launch-min.jpg",
  slug: "gitpod-launch",
  subtitle: "No Setup, Less Waiting, More Flow",
  teaserImage: "teaser-launch-min.jpg",
  title: "Introducing Gitpod \u2014 Frictionless Coding on GitHub"
};
const prerender$34 = true;
const Gitpod_launch = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2S), {}, {
    default: () => `<p>Every day developers waste millions of hours switching contexts between projects and branches, setting up development environments, or simply waiting for builds to complete.</p>
<p>This friction is not only time consuming but is a serious barrier for contributors. Reading through a long list of setup instructions and messing up your own laptop is just too much effort.</p>
<p>Today, we are happy to announce the launch of <a href="${"https://gitpod.io"}" rel="${"nofollow"}">Gitpod.io</a>, an online service that provides disposable, ready-to-code development environments for GitHub projects.</p>
<h2 id="${"one-click-dev-environments-for-github"}">One-Click Dev Environments for GitHub<a href="${"#one-click-dev-environments-for-github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here\u2019s how Gitpod works: You are on GitHub and want to start working on a project. Instead of going through the manual setups, etc. you simply click a button to start a ready-to-code dev environment in your browser. You can now code, review, or just try out the project. Once you are done you simply close the tab.</p>
<p><img src="${"/images/blog/gitpod-launch/browser-ext.png"}" alt="${"Gitpod button added by Gitpod browser extension"}"></p>
<p>Don\u2019t see the button on GitHub yet? You need to <a href="${"/docs/browser-extension"}">install a small browser extension</a> to get it. Alternatively, you can just prefix any GitHub URL with \u201C<a href="${"https://gitpod.io/#"}" rel="${"nofollow"}">gitpod.io/#</a>\u201D.</p>
<p>You can try Gitpod right now. It\u2019s free for public repositories.</p>
<h2 id="${"no-setup"}">No Setup<a href="${"#no-setup"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Not all projects are equal. We maintain a <a href="${"https://github.com/gitpod-io/workspace-images/blob/master/full/Dockerfile"}" rel="${"nofollow"}">developer friendly docker image</a> that includes all the commonly used tools and version managers. But you can point to your own docker image in a <strong>.gitpod.yml</strong> file. Gitpod will pick it up and even build the image if needed. Read <a href="${"/blog/docker-in-gitpod"}">Gero\u2019s post</a> for more details.</p>
<p>With Gitpod, contributors don\u2019t need to go through a list of usually outdated setup instructions. Instead, they get exactly what they need for the project at hand with no additional effort. As a side-effect, any \u201Cworks-on-my-machine\u201D scenarios are eliminated, because every team member uses the same working setup on the same kind of machine in the cloud. Since the <strong>.gitpod.yml</strong> is versioned with the code, going back to old releases and branches becomes super easy, too. We call this <a href="${"/blog/dev-env-as-code"}">dev environment as code</a>.</p>
<p>To optimize the experience, the <strong>.gitpod.yml</strong> accepts <a href="${"/docs/configure"}">further configuration</a>, where you can automatically start builds, watchers and dev servers in multiple terminals. You can configure how they appear in the IDE layout and hook up all your web ports and previews.</p>
<p>As a project owner you should do everything you can to streamline the experience for contributors, so everybody including yourself can focus on being creative and writing code. Gitpod lets you automate the setup and make sure developers can access a dev environment that really is ready to code.</p>
<p>A great example is <a href="${"https://github.com/ssloy/tinyraytracer/wiki"}" rel="${"nofollow"}">ssloy\u2019s tinyraytracer project</a>. It\u2019s a tutorial for raytracing in C++ and is configured so it runs the build and automatically opens the rendered graphics. The author has even added Gitpod buttons to individual steps in the tutorial to make following along easier.</p>
<p><img src="${"/images/blog/gitpod-launch/tinyrt.png"}" alt="${"Tinyraytracer Gitpod workspace"}"></p>
<h2 id="${"less-waiting"}">Less Waiting<a href="${"#less-waiting"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>There is an additional bit of friction that every developer has to go through regularly:</p>
<p>Running the build and downloading dependencies.</p>
<p>Starting today, <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">the new Gitpod app is available on the GitHub marketplace</a>. It is the first of its kind and the only one in the new IDE category.</p>
<p>Once you\u2019ve installed the app for your GitHub repository, it will pre-build dev environments on every commit. So when anybody opens a Gitpod environment on your project, the dev environment is opened as described above. But now also the build ran through and all dependencies are already there.</p>
<p>We call this feature prebuilt workspaces and you can read more about it in <a href="${"/blog/prebuilds"}">Chris\u2019 post</a>.</p>
<p><img src="${"/images/blog/gitpod-launch/prebuilt-workspaces.png"}" alt="${"Prebuilt Workspaces"}"></p>
<h2 id="${"more-flow"}">More Flow<a href="${"#more-flow"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Your dev environment opens differently depending on the GitHub page you are coming from. You can, for instance, open branches or files by simply going to the respective GitHub page and pressing the button (or prefixing the URL) there.</p>
<p>When coming from an issue, Gitpod understands you want to fix it, so you\u2019ll get a fresh local branch and the commit message is prepared with a reference to the issue.</p>
<p>Starting a workspace from a pull request will open in code-review mode. The list of changes is opened on the left so you can easily go through them and view the details in diff editors on the right. Of course, you can comment within the IDE and even submit your code review.</p>
<p>Even if you prefer your local machine for development, being able to do <a href="${"/blog/when-code-reviews-lgtm"}">deep code reviews</a> in a browser is a great way to improve your workflow.</p>
<p><img src="${"/images/blog/gitpod-launch/inline-comments.png"}" alt="${"Inlined Code Review"}"></p>
<h2 id="${"a-complete-ide-running-in-the-cloud"}">A Complete IDE Running in the Cloud<a href="${"#a-complete-ide-running-in-the-cloud"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While Gitpod keeps the convenience and accessibility of online coding playgrounds and sandboxes, it is not a toy but a complete dev environment running in the cloud.</p>
<p>We teamed-up with Google, Ericsson, Arm and Red Hat to develop the open-source project <a href="${"https://theia-ide.org"}" rel="${"nofollow"}">Eclipse Theia</a>. The project puts <a href="${"https://code.visualstudio.com/"}" rel="${"nofollow"}">VS Code</a>\u2019s state-of-the-art technology and UX into the browser based on an extensible architecture that is optimized for the cloud.</p>
<p>Gitpod already comes with several VS Code extensions pre-installed (such as Go support from Microsoft\u2019s own extension). We will be adding more popular VS Code extensions shortly, and later allow users to define any extensions they want.</p>
<p>In addition to one of the best code editors, Gitpod environments provide full featured terminals backed by Linux containers running in the cloud. As a result, you get the same command line tools you would use locally together with the hottest IDE tech available today. And all of that in a browser tab.</p>
<h2 id="${"collaboration"}">Collaboration<a href="${"#collaboration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod comes with two major features supporting collaboration.</p>
<ul><li><p><a href="${"/docs/sharing-and-collaboration"}">Sharing running dev environments</a> with other users comes in handy if you want to look at code with a colleague to hunt down a bug together or do some pair programming. Collaborators will see the same code you see and even the terminals are synced and shared.</p></li>
<li><p><a href="${"/blog/workspace-snapshots"}">Snapshots</a> are useful in many ways. In a nutshell, they allow taking an immutable copy of your dev environment at any point in time. You can share the provided link wherever you want. Users opening such a snapshot link will get an exact clone of the environment including all state and even UI layout. This feature is great for sharing reproducibles in issues, but also good for blog posts or solutions on Stack Overflow.</p></li></ul>
<p><img src="${"/images/blog/gitpod-launch/collaboration.png"}" alt="${"Collaboration: Share Running Workspace or Snapshot"}"></p>
<h2 id="${"pricing"}">Pricing<a href="${"#pricing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>An important part of leaving the beta was to find a good pricing model that addresses the needs for the various user groups.</p>
<p>We think we have found a good balance by providing the following individual subscription options:</p>
<ul><li>a <strong>free 100-hour per month plan</strong> for open-source development</li>
<li>a <strong>paid 100-hour per month plan</strong> for individuals working privately</li>
<li>a <strong>paid unlimited plan</strong> for professional use</li></ul>
<p><em>(I know some of you are lucky enough to do professional open-source. Decide what works best for you in that case ;-))</em></p>
<p>We also offer <strong>team subscriptions</strong>, which allow managers to buy a batch of seats and assign them to the team.</p>
<p>And, of course, a special <strong>students discount</strong> is in store, eligible if your primary GitHub URL belongs to an educational institution.</p>
<h2 id="${"thank-you-\uFE0F"}">Thank You \u2764\uFE0F<a href="${"#thank-you-%EF%B8%8F"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>I want to take the opportunity to thank all the people who have helped to make Gitpod a reality: all the <a href="${"https://twitter.com/JeremyJaydan/status/1096742668137246721"}" rel="${"nofollow"}">enthusiastic</a> <a href="${"https://twitter.com/RalfDMueller/status/1054079167841660928"}" rel="${"nofollow"}">early</a> <a href="${"https://twitter.com/doppelganger9/status/1088926330857680896"}" rel="${"nofollow"}">adopters</a> who provided <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">great feedback</a> during the beta phase; contributors who have helped by identifying bugs and by sharing their use cases; and of course the <a href="${"https://github.com/theia-ide/theia/graphs/contributors"}" rel="${"nofollow"}">Eclipse Theia community</a> working with passion on an open-source IDE platform for the future.</p>
<p>Furthermore, I want to thank Michael Bernstein from <a href="${"https://www.reifyworks.com/"}" rel="${"nofollow"}">Reify</a> for clarifying our messaging with us and Kelly Fitzpatrick and the rest of the <a href="${"https://redmonk.com/"}" rel="${"nofollow"}">Redmonk</a> team for their guidance and helpful feedback.</p>
<p>Finally, of course, I want to send a big shout out to my friends at <a href="${"https://www.typefox.io/about/"}" rel="${"nofollow"}">TypeFox</a>. You are absolutely awesome and being able to work with you on such a great product is everything I want.</p>`
  })}`;
});
var gitpodLaunch = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_launch,
  metadata: metadata$2S,
  prerender: prerender$34
});
const metadata$2R = {
  author: "svenefftinge",
  date: "Tue Jul 31 2018 06:02:26 GMT+0000 (UTC)",
  excerpt: "After over one year of intensive work, we are proud to announce the public Beta of Gitpod. Gitpod is an online IDE which can be launched",
  image: "gitpod-online-ide.png",
  slug: "gitpod-online-ide",
  subtitle: "One Click to Coding!",
  title: "Gitpod \u2014 Online IDE For GitHub",
  url: "https://medium.com/gitpod/gitpod-gitpod-online-ide-for-github-6296b907a886"
};
const prerender$33 = true;
const Gitpod_online_ide = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2R), {}, {
    default: () => `<p>After over one year of intensive work, we are proud to announce the public Beta of Gitpod.</p>
<p>Gitpod is an online IDE which can be launched from any GitHub page. Simply <strong>prefix any GitHub-URL with \u201C<em><a href="${"https://gitpod.io/#"}" rel="${"nofollow"}">https://gitpod.io/#</a></em>\u201D</strong> or use our <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki?hl=en"}" rel="${"nofollow"}">browser extension</a> that adds a button to GitHub pages.</p>
<p>Within seconds, Gitpod provides you with a fully working development environment, including a VS Code-powered IDE and a cloud-based Linux container configured specifically for the project at hand.</p>
<center><iframe width="${"560"}" height="${"315"}" src="${"https://www.youtube.com/embed/D41zSHJthZI"}" title="${"Gitpod introduction"}" frameborder="${"0"}" allowfullscreen></iframe></center>
<h2 id="${"yet-another-cloud-ide"}"><strong>Yet Another Cloud IDE?</strong><a href="${"#yet-another-cloud-ide"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod is not another cloud IDE, aiming at replacing desktop development. Instead, Gitpod is a natural extension to GitHub. The limited editing capabilities of GitHub are far too often forcing context switches to our local machines. <strong>Gitpod extends our life on GitHub</strong>.</p>
<p>Also, Gitpod is super simple: You don\u2019t maintain your projects or workspaces using overwhelming and complicated dashboards. Instead, any configuration is safely stored and versioned on GitHub.</p>
<h2 id="${"stay-in-the-github-flow"}"><strong>Stay In The GitHub Flow</strong><a href="${"#stay-in-the-github-flow"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod is highly contextual, such that it opens the IDE in the correct mode depending on the context:</p>
<p>If you are looking at a particular file of a certain commit on GitHub, starting a Gitpod workspace will check out the right version and open the file you\u2019ve been looking at in the IDE.</p>
<p>Starting a Gitpod workspace from an issue will automatically create a branch and preconfigure the commit message.</p>
<p><strong>Starting Gitpod from a pull request beams your right into code review mode.</strong></p>
<h2 id="${"github-integration"}"><strong>GitHub Integration</strong><a href="${"#github-integration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once you are in the IDE, you can interact with GitHub in various ways. Besides the obvious Git integration, you can do things like <strong>commenting inline in editors, approving and even merging PRs</strong>.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6908/1*HNDYawJpDgX6gP_e0w17mg.png"}" alt="${"Inline Comments For Pull Requests"}"><em>Inline Comments For Pull Requests</em></p>
<h2 id="${"automated-setup"}"><strong>Automated Setup</strong><a href="${"#automated-setup"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod is built on Kubernetes and you can use any Docker image for your development environments. This allows to fully automate the setup and frees everybody from manually going through long and outdated setup documentation. No more \u201Cworks on my machine\u201D scenarios.</p>
<p>Gitpod provides your collaborators a <strong>single-click-to-contribute</strong> <strong>experience</strong>.</p>
<p>More information on how to configure Gitpod can be found <a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">here</a>.</p>
<h2 id="${"fire-and-forget"}"><strong>Fire and Forget</strong><a href="${"#fire-and-forget"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod workspaces are disposable. You simply create a fresh one whenever you need. Once you are done with your task, the IDE brings you back to GitHub, so you can continue on the next task.</p>
<p>You usually never need to go back to any workspace, but of course you can in case you need to.</p>
<h2 id="${"full-terminal-access"}"><strong>Full Terminal Access</strong><a href="${"#full-terminal-access"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod gives developers full featured terminals to run any processes such as compiling, linting or simply running tests or your application. Any docker image works and you can even configure Gitpod to automatically launch certain tasks on start.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6796/1*K8oKjiVfaptpeI27UXPbcA.png"}" alt="${"Terminal"}"></p>
<h2 id="${"open-source"}"><strong>Open Source</strong><a href="${"#open-source"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The IDE in Gitpod is based on <a href="${"http://theia-ide.org"}" rel="${"nofollow"}">Theia</a>, an open-source project that we (<a href="${"https://www.typefox.io/"}" rel="${"nofollow"}">TypeFox</a>) have started together with our friends from Ericsson in early 2017. You can think of it as <strong>the online version of VS Code</strong>. We love VS Code, but needed some additional properties, like a more extensible architecture and the ability to run in browsers connected to a remote backend. Theia is a true open-source project, hosted at the Eclipse Foundation and developed by a diverse crowd of engineers backed by TypeFox, Ericsson, Red Hat, Arm and others.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6796/1*5DnbR6-FbyVQ8ILgFHJXOw.png"}" alt="${"Language Tooling In Action"}"><em>Language Tooling In Action</em></p>
<h2 id="${"supports-many-languages"}"><strong>Supports Many Languages</strong><a href="${"#supports-many-languages"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Being based on VS Code and its Language Server Protocol, Theia supports most major programming languages. The table below provides a good overview of the current state.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/4712/1*BshL6_wwY2XYRDKSMYiSDg.png"}" alt="${"Current State of Supported Programming Languages"}"><em>Current State of Supported Programming Languages</em></p>
<p>Additional languages like <strong>C#, Swift, Clojure, Groovy, Objective-C, Markdown, Less, XML and many others</strong> are supported with syntax coloring, as well. Because it is so easy to create an extension for Theia, support will improve both in breadth (more languages) and depth, shortly.</p>
<h2 id="${"use-it-for-free"}"><strong>Use It For Free!</strong><a href="${"#use-it-for-free"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can use Gitpod with any GitHub repository. The login is done through GitHub OAuth. At first, Gitpod will ask for accessing public repos, only. If you want to use it with a private repository, Gitpod will ask again for more permissions.</p>
<p>Why not try it now? If you don\u2019t have a particular repository in mind, you can pick one of the below:</p>
<ul><li><p><strong>JavaScript</strong>:
<a href="${"https://gitpod.io/#https://github.com/ooade/NextSimpleStarter"}" rel="${"nofollow"}">https://gitpod.io/#<strong>https://github.com/ooade/NextSimpleStarter</strong></a></p></li>
<li><p><strong>Go</strong>:
<a href="${"https://gitpod.io/#https://github.com/demo-apps/go-gin-app"}" rel="${"nofollow"}">https://gitpod.io/#<strong>https://github.com/demo-apps/go-gin-app</strong></a></p></li>
<li><p><strong>Java</strong>:
<a href="${"https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}">https://gitpod.io/#<strong>https://github.com/gitpod-io/spring-petclinic</strong></a></p></li>
<li><p><strong>Ruby</strong>:
<a href="${"https://gitpod.io/#https://github.com/gitpod-io/rails_sample_app"}" rel="${"nofollow"}">https://gitpod.io/#<strong>https://github.com/gitpod-io/rails_sample_app</strong></a></p></li>
<li><p><strong>Python</strong>:
<a href="${"https://gitpod.io/#https://github.com/sibtc/django-beginners-guide"}" rel="${"nofollow"}">https://gitpod.io/#<strong>https://github.com/sibtc/django-beginners-guide</strong></a></p></li>
<li><p><strong>PHP</strong>:
<a href="${"https://gitpod.io/#https://github.com/symfony/demo"}" rel="${"nofollow"}">https://gitpod.io/#<strong>https://github.com/symfony/demo</strong></a></p></li></ul>
<h2 id="${"where-are-we-going-from-here"}"><strong>Where Are We Going From Here?</strong><a href="${"#where-are-we-going-from-here"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Many other features are ready to use, such as Git integration or the search functionality. But also exciting new features are in development, such as <strong>debugging, collaboration </strong>and <strong>support for GitLab and Bitbucket</strong>. Even <strong>support for VS Code extensions</strong> is on its way.</p>
<p>Besides more features, we are focussing on improving the overall experience by streamlining rough edges, fixing bugs and improving performance. New releases will come out continuously.</p>
<p>If you have feedback or find bugs, please <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">file them here</a>.</p>
<p><strong>Happy coding!</strong></p>`
  })}`;
});
var gitpodOnlineIde = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_online_ide,
  metadata: metadata$2R,
  prerender: prerender$33
});
const metadata$2Q = {
  author: "ghuntley",
  date: "Monday, 26 Apr 2021 11:00:00 UTC",
  excerpt: "The truth is free software isn't free. Hours have rates. Rates require payment. What if the high achievers that our digital society is built upon were empowered to become independent artists?",
  image: "teaser.jpg",
  slug: "gitpod-open-source-sustainability-fund",
  subtitle: null,
  teaserImage: "teaser.jpg",
  title: "Gitpod Open-Source Sustainability Fund"
};
const prerender$32 = true;
const Gitpod_open_source_sustainability_fund = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2Q), {}, {
    default: () => `<p>The myriad of tools relied upon by developers every day is built and maintained almost exclusively by unpaid volunteers. The maintainers of open-source projects - our digital infrastructure - are in desperate need of support. Because code is less charismatic than a hit YouTube video or Kickstarter campaign, there is little public awareness and appreciation for this work.</p>
<p>Open-source, by design, is not financially sustainable. Finding reliable, well-defined funding sources is exceptionally challenging. As projects grow in size, many maintainers burn-out, find themselves unable to satisfy increasing support/maintenance demands and, unfortunately, in my particular case, <a href="${"https://ghuntley.com/a-new-chapter"}">irrevocably harm their marriage</a>.</p>
<a hre="${"https://twitter.com/freakboy3742"}">Russell Keith-Magee</a> delivered this beautiful keynote at PyCon, which captures the essence better than I can put in writing because it is such a personal topic.
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/0t85TyH-h04?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<p>Much has changed since Russells\u2019 keynote and the infrastructure to financially support open-source maintainers now exists thanks to the efforts of Open Collective and GitHub Sponsors.</p>
<h2 id="${"shape-the-future-you-want-to-live-in"}">Shape the future you want to live in<a href="${"#shape-the-future-you-want-to-live-in"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The truth is free software isn\u2019t free. How much is a task going to cost in person hours? Hours have rates. Rates require payment. Yet, an entire community of developers provide their services outside of their day job to produce tools consumed by businesses.</p>
<p>Did you know there are less than 2100 people in the inner GitHub open-source maintainer community?</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/maintainer-community.png"}" alt="${"Maintainer Community"}"></p>
<p><strong>I often wonder what the future would look like if these high achievers that our digital society is built upon were empowered to become independent artists.</strong> If just one of those people can help more people better understand a technology or improve the developer experience for an entire ecosystem what is the worth/value of that and why isn\u2019t our industry doing that yet?</p>
<p>The word volunteer, by definition, means those who have the ability and time to give freely.</p>
<p>Paying for resources that are being consumed broadens the list of people who can do open-source. Additionally, money enables open-source maintainers to buy services and outsource the activities that do not bring them joy.</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/teaser.jpg"}" alt="${"Money enables diversity"}"></p>
<p>At Gitpod, we firmly believe that working for an open-source project should be a legitimate alternative to a career working for a for-profit corporation. Additionally, we\u2019d like everyone to be able to maintain open-source projects, not just people with the right financial background or youth that enables the ability to volunteer.</p>
<h2 id="${"actions-speak-louder-than-words"}">Actions speak louder than words<a href="${"#actions-speak-louder-than-words"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Today we are announcing five things:</p>
<h3 class="${"h4"}">Open Source Sustainability Fund</h3>
<p>Gitpod has created an open-source sustainability fund and allocated an <em>initial</em> amount of USD 30,000 towards securing our open-source supply chain by paying open-source maintainers.</p>
<h3 class="${"h4"}">$1 for each new community member</h3>
<p>For every registration to our newly created <a href="${"https://www.gitpod.io/chat"}">discord channel</a> during the next month we\u2019ll donate an additional $1 to open-source projects we depend upon.</p>
<h3 class="${"h4"}">DevX Conf</h3>
<p>The upcoming (<a href="${"https://devxconf.org/"}">28th of April from 5pm CEST</a>) non-profit conference on developer experience - DevX Conf will donate all surplus and USD 500 for each Gold Sponsor to open-source projects. Additionally attendees of the conference will have a say how an additional USD 10,000 in open-source funding will be distributed between open-source projects that are unseen digital infrastructure.</p>
<h3 class="${"h4"}">Build in the open</h3>
<p>Over the coming months, Gitpod will share our experiences with funding open-source projects for other companies to follow and share insights for maintainers who wish to become financially independent.</p>
<h3 class="${"h4"}">Democratize contributions</h3>
<p>We recognise that money <a href="${"https://www.youtube.com/watch?v=Mm_RuObpeGo"}">isn\u2019t the only way to resolve open-source sustainability</a>. Often the problem is access and the initial project setup friction. To address this Gitpod has made <a href="${"/docs/professional-open-source"}">Gitpod free for open-source communities</a> so that open-source maintainers can onboard new contributors to their project with standardized development environments. With Gitpod people from all over the world can contribute from any device without the typical $3,000 Macbook Pro barrier to entry.</p>
<h2 id="${"its-time-to-start-giving-back"}">It\u2019s time to start giving back<a href="${"#its-time-to-start-giving-back"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Over the last couple months Gitpod has been emailing maintainers of dependencies that Gitpod consumes (<a href="${"https://github.com/gitpod-io/gitpod/blob/main/License.third-party.npm.txt"}">npm</a>/<a href="${"https://github.com/gitpod-io/gitpod/blob/main/License.third-party.go.txt"}">golang</a>/<a href="${"https://github.com/gitpod-io/workspace-images/blob/master/base/Dockerfile"}">Docker</a>) and asking them to get themselves signed up into the GitHub Sponsors or Open Collective programs.</p>
<p>If you appear in our bill of materials then Gitpod would like to unconditionally shout you some beers, some nice food or more as our way of saying thank-you for helping make Gitpod possible.</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/email.png"}" alt="${"Funding Open-Source Projects Email"}"></p>
<p>I hope more companies will follow Gitpod\u2019s lead and do this simple act en masse because maintainers must have income diversity because diversity creates a freedom that enables roadmap and project independence.</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/thank-you-tweet.png"}" alt="${"Thank-you for sponsoring tweet"}"></p>
<p>If you are a maintainer of an open-source project, then there\u2019s one simple, easy step you can do to enable Gitpod and other companies to provide financial support\u2026</p>
<p>Go sign up to <a href="${"https://github.com/sponsors"}">GitHub Sponsors</a> or <a href="${"https://www.opencollective.com"}">Open Collective</a> as sending hand crafted emails asking you to signup isn\u2019t scalable and most companies would not do this manual grunt work. \u{1F609}</p>
<h2 id="${"think-ahead-secure-your-supply-chain"}">Think ahead, secure your supply chain.<a href="${"#think-ahead-secure-your-supply-chain"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Nadia Eghbal, in 2016 with the support of the Ford Foundation, authored an <a href="${"https://www.fordfoundation.org/work/learning/research-reports/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"}">extensive report</a> into the unseen labour behind our digital infrastructure. She recently published the successor of the report: <a href="${"https://www.amazon.com.au/Working-Public-Making-Maintenance-Software/dp/0578675862"}">Working in Public: The Making and Maintenance of Open Source Software</a>. If you haven\u2019t read her work before, then start there.</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/xkcd.png"}" alt="${"Credit: XKCD"}">
<em>Credit: <a href="${"https://xkcd.com/2347/"}" rel="${"nofollow"}">XKCD</a></em></p>
<p>Eghbal, in her work outlines, digital infrastructure should be treated as a necessary public good. Free public source code makes it exponentially cheaper and easier for companies to build software and makes technology more accessible across the globe. However, there is a common misconception that the labour for open source projects is well-funded. In reality, it is largely created and maintained by volunteers who do it to build their reputations, out of a sense of obligation or simply as a labour of love.</p>
<p>The thing about open-source software that\u2019s too often forgotten, it\u2019s AS-IS, no exceptions. There is absolutely no SLA. That detail is right there in the license!</p>
<p><strong>In business terms, open-source maintainers are unpaid and unsecured vendors.</strong></p>
<p>Gitpod hopes other companies will also start taking steps to mitigate this critical risk in their technology stack. In future blog posts, we will be sharing our experiences with funding open-source projects and insights for maintainers who wish to become financially independent.</p>
<h2 id="${"towards-a-maintainer-economy"}">Towards a maintainer economy<a href="${"#towards-a-maintainer-economy"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here is what you can do today:</p>
<ol><li><span>1- </span>Generate the bill of materials in your commerical software.
    </li>
    <li><span>2- </span>Identify whom your unpaid vendors are.
    </li>
    <li><span>3- </span>Mitigate your supply chain risks.
    </li></ol>
<p>In practice, this involves going through each one of your projects in your dependency tree and deciding on the appropriate strategy for that particular dependency.</p>
<p>Gitpod has plenty of smaller dependencies for doing activities such as parsing TOML. As that dependency isn\u2019t of strategic importance, the strategy to mitigate the risk would be to fund the project.</p>
<p><img src="${"/images/blog/gitpod-open-source-sustainability-fund/decision-tree.png"}" alt="${"Open-source supply chain decision tree"}"></p>
<p>For dependencies that are of strategic importance, then the strategy would be a combination of financial support, becoming regular contributors to the project or even hiring the maintainers of these projects as engineers for [short|long]-term engagements.</p>
<p>Do you have more ideas on how funding can foster a diverse community? \u2192 Please <a href="${"/contact"}">get in contact</a>.</p>
<h2 id="${"see-you-at-devx-conference"}">See you at DevX Conference<a href="${"#see-you-at-devx-conference"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>That\u2019s it for now. I hope you\u2019ll join us for non-profit <a href="${"https://devxconf.org"}">DevX Conf</a>, a two-day virtual conference focusing on developer experience. Attendees of the conference will have a say how an additional USD 10,000 in open-source funding will be distributed between open-source projects that are unseen digital infrastructure.</p>
<ol><li><span>\u{1F4C6}   </span>From 5PM CEST on April 28-29.
    </li>
    <li><span>\u{1F4CD}  </span> <a href="${"https://devxconf.org"}">devxconf.org</a>.
    </li>
    <li><span>\u{1F3AB} </span> It&#39;s free &amp; non-profit.
    </li></ol>`
  })}`;
});
var gitpodOpenSourceSustainabilityFund = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_open_source_sustainability_fund,
  metadata: metadata$2Q,
  prerender: prerender$32
});
const metadata$2P = {
  author: "meysholdt",
  date: "Wed May 06 2020 14:49:24 GMT+0000 (UTC)",
  excerpt: "We are excited to announce the new release of Gitpod Self-Hosted in version 0.4.0. Gitpod Self-Hosted allows everyone to set-up and run a",
  image: "cloud-download.png",
  slug: "gitpod-self-hosted-0.4.0",
  subtitle: "Features, Fixes, Fixes, and Fixes",
  teaserImage: "cloud-download.png",
  title: "Gitpod Self-Hosted 0.4.0"
};
const prerender$31 = true;
const Gitpod_self_hosted_0_4_0 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2P), {}, {
    default: () => `<p>We are excited to announce the new release of Gitpod Self-Hosted in version 0.4.0. Gitpod Self-Hosted allows everyone to set-up and run a service with the same features as gitpod.io in your cloud or corporate network.</p>
<h2>How Does it Work?</h2>
<p>Gitpod Self-Hosted runs on Kubernetes and is easily installed via \u201Chelm install\u201D. On gitpod.io you can find detailed documentation and some automation to install Gitpod on <a href="${"https://www.gitpod.io/docs/self-hosted/0.4.0/install/install-on-kubernetes"}" rel="${"nofollow"}">vanilla Kubernetes</a> or <a href="${"https://www.gitpod.io/docs/self-hosted/0.4.0/install/install-on-gcp-script"}" rel="${"nofollow"}">on Google Cloud Platform</a>. For the next release, we plan to add support for AWS, Azure, and OpenShift.</p>
<p>Users log into Gitpod via OAuth from your self managed Gitlab or GitHub enterprise. This ensures that all access privileges from your Git hosting solution are taken into account and that there is no additional administrative effort for managing user accounts.</p>
<p>Gitpod Self-Hosted is truly self-hosted: it does not require an internet connection to operate as every single bit runs on your network, and Gitpod Self-Hosted won\u2019t call home.</p>
<p>Operating Gitpod in production on gitpod.io has enabled us to battle-harden this product at scale. Both offerings share the same codebase, hence offer the same qualities regarding scalability, cloud-density, reliability, and security. All improvements that we make on Gitpod\u2019s SaaS offering directly benefit the self-hosted version.</p>
<p>This release ships a plethora of bugfixes and improvements, particularly in the area of GitLab integration.
There is one major feature that I want to show in more detail since you can\u2019t try this on gitpod.io:</p>
<h2>New Admin UI</h2>
<p>This release ships with a new web UI for administrative tasks. The UI is particularly handy when providing support fo users.
It allows for easy listing and searching of users and worksapces.
When selecting a user, the UI will show the user\u2019s details and workspaces, as you can in the following screenshot:</p>
<p><img src="${"/images/blog/gitpod-self-hosted-0.4.0/sh-userdetails2.png"}" alt="${"Gitpod Admin UI"}"></p>
<p>To try the new admin interface in Gitpod Self-Hosted, you\u2019ll need to assign the \u201Cadmin\u201D privilege to your user and open /admin in your browser.</p>
<h2>Getting Started</h2>
<p>The fastest way to get started is by installing Gitpod Self-Hosted <a href="${"https://www.gitpod.io/docs/self-hosted/0.4.0/install/install-on-gcp-script"}" rel="${"nofollow"}">on Google Cloud Platform</a>. There is also more in-depth documentation available on how to install Gitpod on <a href="${"https://www.gitpod.io/docs/self-hosted/0.4.0/install/install-on-kubernetes"}" rel="${"nofollow"}">vanilla Kubernetes</a>.</p>
<p>Gitpod Self-Hosted is free for up to five users. For more users, you can obtain a <a href="${"https://gitpod.io/selfhosted-trial/"}" rel="${"nofollow"}">free one month trial</a> or see our <a href="${"https://www.gitpod.io/pricing/#self-hosted"}" rel="${"nofollow"}">pricing page</a>.</p>
<p>For Gitpod\u2019s next releases you can expect support for Atlassian\u2019s Bitbucket, as well as install guides for Azure, AWS and OpenShift.</p>`
  })}`;
});
var gitpodSelfHosted0_4_0 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_self_hosted_0_4_0,
  metadata: metadata$2P,
  prerender: prerender$31
});
const metadata$2O = {
  author: "jankeromnes",
  date: "Thu Jun 6 2019 09:00:00 GMT+0000 (UTC)",
  excerpt: "I recently stumbled upon a new project on GitHub that peaked my interest. It proposed a new type of database that I was dying to try out. So",
  image: "teaser-gitpodify.jpg",
  slug: "gitpodify",
  subtitle: "How to fully automate your dev environments on GitHub",
  teaserImage: "teaser-gitpodify.jpg",
  title: "Gitpodifying \u2014 The Ultimate Guide"
};
const prerender$30 = true;
const Gitpodify = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2O), {}, {
    default: () => `<p>I recently stumbled upon a new project on GitHub that peaked my interest. It proposed a new type of database that I was dying to try out. So I cloned their repository, and looked at their README for a way to build their code.</p>
<p>After activating a Python 3.7 virtual env and running <code>pip install -v -e .</code> as suggested, I was soon faced with a rather cryptic build output. Investigating a bit revealed that some build command was failing due to a missing package: <code>zlib1g-dev</code>. I figured out the right incantation to install it on my machine, then tried again. Next it was <code>libreadline6-dev</code> that was missing. After a few similar iterations, I guessed that the project probably needed all <a href="${"https://www.manniwood.com/postgresql_93_compile_install_howto/index.html"}" rel="${"nofollow"}">PostgreSQL build dependencies</a>, so I went ahead and installed all that. Yet somehow the project still wouldn\u2019t build, showing yet another error, but by then I was out of free time and had to call it a day. Sadly, I hadn\u2019t been able to run this project even once.</p>
<p>If you\u2019re a developer, this scenario probably sounds familiar. In fact, that repository\u2019s setup instructions were already pretty helpful, but still we frequently face these kinds of setup problems \u2014 you probably have similar stories of your own. In the software industry, we collectively lose too much time and energy setting up many projects, on countless systems, often in half-broken ways.</p>
<p>What if there was a better way to do this? Maybe one day we can all just forget about troubleshooting build dependencies, and simply focus on the projects\u2019 code itself? I have good news: Developer environments can be automated, in the form of scripts and Dockerfiles in your repository, in a way that allows anyone interested in your project to get a ready-to-code environment for free in seconds, without having to worry about dependencies ever again. How does it work? I\u2019m glad you asked!</p>
<br>
<table><thead><tr><th><div style="${"width:120px"}">\xA0</div></th>
<th>The idea in brief</th></tr></thead>
<tbody><tr><td>\xA0\xA0<strong>The problem</strong></td>
<td>Figuring out which dependencies, tools, and language versions to install to properly configure a dev environment takes a lot of time and energy, and has to be repeated from scratch every time you use a different computer, and for every new project.</td></tr>
<tr><td>\xA0\xA0<strong>The cause</strong></td>
<td>Most setup instructions are written in a format that is not executable or reproducible, like plain text in markdown files.</td></tr>
<tr><td>\xA0\xA0<strong>The solution</strong></td>
<td>To solve this problem for every developer of your project, setup instructions should be written in a format that is executable, like scripts and Dockerfiles, and ideally versioned and shipped with your code. Gitpod was invented to make this easy.</td></tr></tbody></table>
<h2 id="${"introducing-gitpod"}">Introducing Gitpod<a href="${"#introducing-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>So you\u2019re ready to fully automate your GitHub project\u2019s development setup? That\u2019s great! I\u2019m here to help you achieve this. \u{1F44D}</p>
<p>In this guide, I will be using Gitpod, a free developer service that makes it easy for maintainers to automate any non-executable setup instructions as code. If you follow it, you will end up with a button that launches pre-configured containers for your project, thus allowing everyone to check out your repository and run your code in a single click.</p>
<p>The first thing you\u2019ll probably want to do is try opening your repository in Gitpod. You can do this by navigating to your GitHub project root, and then typing <code>gitpod.io/#</code> before the URL. It should look a bit like this:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">gitpod.io/<span class="token comment">#https://github.com/gitpod-io/website</span></code>`}</pre>
<br>
<p>When you see the IDE and Terminal, just try building and running your project as usual. Maybe it will just work out of the box, but maybe you\u2019ll notice that something is missing or broken, and you can iterate on your Gitpod setup to fix it (see table of contents below).</p>
<p>Once you\u2019re happy with your automated setup, a cool way to guide your contributors toward it is to add a Gitpod badge to your README. Here is a markdown snippet you can use (just replace the <code>...</code> with your repo):</p>
<pre class="${"language-markdown"}">${`<code class="language-markdown"><span class="token url">[<span class="token content">![Open in Gitpod</span>](<span class="token url">https://gitpod.io/button/open-in-gitpod.svg</span>)</span>](https://gitpod.io/#https://github.com/...)</code>`}</pre>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/website"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<p>Happy with your onboarding experience? Great! You\u2019re all set. \u{1F389}</p>
<p>Do you wish Gitpod would do more for your project? Then please read on. \u{1F447}</p>
<h2 id="${"table-of-contents"}">Table of contents<a href="${"#table-of-contents"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"#running-init-scripts"}">Running init scripts</a></li>
<li><a href="${"#accelerating-startup-with-prebuilt-workspaces"}">Accelerating startup with prebuilt workspaces</a></li>
<li><a href="${"#installing-missing-packages"}">Installing missing packages</a></li>
<li><a href="${"#installing-databases"}">Installing databases</a></li>
<li><a href="${"#getting-a-virtual-desktop"}">Getting a Virtual Desktop</a></li>
<li><a href="${"#opening-previews"}">Opening previews</a></li>
<li><a href="${"#solving-common-preview-problems"}">Solving common preview problems</a></li>
<li><a href="${"#setting-env-variables"}">Setting env variables</a></li></ul>
<h2 id="${"running-init-scripts"}">Running init scripts<a href="${"#running-init-scripts"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Adding a <code>.gitpod.yml</code> file at the root of your repository allows customizing Gitpod for your project. A useful thing it can do is running scripts on start-up (or sometimes even before start-up: the <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">Gitpod app</a> can watch your repo and start pre-building the <code>init</code> step for every commit, see the next section for more info):</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm start</code>`}</pre>
<p>(Please note the single <code>-</code> symbol: <code>init</code> and <code>command</code> should run in the same Terminal, one after each other.)</p>
<p>To open multiple Terminals on startup, just add more <code>-</code> entries under <code>tasks</code>:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run server
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run client</code>`}</pre>
<br>
<p>But this example probably won\u2019t work, because <code>npm run client</code> likely also needs dependencies from <code>npm install</code>, so you might get an error like this in your second Terminal:</p>
<blockquote><p><code>Error: Cannot find module &#39;lib&#39;</code></p></blockquote>
<p>In order to make a Terminal wait for another Terminal to finish some task (e.g. installing dependencies), you can use a \u201Clock file\u201D like so:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
      touch /tmp/.npm-lock
      npm install
      rm /tmp/.npm-lock</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run server
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> sleep 1 <span class="token important">&amp;&amp;</span> while <span class="token punctuation">[</span> <span class="token punctuation">-</span>f /tmp/.npm<span class="token punctuation">-</span>lock <span class="token punctuation">]</span>; do sleep 1; done
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run client</code>`}</pre>
<p>To learn more about configuring Terminals, please visit <a href="${"https://www.gitpod.io/docs/config-start-tasks"}" rel="${"nofollow"}">the docs</a>.</p>
<h2 id="${"accelerating-startup-with-prebuilt-workspaces"}">Accelerating startup with prebuilt workspaces<a href="${"#accelerating-startup-with-prebuilt-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With medium-to-large GitHub projects, your <code>init</code> step might take a long time to complete, especially if you need to compile code. To avoid that you and your contributors wait forever, you can make Gitpod auto-build your repository on every push, and start building workspaces even before Gitpod is opened. This will shave up to several minutes off your workspace loading times, and make your developers very happy.</p>
<p>To enable prebuilt workspaces, simply install the <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">Gitpod app</a> for your GitHub repository, and Gitpod will start auto-building all your branches and Pull Requests continuously in the background.</p>
<p>Optionally, you can then customize the app\u2019s behavior for your project by editing your <code>.gitpod.yml</code> like so:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">github</span><span class="token punctuation">:</span>
  <span class="token key atrule">prebuilds</span><span class="token punctuation">:</span>
    <span class="token comment"># enable for the master/default branch (defaults to true)</span>
    <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># enable for all branches in this repo (defaults to false)</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># enable for pull requests coming from this repo (defaults to true)</span>
    <span class="token key atrule">pullRequests</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># add a check to pull requests (defaults to true)</span>
    <span class="token key atrule">addCheck</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># add a "Review in Gitpod" button as a comment to pull requests (defaults to false)</span>
    <span class="token key atrule">addComment</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre>
<p>To see all configuration options for the Gitpod app, please visit <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">the docs</a>.</p>
<h2 id="${"installing-missing-packages"}">Installing missing packages<a href="${"#installing-missing-packages"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The default Docker image for all Gitpod workspaces (<a href="${"https://github.com/gitpod-io/workspace-images/blob/master/full/Dockerfile"}" rel="${"nofollow"}">gitpod/workspace-full</a>) already comes with many common developer tools. But sometimes you may see an error like this one:</p>
<blockquote><p><code>bash: tool: command not found</code></p></blockquote>
<p>And if you try to install it locally using <code>sudo</code>, you might see an error like this:</p>
<blockquote><p><code>sudo: effective uid is not 0</code></p></blockquote>
<br>
<p>The solution is to write a small Dockerfile for your project. If a particular <code>tool</code> is missing in your Gitpod workspace, simply add this at the top of your <code>.gitpod.yml</code>:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.dockerfile</code>`}</pre>
<br>
<p>Then add a new file called <code>.gitpod.dockerfile</code> at the root of your repository, containing:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN sudo apt-get update  &amp;&amp; sudo apt-get install -y     tool  &amp;&amp; sudo rm -rf /var/lib/apt/lists/*</code>`}</pre>
<br>
<p>From now on, every new Gitpod workspace that will be opened for your repository will come with <code>tool</code> pre-installed. Cool right?</p>
<h2 id="${"installing-databases"}">Installing databases<a href="${"#installing-databases"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Many projects need a database to work properly. Here is how to install the most common databases in Gitpod \u2014 take your pick! (If yours is missing please <a href="${"https://twitter.com/gitpod"}" rel="${"nofollow"}">reach out</a>, we\u2019d love to help you.)</p>
<h3 id="${"postgresql"}">PostgreSQL<a href="${"#postgresql"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To get PostgreSQL for your project, you can use our dedicated <a href="${"https://github.com/gitpod-io/workspace-images/blob/master/postgres/Dockerfile"}" rel="${"nofollow"}">PostgreSQL image</a> built on top of <code>gitpod/workspace-full</code>.</p>
<p>Simply base your <code>.gitpod.dockerfile</code> on:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-postgres</code>`}</pre>
<br>
<p>This will give you an auto-starting PostgreSQL server (it should auto-start every time you open a new Terminal), plus a few utility scripts that you can run in a Terminal or in a <a href="${"#running-init-scripts"}"><code>.gitpod.yml</code></a> command:</p>
<ul><li><code>pg_start</code>: start the PostgreSQL service</li>
<li><code>pg_stop</code>: stop the PostgreSQL service</li>
<li><code>pg_ctl status</code>: check if the PostgreSQL service is running</li></ul>
<p>Once the PostgreSQL server is running, you can use the <code>psql</code> CLI as usual:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">$ psql -h localhost -d postgres
psql <span class="token punctuation">(</span><span class="token number">10.8</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">10.8</span>-0ubuntu0.18.10.1<span class="token punctuation">))</span>
Type <span class="token string">"help"</span> <span class="token keyword">for</span> help.

<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment">#</span></code>`}</pre>
<h3 id="${"mysql"}">MySQL<a href="${"#mysql"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If your project needs MySQL to work, we also have a dedicated <a href="${"https://github.com/gitpod-io/workspace-images/blob/master/mysql/Dockerfile"}" rel="${"nofollow"}">MySQL image</a>. Simply base your <code>.gitpod.dockerfile</code> on:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-mysql</code>`}</pre>
<br>
<p>Then you\u2019ll get an auto-starting MySQL server, and you can use the <code>mysql</code> CLI like so:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">mysql -e <span class="token string">"show databases;"</span></code>`}</pre>
<h3 id="${"redis"}">Redis<a href="${"#redis"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To install Redis for your project, simply add these instructions to your <code>.gitpod.dockerfile</code>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

# Install Redis.
RUN sudo apt-get update  &amp;&amp; sudo apt-get install -y   redis-server  &amp;&amp; sudo rm -rf /var/lib/apt/lists/*</code>`}</pre>
<br>
<p>Then, you\u2019ll be able to start the Redis server by running this in a Terminal or in a <code>.gitpod.yml</code> command:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">redis-server</code>`}</pre>
<h3 id="${"mongodb"}">MongoDB<a href="${"#mongodb"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To get MongoDB for your project, you can use our dedicated <a href="${"https://github.com/gitpod-io/workspace-images/blob/master/mongodb/Dockerfile"}" rel="${"nofollow"}">MongoDB image</a> built on top of <code>gitpod/workspace-full</code>.</p>
<p>Simply base your <code>.gitpod.dockerfile</code> on:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-mongodb</code>`}</pre>
<br>
<p>Then start the MongoDB server by running this in a Terminal or in a <code>.gitpod.yml</code> command:</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">mkdir</span> -p /workspace/data <span class="token operator">&amp;&amp;</span> mongod --dbpath /workspace/data</code>`}</pre>
<p>Note: Storing MongoDB\u2019s data inside <code>/workspace</code> ensures that it will get backed up and restored properly when you stop and restart a workspace, or share a snapshot.</p>
<h2 id="${"getting-a-virtual-desktop"}">Getting a Virtual Desktop<a href="${"#getting-a-virtual-desktop"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If your application needs to run a graphical UI, you might see an error like this:</p>
<blockquote><p><code>Gtk: cannot open display: :0</code></p></blockquote>
<br>
<p>That\u2019s because by default, Gitpod workspaces don\u2019t have a graphical environment at all. Luckily, we have a dedicated <a href="${"https://github.com/gitpod-io/workspace-images/blob/master/full-vnc/Dockerfile"}" rel="${"nofollow"}">noVNC image</a> built on top of <code>gitpod/workspace-full</code> that comes with a Virtual Desktop.</p>
<p>Simply base your <code>.gitpod.dockerfile</code> on:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full-vnc</code>`}</pre>
<br>
<p>This will give you a virtual X server and a Remote Desktop client running on port <code>6080</code>:</p>
<p><img src="${"/images/blog/gitpodify/virtual-x-sever-running-on-a-remote-desktop-client.png"}" alt="${"Virtual X server and Remote Desktop client running on port 6080"}"></p>
<p>This can be useful for example to run Electron apps graphically. For that, you\u2019ll just need a few extra dependencies in your <code>.gitpod.dockerfile</code>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full-vnc

# Install Electron dependencies.
RUN sudo apt-get update  &amp;&amp; sudo apt-get install -y   libasound2-dev   libgtk-3-dev   libnss3-dev  &amp;&amp; sudo rm -rf /var/lib/apt/lists/*</code>`}</pre>
<br>
<p>To learn more, please see our dedicated post on <a href="${"/blog/native-ui-with-vnc"}">Developing native UI applications in Gitpod</a>.</p>
<p>Or check out this fun <a href="${"https://github.com/felixrieseberg/windows95"}" rel="${"nofollow"}">Windows 95 in Electron</a> example (see the <a href="${"https://github.com/felixrieseberg/windows95/blob/master/docs/docker-kubernetes-gitpod.md"}" target="${"_blank"}">Gitpod demo</a>, <a href="${"https://github.com/gitpod-io/definitely-gp/blob/master/windows95/.gitpod.yml"}" rel="${"nofollow"}">.gitpod.yml</a>, and <a href="${"https://github.com/gitpod-io/definitely-gp/blob/master/windows95/Dockerfile"}" rel="${"nofollow"}">Dockerfile</a>).</p>
<h2 id="${"opening-previews"}">Opening previews<a href="${"#opening-previews"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod will automatically detect when processes like web servers start listening on a port, and display a notification that allows you to open a web preview:</p>
<p><img src="${"/images/blog/gitpodify/port-notification.png"}" alt="${"Port notification"}"></p>
<p>If you want to suppress these notifications, or pre-configure a specific behavior, you can do this in your <code>.gitpod.yml</code> file:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> 9000<span class="token punctuation">-</span><span class="token number">9999</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore</code>`}</pre>
<br>
<p>Another way to open web previews is to run <code>gp preview &lt;url&gt;</code> in a Terminal or in your <a href="${"#running-init-scripts"}"><code>.gitpod.yml</code></a> commands. This can be used in combination with <code>gp url &lt;port&gt;</code> to open a web preview for a given port, like so:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> python3 <span class="token punctuation">-</span>m http.server 8080
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> gp preview $(gp url 8080)</code>`}</pre>
<br>
<p>However, if the preview opens too soon, you might see an error like this:</p>
<blockquote><p>Port 8080 didn\u2019t respond</p></blockquote>
<p>If you\u2019d like a task to run only when a given port becomes active, you can use <code>gp await-port &lt;port&gt;</code> like so:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run server 3000
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> gp await<span class="token punctuation">-</span>port 3000 <span class="token important">&amp;&amp;</span> gp preview $(gp url 3000)</code>`}</pre>
<br>
<p>If the <code>Port X didn&#39;t respond</code> error persists, please double-check in the Terminal output that your server is actually running on that port, then refresh the Preview pane. (Or, if it\u2019s a Browser tab, please close it and re-open it from the IDE\u2019s \u201COpen Ports\u201D view \u2014 refresh isn\u2019t currently supported for Browser preview tabs).</p>
<h2 id="${"solving-common-preview-problems"}">Solving common preview problems<a href="${"#solving-common-preview-problems"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Sometimes web servers like to negotiate a little before accepting to serve your precious content. Here is how to troubleshoot the most common issues.</p>
<h3 id="${"invalid-host-header"}">Invalid Host Header<a href="${"#invalid-host-header"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Since we\u2019re running in a cloud workspace, URLs like <code>localhost:3000</code> should be converted to something like <code>3000-abc-123.ws-eu0.gitpod.io</code>. You can get the exact preview URL for a port by running <code>gp url &lt;port&gt;</code>, or by checking the \u201COpen Ports\u201D IDE view.</p>
<p>This custom hostname may annoy servers like <a href="${"https://github.com/webpack/webpack-dev-server"}" rel="${"nofollow"}">webpack-dev-server</a>, because they usually only accept requests on <code>localhost</code>. So you might see an error like this one:</p>
<blockquote><p>Invalid Host Header</p></blockquote>
<br>
<p>To make your server accept non-<code>localhost</code> requests, you can use the following CLI parameters (e.g. with <code>webpack-dev-server</code> or <code>ng serve</code>):</p>
<blockquote><p><code>--host 0.0.0.0 --disable-host-check</code></p></blockquote>
<br>
<p>Or you can edit your <code>webpack.config.js</code>, or <code>vue.config.js</code>, like so:</p>
<pre class="${"language-js"}">${`<code class="language-js">devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>
  disableHostCheck<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>`}</pre>
<br>
<p>Alternatively, if you don\u2019t want to use <code>disableHostCheck</code>, you can also add <code>&#39;.gitpod.io&#39;</code> to your <code>allowedHosts</code>, like so:</p>
<pre class="${"language-js"}">${`<code class="language-js">devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>
  allowedHosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'.gitpod.io'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>`}</pre>
<br>
<p>See all <code>webpack-dev-server</code> configuration options <a href="${"https://webpack.js.org/configuration/dev-server/"}" rel="${"nofollow"}">here</a>.</p>
<p>If you don\u2019t have direct access to the dev server configuration, e.g. when using frameworks like <a href="${"https://github.com/facebook/create-react-app"}" rel="${"nofollow"}">Create React App</a>, you might want to look in the framework\u2019s docs for a similar option, like CRA\u2019s environment variable <code>DANGEROUSLY_DISABLE_HOST_CHECK</code>:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">before</span><span class="token punctuation">:</span> export DANGEROUSLY_DISABLE_HOST_CHECK=true
    <span class="token key atrule">init</span><span class="token punctuation">:</span> yarn install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> yarn start</code>`}</pre>
<h3 id="${"csp-errors"}">CSP errors<a href="${"#csp-errors"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If the Preview pane still refuses to display your web app, please open the Browser Console (e.g. by typing <code>F12</code> or by exploring your Browser menus). In there, you might see errors mentioning things like:</p>
<blockquote><p><code>X-Frame-Options</code></p></blockquote>
<p>Or:</p>
<blockquote><p><code>CSP frame-src</code></p></blockquote>
<p>These mean that your web app refuses to be opened inside an <code>&lt;iframe&gt;</code>, for security reasons (that\u2019s what the Preview pane uses to display web apps). In that case, please open previews in an external Browser tab instead, e.g. by going to the \u201COpen Ports\u201D IDE view and clicking the <code>Open Browser</code> button.</p>
<h3 id="${"unreachable-localhost-urls"}">Unreachable localhost URLs<a href="${"#unreachable-localhost-urls"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If your web app starts to show up in a preview, but it doesn\u2019t work well, the Browser Console might reveal failing requests to <code>localhost</code> URLs like:</p>
<pre class="${"language-null"}">${`<code class="language-null">http://localhost:9000/api/v1/</code>`}</pre>
<p>This happens for example with some Angular apps, that like to run a web client on a port like <code>3000</code>, and an API backend on a different port like <code>9000</code>.</p>
<p>If that\u2019s your case, you can try two things:</p>
<ol><li>Replace all references to <code>localhost:9000</code> in your web client with the result of the <code>gp port 9000</code> command (should be something like <code>9000-abc-123.ws-eu0.gitpod.io</code>)</li>
<li>Configure your port <code>3000</code> server to proxy certain requests (e.g. starting with <code>/api</code>) to <code>localhost:9000</code> on the server-side</li></ol>
<p>You can sometimes do 1. with a simple configuration change, and here is how you can achieve 2. in an Angular app using the <a href="${"https://cli.angular.io/"}" rel="${"nofollow"}">Angular CLI</a>:</p>
<p>Create a new file called <code>proxy.config.json</code>, that includes a proxy route like:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"http://localhost:9000"</span><span class="token punctuation">,</span>
    <span class="token property">"secure"</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>And then point <code>ng serve</code> to that file using the <code>--proxy-config</code> parameter:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">ng serve --proxy-config proxy.config.json --host <span class="token number">0.0</span>.0.0 --disable-host-check --port <span class="token number">3000</span></code>`}</pre>
<br>
<p>For a complete example using PostgreSQL, Angular CLI, disableHostCheck, and a backend proxy, please check out the <a href="${"https://joinpeertube.org/"}" rel="${"nofollow"}">PeerTube</a> project (<a href="${"https://github.com/Chocobozzz/PeerTube/blob/develop/.gitpod.yml"}" rel="${"nofollow"}">.gitpod.yml</a>, <a href="${"https://github.com/Chocobozzz/PeerTube/blob/develop/support/docker/gitpod/Dockerfile"}" rel="${"nofollow"}">Dockerfile</a>, <a href="${"https://github.com/Chocobozzz/PeerTube/blob/develop/client/proxy.config.json"}" rel="${"nofollow"}">proxy.config.json</a>, <a href="${"https://github.com/Chocobozzz/PeerTube/blob/master/scripts/watch/client.sh"}" rel="${"nofollow"}">ng serve command</a>).</p>
<h3 id="${"no-usable-sandbox"}">No usable sandbox<a href="${"#no-usable-sandbox"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Ok this is not really a preview problem, but I thought I\u2019d mention it here anyway since we\u2019re already troubleshooting.</p>
<p>More and more projects are using headless Chrome as a dependency (e.g. via <a href="${"https://github.com/GoogleChrome/puppeteer"}" rel="${"nofollow"}">Puppeteer</a>), and when running it in Gitpod, you might see an error that looks like:</p>
<blockquote><p>Error: Failed to launch chrome!<br>
No usable sandbox!</p></blockquote>
<br>
<p>In this case, you\u2019ll want to use Chrome\u2019s <code>--no-sandbox</code> and/or <code>--disable-setuid-sandbox</code> flags. With Puppeteer, it may look like this:</p>
<pre class="${"language-js"}">${`<code class="language-js"><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--no-sandbox"</span><span class="token punctuation">,</span> <span class="token string">"--disable-setuid-sandbox"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}</pre>
<h2 id="${"setting-env-variables"}">Setting env variables<a href="${"#setting-env-variables"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Sometimes, your project needs some extra information that is either a secret, or it\u2019s different for each developer. A good example is tokens or credentials that are used to interact with external APIs or services. A good way to give these values to your project setup is via environment variables.</p>
<p>To ensure that a required env variable called <code>TOKEN</code> is defined, you can do something like this in your <code>.gitpod.yml</code>:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">></span><span class="token scalar string">
      while [ -z "$TOKEN" ] ; do
        printf "&#92;n\u2757 The TOKEN environment variable is required. Please enter its value.&#92;n" &amp;&amp;
        read -s -p "TOKEN: " TOKEN ;
      done ; gp env TOKEN=$TOKEN &amp;&amp; printf "&#92;nThanks&#92;n"
      # Now you can use $TOKEN</span></code>`}</pre>
<br>
<p>This will check the value of <code>$TOKEN</code>, and if it\u2019s empty, it will ask the user to manually type its value into the Terminal, and then save that value for future workspaces with <code>gp env</code>.</p>
<p>If you need to have these values inside a file, you can add something like this to your <code>.gitpod.yml</code> commands:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> echo "$SSH_PRIVATE_KEY" <span class="token punctuation">></span> ~/.ssh/id_rsa</code>`}</pre>
<br>
<p>Another (unsafe) way to pass an env variable to a single workspace is to add it in the Gitpod context URL, like so:</p>
<pre class="${"language-bash"}">${`<code class="language-bash">https://gitpod.io/<span class="token comment">#TOKEN=value/https://github.com/gitpod-io/website</span></code>`}</pre>
<p>(But please don\u2019t use this for security-sensitive data like passwords and private keys, because URLs can easily be intercepted. Also, note that values should be URL-encoded.)</p>
<p>Finally, users can also manage env variables for all their workspaces by visiting <a href="${"https://gitpod.io/environment-variables"}" rel="${"nofollow"}">gitpod.io/environment-variables</a>. You can learn more about managing Gitpod env variables in <a href="${"https://www.gitpod.io/docs/environment-variables"}" rel="${"nofollow"}">the docs</a>.</p>
<p>For a complete example of a project that requires env variables (saved in <code>.yml</code> config files), please see the <a href="${"https://dev.to/"}" rel="${"nofollow"}">dev.to</a> project\u2019s <a href="${"https://github.com/thepracticaldev/dev.to/blob/master/.gitpod.yml"}" rel="${"nofollow"}">.gitpod.yml</a>.</p>
<br>
<p>Phew\u2026 that\u2019s about it! I hope you enjoyed reading through this guide and that it helped you in some way. If you still have questions or suggestions, please <a href="${"https://twitter.com/jankeromnes"}" rel="${"nofollow"}">reach out</a>. I\u2019d love to help you and make this guide more useful.</p>`
  })}`;
});
var gitpodify = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpodify,
  metadata: metadata$2O,
  prerender: prerender$30
});
const metadata$2N = {
  author: "arthursens",
  date: "Sunday, 23 May 2021 11:00:00 UTC",
  excerpt: "The SRE team at Gitpod is making the first moves to implement Site Reliability Engineering best practices. We document our approach to implement our very first Service Level Objective.",
  image: "teaser.png",
  slug: "journey-to-site-reliability-engineering-at-gitpod",
  subtitle: null,
  teaserImage: "teaser.png",
  title: "Journey to Site Reliability Engineering at Gitpod"
};
const prerender$2$ = true;
const Journey_to_site_reliability_engineering_at_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2N), {}, {
    default: () => `<p>Gitpod is changing the way developers code. We\u2019re breaking the paradigm of relying on local environments to develop applications, by making those environments available through a web browser. Those environments are hosted in the cloud, they are ephemeral and they can be customized through automation to make them perfect for the project being developed.</p>
<p>Those cloud-based environments provide everything that our users have in their local machines, including <a href="${"https://www.gitpod.io/blog/root-docker-and-vscode/#root-access"}" rel="${"nofollow"}">sudo access</a> and <a href="${"https://www.gitpod.io/blog/root-docker-and-vscode/#docker"}" rel="${"nofollow"}">docker</a>, and thanks to configuration-as-code (that can be automated) they remove the friction of installing and managing all different kinds of dependencies that we have when working on multiple projects. We want the world to forget about local environments and completely focus on our cloud-based environments.</p>
<p><em>We gave those cloud-based environments a unique name: \u201CWorkspaces\u201D.</em></p>
<p>Workspaces are the core of Gitpod, it is impossible to be a user of Gitpod without using Workspaces. To achieve the goal of making the world forget about local environments, <em>we need to be a service provider that developers can trust and rely on</em>, therefore, Workspaces need to be just as reliable as local environments!</p>
<p>Gitpod is scaling! <a href="${"https://www.gitpod.io/blog/next-chapter-for-gitpod/"}" rel="${"nofollow"}">We are glad to be backed by fantastic investors</a> and the topic \u201CCloud-based development\u201D is on fire right now! Being the pioneers in this topic, it\u2019s only natural that we\u2019re getting more and more users every day. This is truly a great thing for us! We are honored to receive so much love in the last couple of months and we want to keep this momentum going, but this extra love also puts an extra load on top of our clusters and extra load sometimes leads to unreliability. It is awesome that people are starting to forget about their local environments thanks to Gitpod, therefore <em>we want Workspaces to maintain a fantastic performance, doesn\u2019t matter if we host ten, ten thousand, or ten million Workspaces concurrently.</em></p>
<h2 id="${"reliability-vs-velocity"}">Reliability vs\xA0Velocity<a href="${"#reliability-vs-velocity"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Of course, Gitpod is a lot more than just an IDE with a terminal in the cloud. We have tons of features that make Gitpod shine amongst all other cloud-based development environments, such as <a href="${"https://www.gitpod.io/docs/prebuilds/"}" rel="${"nofollow"}">Prebuilds</a>, <a href="${"https://www.gitpod.io/blog/root-docker-and-vscode"}" rel="${"nofollow"}">Sudo and Docker support</a>, <a href="${"https://www.gitpod.io/docs/sharing-and-collaboration/"}" rel="${"nofollow"}">Shareable Workspaces</a>, while not mentioning our <a href="${"https://www.notion.so/gitpod/Product-Roadmap-b9b5eac0a15147ac8d2dd25cf0519203"}" rel="${"nofollow"}">Roadmap</a> that is pretty ambitious too.</p>
<p>Developing and shipping new features is one of the things that make us more excited about our work, and hopefully our users too \u{1F605}, but making changes to production also comes with the risk of breaking stuff that was working just fine previously. Breaking small things is usually okay and we can keep focusing on new features, but we may break Gitpod so much that user experience decreases to a level that makes our users unhappy. That is a big no-no for us. If our users are unhappy then we need to do something about it, even if that means slowing down new features or completely stop them to fully focus on reliability depending on how bad the situation is. <em>But how do we decide if we should be focusing on reliability or feature velocity?</em></p>
<p>Today we are not doing a great job when it comes to proactively identify degraded user experience. While we do have some metrics about Workspace startup latency and errors, most of our incidents were identified by noticing too many users complaining at our contact platforms, such as Github issues, email, and Twitter. Damn, we even got an incident that caused 100% unavailability because our SSL certificates expired back in February this year, and it took us almost half an hour to notice that \u{1F605}!</p>
<p>We do have things to be proud of though! Our Incident Response process, while it can be improved even further, has gotten a lot better since December 2020. We\u2019re coming up with post-mortems after almost all incidents and the team is tackling every action item raised. On these occasions, reliability usually has a higher priority than feature velocity. Some action items are taking a little longer to implement though, and these items are exactly the ones that will solve the problem mentioned before: <em>we need to get better at proactively identify degraded user experience.</em></p>
<h2 id="${"alerting-on-symptoms-instead-of-causes"}">Alerting on symptoms instead of\xA0causes<a href="${"#alerting-on-symptoms-instead-of-causes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Unfortunately, today we can\u2019t have clear insights if our changes have a direct impact on user experience. We come from a mindset of measuring compute resources, e.g. CPU, RAM, and disk utilization, as a way to know if Gitpod is running smoothly. This strategy worked just fine for some time, it was simple to horizontally or vertically increase our nodes, but now we are often seeing that lack of resources are not the reason why Workspaces start to fail. Not to mention that keeping a high number of nodes under a certain threshold is quite challenging.</p>
<p><img src="${"/images/blog/journey-to-site-reliability-engineering-at-gitpod/too-many-nodes.png"}" alt="${"Too many nodes to keep an eye on"}"></p>
<p>We want to change this mindset completely! Compute resource metrics may be good for debugging degraded performance during incidents, but shouldn\u2019t be the way we look for degraded user experience. We should be gathering metrics that measure exactly the symptoms that our users complain about during incidents:</p>
<p><img src="${"/images/blog/journey-to-site-reliability-engineering-at-gitpod/incident-report.png"}" alt="${"Incident reporting"}"></p>
<p>As previously said, Workspaces are the core of Gitpod. We should be measuring metrics that tell us how our users are interacting with them:</p>
<ul><li>How many workspaces are being created and how many fail during this process?</li>
<li>How many of those Workspaces start in an acceptable time frame?</li>
<li>After they start, do they remain working until the user chooses to stop them?</li></ul>
<p>Gitpod has a lot more features than just hosting Workspaces but, as a first step, <em>getting metrics and alerts around Workspace behavior will cover most of the complaints we had so far.</em></p>
<h2 id="${"service-level-objectives"}">Service Level Objectives<a href="${"#service-level-objectives"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>These Workspace metrics will be key to our team when performing Site Reliability Engineering, but they alone aren\u2019t enough. They still don\u2019t answer the question: should we be focusing on reliability or feature velocity? We need to set clear expectations about when we consider Gitpod unstable or not.</p>
<p><em>Service Level Indicators and Service Level Objectives will be our North Stars.</em> And they will be implemented with the metrics mentioned in the previous section of this blog.</p>
<p>SLIs are simple once we implement those metrics. It\u2019s a simple ratio calculation over some time period. E.g.:</p>
<ul><li><p><img src="${"/images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-start.gif"}" alt="${"Workspace Start SLI"}"></p></li>
<li><p><img src="${"/images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-latency.gif"}" alt="${"Workspace Latency SLI"}"></p></li>
<li><p><img src="${"/images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-liveness.gif"}" alt="${"Workspace Liveness SLI"}"></p></li></ul>
<p>The SLOs, on the other hand, are a little bit more complicated. The SLO is a target of reliability that will better represent our users\u2019 \u201Chappiness\u201D, and measuring happiness is not really straightforward. We do know that aiming for 100% is not what we nor our users want though. Aiming for 100% means that 0 Workspaces can fail to start. Once we have a stable system, making changes to it, e.g. changing infrastructure to save costs or shipping a new exciting feature, is often the reason why said system becomes unstable even though those changes will often make us and our users more satisfied with our final product.</p>
<p>Now that we agreed that we won\u2019t aim for 100% availability, then what will be our target? Well, internally we do have an informal agreement that:</p>
<ul><li>95% of Workspaces should start in less than 2 mins</li>
<li>50% of Workspaces should start in less than 15s</li>
<li>99.8% of Workspaces should start successfully</li>
<li>99.8% of Workspaces should remain working after they start</li></ul>
<p>To be honest, however, in our first interaction it is a little bit unreal to write those targets in stone already. As we already mentioned in this blog post, we still don\u2019t have that measurement very well established, so we don\u2019t know what is the reality that we live in right now. It could be that to achieve those targets, we will need to stop feature development completely just to manually keep everything stable, and this is not what we want!</p>
<p>After implementing our metrics and SLIs, we can create dashboards and reports based on the SLOs\u2019 targets that we\u2019re aiming for in the future, but we will only establish real policies after we get some war experience and develop a good grasp of what we\u2019re dealing with \u{1F4AA}.</p>`
  })}`;
});
var journeyToSiteReliabilityEngineeringAtGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Journey_to_site_reliability_engineering_at_gitpod,
  metadata: metadata$2N,
  prerender: prerender$2$
});
const metadata$2M = {
  author: "akosyakov, csweichel, rl-gitpod",
  date: "Wed, 9 Jun 2021 18:00:00 UTC",
  excerpt: "While Gitpod can seamlessly integrate into your workflow in the vast majority of cases, there are times where you may want to access a workspace from localhost",
  image: "header-desktop.png",
  slug: "local-app",
  subtitle: null,
  teaserImage: "header-desktop.png",
  title: "Gitpod Local Companion - localhost is going remote"
};
const prerender$2_ = true;
const Local_app = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2M), {}, {
    default: () => `<p>While Gitpod can seamlessly integrate into your workflow in the vast majority of cases, there are times where you may want to access a workspace from localhost and were required to workaround some limitations, particularly with respect to <a href="${"lhttps://www.gitpod.io/docs/languages/svelte/"}">framework</a> features such as <a href="${"https://github.com/gitpod-io/gitpod/issues/3282"}" rel="${"nofollow"}">live reload</a>.</p>
<p>Gitpod is pleased to announce a preview release of the <em>Gitpod Local Companion</em> app that is designed to allow localhost access to any TCP port in a remote workspace regardless of protocol.</p>
<p>The app runs locally and enables automatically tunneled connections to your workspace, either privately or, if required, publicly (on your laptops IP for example).</p>
<p>In particular, this opens up any environment or framework that assumes localhost access i.e. web frameworks such as Svelte and enables bundlers such as Parcel or Webpack hot reloading without requiring any changes. It also enables the use of non-HTTP protocols, most notably MQTT based brokers or the AMQP based services.</p>
<p>As a preview release, not all of the features are implemented, most notably the tunneling is 1-way only: local -&gt; workspace.</p>
<h2 id="${"see-it-in-action"}">See it in action<a href="${"#see-it-in-action"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As a simple example, with the <em>Gitpod Local Companion</em> app installed and running, open the standard Svelte template in Gitpod, using this <a href="${"https://gitpod.io/#https://github.com/sveltejs/template"}" rel="${"nofollow"}">link</a> or the Gitpod button <a href="${"https://github.com/sveltejs/template"}" rel="${"nofollow"}">directly</a>. This will create an ephemeral environment for you without requiring any local setup or installation. As per the template instructions, run the following:</p>
<pre class="${"language-shell"}">${`<code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run dev

</code>`}</pre>
<p>VS Code will detect the service on port 5000 and offer 3 options. Click on the \u2018Open Browser\u2019 icon or navigate to directly to <a href="${"http://localhost:5000/"}" rel="${"nofollow"}">localhost</a> to see \u2018Hello world!\u2018. Edit app.svelte and the page will live reload with your changes!</p>
<p>We love feedback here at Gitpod, so please give it a try and let us know what you think!</p>
<div style="${"position: relative; padding-bottom: 77.92207792207792%; height: 0;"}"><iframe src="${"https://www.loom.com/embed/5f229a408b6744dcbc6d592a9d82ff28"}" frameborder="${"0"}" webkitallowfullscreen mozallowfullscreen allowfullscreen style="${"position: absolute; top: 0; left: 0; width: 100%; height: 100%;"}"></iframe></div>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To get started, download the preview release of the <em>Gitpod Local Companion</em> app for your platform (right click, \u2018Save (Link) As\u2019)</p>
<ul><li><a href="${"https://gitpod.io/static/bin/gitpod-local-companion-darwin"}" rel="${"nofollow"}">Mac</a> - you will need to grant permission as it is not yet notarised. See <a href="${"https://support.apple.com/en-au/HT202491"}" rel="${"nofollow"}">\u201Copen an app that hasn\u2019t been notarised or is from an unidentified developer\u201D</a> or click on the app in Finder while holding the Control key down and select \u2018Open\u2019 from the menu and then \u2018Open\u2019 in the prompt.</li>
<li><a href="${"https://gitpod.io/static/bin/gitpod-local-companion-linux"}" rel="${"nofollow"}">Linux</a></li>
<li><a href="${"https://gitpod.io/static/bin/gitpod-local-companion-windows"}" rel="${"nofollow"}">Windows</a></li></ul>
<p>Alternatively, in a terminal run the following:</p>
<pre class="${"language-shell"}">${`<code class="language-shell">  <span class="token comment"># mac</span>
  <span class="token function">curl</span> -OL https://gitpod.io/static/bin/gitpod-local-companion-darwin
  <span class="token comment"># linux</span>
  <span class="token function">curl</span> -OL https://gitpod.io/static/bin/gitpod-local-companion-linux
  <span class="token comment"># windows</span>
  <span class="token function">curl</span> -OL https://gitpod.io/static/bin/gitpod-local-companion-windows

  <span class="token function">chmod</span> +x ./gitpod-local-companion-*</code>`}</pre>
<h2 id="${"running"}">Running<a href="${"#running"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To run it using your local keyring for long term storage of the access token:</p>
<pre class="${"language-shell"}">${`<code class="language-shell">  ./gitpod-local-companion-<span class="token punctuation">[</span>darwin<span class="token operator">|</span>linux<span class="token operator">|</span>windows<span class="token punctuation">]</span>

</code>`}</pre>
<p>To run it without storing the access token (it will generate a new token every time);</p>
<pre class="${"language-shell"}">${`<code class="language-shell">  ./gitpod-local-companion-<span class="token punctuation">[</span>darwin<span class="token operator">|</span>linux<span class="token operator">|</span>windows<span class="token punctuation">]</span> --mock-keyring

</code>`}</pre>
<p>If you are not logged in to Gitpod, it will take you through that flow. If you haven\u2019t run the local app previously it will also ask you to approve access to the control data of all your workspaces, returning a token that grants the access. This token will be stored in your local keyring for future use (unless you specify otherwise).</p>
<p>Once approval has been granted it will connect to your currently active workspaces and allow VSCode to control the tunnelling between the remote workspace and your local environment using the <em>Remote Explorer Ports View</em>.</p>
<p>Note that it currently requires a reload of the workspace VS Code page if the companion app is started after the workspace is open to synchronize the ports view - this is temporary.</p>
<h2 id="${"remote-explorer-ports-view"}">Remote Explorer Ports View<a href="${"#remote-explorer-ports-view"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod has extended the Remote Explorer Ports view to allow more control of how ports are exposed. As shown below there is an additional toggle on each port to switch between <em>Tunnel on localhost</em> exposure i.e. nothing outside of your laptop</p>
<p><img src="${"/images/blog/local-app/tunnel-on-all.png"}" alt="${"tunnel on localhost"}"></p>
<p>and <em>Tunnel on all interfaces</em> to make that port available on 0.0.0.0. and, depending on your firewall settings, to anyone that can access your laptop externally.</p>
<p><img src="${"/images/blog/local-app/tunnel-on-all.png"}" alt="${"tunnel on all"}"></p>
<p>By default it will attempt to tunnel on the same port, but it will pick a random port if the local port is unavailable. This is reflected in the Remote Explorer Ports view below where local port 3000 is tunneled via port 49605:</p>
<p><img src="${"/images/blog/local-app/tunnel-on-random.png"}" alt="${"tunnel on random"}"></p>
<h2 id="${"ssh-access"}">SSH Access<a href="${"#ssh-access"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Additionally, the <em>Gitpod Local Companion</em> preview release also has basic support for SSH access into your workspace. It currently requires that you have a default SSH key setup in the ~/.ssh directory i.e. id_rsa.pub &amp; id_rsa. The public key will be copied to the workspace to permit access.</p>
<p>This opens up all the usual SSH-based features, such as secure copying, tunneling and remote execution.</p>
<p>Once you have installed the <em>Gitpod Local Companion</em> app and connected it to your workspaces, it dynamically creates entries for each workspace in the /tmp/gitpod_ssh_config file. You can use this to SSH into your workspace as follows:</p>
<pre class="${"language-shell"}">${`<code class="language-shell"><span class="token function">ssh</span> -F /tmp/gitpod_ssh_config <span class="token operator">&lt;</span>your-workspace-id e.g.apricot-harrier-<span class="token comment">####></span>

</code>`}</pre>
<p>You will be prompted to add the address to your known hosts file and you will be connected to your workspace!</p>
<h2 id="${"what-is-next"}">What is next?<a href="${"#what-is-next"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We have big plans for the <em>Gitpod Local Companion</em> App! Future features <strong>may</strong> include:</p>
<ul><li>2-way tunnelling</li>
<li>Listing what workspaces are running</li>
<li>Listing what ports are currently tunneled and in which direction (workspace to/from local)</li>
<li>Starting/stopping port forwarding from the command line</li>
<li>Connecting a local VS Code instance to a workspace</li>
<li>SSH into a workspace from the command line in a simple, straight forward way</li></ul>`
  })}`;
});
var localApp = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Local_app,
  metadata: metadata$2M,
  prerender: prerender$2_
});
const metadata$2L = {
  author: "csweichel",
  date: "Thu Nov 13 2019 09:00:00 GMT+0000 (UTC)",
  excerpt: "Some things just aren't exposed to the internet. Either because we do not want them out in the open, think some on-prem database, or because",
  image: "local-services.jpg",
  slug: "local-services-in-gitpod",
  teaserImage: "local-services.jpg",
  title: "Using local services in Gitpod"
};
const prerender$2Z = true;
const Local_services_in_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2L), {}, {
    default: () => `<p>Some things just aren\u2019t exposed to the internet. Either because we do not want them out in the open, think some on-prem database, or because they cannot easily be made available like the Docker daemon on your laptop.
With your Gitpod workspace running in the cloud it does not have access to local services, which could render Gitpod unsuitable in those cases.</p>
<p>There\u2019s a range of <a href="${"https://developers.cloudflare.com/argo-tunnel/"}" rel="${"nofollow"}">different</a> <a href="${"https://ngrok.com/"}" rel="${"nofollow"}">offerings</a> and <a href="${"http://serveo.net/"}" rel="${"nofollow"}">projects</a> that aim to expose local services to the internet. However, they all do so indiscriminately. I.e. if one knows the URL to your now-public endpoint, they have access to your service.
On top of that, they do incur additional cost if used often.</p>
<h2 id="${"inlets-to-the-rescue"}">Inlets to the rescue<a href="${"#inlets-to-the-rescue"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"/images/blog/local-services-in-gitpod/concept.png"}" alt="${"Inlets to the Rescue"}"></p>
<p><a href="${"https://github.com/inlets/inlets"}" rel="${"nofollow"}">Inlets</a> is a great piece of kit written by <a href="${"https://twitter.com/alexellisuk"}" rel="${"nofollow"}">Alex Ellis</a> which is basically the Open-Source version of the services mentioned above.</p>
<blockquote><p>Of course you can <a href="${"https://github.com/inlets/inlets#development"}" rel="${"nofollow"}">contribute to inlets</a> itself using Gitpod.</p></blockquote>
<p>It consists of a server which would run in your workspace, and a client which would run on your local machine. The client then acts as a kind of reverse proxy into your local network opening it up to programs running in your Gitpod workspace.</p>
<p>Making this work involves running both, the server and client:</p>
<ol><li>download and run inlets in your workspace:</li></ol>
<pre class="${"language-null"}">${`<code class="language-null">curl -sLS https://get.inlets.dev | sh
export token=$(head -c 16 /dev/urandom | shasum | cut -d&quot; &quot; -f1)
echo &quot;token:  $token&quot;
echo &quot;remote: $(gp url 8090 | sed -e &#39;s/https/wss/&#39;)&quot;
./inlets server --port 8080 --control-port=8090 --token=&quot;$token&quot;</code>`}</pre>
<p>Gitpod will show you notifications that there are new services on the ports <code>8080</code> and <code>8090</code>. Expose the port <code>8090</code> and leave the other one as is.</p>
<ol start="${"2"}"><li>run the inlets client on your local machine. The remote address and token are printed by the commands executed in step one.</li></ol>
<pre class="${"language-null"}">${`<code class="language-null">inlets client --remote=&lt;see-above&gt; --token=&lt;see-above&gt; --upstream=&lt;local-addr&gt;</code>`}</pre>
<p>There\u2019s a lot going on there, so let\u2019s look at things in detail.
In the workspace we first download <code>inlets</code> using its shell installer (we could have used <code>brew install inlets</code>, too, but that\u2019s a tad slower). Then we produce a token which prevents unauthorized access to our inlets server. Note that without tokens, the handshake performed by the inlets client and server fails.</p>
<p>When starting the inlets server, we seperate the control port from the server port. We do this so that we can expose one port, but not the other. This way the control port is exposed to the internet (albeit secured with the access token), but the server port is not. This way we do not expose our local service globally, but only make it available within our Gitpod workspace.</p>
<p>On the client side (where I just assumed you already have <a href="${"https://github.com/inlets/inlets#install-the-cli"}" rel="${"nofollow"}">inlets installed</a>), we need to connect to the server we just started. To that end we use the corret remote URL (note the <code>wss://</code>) and token.
What you choose as <code>--upstream</code> depends on which kind of service you want to expose. Suppose you had a webserver running on port 8080 (e.g. <code>curl lama.sh | sh</code>), then this would be <code>--upstream localhost:8080</code>.</p>
<h2 id="${"example-1-your-local-docker-daemon"}">Example 1: your local Docker daemon<a href="${"#example-1-your-local-docker-daemon"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Running a container engine like Docker or <code>containerd</code> in a Gitpod workspace is still <a href="${"https://github.com/gitpod-io/gitpod/issues/755"}" rel="${"nofollow"}">work-in-progress</a>. Until that\u2019s possible your only recurse is to connect to a remote daemon.
Usually that daemon would run somewhere in the cloud, too, e.g. in your dev-cluster. However, some of us don\u2019t have a Kubernetes cluster laying around or just need access to docker to try something real quick.</p>
<blockquote><p>This is <em>not</em> how we plan to ultimatively support Docker/other containers in a Gitpod workspace.</p></blockquote>
<p>Using inlets you can make the Docker enging running on your local machine (or in your local network) available in your Gitpod workspace.</p>
<p>I\u2019ve gone ahead and prepared a prepared an <a href="${"https://github.com/csweichel/gitpod-goes-local/tree/docker"}" rel="${"nofollow"}">example repository</a> that demonstrates this idea:</p>
<p><a href="${"https://gitpod.io/#https://github.com/csweichel/gitpod-goes-local/tree/docker"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<p>Once the workspace is up and running, follow the instructions in the upper-left terminal to complete the setup.</p>
<h2 id="${"example-2-home-automation-and-iot"}">Example 2: Home Automation and IoT<a href="${"#example-2-home-automation-and-iot"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Suppose you\u2019re developing a <a href="${"https://medium.com/@jacksonz666/gitpod-flutter-productivity-on-the-go-for-mobile-app-developers-cc2495049d52"}" rel="${"nofollow"}">Flutter based app</a> for your disruptive new smarthome product.
Chances are that the device side of that product isn\u2019t exposed to the internet just yet, but only available in your local network.
If that thing, as in Internet of Things, is speaking something akin to HTTP (like Yamaha\u2019s MusicCast or anything gRPC based) you could just replicate the setup above, except that you\u2019d substitute Docker for the API you\u2019re trying to talk to.</p>
<p>While are plenty of other services in this space that speak HTTP, think InfluxDB, OpenHAB or Prometheus, some don\u2019t.
Most notably <a href="${"https://en.wikipedia.org/wiki/MQTT"}" rel="${"nofollow"}">MQTT based</a> broker or the <a href="${"https://www.eclipse.org/hono/"}" rel="${"nofollow"}">bulk</a> of <a href="${"https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol"}" rel="${"nofollow"}">AMQP</a> based services.</p>
<p>Inlets does not <a href="${"https://github.com/inlets/inlets-pro-pkg"}" rel="${"nofollow"}">support tunneling TCP</a>. There is yet another project that can shovel TCP through an HTTP tunnel: <a href="${"https://github.com/jpillora/chisel"}" rel="${"nofollow"}">chisel</a>.
By combining the two, you can have programs in your workspace talk to TCP services in your local network/on your machine.</p>
<h2 id="${"wrapping-up"}">Wrapping up<a href="${"#wrapping-up"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This day and age it\u2019s rare enough to find a situation where the service you want to talk to isn\u2019t available on the Internet (outside of corporate policy, that is).
If you do find yourself in that situation however, that\u2019s no reason to relinquish the convenience and benefits of Gitpod.</p>`
  })}`;
});
var localServicesInGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Local_services_in_gitpod,
  metadata: metadata$2L,
  prerender: prerender$2Z
});
const metadata$2K = {
  author: "svenefftinge, JohannesLandgraf, csweichel",
  date: "Tue Dec 09 2020 8:00:00 GMT+0000 (UTC)",
  excerpt: "Fully automated development environments will be the standard for professional developers in 5-10 years.",
  image: "teaser.jpg",
  slug: "moving-software-development-to-the-cloud",
  subtitle: "Gitpod & GitHub Codespaces",
  teaserImage: "teaser.jpg",
  title: "Moving software development to the cloud \u2601\uFE0F"
};
const prerender$2Y = true;
const Moving_software_development_to_the_cloud = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2K), {}, {
    default: () => `<p>As <a href="${"/blog/github-codespaces"}">described earlier this year</a>, Microsoft\u2019s investment into GitHub Codespaces is helping to move more into the mainstream what Gitpod has been pioneering on during the past years. This week is GitHub Universe which is why we thought it\u2019s time to share some additional context and information around the rapidly spreading idea of automated, cloud-based dev environments within the developer community. Furthermore we\u2019d like to congratulate GitHub for joining us in moving software development to the cloud \u{1F64C}</p>
<p>Since <a href="${"/blog/gitpod-online-ide"}">we\u2019ve started building Gitpod in July-2017</a>, we firmly believe that fully-automated development environments will be the standard for professional developers in 5-10 years. With a big player like Microsoft entering the market this whole space will gain additional velocity \u{1F680}</p>
<p>We certainly welcome the additional push Codespaces will bring, but it is important to communicate how <a href="${"/gitpod-vs-github-codespaces"}">Gitpod compares to Codespaces</a>.</p>
<h2>Gitpod is Open-Source, Multi-Cloud, and Works With GitLab, GitHub, and Bitbucket</h2>
<p>Gitpod is an <strong>open-source platform</strong> which means you get full transparency over how Gitpod works and can even contribute to it. The <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">vibrant open-source community</a> of Gitpod welcomes everyone, and empowers them to develop additional features without restrictions.</p>
<p>Furthermore, you can run Gitpod on your own infrastructure and any cloud provider. <strong>Gitpod seamlessly works with GitHub, GitLab and Bitbucket</strong> and can be deployed to public, private or hybrid clouds, neatly integrating into your infrastructure, <strong>giving you full control of your system and your source code</strong>.</p>
<h2>Gitpod is Powerful</h2>
<p>As a highly-optimized Kubernetes application <strong>Gitpod is built on next-gen container technology</strong> instead of VMs. This allows Gitpod to be extremely resource efficient giving you the best \u{1F4A5} for the \u{1F4B5}</p>
<p>Compared to virtual machines, isolating workspace containers from each other is harder. At Gitpod we\u2019ve integrated the latest container isolation mechanisms that securely allow users to benefit from the resource efficiency of containers while still having root privileges. For the user this means full access to <code>sudo</code> and <code>docker</code> \u{1F433} Here\u2019s a <a href="${"https://youtu.be/l4I2TVAnBuw?t=174"}" rel="${"nofollow"}">great technical presentation</a> explaining how we make this happen.</p>
<p>The result is that Gitpod offers more powerful dev environments with a small ecological footprint. Furthermore, we run Gitpod.io on a 100% carbon-neutral cloud service \u2764\uFE0F\u{1F30D}</p>
<h2>Gitpod is Fast</h2>
<p>Gitpod is not only extremely fast because of the higher efficiency, but also because of what we call <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">prebuilds</a>. Let\u2019s take a closer look.</p>
<p>The metric that matters here is the time it takes until a dev environment is <strong>ready-to-code</strong>. Ready-to-code means that developers can actually start writing code and don\u2019t have to wait for builds, dependencies to download or code generators to run.</p>
<p>With GitHub Codespaces and other solutions whenever you start a new dev environment, you are left with a raw copy of the code. So before you start writing code, you\u2019ll need to run a bunch of processes and wait until they are finished.</p>
<p>Instead Gitpod prebuilds dev environments when a new commit is pushed to the remote repository. The following diagram illustrates the idea:</p>
<p><img src="${"https://user-images.githubusercontent.com/372735/101493570-870aa000-3966-11eb-9fe1-e32eb80449f0.png"}" alt="${"Prebuilds Diagram"}"></p>
<p>The advantages of having your dev environments prebuilt can not be overstated. For the <a href="${"https://github.com/gitpod-io/vscode"}" rel="${"nofollow"}">vscode repository</a> we measured a 15x difference.</p>
<p>We believe prebuilding dev environments the way Gitpod does it, is key towards <a href="${"https://www.gitpod.io/blog/dev-env-as-code"}" rel="${"nofollow"}">\u201Cdev environments as code\u201D</a>. Without prebuilds, developers have to manually maintain and reuse their dev environments, because of the manual labour put into them. Those stateful environments drift apart over time and teams are once again working in very different setups, wasting time and energy with the resulting problems and surprises. With Gitpod \u201Cit works (or doesn\u2019t work) on my machine is a thing of the past.</p>
<h2>The Road Ahead</h2>
<p>The real competition is the habit of maintaining stateful environments on overpowered local machines. We welcome GitHub and Microsoft to join forces in convincing developers around the world about the workflow and productivity benefits of automated, cloud-based dev environments \u{1F970}</p>
<p>We are excited about the things we announced yesterday around <a href="${"https://www.gitpod.io/blog/root-docker-and-vscode/"}" rel="${"nofollow"}">Root, Docker and VS Code</a> and are already working on big plans we have for next year \u{1F913}</p>
<p>Ephemeral dev environments are going to democratize software development. Allowing anyone to get into a productive coding state on any of their projects and branches with the click of a button is a massive productivity boost. In addition we keep the entire devops pipeline in a centralized, managed system, which provides more security and observability to today\u2019s developer teams.</p>
<p>We will continue to focus on automating the provisioning of dev environments that blend in with your existing workflow, integrate into your existing infrastructure and run on any cloud or your own clusters. <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">We do all of this in the open</a> and invite everyone to join us in building an open platform for secure, collaborative and always-ready-to-code development environments for all developers.</p>
<p>If you want to learn more you can start with our <a href="${"http://www.gitpod.io/docs"}" rel="${"nofollow"}">Introduction to Gitpod</a>.</p>`
  })}`;
});
var movingSoftwareDevelopmentToTheCloud = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Moving_software_development_to_the_cloud,
  metadata: metadata$2K,
  prerender: prerender$2Y
});
const metadata$2J = {
  author: "csweichel",
  date: "Thu Oct 04 2018 12:47:53 GMT+0000 (UTC)",
  excerpt: "Gitpod is a web-based IDE. As such one would think it only works for web-based projects or anything else that does not require a native UI",
  image: "virtual-x-sever-running-on-a-remote-desktop-client.png",
  slug: "native-ui-with-vnc",
  subtitle: "Cloud IDEs aren't limited to web apps",
  title: "Developing native UI applications in Gitpod",
  url: "https://medium.com/gitpod/developing-native-ui-applications-in-gitpod-15af2967c24e"
};
const prerender$2X = true;
const Native_ui_with_vnc = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2J), {}, {
    default: () => `<p>Gitpod is a web-based IDE. As such one would think it only works for web-based projects or anything else that does not require a native UI. However, there\u2019s still a plethora of native UI applications around and many of them are here to stay. In this article we\u2019ll go through how to use Gitpod for developing native desktop UI applications.</p>
<p><img src="${"/images/blog/native-ui-with-vnc/virtual-x-sever-running-on-a-remote-desktop-client.png"}" alt="${"VSCode in Gitpod"}"></p>
<p>A few days ago <a href="${"/blog/docker-in-gitpod"}">Gero introduced Docker builds to Gitpod</a> with which you can bring your own Dockerfile (instead of a pre-built image), and Gitpod will build the image for you. We\u2019ll use that feature to setup a cloud-based development environment for native UI applications.</p>
<h2 id="${"hello-world"}">Hello World<a href="${"#hello-world"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Let\u2019s use Gitpod to write <a href="${"https://github.com/csweichel/gitpod-hello-ui-demo"}" rel="${"nofollow"}">a simple desktop-native application in Go</a> using <a href="${"https://github.com/andlabs/libui"}" rel="${"nofollow"}">libui</a>. First, we create a GitHub repo and a <a href="${"https://github.com/csweichel/gitpod-hello-ui-demo/commit/fea580735c09fa704531a810e8ec7ca6a5c03a88"}" rel="${"nofollow"}">little bit of configuration</a>: we need a Dockerfile to install libui\u2019s dependencies (see below), and we need to tell Gitpod to use that Dockerfile.</p>
<p>FROM gitpod/workspace-full-vnc
RUN sudo apt-get update &amp;&amp; \\
sudo apt-get install -y libgtk-3-dev &amp;&amp; \\
sudo rm -rf /var/lib/apt/lists/*</p>
<p>This Dockerfile uses the gitpod/workspace-full-vnc image which supports the setup necessary to run X11 and VNC in Gitpod. It runs a <a href="${"https://novnc.com"}" rel="${"nofollow"}">web-based VNC viewer</a> on port 6080 \u2014 during startup, Gitpod will ask you if you want to open this page.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6720/1*8xUjJfd3pV0QXyK-ytyhwA.png"}" alt="${"The Hello World UI example running in Gitpod"}"><em>The Hello World UI example running in Gitpod</em></p>
<h2 id="${"native-ui-in-gitpod--x11--vnc"}">Native UI in Gitpod = X11 + VNC<a href="${"#native-ui-in-gitpod--x11--vnc"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><a href="${"https://gitpod.io/"}" rel="${"nofollow"}">Gitpod</a> runs on Linux, so we need an X11 server that our UI application can connect to. As we do not have a physical display attached, we\u2019ll use a framebuffer based X server, namely Xvfb. Using <a href="${"http://www.karlrunge.com/x11vnc/"}" rel="${"nofollow"}">x11vnc</a>, we can serve the virtual screen of the X server to a VNC client. There are a few VNC clients that run in the browser out there, but we\u2019ll go with one that\u2019s battle tested: <a href="${"https://novnc.com/info.html"}" rel="${"nofollow"}">novnc</a>. The combination of Xvfb, x11vnc and novnc is a proven one, and it happens to be the same that e.g. <a href="${"https://janitor.technology/"}" rel="${"nofollow"}">Janitor</a> relies on.</p>
<p>To make this setup work in Gitpod, we first create a Docker image that has the required tools installed, and a small bash script to tie things together. I went ahead and prepared those things in the <a href="${"https://github.com/gitpod-io/workspace-images/tree/master/full-vnc"}" rel="${"nofollow"}">workspace images repo</a>. Any Gitpod workspace started using the workspace-full-vnc image, has a DISPLAY environment variable set in the .bashrc and comes with a running X11 server. No need for any manual setup.</p>
<h2 id="${"lets-go-big-running-visual-studio-code-in-gitpod"}">Let\u2019s go big: running Visual Studio Code in Gitpod<a href="${"#lets-go-big-running-visual-studio-code-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Using this setup, we can build and <a href="${"https://gitpod.io/#github.com/microsoft/vscode"}" rel="${"nofollow"}">run Visual Studio Code in Gitpod</a>. VS Code needs a few more libraries than the bare-bones X11 setup we\u2019ve built so far. But again those libraries are easy enough to install in a Dockerfile:</p>
<p>FROM gitpod/workspace-full-vnc</p>
<p>RUN sudo apt-get update &amp;&amp; \\
sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libgconf2\u20134 libnss3 &amp;&amp; \\
sudo rm -rf /var/lib/apt/lists/*</p>
<p>I added this setup to <a href="${"https://github.com/gitpod-io/definitely-gp/tree/master/vscode"}" rel="${"nofollow"}">definitely-gp</a>, so that when you open the VS code repository in Gitpod, it will build the application, and start it. To see and interact with the application, open the noVNC session that\u2019s served on port 6080:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2000/1*-yHSkPGNR6Vs07MjLKQAUA.gif"}" alt="${"How to open noVNC served on port 6080"}"></p>
<h2 id="${"conclusion"}">Conclusion<a href="${"#conclusion"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By plugging together a handful of tools we can develop native UI applications in Gitpod, and stay in the browser altogether. Naturally, this comes with a few limitations, e.g. at the moment this is Linux only, so testing on different platforms is not feasible. Also, noVNC disconnects from the VNC server every now and then; reloading noVNC brings it back.</p>
<p>Surprisingly, frame-rate is not one of those limitations: you could <a href="${"https://gitpod.io/#https://github.com/csweichel/gitpod-browser-demo"}" rel="${"nofollow"}">open a browser inside a Gitpod</a> and watch YouTube videos; it\u2019s best you pick one without sound, though. :)</p>`
  })}`;
});
var nativeUiWithVnc = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Native_ui_with_vnc,
  metadata: metadata$2J,
  prerender: prerender$2X
});
var nextChapterForGitpod_md = '.redirector.svelte-1so4bi{margin-top:var(--xx-small);margin-bottom:var(--x-large)}h2.svelte-1so4bi{margin-top:var(--small);margin-bottom:var(--x-small)}img[src$="funding.jpg"].svelte-1so4bi{margin-top:var(--large)}';
const css$10 = {
  code: '.redirector.svelte-1so4bi{margin-top:var(--xx-small);margin-bottom:var(--x-large)}h2.svelte-1so4bi{margin-top:var(--small);margin-bottom:var(--x-small)}img[src$="funding.jpg"].svelte-1so4bi{margin-top:var(--large)}',
  map: `{"version":3,"file":"next-chapter-for-gitpod.md","sources":["next-chapter-for-gitpod.md"],"sourcesContent":["<script context=\\"module\\">\\n\\texport const metadata = {\\"author\\":\\"svenefftinge, JohannesLandgraf\\",\\"date\\":\\"Thu, 08 Apr 2021 14:00:00 UTC\\",\\"excerpt\\":\\"Our focus has always been to remove friction from the developer experience. Today we announce a new funding round, our new brand, several product milestones, and DevX Conf.\\",\\"image\\":\\"teaser.jpg\\",\\"slug\\":\\"next-chapter-for-gitpod\\",\\"subtitle\\":null,\\"teaserImage\\":\\"teaser.jpg\\",\\"title\\":\\"Next Chapter for Gitpod\\"};\\n\\tconst { author, date, excerpt, image, slug, subtitle, teaserImage, title } = metadata;\\n  export const prerender = true;\\n</script>\\n\\n<script>\\n\\timport Layout_MDSVEX_DEFAULT from '/workspace/website/src/components/blog/blog-content-layout.svelte';\\n</script>\\n\\n<style>.redirector{margin-top:var(--xx-small);margin-bottom:var(--x-large)}h2{margin-top:var(--small);margin-bottom:var(--x-small)}img[src$=\\"funding.jpg\\"]{margin-top:var(--large)}</style>\\n<Layout_MDSVEX_DEFAULT {...metadata}>\\n\\n<p>At Gitpod our focus has always been to remove all friction from the developer experience and empower developers to be always ready-to-code. Today we are excited to announce a $13m funding round led by <a\\n  href=\\"https://www.generalcatalyst.com/team/dr-steve-herrod\\"\\n  rel=\\"nofollow\\"\\n>General Catalyst</a>, a fully revamped visual & brand identity as well as several product milestones aimed at defining a new product category in modern software development.</p>\\n<p><img\\n  src=\\"/images/blog/next-chapter-for-gitpod/funding.jpg\\"\\n  alt=\\"An enter key on its own\\"\\n></p>\\n<h2 id=\\"funding\\">Funding<a href=\\"#funding\\"><span class=\\"icon icon-link\\"></span></a></h2>\\n<p>We did not need to raise money and actually did not plan for it. We reconsidered when <a\\n  href=\\"https://www.generalcatalyst.com/team/dr-steve-herrod\\"\\n  rel=\\"nofollow\\"\\n>Steve Herrod</a> reached out last November. The first thing he mentioned during our inital call was that he spent the night before configuring and automating his Python environment with Gitpod and was blown away by the automation possibilities. His experience and personality are a 100% match with Gitpod and we feel great adding him as our first external board member. Steve and General Catalyst on our side let us accelerate our roadmap and continue to build out a fully-distributed world class team (<a\\n  href=\\"https://www.gitpod.io/careers\\"\\n  rel=\\"nofollow\\"\\n>we\u2019re hiring</a>) to move software development to the cloud. Next to General Catalyst all of our early backers participated in the round including Speedinvest, Crane Venture Partners and Vertex Ventures. Thank you for your continous support \u{1F64C}</p>\\n<div class=\\"redirector\\">\\n  <a class=\\"btn-otherbrand\\" href=\\"https://www.gitpod.io/direction\\" target=\\"_blank\\"><span class=\\"icon\\">\u{1F5FA}\uFE0F</span> <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\"/>Gitpod's Direction</a>\\n</div>\\n<p><img\\n  src=\\"/images/blog/next-chapter-for-gitpod/brand.jpg\\"\\n  alt=\\"A mug with the Gitpod logo\\"\\n></p>\\n<h2 id=\\"brand\\">Brand<a href=\\"#brand\\"><span class=\\"icon icon-link\\"></span></a></h2>\\n<p>We believe there are standards to be set when it comes to establishing brands in developer tooling. Over the last 2 months we set out to institutionalise design as a key part of the company and will continue to work closely together with our friends at <a\\n  href=\\"https://mad.ac\\"\\n  rel=\\"nofollow\\"\\n>MAD</a> as well as <a href=\\"https://twitter.com/killnicole\\" rel=\\"nofollow\\">Vic</a> - giving our visual identity a style & feel that is on par with our backend architecture. What we launch today is a back to basics approach where we present a complex, feature-rich developer tool in a clear and simple way. On the way we also learned about kumquats! \u{1F34A}</p>\\n<div class=\\"redirector\\">\\n  <a class=\\"btn-otherbrand\\" href=\\"https://www.notion.so/gitpod/Brand-Values-2ed4c2f93c84499b98e3b5389980992e\\" target=\\"_blank\\"><span class=\\"icon\\">\u2728</span> <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\"/> Brand &amp; Values</a>\\n</div>\\n<p><img\\n  src=\\"/images/blog/next-chapter-for-gitpod/product.jpg\\"\\n  alt=\\"A monitor with three open windows\\"\\n></p>\\n<h2 id=\\"product\\">Product<a href=\\"#product\\"><span class=\\"icon icon-link\\"></span></a></h2>\\n<p>Product is at the core of everything we do. We believe that by 2023 ephemeral cloud-based development environments will be as common as CI/CD is today. With our new product updates we take a big step towards realizing that vision. Starting today we willl switch to VS Code as the default editing experience in Gitpod. We are also announcing general availability of sudo privileges and Docker support allowing developers to build Docker images and run containers within their Gitpod workspace. This is based on advanced <a\\n  href=\\"https://www.youtube.com/watch?v=iYLCHQgj0fE\\"\\n  rel=\\"nofollow\\"\\n>namespace layering technology</a> and a great collaborative effort with our friends from Kinvolk. Lastly, we completely rebuilt the dashboard frontend to speed-up developers\u2019 workflows and bring our UX and UI to 2021 \u2728</p>\\n<div class=\\"redirector\\">\\n  <a class=\\"btn-otherbrand\\" href=\\"https://www.gitpod.io/roadmap\\" target=\\"_blank\\"><span class=\\"icon\\">\u{1F6E3}</span> <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\"/> Product Roadmap</a>\\n</div>\\n<p><img\\n  src=\\"/images/blog/next-chapter-for-gitpod/devxconf.jpg\\"\\n  alt=\\"The DevX Conf logo\\"\\n></p>\\n<h2 id=\\"conference\\">Conference<a href=\\"#conference\\"><span class=\\"icon icon-link\\"></span></a></h2>\\n<p>We build Gitpod to improve the daily experience of devs when trying to get the job done. Developers should focus on what really matters: being creative and writing code. Instead they borrow time from their primary task to manually do what could be automated, fight accidental complexity, or get surprised by poorly designed tools, APIs, and programming languages. Today we publicly announce <a\\n  href=\\"https://devxconf.org/\\"\\n  rel=\\"nofollow\\"\\n>DevX Conf (28-29 April)</a> to start from first principles, collaborate, listen, discuss and declutter our workflows, toolchains and minds. We want to spark dialogue across the areas of coding, testing, building, deploying, collaborating on and running software. Speakers include <a\\n  href=\\"https://twitter.com/jasoncwarner\\"\\n  rel=\\"nofollow\\"\\n>Jason Warner</a> (CTO Github), <a href=\\"https://twitter.com/beyang\\" rel=\\"nofollow\\">Beyang Liu</a> (CTO Sourcegraph), <a\\n  href=\\"https://twitter.com/starbuxman\\"\\n  rel=\\"nofollow\\"\\n>Josh Long</a> (Spring), <a\\n  href=\\"https://www.linkedin.com/in/shaneak/\\"\\n  rel=\\"nofollow\\"\\n>Shanea Leven</a> (Founder Codesee), <a\\n  href=\\"https://twitter.com/ellenchisa\\"\\n  rel=\\"nofollow\\"\\n>Ellen Chisa</a> (Founder Darklang), <a\\n  href=\\"https://twitter.com/left_pad\\"\\n  rel=\\"nofollow\\"\\n>Henry Zhu</a> (Steward of BabelJS), <a\\n  href=\\"https://twitter.com/arcanis\\"\\n  rel=\\"nofollow\\"\\n>Ma\xEBl Nison</a> (Creator Yarn), <a href=\\"https://twitter.com/dabit3\\" rel=\\"nofollow\\">Nader Dabit</a> (GraphQL & Serverless), <a\\n  href=\\"https://www.linkedin.com/in/anuragoel/\\"\\n  rel=\\"nofollow\\"\\n>Anurag Goel</a> (Founder Render), <a\\n  href=\\"https://github.com/xcv58\\"\\n  rel=\\"nofollow\\"\\n>Yihong Cheng</a> (Github1s), <a href=\\"https://twitter.com/artman\\" rel=\\"nofollow\\">Tuomas Artman</a> (Founder Linear) and many more. Hope to see you there!</p>\\n<div class=\\"redirector\\">\\n  <a class=\\"btn-otherbrand\\" href=\\"https://devxconf.org\\" target=\\"_blank\\"><span class=\\"icon\\">\u{1F4BB}</span> <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\"/>Register at DevX Conf</a>\\n</div>\\n</Layout_MDSVEX_DEFAULT>"],"names":[],"mappings":"AAUO,yBAAW,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,cAAc,IAAI,SAAS,CAAC,CAAC,gBAAE,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,cAAc,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,aAAa,eAAC,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC"}`
};
const metadata$2I = {
  author: "svenefftinge, JohannesLandgraf",
  date: "Thu, 08 Apr 2021 14:00:00 UTC",
  excerpt: "Our focus has always been to remove friction from the developer experience. Today we announce a new funding round, our new brand, several product milestones, and DevX Conf.",
  image: "teaser.jpg",
  slug: "next-chapter-for-gitpod",
  subtitle: null,
  teaserImage: "teaser.jpg",
  title: "Next Chapter for Gitpod"
};
const prerender$2W = true;
const Next_chapter_for_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$10);
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2I), {}, {
    default: () => `<p>At Gitpod our focus has always been to remove all friction from the developer experience and empower developers to be always ready-to-code. Today we are excited to announce a $13m funding round led by <a href="${"https://www.generalcatalyst.com/team/dr-steve-herrod"}" rel="${"nofollow"}">General Catalyst</a>, a fully revamped visual &amp; brand identity as well as several product milestones aimed at defining a new product category in modern software development.</p>
<p><img src="${"/images/blog/next-chapter-for-gitpod/funding.jpg"}" alt="${"An enter key on its own"}" class="${"svelte-1so4bi"}"></p>
<h2 id="${"funding"}" class="${"svelte-1so4bi"}">Funding<a href="${"#funding"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We did not need to raise money and actually did not plan for it. We reconsidered when <a href="${"https://www.generalcatalyst.com/team/dr-steve-herrod"}" rel="${"nofollow"}">Steve Herrod</a> reached out last November. The first thing he mentioned during our inital call was that he spent the night before configuring and automating his Python environment with Gitpod and was blown away by the automation possibilities. His experience and personality are a 100% match with Gitpod and we feel great adding him as our first external board member. Steve and General Catalyst on our side let us accelerate our roadmap and continue to build out a fully-distributed world class team (<a href="${"https://www.gitpod.io/careers"}" rel="${"nofollow"}">we\u2019re hiring</a>) to move software development to the cloud. Next to General Catalyst all of our early backers participated in the round including Speedinvest, Crane Venture Partners and Vertex Ventures. Thank you for your continous support \u{1F64C}</p>
<div class="${"redirector svelte-1so4bi"}"><a class="${"btn-otherbrand"}" href="${"https://www.gitpod.io/direction"}" target="${"_blank"}"><span class="${"icon"}">\u{1F5FA}\uFE0F</span> <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}">Gitpod&#39;s Direction</a></div>
<p><img src="${"/images/blog/next-chapter-for-gitpod/brand.jpg"}" alt="${"A mug with the Gitpod logo"}"></p>
<h2 id="${"brand"}" class="${"svelte-1so4bi"}">Brand<a href="${"#brand"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We believe there are standards to be set when it comes to establishing brands in developer tooling. Over the last 2 months we set out to institutionalise design as a key part of the company and will continue to work closely together with our friends at <a href="${"https://mad.ac"}" rel="${"nofollow"}">MAD</a> as well as <a href="${"https://twitter.com/killnicole"}" rel="${"nofollow"}">Vic</a> - giving our visual identity a style &amp; feel that is on par with our backend architecture. What we launch today is a back to basics approach where we present a complex, feature-rich developer tool in a clear and simple way. On the way we also learned about kumquats! \u{1F34A}</p>
<div class="${"redirector svelte-1so4bi"}"><a class="${"btn-otherbrand"}" href="${"https://www.notion.so/gitpod/Brand-Values-2ed4c2f93c84499b98e3b5389980992e"}" target="${"_blank"}"><span class="${"icon"}">\u2728</span> <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}"> Brand &amp; Values</a></div>
<p><img src="${"/images/blog/next-chapter-for-gitpod/product.jpg"}" alt="${"A monitor with three open windows"}"></p>
<h2 id="${"product"}" class="${"svelte-1so4bi"}">Product<a href="${"#product"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Product is at the core of everything we do. We believe that by 2023 ephemeral cloud-based development environments will be as common as CI/CD is today. With our new product updates we take a big step towards realizing that vision. Starting today we willl switch to VS Code as the default editing experience in Gitpod. We are also announcing general availability of sudo privileges and Docker support allowing developers to build Docker images and run containers within their Gitpod workspace. This is based on advanced <a href="${"https://www.youtube.com/watch?v=iYLCHQgj0fE"}" rel="${"nofollow"}">namespace layering technology</a> and a great collaborative effort with our friends from Kinvolk. Lastly, we completely rebuilt the dashboard frontend to speed-up developers\u2019 workflows and bring our UX and UI to 2021 \u2728</p>
<div class="${"redirector svelte-1so4bi"}"><a class="${"btn-otherbrand"}" href="${"https://www.gitpod.io/roadmap"}" target="${"_blank"}"><span class="${"icon"}">\u{1F6E3}</span> <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}"> Product Roadmap</a></div>
<p><img src="${"/images/blog/next-chapter-for-gitpod/devxconf.jpg"}" alt="${"The DevX Conf logo"}"></p>
<h2 id="${"conference"}" class="${"svelte-1so4bi"}">Conference<a href="${"#conference"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We build Gitpod to improve the daily experience of devs when trying to get the job done. Developers should focus on what really matters: being creative and writing code. Instead they borrow time from their primary task to manually do what could be automated, fight accidental complexity, or get surprised by poorly designed tools, APIs, and programming languages. Today we publicly announce <a href="${"https://devxconf.org/"}" rel="${"nofollow"}">DevX Conf (28-29 April)</a> to start from first principles, collaborate, listen, discuss and declutter our workflows, toolchains and minds. We want to spark dialogue across the areas of coding, testing, building, deploying, collaborating on and running software. Speakers include <a href="${"https://twitter.com/jasoncwarner"}" rel="${"nofollow"}">Jason Warner</a> (CTO Github), <a href="${"https://twitter.com/beyang"}" rel="${"nofollow"}">Beyang Liu</a> (CTO Sourcegraph), <a href="${"https://twitter.com/starbuxman"}" rel="${"nofollow"}">Josh Long</a> (Spring), <a href="${"https://www.linkedin.com/in/shaneak/"}" rel="${"nofollow"}">Shanea Leven</a> (Founder Codesee), <a href="${"https://twitter.com/ellenchisa"}" rel="${"nofollow"}">Ellen Chisa</a> (Founder Darklang), <a href="${"https://twitter.com/left_pad"}" rel="${"nofollow"}">Henry Zhu</a> (Steward of BabelJS), <a href="${"https://twitter.com/arcanis"}" rel="${"nofollow"}">Ma\xEBl Nison</a> (Creator Yarn), <a href="${"https://twitter.com/dabit3"}" rel="${"nofollow"}">Nader Dabit</a> (GraphQL &amp; Serverless), <a href="${"https://www.linkedin.com/in/anuragoel/"}" rel="${"nofollow"}">Anurag Goel</a> (Founder Render), <a href="${"https://github.com/xcv58"}" rel="${"nofollow"}">Yihong Cheng</a> (Github1s), <a href="${"https://twitter.com/artman"}" rel="${"nofollow"}">Tuomas Artman</a> (Founder Linear) and many more. Hope to see you there!</p>
<div class="${"redirector svelte-1so4bi"}"><a class="${"btn-otherbrand"}" href="${"https://devxconf.org"}" target="${"_blank"}"><span class="${"icon"}">\u{1F4BB}</span> <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}">Register at DevX Conf</a></div>`
  })}`;
});
var nextChapterForGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Next_chapter_for_gitpod,
  metadata: metadata$2I,
  prerender: prerender$2W
});
const metadata$2H = {
  author: "akosyakov",
  date: "Wed Dec 12 2018 11:44:33 GMT+0000 (UTC)",
  excerpt: "Nowadays, there are many collaborative platforms for showcasing JS code snippets and frameworks. Most of them run in your browser, some even",
  image: "node-js-development-with-only-a-browser.jpeg",
  slug: "node-js-development",
  title: "Sustainable Node.js development with only a browser",
  url: "https://medium.com/gitpod/sustainable-node-js-development-with-only-a-browser-4887bc6e737b"
};
const prerender$2V = true;
const Node_js_development = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2H), {}, {
    default: () => `<p>Nowadays, there are many collaborative platforms for showcasing JS code snippets and frameworks. Most of them run in your browser, some even manage to magically run Node.js applications in the cloud. They abstract away many possibilities in order to focus on prototyping and learning.</p>
<p>This simplification (or even magic) eventually turns out to be a hard wall. Once we leave the prototype stage, we need to be able to control and freely combine different versions of frontend and Node.js frameworks, connect to the database that best fits our use case, use different JS flavors and deployment services.</p>
<p>In this blog post, I will show you a transparent way of getting started with Node.js easily without the magic. The approach taken provides a low entry barrier without the wall once you grow out of it. You will learn how to write Node.js applications in a browser-based environment, that has all the depth of a full local dev environment with VS Code but the friendly onboarding of JSFiddle. These environments can be freely shared to work together and showcase your applications.</p>
<p>The dev environment is called <a href="${"https://www.gitpod.io/"}" rel="${"nofollow"}">Gitpod</a> and is entirely free for open-source development.</p>
<h2>Table of Contents</h2>
<ul><li><p><a href="${"#hello-world"}">Hello World</a></p></li>
<li><p><a href="${"#automating-nodejs-setup"}">Automating Node.js setup</a></p></li>
<li><p><a href="${"#working-with-pull-requests"}">Working with Pull Requests</a></p></li>
<li><p><a href="${"#working-together"}">Working Together</a></p></li>
<li><p><a href="${"#developing-full-stack-nodejs-applications"}">Developing full-stack Node.js applications</a></p></li>
<li><p><a href="${"#summary"}">Summary</a></p></li></ul>
<h2 id="${"hello-world"}">Hello World<a href="${"#hello-world"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Let\u2019s get started by developing a simple \u201CHello World\u201D application and learning the basics of Node.js development.</p>
<h3 id="${"start-a-new-project"}">Start a new project<a href="${"#start-a-new-project"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod treats any GitHub repository as a project which can be opened. Let\u2019s start by creating a new repository for our Hello World project:</p>
<ul><li><p>open your GitHub dashboard and select New Repository;</p></li>
<li><p>enter a repository name and click Create repository.</p></li></ul>
<p>Now, we can open the created project in Gitpod. You can do it by simply prefixing the repository URL with gitpod.io/#. For example, I\u2019ve called my repository node-hello-world and it can be opened in Gitpod with <strong>gitpod.io/#</strong><a href="${"https://github.com/akosyakov/node-hello-world"}" rel="${"nofollow"}">https://github.com/akosyakov/node-hello-world</a>.</p>
<p>The first time, you will need to sign in Gitpod with your GitHub account. GitHub will ask you to authorize read access to your email address. Write access to repositories can be granted later on <a href="${"https://gitpod.io/access-control/"}" rel="${"nofollow"}">your access control page</a>.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/5692/1*K8cn3G30eQouKmWQb228LQ.png"}" alt="${"Github Authorize Gitpod Page"}"></p>
<p>Gitpod starts a new workspace, which is a Linux-based cloud container, and provides access to it via a VS Code powered online IDE. Workspaces are started on demand and automatically shut-down if you don\u2019t use them. They are continuously replicated and never deleted, so you always can restart a workspace later from <a href="${"https://gitpod.io/workspaces/"}" rel="${"nofollow"}">your Gitpod dashboard</a>.</p>
<p><img src="${"/images/blog/node-js-development/create-a-new-project-on-gh-then-open-in-gp.gif"}" alt="${"How to create a new project on GitHub and then open it in Gitpod"}"></p>
<p><em>If you don\u2019t want to create a new project from scratch, click on <a href="${"https://gitpod.io/#snapshot/0d82ae08-c328-4cb5-96e5-7233d5de0c11"}" rel="${"nofollow"}">a snapshot link</a> of my workspace to try Hello World application. I will cover later how one can make a workspace snapshot.</em></p>
<h3 id="${"writing-a-nodejs-application"}">Writing a Node.js application<a href="${"#writing-a-nodejs-application"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>By default, each workspace is preconfigured with standard tools like Node.js, npm, yarn and nvm. Later we will learn how to change the Node.js setup. Now, let\u2019s code something and run it:</p>
<ul><li><p>open the command palette (F1) and select New File command;</p></li>
<li><p>create a new file with app.js name and type the following content:</p>
<p>const message = \u2018Hello World\u2019;</p>
<p>console.log(message, \u2018from Gitpod!\u2019);</p></li></ul>
<p><img src="${"https://cdn-images-1.medium.com/max/2612/0*b-63v0Asfa09vfzG"}" alt="${"As you type, you can see that Gitpod validates your code. It also provides you with smart completions and documentation on hover."}"><em>As you type, you can see that Gitpod validates your code. It also provides you with smart completions and documentation on hover.</em></p>
<h3 id="${"run--debug-a-nodejs-application"}">Run / Debug a Node.js application<a href="${"#run--debug-a-nodejs-application"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>In order to run the application, type node app.js into the terminal.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2000/0*KzrRQ41oARG7XoQB"}" alt="${"How to run a Node.js application in Gitpod"}"></p>
<p>Of course, you can have more than one terminal to your cloud workspace.</p>
<p>Next up, let\u2019s see how we can debug the application:</p>
<ul><li><p>create a debug configuration (Debug-&gt; Add Configuration) and select Node.js: Launch Program configuration snippet in the content assist of the opened editor;</p></li>
<li><p>add a breakpoint into app.js file, by clicking on the gutter on the left;</p></li>
<li><p>open the Debug View (View -&gt; Debug),</p></li>
<li><p>press the green play icon to start debugging (or press F5).</p></li></ul>
<p>Our program should run, and when a breakpoint hits you can inspect call stack, variables and even use the debug console to evaluate expressions.</p>
<p><img src="${"/images/blog/node-js-development/how-to-debug-a-nodejs-app-in-gitpod.gif"}" alt="${"How to debug a Node.js application in Gitpod"}"></p>
<h3 id="${"working-with-git"}">Working with Git<a href="${"#working-with-git"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Let\u2019s have a look at how we can share our changes through Git. Open the Git view, stage your changes, enter a commit message and click commit. You can also open a diff editor by clicking on changed files and push new commits to GitHub with Git: Push\u2026 command.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2612/0*FqWgZy08qIkj3qVp"}" alt="${"How to make a commit in Gitpod"}"></p>
<p>If you have not granted write access to your repositories yet, Gitpod will ask for it. Grant permissions and try to push again.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3380/1*bHchL7DVfmfdYWqjWsqRaw.png"}" alt="${"Gitpod prompt grant write access to your repositories"}"></p>
<h2 id="${"automating-nodejs-setup"}">Automating Node.js setup<a href="${"#automating-nodejs-setup"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As mentioned above each workspace by default is preconfigured with standard tools, like Node.js 8.x.</p>
<p>Let\u2019s assume that we agreed on using Node.js 10.x for our project instead. Usually, all developers have to update their local Node.js versions and often switch between them depending on what project or branch is used.</p>
<p>With Gitpod, it is different. You can configure a workspace with a specific Node.js version for each branch via Docker images, without changing the local setup for any developer at all.</p>
<p>The easiest way to initialize the config is to use Gitpod\u2019s CLI. The CLI will walk you through the most important configuration options and create a .gitpod.yml file that is located in the root of your repository.</p>
<p>In the terminal type gp init.</p>
<ol><li><p>For the first option choose: docker file. It will create a Dockerfile that sits next to .gitpod.yml. Here you can add any kind of tools and dependencies you will need for development. When starting a fresh workspace, Gitpod will pick that Dockerfile up and provide a cloud container based on that.</p></li>
<li><p>Now press enter until the tasks section. Type node app.js. The tasks are automatically started whenever a workspace gets started. You can have multiple tasks and use different lifecycles. Each task will be opened in a separate terminal.</p></li></ol>
<p><img src="${"/images/blog/node-js-development/gp-init-to-generate-the-gitpod-config.gif"}" alt="${"How to use 'gp init' to generate the Gitpod config files"}"></p>
<p>The created files will be automatically opened in the editor. Let\u2019s change the config so that it starts two tasks in separate terminals:</p>
<pre class="${"language-null"}">${`<code class="language-null">image:

  file: Dockerfile

tasks:

  - init: node --version

  - command: node app.js</code>`}</pre>
<p>And change the Dockerfile to use Node.js 10.x as the base image:</p>
<p>FROM node:10</p>
<p>To try it our we need to push the config back to GitHub and open a new workspace. Let\u2019s do this through a pull request, so we learn about the GitHub integration on the way.</p>
<p><em>Here is <a href="${"https://gitpod.io/#snapshot/ea0d6704-a513-4c94-b8e7-fe72c3d8e5fb"}" rel="${"nofollow"}">another snapshot link</a> to try our configuration without opening a pull request. You can learn more about workspace configuration <a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">here</a>.</em></p>
<h2 id="${"working-with-pull-requests"}">Working with Pull Requests<a href="${"#working-with-pull-requests"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod provides seamless integration with GitHub features like creating and reviewing pull requests.</p>
<h3 id="${"creating-a-new-pull-request"}">Creating a new Pull Request<a href="${"#creating-a-new-pull-request"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Let\u2019s open a new pull request from Gitpod:</p>
<ul><li><p>commit your changes using the Git view (see above);</p></li>
<li><p>use Git: Checkout command or click the branch item in the status bar to create a new branch. Name it somehow, e.g. gitpodify;</p></li>
<li><p>next up open the Pull Request view on the right. You cannot create a new pull request yet, because first the new branch should be published to GitHub, click publish changes;</p></li>
<li><p>after that, the Pull Request view will be updated and you can open a new pull request.</p></li></ul>
<p><img src="${"/images/blog/node-js-development/how-to-make-a-pr-in-gitpod.gif"}" alt="${"How to make a PR in Gitpod"}"></p>
<h3 id="${"reviewing-a-pull-request"}">Reviewing a Pull Request<a href="${"#reviewing-a-pull-request"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>As I\u2019ve mentioned at the beginning Gitpod treats each GitHub repository as a project. Actually, it is even smarter and can figure out from any GitHub URL which branch should be opened and how.</p>
<p>Let\u2019s go to the pull request page on GitHub and prefix its URL with gitpod.io/#, just like we did initially:</p>
<p><img src="${"/images/blog/node-js-development/how-to-open-a-gitpod-workspace-from-a-pr.gif"}" alt="${"How to open a Gitpod workspace from a PR page on GitHub"}"><em>Opening a PR with new workspace image can take some time since Gitpod needs to build the image. But it is only rebuilt when changed.</em></p>
<p>As you can see, Gitpod opens with a branch for your pull request. PR file changes are presented on the left sidebar to review. Our init and command workspace tasks are executed in terminals, Node.js is 10.x now, and Hello World is printed.</p>
<p>While reviewing in Gitpod, you can comment, change the code to address comments, suggest new changes, etc. When you are done, merge your pull request from Gitpod as well.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2608/0*KIZkXiyQv3aZzsjA"}" alt="${"How to review a PR in Gitpod"}"></p>
<h2 id="${"working-together"}">Working Together<a href="${"#working-together"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Since Gitpod workspaces are running in the cloud, we can share them in similar ways how you share documents in Google Docs.</p>
<h3 id="${"helping-others-with-nodejs-development"}">Helping others with Node.js development<a href="${"#helping-others-with-nodejs-development"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>You can share your running workspaces with colleagues to collaborate on exactly the same codebase, development tools, running terminals, and applications. It is particularly useful to assist each other on some tricky configuration, dependency or code problem.</p>
<p>In order to share a running workspace: click on your account avatar, select Share Running Workspace, enable sharing, copy a link and share the copied link with your colleagues.</p>
<p><img src="${"/images/blog/node-js-development/share-a-running-workspace-in-gitpod.gif"}" alt="${"How to share a running Gitpod workspace"}"><em>Both users use exactly the same workspace and see the shared output in terminals.</em></p>
<h3 id="${"showcasing-nodejs-applications"}">Showcasing Node.js applications<a href="${"#showcasing-nodejs-applications"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>You can take a complete snapshot (clone) of your workspace, even including your IDE layout, and share it as a link. Think about workspace snapshots like code snippets on JSFiddle. It is useful in the same way: to share reproducible examples on issues, Stack Overflow answers, for tutorials and workshops. But at the same, you share the complete development setup and present it in the appropriate way.</p>
<p>In order to share a workspace snapshot: click on your account avatar, select Share Workspace Snapshot, copy a link and share the copied link where you want.</p>
<p><img src="${"/images/blog/node-js-development/share-a-gitpod-workspace-snapshot.gif"}" alt="${"How to share a Gitpod workspace Snapshot"}"><em>The <a href="${"https://gitpod.io/#snapshot/14dc69f1-0e8c-4a36-b221-0ab16e91326e"}" rel="${"nofollow"}">shared workspace snapshot</a> preserves not only the development setup but the IDE layout and even selection in the editor.</em></p>
<h2 id="${"developing-full-stack-nodejs-applications"}">Developing full-stack Node.js applications<a href="${"#developing-full-stack-nodejs-applications"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>So far, we\u2019ve only had a look at a simple Node.js application. In case you wonder whether it will scale to sophisticated applications you can try any of the following repositories:</p>
<ul><li><p><a href="${"https://github.com/gitpod-io/nodejs-shopping-cart"}" rel="${"nofollow"}">Node.js Shopping Cart</a> is a reference Node.js application demonstrating how to use the Express framework. You can open it in Gitpod with <a href="${"https://gitpod.io/#https://github.com/gitpod-io/nodejs-shopping-cart"}" rel="${"nofollow"}">one-click</a> and follow along <a href="${"https://medium.com/gitpod/debugging-node-js-applications-in-theia-76c94c76f0a1"}" rel="${"nofollow"}">this blog post</a> explaining in details how to debug the app.</p></li>
<li><p>Gitpod is based on an open-source IDE framework \u2014 <a href="${"http://theia-ide.org"}" rel="${"nofollow"}">Theia</a>. It\u2019s built with a lot of JS technologies, including Node.js, Express, TypeScript and React. And, of course, <a href="${"https://github.com/theia-ide/theia/blob/master/doc/Developing.md#run-the-browser-example-with-gitpod"}" rel="${"nofollow"}">Gitpod is used to develop Theia</a>.</p></li>
<li><p>You even can develop Electron applications in Gitpod, like VS Code. Chris demonstrates it in <a href="${"https://medium.com/gitpod/developing-native-ui-applications-in-gitpod-15af2967c24e"}" rel="${"nofollow"}">this blog post</a>.</p></li></ul>
<h2 id="${"summary"}">Summary<a href="${"#summary"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod provides the complete Node.js development experience right from a browser. It enables you to automate your development setup, quickly onboard developers, streamline code review and testing processes on GitHub, help each other in real time, showcase your applications and setups. Also, it is entirely free for open source development!</p>
<p>If you have any questions, <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">join the Gitpod Community</a>! We are listening intensely to all feedback.</p>`
  })}`;
});
var nodeJsDevelopment = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Node_js_development,
  metadata: metadata$2H,
  prerender: prerender$2V
});
const metadata$2G = {
  author: "akosyakov",
  date: "Tue Nov 13 2018 12:41:55 GMT+0000 (UTC)",
  excerpt: "Gitpod is based on the open-source Theia IDE Framework, which is highly inspired by VS Code, reuses its major components like the Monaco",
  image: "node-js-gitpod.png",
  slug: "node-js-gitpod",
  title: "Debugging Node.js applications in Theia",
  url: "https://medium.com/gitpod/debugging-node-js-applications-in-theia-76c94c76f0a1"
};
const prerender$2U = true;
const Node_js_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2G), {}, {
    default: () => `<p>Gitpod is based on the open-source Theia IDE Framework, which is highly inspired by VS Code, reuses its major components like the Monaco editor and intelligent-language support and is designed to run as a web application.</p>
<p>At TypeFox, we use Gitpod to develop Theia and all its satellite projects, like Theia extensions and language servers. We\u2019ve discovered that for most use cases we don\u2019t need to go to local development anymore. Development, testing, and the review processes are streamlined, leading from source code to a proper development environment accessible from a browser with a single click.</p>
<p>Up to now, there was one important use case that forced us back to local tools, because it was not supported by Gitpod: Debugging.</p>
<p>Now, it is available, and I would like to give you a run through the basics of Node.js debugging in Gitpod based on an example.</p>
<h2 id="${"step-0-open-nodejs-shopping-cart-example-in-gitpod"}">Step 0: Open Node.js Shopping Cart example in Gitpod<a href="${"#step-0-open-nodejs-shopping-cart-example-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Start a new workspace for the example GitHub repository: <a href="${"https://gitpod.io/#https://github.com/gitpod-io/nodejs-shopping-cart"}" rel="${"nofollow"}">https://gitpod.io/#https://github.com/gitpod-io/nodejs-shopping-cart</a></p>
<p><img src="${"https://cdn-images-1.medium.com/max/2992/0*WySkgfqLHyOkQq_c"}" alt="${"Start a new Gitpod workspace for the shopping cart example via prefixing the URL with gitpod.io#"}"></p>
<p>A new Gitpod workspace will be opened. Required dependencies are installed automatically since the repository is configured with <a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">a .gitpod.yml file</a>. You can see it in the terminal, opened in the bottom area.</p>
<h2 id="${"step-1-start-debugging"}">Step 1: Start debugging<a href="${"#step-1-start-debugging"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"https://cdn-images-1.medium.com/max/2000/0*cm6tolHouEztvvuC"}" alt="${"Gitpod workspace"}"></p>
<p>In order to start debugging, you should open the debug view first. You can do it via Viewmain menu or with Ctrl/Cmd+Shift+D.</p>
<p>The debug view allows you to configure launch configurations, start and manage debug sessions. Configurations are persisted debugging setups. They are stored in a <a href="${"https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes"}" rel="${"nofollow"}">VS Code compatible format</a> in a launch.json JSON-file located in your workspace\u2019s .theia folder. If your project already has the VS Code launch file, then Gitpod will recognize and use it instead.</p>
<p>Node.js Shopping Cart is an Express.js web-application. The repository already has a pre-configured Launch Program configuration, which starts the web server Node.js process in the debug mode. Let\u2019s run it with F5 or by pressing the run button left to the configuration drop-down.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3644/1*SUD-Cfy3YC86JJmgo1bLpA.png"}" alt="${"Gitpod Debug Tab"}"></p>
<h2 id="${"step-2-preview-the-application"}">Step 2: Preview the application<a href="${"#step-2-preview-the-application"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>A notification should pop-up suggesting you open an application side-by-side with an editor or externally, in a new browser tab. Let\u2019s open it side-by-side to be able to debug and use our app at the same time.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/4512/1*65SBIeZyvn_31V9biYKNAQ.png"}" alt="${"Gitpod Preview Notification"}"></p>
<p>Take your time and play with the app. You can review items to buy and in your cart, move them into or out of your cart.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/7676/1*M6KN6axYYOW8iqlnqsXpVw.png"}" alt="${"Gitpod workspace shopping cart application preview"}"></p>
<h2 id="${"step-3-pause-on-a-breakpoint"}">Step 3: Pause on a breakpoint<a href="${"#step-3-pause-on-a-breakpoint"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In this step we debug what happens when a user navigates to the homepage.</p>
<p>First, we need to add a breakpoint to the routing logic. It is defined in routes/index.js. You can open that file from the navigator or using the quick file palette (Ctrl/Cmd+P) .</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2500/1*6ni4GKFo9FFJoh_r8lvLVg.png"}" alt="${"Gitpod quick file pallete"}"></p>
<p>Next, add a breakpoint in the editor margin against a line which you want to debug. A route callback handling / path looks promising.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2988/1*AaqYqH5LILFw4g0-jNu5Bg.png"}" alt="${"Debugging: Breakpoints"}"><em>Breakpoints are displayed in the debug view and applied to currently running sessions.</em></p>
<p>Now, in the app, try navigating to the homepage. The debug session will pause on the breakpoint. You can traverse the current stack trace, inspect variables and control the execution flow with the debug actions toolbar:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2000/1*Ru0MXHEcU_RzQEAKX30seA.png"}" alt="${"Gitpod Debug Menu"}"></p>
<h2 id="${"step-4-inspect-and-modify-data"}">Step 4: Inspect and modify data<a href="${"#step-4-inspect-and-modify-data"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>There are several ways to see variables\u2019 values:</p>
<ul><li><p>you can traverse current scopes and variables in the debug view;</p></li>
<li><p>you can hover over expressions in the editor to evaluate them with a current session;</p></li>
<li><p>or you can use the debug console (REPL) to evaluate custom expressions.</p></li></ul>
<p>You can always double-click on any variable to modify its value.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/7676/1*_zf4PL_AWfzeBZlp2mRjZQ.png"}" alt="${"Debug: Inspect and Modify data"}"></p>
<h2 id="${"next-steps"}">Next steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Debugging is an important feature to provide the complete development experience. The Node.js debugging support is the first step for Gitpod in this direction. We are working to bring more debug features and add support for more runtimes. We would also love to hear what features and runtimes you want to see supported. <a href="${"https://github.com/gitpod-io/gitpod/issues/new/choose"}" rel="${"nofollow"}">Tell us</a>.</p>`
  })}`;
});
var nodeJsGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Node_js_gitpod,
  metadata: metadata$2G,
  prerender: prerender$2U
});
const metadata$2F = {
  author: "svenefftinge",
  date: "Wed Sep 26 2018 09:35:09 GMT+0000 (UTC)",
  excerpt: "It has been a month already since we went public with Gitpod.io. We want to take a moment and send out a big thank you for all the great",
  image: "october-2018-release.jpeg",
  slug: "october-2018-release",
  subtitle: "What's new this month?",
  title: "Gitpod \u2014 October 2018 Release",
  url: "https://medium.com/gitpod/gitpod-october-2018-release-672c91294b40"
};
const prerender$2T = true;
const October_2018_release = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2F), {}, {
    default: () => `<p>It has been a month already since we went public with Gitpod.io. We want to take a moment and send out a big thank you for all the great feedback and kind words! <span aria-hidden="${"true"}">\u2764\uFE0F</span></p>
<p>We are working to incorporate all your feedback continuously, adding new features, fixing bugs and improving the overall usability and performance.
Please keep sending all that useful feedback!</p>
<p>Today, we are pleased to announce a new version of <a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">Gitpod</a>.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/10944/0*TrpIB26qJjpdoAmh"}" alt="${"A Cake with Sparkles by [Audrey Fretz](https://unsplash.com/@parkstreet?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)"}"><em>Photo by <a href="${"https://unsplash.com/@parkstreet?utm_source=medium&utm_medium=referral"}" rel="${"nofollow"}">Audrey Fretz</a> on <a href="${"https://unsplash.com?utm_source=medium&utm_medium=referral"}" rel="${"nofollow"}">Unsplash</a></em></p>
<p>Here are the most important new features and improvements:</p>
<h2 id="${"unlimited-gitpod-hours-"}">Unlimited Gitpod Hours! \u{1F381}<a href="${"#unlimited-gitpod-hours-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To allow you using Gitpod as much as you want, during the beta you can now
<strong>add extra Gitpod Hours whenever you run low on them</strong>!</p>
<p><img src="${"https://cdn-images-1.medium.com/max/5364/1*JUfY6XPR9o74dYU1kNWvcA.png"}" alt="${"Gitpod Dashboard add extra hours"}"></p>
<h2 id="${"docker-file-support-\uFE0F"}">Docker File Support \u2699\uFE0F<a href="${"#docker-file-support-%EF%B8%8F"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Most projects need special tools, which can be provided by naming a custom Docker image in your <em>.gitpod</em> file.</p>
<p>Starting today, you can point to a <em>Dockerfile</em> that sits next to the <em>.gitpod</em> file. Gitpod will take care of building and caching it for you. Instead of managing your own docker builds and versions, simply put the <em>Dockerfile</em> into the repository and you will always have a working setup for the branch at hand.</p>
<p>Please read <a href="${"/blog/docker-in-gitpod"}">Gero\u2019s post</a> explaining this feature in more detail.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/3988/1*IBKSgvfSNzbcyz8YUIc4cg.png"}" alt="${"Gitpod Workspace startup phase building workspace"}"></p>
<h2 id="${"introduced-cli-\uFE0F"}">Introduced CLI \u2328\uFE0F<a href="${"#introduced-cli-%EF%B8%8F"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We have introduced a CLI which allows controlling the IDE from the command line, for instance you can open files. Try:</p>
<pre class="${"language-null"}">${`<code class="language-null">gpopen path/to/file</code>`}</pre>
<p>or just</p>
<pre class="${"language-null"}">${`<code class="language-null">open path/to/file</code>`}</pre>
<p>or in case your muscle memory is taking over :)</p>
<pre class="${"language-null"}">${`<code class="language-null">code path/to/file</code>`}</pre>
<p>We will add more features to the CLI. If you have ideas or demands please file tickets <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">over here</a>.</p>
<h2 id="${"github-bot-"}">GitHub Bot \u{1F916}<a href="${"#github-bot-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">Gitpod Bot for Github</a> can automatically add Gitpod-links to issues and pull-requests. For instance, if you want to improve onboarding for new contributors you should configure the bot so it adds links to <strong>good_first_issue</strong> or <strong>help_wanted </strong>tagged issues.</p>
<p><img src="${"/images/blog/october-2018-release/gitpod-bot-for-gh.png"}" alt="${"Gitpod Bot for Github"}"></p>
<p>We will shortly write a post dedicated to streamlining the contributor\u2019s experience.</p>
<h2 id="${"user-preferences-"}">User Preferences \u{1F913}<a href="${"#user-preferences-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Preferences and user preferences now allow for customizing your experience individually or per workspace. The workspace preferences are stored in the git repository, while the user preferences are stored in your account and will be used across all your workspaces.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6280/1*0SbAwb4vDj28OVvvQmdflQ.png"}" alt="${"User Preferences"}"></p>
<h2 id="${"change-language-mode-"}">Change Language Mode \u{1F4AC}<a href="${"#change-language-mode-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Sometimes you want to manually change syntax coloring because e.g. no file extension is present. Clicking on the language name in the status bar now allows to quick pick what language to use for an opened editor.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/4836/1*HVSkKl7A0oxt3S0UDshHGw.png"}" alt="${"Change Language Mode"}"></p>
<h2 id="${"enhanced-dashboard-"}">Enhanced Dashboard \u{1F484}<a href="${"#enhanced-dashboard-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In case you want to work a bit longer on a workspace you can now change its description. Also the workspace id is shown in the dashboard so you can tell apart multiple workspaces for the same context.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/4532/1*7xvMmtyT_afIYtj0nX-7Pw.png"}" alt="${"Enhanced Gitpod Dashboard"}"></p>
<h2 id="${"other-improvements-"}">Other Improvements \u{1F680}<a href="${"#other-improvements-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>There are plenty of other improvements and fixes that didn\u2019t make it to the list. For instance, Go-projects are now automatically set up correctly even without any configuration. Also there are plenty of enhancements that have been added to the <a href="${"https://github.com/theia-ide/typescript-language-server"}" rel="${"nofollow"}">TypeScript language server</a>. TSLint now works great and we laid out the foundation to add specific editing support for more frameworks and linters such as Vue.js, Angular and ESLint.</p>
<p>In addition to the explicitly mentioned features you can find a full list of fixes and changes in the <a href="${"https://github.com/theia-ide/theia"}" rel="${"nofollow"}">Theia repository</a>.</p>
<h2 id="${"next-release-"}"><strong>Next Release \u{1F506}</strong><a href="${"#next-release-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We are targeting a regular release cycle of one month with smaller continuous updates in-between. For the next release we will focus heavily on improving the startup time as well as the lagging dashboards in the US and the Asian region. Besides that we have some exciting new features up our sleeves as well.</p>
<p>Stay tuned and have fun! <span aria-hidden="${"true"}">\u{1F389}</span></p>
<p>(emoji-mode off)</p>`
  })}`;
});
var october2018Release = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: October_2018_release,
  metadata: metadata$2F,
  prerender: prerender$2T
});
const metadata$2E = {
  author: "JesterOrNot, svenefftinge",
  date: "Thu June 18 2020",
  excerpt: "Until now, you installed VS Code extensions in Gitpod by drag-and-dropping `.vsix` files into your workspace. Today, we're excited to introduce a",
  image: "teaser.jpg",
  slug: "open-vsx-in-gitpod",
  subtitle: "Open VSX is now integrated in Gitpod",
  teaserImage: "teaser.jpg",
  title: "Search & Install Extensions in Your Gitpod Workspace"
};
const prerender$2S = true;
const Open_vsx_in_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2E), {}, {
    default: () => `<p>Until now, you installed VS Code extensions in Gitpod by drag-and-dropping <code>.vsix</code> files into your workspace. Today, we\u2019re excited to introduce a new, simpler way to install extensions: Just search the new open-source, vendor-neutral marketplace <a href="${"https://open-vsx.org"}" rel="${"nofollow"}">Open VSX</a> directly from your workspace, and install extensions in one click.</p>
<h2 id="${"open-vsx-adoption"}">Open VSX Adoption<a href="${"#open-vsx-adoption"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Since <a href="${"/blog/open-vsx"}">we\u2019ve announced</a> the Open VSX marketplace a few weeks ago, adoption has been extremely quick.</p>
<p>To seed the registry, we\u2019ve initially added the most popular open-source extensions ourselves, so that early adopters could immediately find important extensions. We could double down on adding more extensions this way, but it doesn\u2019t seem to be necessary, because today, there are already more than 200 developers publishing their own extensions to Open VSX. \u{1F389}</p>
<p>Adoption from the tool-side is going well, too. We started by supporting Open VSX from within <a href="${"https://theia-ide.org"}" rel="${"nofollow"}">Theia</a>. Just a couple of days ago, <a href="${"https://github.com/VSCodium/vscodium#extensions-and-the-marketplace"}" rel="${"nofollow"}">VSCodium</a>, the true open-source version of VS Code, shipped a new release that connects directly to Open VSX instead of Microsoft\u2019s proprietary marketplace. Today, we\u2019re excited to bring you Open VSX support in <a href="${"https://gitpod.io"}" rel="${"nofollow"}">Gitpod</a> as well.</p>
<h2 id="${"installing-extensions-in-gitpod"}">Installing Extensions in Gitpod<a href="${"#installing-extensions-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As you may already know, Gitpod lets you describe your dev environment as code. This means that you write configuration and code that makes Gitpod automatically generate ready-to-code dev environments for your project.</p>
<p>An important part of such a configuration is the set of IDE extensions you need. In Gitpod you have two choices, you can either</p>
<p><strong>[1] Install an extension for your project\u2019s dev environment, or</strong></p>
<p><strong>[2] Install an extension for your personal user profile</strong></p>
<p>Option [1] installs the extension for everyone starting a workspace on the same project. Programming language-specific extensions or those that support certain frameworks, databases, and so on usually go here.</p>
<p>Some extensions however are a matter of personal taste, such as themes and keybindings. You neither want to install and manage those extensions for every project nor do you want to enforce them on your entire team. That\u2019s when you choose option [2].</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/eD_GQ2lQug8?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 id="${"what-if-i-cant-find-the-extension-im-looking-for"}">What If I Can\u2019t Find the Extension I\u2019m Looking For?<a href="${"#what-if-i-cant-find-the-extension-im-looking-for"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While more and more extensions land in Open VSX on a daily basis, there still might be cases where you are missing a certain extension that exists in the MS marketplace. There are three things you can do:</p>
<ul><li>Ideally, you go to the extension\u2019s repository itself and kindly ask the developer to publish it to Open VSX. Publishing is a one-liner (<code>npx ovsx publish</code>), so it\u2019s really low effort.</li>
<li>Download the extension\u2019s <code>.vsix</code> file (e.g. from the extension\u2019s GitHub Releases) and drag and drop it into the IDE\u2019s Extensions view. That will install and activate it automatically.</li>
<li>Create a PR over at <a href="${"https://github.com/open-vsx/publish-extensions"}" rel="${"nofollow"}">https://github.com/open-vsx/publish-extensions</a> \u2014 that\u2019s where we seed the Open VSX registry by automatically publishing popular open-source extensions.</li></ul>
<p>You can find more information in our <a href="${"/docs/vscode-extensions"}">docs</a>.</p>`
  })}`;
});
var openVsxInGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Open_vsx_in_gitpod,
  metadata: metadata$2E,
  prerender: prerender$2S
});
const metadata$2D = {
  author: "svenefftinge, spoenemann",
  date: "Thu Apr 9 2020 17:00:00 GMT+0000 (UTC)",
  excerpt: "VS Code is used by more than 50% of all developers worldwide. Its extension protocol enabled the broader developer community to create over",
  image: "open.jpg",
  slug: "open-vsx",
  subtitle: "A Free Marketplace for VS Code Extensions",
  teaserImage: "open.jpg",
  title: "Open VSX"
};
const prerender$2R = true;
const Open_vsx = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2D), {}, {
    default: () => `<p>VS Code is used by <a href="${"https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments"}" rel="${"nofollow"}">more than 50% of all developers worldwide</a>. Its extension protocol enabled the broader developer community to create over 16,000 extensions supporting all major programming languages, frameworks, and tools used in modern software projects. While large parts of VS Code are developed as open-source, the actual product (Visual Studio Code) is <a href="${"https://code.visualstudio.com/docs/supporting/FAQ#_what-does-built-on-open-source-mean"}" rel="${"nofollow"}">not open-source</a>.</p>
<p><a href="${"http://theia-ide.org"}" rel="${"nofollow"}">Eclipse Theia</a>, the IDE powering Gitpod, Google Cloud Shell and others, offers a vendor-neutral alternative and is based on parts of the same open-source codebase as VS Code. Theia not only works as an Electron-based desktop app, but also runs in browsers. Furthermore, a highly flexible architecture allows extensive customizations. <a href="${"https://www.arduino.cc/pro/arduino-pro-ide"}" rel="${"nofollow"}">Arduino\u2019s new Pro IDE</a> or <a href="${"https://os.mbed.com/studio/"}" rel="${"nofollow"}">Arm\u2019s Mbed Studio</a> are great examples of Theia\u2019s flexibility. On top of that built-in flexibility, Theia can run VS Code extensions as well.</p>
<p>Another project, <a href="${"https://github.com/VSCodium/vscodium"}" rel="${"nofollow"}">VSCodium</a>, offers a 100% open-source version of VS Code.</p>
<h2 id="${"only-visual-studio-products-may-access-the-marketplace"}">Only Visual Studio Products May Access The Marketplace<a href="${"#only-visual-studio-products-may-access-the-marketplace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While all the projects above support VS Code extensions, only Microsoft products can use and connect to Microsoft\u2019s <a href="${"https://marketplace.visualstudio.com/vscode"}" rel="${"nofollow"}">Extension Marketplace</a>. Its <a href="${"https://aka.ms/vsmarketplace-ToU"}" rel="${"nofollow"}">Terms of Use</a> prevent any non Visual Studio products to access the marketplace.</p>
<p>Gitpod employs a workaround where users can upload .vsix files to install extensions. This causes unnecessary friction as users have to download those files directly from GitHub, just to re-upload them to Gitpod. Downloading from the Microsoft Marketplace for any use other than in Microsoft products is prohibited, too.</p>
<p>Most extensions are developed by the community and published under permissive Open Source Licenses. Having to distribute and access these community-owned extensions in a system with such restrictive terms of services does not seem right. We want to fix this and host an open-source extension registry at the vendor-neutral <a href="${"https://www.eclipse.org/org/foundation/"}" rel="${"nofollow"}">Eclipse Foundation</a>.</p>
<h2 id="${"you-can-host-your-own-registry"}">You Can Host Your Own Registry<a href="${"#you-can-host-your-own-registry"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In addition to providing a publicly hosted, vendor-neutral extension registry, we also make the code available as open-source. This way everyone can install their own registry and use it, e.g. inside a company network. As a result, you are not forced to publish proprietary extensions to a public marketplace, but maintain precise control over their availability. This is very similar to common practice found in other ecosystems such as npm, Cargo or Maven.</p>
<p><img src="${"/images/blog/open-vsx/openvsx-screenshot.png"}" alt="${"Open VSX Registry"}"></p>
<h2 id="${"open-vsx"}">Open VSX<a href="${"#open-vsx"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This new registry is developed and maintained under the <a href="${"https://github.com/eclipse/openvsx"}" rel="${"nofollow"}">Eclipse Open VSX</a> project. It contains the registry server, a web interface and a CLI to make publishing easy.</p>
<p>The publicly hosted instance is available at <a href="${"https://open-vsx.org"}" rel="${"nofollow"}">https://open-vsx.org</a>, and the upcoming Theia version 1.0 will use this installation as default registry.</p>
<p>Open VSX defines its own API, because Microsoft\u2019s VS Code Marketplace API is proprietary and undocumented. An adapter between these two APIs is possible, planned and required to connect VS Code/VSCodium to Open VSX.</p>
<h2 id="${"publishing"}">Publishing<a href="${"#publishing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We would love to see extension developers publish to our registry in addition to Microsoft\u2019s. To that end we developed a CLI that makes publishing a breeze. The basic four steps to publish your extensions are:</p>
<ol><li>Register on open-vsx.org through <a href="${"https://open-vsx.org/oauth2/authorization/github"}" rel="${"nofollow"}">GitHub OAuth</a></li>
<li><a href="${"https://open-vsx.org/user-settings/tokens"}" rel="${"nofollow"}">Create an access token</a> and copy it</li>
<li>Run <code>npx ovsx create-namespace &lt;publisher&gt; -p &lt;token&gt;</code> with the publisher name specified in the extension\u2019s package.json</li>
<li>Run <code>npx ovsx publish -p &lt;token&gt;</code> in the directory of the extension you want to publish</li></ol>
<p>Visit the <a href="${"https://github.com/eclipse/openvsx/wiki/Publishing-Extensions"}" rel="${"nofollow"}">Open VSX Wiki</a> for a more in-depth explanation of the publishing process.</p>
<h2 id="${"seeding-the-registry"}">Seeding the Registry<a href="${"#seeding-the-registry"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Until extension developers start publishing to open-vsx.org themselves, we will publish open-source extensions through a script that is maintained in a <a href="${"https://github.com/open-vsx/publish-extensions"}" rel="${"nofollow"}">GitHub repository</a>. A continuous integration build regularly runs through the list of changes and automatically deploys all the listed projects. If you are missing a certain extension, you can do the following:</p>
<ol><li>Ask the original maintainer to publish to open-vsx.org, pointing them to this post for context.</li>
<li>If the maintainer does not respond, create a PR to <a href="${"https://github.com/open-vsx/publish-extensions"}" rel="${"nofollow"}">https://github.com/open-vsx/publish-extensions</a></li></ol>
<h2 id="${"final-words"}">Final Words<a href="${"#final-words"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The VS Code team is doing a great job building a developer experience that is loved and used by more and more developers. The large ecosystem of extensions is unique and provides state-of-the-art tool support for all modern programming languages, frameworks and tools.</p>
<p>We believe that the assets released as open source should remain readily available to everyone. A vendor-neutral, community-driven marketplace for VS Code extensions is an important first step to make this happen.</p>`
  })}`;
});
var openVsx = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Open_vsx,
  metadata: metadata$2D,
  prerender: prerender$2R
});
var opensource_md = ".button.svelte-af3w9m{background-color:#0087be;border:none;border-radius:100px;color:#fff;padding:12px 20px;text-align:center;text-decoration:none;display:inline-block;font-size:14px;margin:25px 1px;cursor:pointer;opacity:1}.button.svelte-af3w9m:hover{opacity:.85}.wrapper.svelte-af3w9m{text-align:center}";
const css$$ = {
  code: ".button.svelte-af3w9m{background-color:#0087be;border:none;border-radius:100px;color:#fff;padding:12px 20px;text-align:center;text-decoration:none;display:inline-block;font-size:14px;margin:25px 1px;cursor:pointer;opacity:1}.button.svelte-af3w9m:hover{opacity:.85}.wrapper.svelte-af3w9m{text-align:center}",
  map: `{"version":3,"file":"opensource.md","sources":["opensource.md"],"sourcesContent":["<script context=\\"module\\">\\n\\texport const metadata = {\\"author\\":\\"svenefftinge, JohannesLandgraf\\",\\"date\\":\\"Tue, 25 Aug 2020 13:00:00 UTC\\",\\"excerpt\\":\\"As of today Gitpod is open source under the AGPL license at github.com/gitpod-io/gitpod. This allows the community to participate in the\\",\\"image\\":\\"teaser.jpg\\",\\"slug\\":\\"opensource\\",\\"subtitle\\":null,\\"teaserImage\\":\\"teaser.jpg\\",\\"title\\":\\"Gitpod is now Open Source \u{1F389}\\"};\\n\\tconst { author, date, excerpt, image, slug, subtitle, teaserImage, title } = metadata;\\n  export const prerender = true;\\n</script>\\n\\n<script>\\n\\timport Layout_MDSVEX_DEFAULT from '/workspace/website/src/components/blog/blog-content-layout.svelte';\\n</script>\\n\\n<style>.button{background-color:#0087be;border:none;border-radius:100px;color:#fff;padding:12px 20px;text-align:center;text-decoration:none;display:inline-block;font-size:14px;margin:25px 1px;cursor:pointer;opacity:1}.button:hover{opacity:.85}.wrapper{text-align:center}</style>\\n<Layout_MDSVEX_DEFAULT {...metadata}>\\n\\n<p>As of today Gitpod is open source under the AGPL license at <a\\n  href=\\"https://github.com/gitpod-io/gitpod\\"\\n  rel=\\"nofollow\\"\\n>github.com/gitpod-io/gitpod</a>. This allows the community to participate in the development of Gitpod, provides more transparency and makes it even easier for developers to use and integrate Gitpod in their workflows.</p>\\n<p>For those of you who know us, this probably does not come as a big surprise. Working in open source is in our DNA and everything we\u2019ve created over the past 10 years, including <a\\n  href=\\"https://github.com/eclipse-theia/theia\\"\\n  rel=\\"nofollow\\"\\n>Theia</a>, <a href=\\"https://github.com/eclipse/xtext\\" rel=\\"nofollow\\">Xtext</a>, <a href=\\"https://github.com/eclipse/openvsx\\" rel=\\"nofollow\\">Open VSX</a> and many other projects have been open source. In fact, Gitpod was our only closed-source project and it is a relief to change that going forward.</p>\\n<h2 class=\\"h1\\">Open-Source Contributions</h2>\\n<p>Contributing to Gitpod should be easy and accessible for everyone. All contributions are welcome, including pull requests, issues, documentation as well as updates and tweaks, blog posts, tutoials, and more. Please head over to <a\\n  href=\\"https://github.com/gitpod-io/gitpod\\"\\n  rel=\\"nofollow\\"\\n>Github</a> to find out about the various ways you can contribute and join our <a\\n  href=\\"https://community.gitpod.io/\\"\\n  rel=\\"nofollow\\"\\n>Gitpod Community</a>.</p>\\n<p>Over the past year, Gitpod has simplified contributions to many open source projects (see <a\\n  href=\\"https://contribute.dev/\\"\\n  rel=\\"nofollow\\"\\n>contribute.dev</a> for examples). Today, everyone in our team is excited to share our own streamlined development pipeline including Kubernetes preview deployments, an aggressively cached build system, our own slim and fast CI system and of course Gitpod, which continuously beams us into ready-to-code (and debug) dev environments. <a\\n  href=\\"https://github.com/csweichel\\"\\n  rel=\\"nofollow\\"\\n>Chris</a> gave a great talk about this setup earlier this year \u{1F447}</p>\\n<p>\\n<span class=\\"video-container\\"><iframe\\n  title=\\"Youtube Video\\"\\n  width=\\"800\\"\\n  height=\\"400\\"\\n  src=\\"https://www.youtube.com/embed/dFMpXUsJcGM?rel=0\\"\\n  class=\\"embedVideo-iframe\\"\\n  style=\\"border:0\\"\\n  allowfullscreen\\n  sandbox=\\"allow-same-origin allow-scripts allow-popups\\">\\n</iframe></span></p>\\n<p>Naturally, we develop Gitpod in Gitpod. This allows the whole team to spin up fully initialized, remote dev environments on any branch at any time.</p>\\n<p>In line with the <a\\n  href=\\"http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/?utm_source=thenewstack&utm_medium=website&utm_campaign=platform\\"\\n  rel=\\"nofollow\\"\\n>pets vs. cattle</a> analogy of the cloud-native world, we treat dev environments as automated (yet customizable) resources you can spin up when you need them and close down (and forget about) when you are done with your task. Once you experience the peace of mind of automated, ephemeral dev environments you never want to go back.</p>\\n<p>Sven will run a webinar next week on Thursday, where we will showcase how we use Gitpod internally at Gitpod and how much it improves our workflow. Hope to see you there!</p>\\n<div class=\\"wrapper\\">\\n    <a href= \\"https://us02web.zoom.us/webinar/register/5415977565541/WN_amoa6lnEQniLykXUYCDyBQ\\" target=\\"_blank\\">\\n        <button class=\\"button\\">How Gitpod uses Gitpod</button>\\n    </a>\\n</div>\\n<h2 class=\\"h1\\">Gitpod Self-Hosted is Now Free</h2>\\n<p>The <a\\n  href=\\"https://www.gitpod.io/pricing\\"\\n  rel=\\"nofollow\\"\\n>SaaS offering of gitpod.io</a> remains the easiest way to streamline your development workflows with continuously prebuilt dev environments.</p>\\n<p>In case you want to host Gitpod on your own infrastructure or private cloud, starting today, Gitpod Self-Hosted is free for unlimited users. Organizations using Gitpod Self-Hosted can purchase an enterprise license in order to get additional features like:</p>\\n<ul>\\n<li><a href=\\"https://www.gitpod.io/features/#snapshot\\" rel=\\"nofollow\\">Snapshots</a> (share a reproducible workspace with your team)</li>\\n<li><a href=\\"https://www.gitpod.io/features/#share\\" rel=\\"nofollow\\">Live Share</a> (invite others into your running workspace)</li>\\n<li><a\\n  href=\\"https://www.gitpod.io/features/#prebuilt\\"\\n  rel=\\"nofollow\\"\\n>Unlimited Prebuilds</a> (making ephemeral dev environments possible)</li>\\n<li>Admin Dashboard</li>\\n</ul>\\n<p>Offering a paid plan for enterprises makes it possible for us to keep working towards building a new category in developer tooling, which completes modern DevOps pipelines. In the future we will add additional functionality to both the open source code as well our paid offering.</p>\\n<div class=\\"wrapper\\">\\n    <a href= \\"https://www.gitpod.io/self-hosted\\" target=\\"_blank\\">\\n        <button class=\\"button\\">Start for free</button>\\n    </a>\\n</div>\\n</Layout_MDSVEX_DEFAULT>"],"names":[],"mappings":"AAUO,qBAAO,CAAC,iBAAiB,OAAO,CAAC,OAAO,IAAI,CAAC,cAAc,KAAK,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,MAAM,CAAC,gBAAgB,IAAI,CAAC,QAAQ,YAAY,CAAC,UAAU,IAAI,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,qBAAO,MAAM,CAAC,QAAQ,GAAG,CAAC,sBAAQ,CAAC,WAAW,MAAM,CAAC"}`
};
const metadata$2C = {
  author: "svenefftinge, JohannesLandgraf",
  date: "Tue, 25 Aug 2020 13:00:00 UTC",
  excerpt: "As of today Gitpod is open source under the AGPL license at github.com/gitpod-io/gitpod. This allows the community to participate in the",
  image: "teaser.jpg",
  slug: "opensource",
  subtitle: null,
  teaserImage: "teaser.jpg",
  title: "Gitpod is now Open Source \u{1F389}"
};
const prerender$2Q = true;
const Opensource = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$$);
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2C), {}, {
    default: () => `<p>As of today Gitpod is open source under the AGPL license at <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">github.com/gitpod-io/gitpod</a>. This allows the community to participate in the development of Gitpod, provides more transparency and makes it even easier for developers to use and integrate Gitpod in their workflows.</p>
<p>For those of you who know us, this probably does not come as a big surprise. Working in open source is in our DNA and everything we\u2019ve created over the past 10 years, including <a href="${"https://github.com/eclipse-theia/theia"}" rel="${"nofollow"}">Theia</a>, <a href="${"https://github.com/eclipse/xtext"}" rel="${"nofollow"}">Xtext</a>, <a href="${"https://github.com/eclipse/openvsx"}" rel="${"nofollow"}">Open VSX</a> and many other projects have been open source. In fact, Gitpod was our only closed-source project and it is a relief to change that going forward.</p>
<h2 class="${"h1"}">Open-Source Contributions</h2>
<p>Contributing to Gitpod should be easy and accessible for everyone. All contributions are welcome, including pull requests, issues, documentation as well as updates and tweaks, blog posts, tutoials, and more. Please head over to <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">Github</a> to find out about the various ways you can contribute and join our <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">Gitpod Community</a>.</p>
<p>Over the past year, Gitpod has simplified contributions to many open source projects (see <a href="${"https://contribute.dev/"}" rel="${"nofollow"}">contribute.dev</a> for examples). Today, everyone in our team is excited to share our own streamlined development pipeline including Kubernetes preview deployments, an aggressively cached build system, our own slim and fast CI system and of course Gitpod, which continuously beams us into ready-to-code (and debug) dev environments. <a href="${"https://github.com/csweichel"}" rel="${"nofollow"}">Chris</a> gave a great talk about this setup earlier this year \u{1F447}</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/dFMpXUsJcGM?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<p>Naturally, we develop Gitpod in Gitpod. This allows the whole team to spin up fully initialized, remote dev environments on any branch at any time.</p>
<p>In line with the <a href="${"http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/?utm_source=thenewstack&utm_medium=website&utm_campaign=platform"}" rel="${"nofollow"}">pets vs. cattle</a> analogy of the cloud-native world, we treat dev environments as automated (yet customizable) resources you can spin up when you need them and close down (and forget about) when you are done with your task. Once you experience the peace of mind of automated, ephemeral dev environments you never want to go back.</p>
<p>Sven will run a webinar next week on Thursday, where we will showcase how we use Gitpod internally at Gitpod and how much it improves our workflow. Hope to see you there!</p>
<div class="${"wrapper svelte-af3w9m"}"><a href="${"https://us02web.zoom.us/webinar/register/5415977565541/WN_amoa6lnEQniLykXUYCDyBQ"}" target="${"_blank"}"><button class="${"button svelte-af3w9m"}">How Gitpod uses Gitpod</button></a></div>
<h2 class="${"h1"}">Gitpod Self-Hosted is Now Free</h2>
<p>The <a href="${"https://www.gitpod.io/pricing"}" rel="${"nofollow"}">SaaS offering of gitpod.io</a> remains the easiest way to streamline your development workflows with continuously prebuilt dev environments.</p>
<p>In case you want to host Gitpod on your own infrastructure or private cloud, starting today, Gitpod Self-Hosted is free for unlimited users. Organizations using Gitpod Self-Hosted can purchase an enterprise license in order to get additional features like:</p>
<ul><li><a href="${"https://www.gitpod.io/features/#snapshot"}" rel="${"nofollow"}">Snapshots</a> (share a reproducible workspace with your team)</li>
<li><a href="${"https://www.gitpod.io/features/#share"}" rel="${"nofollow"}">Live Share</a> (invite others into your running workspace)</li>
<li><a href="${"https://www.gitpod.io/features/#prebuilt"}" rel="${"nofollow"}">Unlimited Prebuilds</a> (making ephemeral dev environments possible)</li>
<li>Admin Dashboard</li></ul>
<p>Offering a paid plan for enterprises makes it possible for us to keep working towards building a new category in developer tooling, which completes modern DevOps pipelines. In the future we will add additional functionality to both the open source code as well our paid offering.</p>
<div class="${"wrapper svelte-af3w9m"}"><a href="${"https://www.gitpod.io/self-hosted"}" target="${"_blank"}"><button class="${"button svelte-af3w9m"}">Start for free</button></a></div>`
  })}`;
});
var opensource = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Opensource,
  metadata: metadata$2C,
  prerender: prerender$2Q
});
const metadata$2B = {
  author: "csweichel",
  date: "Mon Mar 18 2019 16:16:17 GMT+0000 (UTC)",
  excerpt: "Once your development environment is freed from manual setup procedures it can do work even while you are not. We call this continuous",
  image: "compiling-xkcd.png",
  slug: "prebuilds",
  subtitle: "Prebuild your workspaces",
  title: "Waiting for code to build is like watching paint dry",
  url: "https://medium.com/@csweichel/a1c6b25fd601"
};
const prerender$2P = true;
const Prebuilds$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2B), {}, {
    default: () => `<p>Once your development environment is freed from manual setup procedures it can do work even while you are not. We call this continuous development.</p>
<p>A while ago Sven described the idea of <a href="${"/blog/dev-env-as-code"}">development environment as code</a>. His main point: instead of using outdated README files that describe how to set up our development environment we should have executable, replicable and version-controlled descriptions thereof. In such a dev-environment as code world, on-boarding new team members/contributors is dead easy, going back to an old branch becomes a breeze (that old setup you had a year ago is now easy to restore) and playing with a new project becomes a joy. All those situations are very much <em>direct use</em> scenarios; you set up a dev-environment using code which you as a developer use straight away.</p>
<p>However, a machine-reproducible version of your development setup enables another powerful capability: your dev-environment can already checkout the latest code, download dependencies and build everything. Once you actually open your IDE, everything\u2019s ready for you. No more siting there and watching <del>paint dry</del> yarn download the internet.</p>
<p><img src="${"/images/blog/prebuilds/compiling-xkcd.png"}" alt="${"The number 1 programmer excuse for legitimately slacking off: 'My Code is compiling.' - https://xkcd.com/303/"}"></p>
<h2 id="${"paint-dries-even-when-youre-not-watching"}">Paint dries even when you\u2019re not watching<a href="${"#paint-dries-even-when-youre-not-watching"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Turns out we don\u2019t actually have to be present for those things to happen. What if we had a system that would use our dev-environment description, check out the repo, build everything and then make it available to us?</p>
<p>Sounds an awful lot like continuous integration (CI). Except there\u2019s a subtle difference: CI checks if everything still fits together, i.e. does the code still build and do the tests still pass? The result of continuous integration is a test report and a bunch of built binaries/Docker images/update sites/APK files/you get the point. A CI build does not give you a ready-to-code workspace. But it tells you that the next time you want to build your software things will likely be fine.</p>
<blockquote><p>Continuous Development means that your code is built before you even open it. Once you open an IDE on your project, everything is ready to go.</p></blockquote>
<p>The result of <em>continuous development</em> is a ready-to-code workspace. The second you open your IDE you can start working because all dependencies have been downloaded, indices updated, code generated and compiled, <del>and coffee has been brewed</del>. Your dev environment has done all the things you\u2019d otherwise do manually, except you didn\u2019t have to trigger them or watch them finish.</p>
<h2 id="${"how-could-we-build-this"}">How could we build this?<a href="${"#how-could-we-build-this"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"/images/blog/prebuilds/colored-hands.jpg"}" alt="${"Hands with paint on them."}"><em>Photo by <a href="${"https://unsplash.com/photos/IhXrWDckZOQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"}" rel="${"nofollow"}">Amaury Salas</a> on <a href="${"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"}" rel="${"nofollow"}">Unsplash</a></em></p>
<p>To build a continuous development system we need three things:</p>
<ol><li><p>A dev-environment-as-code, e.g. based on Docker \u2014 there are <a href="${"/blog/dev-env-as-code#dev-environment-as-code/"}">various ways</a> of how this can be achieved.</p></li>
<li><p>Means to trigger an action when our code changes. The obvious candidates are <a href="${"https://developer.github.com/webhooks/"}" rel="${"nofollow"}">webhooks</a>, <a href="${"https://github.com/features/actions"}" rel="${"nofollow"}">GitHub actions</a>, or something tied in to your CI system.</p></li>
<li><p>The integration bit that upon changes to your code builds the dev-environment, checks out your code, builds it and then serves the resulting ready-to-code environment.</p></li></ol>
<p>Let\u2019s sketch out a possible implementation of a such a system. Our dev-environment-as-code is basically a Docker image that contains the tools we need + <a href="${"https://www.theia-ide.org/"}" rel="${"nofollow"}">Eclipse Theia</a> as IDE). Suppose we\u2019d have this dev-env built as ourprj/dev-env:latest .</p>
<pre class="${"language-null"}">${`<code class="language-null">FROM theiaide/theia:next

USER root
RUN apk add go &amp;&amp;     npm install --global yarn
USER theia</code>`}</pre>
<p>Using for example Jenkins or GitHub Actions we can then build a ready-to-code environment using a Dockerfile such as:</p>
<pre class="${"language-null"}">${`<code class="language-null">FROM ourprj/dev-env:latest

WORKDIR /home/project
COPY /workspace/ourprj .

RUN yarn install &amp;&amp;     yarn build</code>`}</pre>
<p>Once we\u2019re ready to start working on a new feature, or want to review a PR, we just find the previously built Docker image and have everything ready to go. No faffing with git clone, waiting for the code to build or anything of the sorts. We have reduced many minutes of our time to a simple docker run.</p>
<p>A similar way of implementing this is the way <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> does it (full disclosure: I am one of the folks working on this project). Gitpod comes with a GitHub app that triggers <em>workspace prebuilds</em> which in essence take your dev-environment as code (Dockerfile), execute a set of commands in there and associate the results with the particular commit that triggered it all. When you open a workspace on that commit, you\u2019ll get the results of the prebuild instead of waiting for everything to complete.</p>
<h2 id="${"is-this-new"}">Is this new?<a href="${"#is-this-new"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Probably not. The idea has been around in one form or the other. But now, with the advent of machine reproducible dev-environments, Docker &amp; Theia we can finally build this for the real world. I did not find statistics how much time people spend waiting for their stuff to build on any given day. But I know waiting for something that you didn\u2019t have to wait for is not a good way to spend your time. If anything continuous development helps us developers create more and wait less.</p>`
  })}`;
});
var prebuilds$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Prebuilds$1,
  metadata: metadata$2B,
  prerender: prerender$2P
});
const metadata$2A = {
  author: "svenefftinge",
  date: "Thu Dec 07 2020 11:49:24 GMT+0000 (UTC)",
  excerpt: "The team has been focussing on shipping some major new features, which mark important milestones on our goal to eliminate all friction.",
  image: "teaser.jpg",
  slug: "root-docker-and-vscode",
  subtitle: "New Release",
  teaserImage: "teaser.jpg",
  title: "Root, Docker and VS Code"
};
const prerender$2O = true;
const Root_docker_and_vscode = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2A), {}, {
    default: () => `<p>The team has been focussing on shipping some major new features, which mark important milestones on our goal to <strong>eliminate all friction around maintaining dev environments</strong>.</p>
<ul><li><a href="${"#root-access"}">Root Access</a></li>
<li><a href="${"#docker"}">Docker Support</a></li>
<li><a href="${"#vs-code-and-other-ides"}">VS Code and other IDEs</a></li>
<li><a href="${"#connect-to-self-managed-gitlab"}">Connect to self-managed GitLab</a></li></ul>
<h2 id="${"root-access-"}">Root Access \u{1F4AA}<a href="${"#root-access-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod workspaces run as containers which make them incredibly fast and efficient. Compared to VMs, isolating workspace containers from each other is not easy. Due to this difficult isolation, Gitpod operated a fairly restricted set of privileges within its workspaces. This meant you couldn\u2019t install additional tools using your favourite package manager (think <code>sudo apt-get install ...</code>) or run <code>docker</code> resp. <code>docker-compose</code>. Clearly, this has made some things more difficult than they should be.</p>
<p>After investigating different options such as <a href="${"https://github.com/google/gvisor"}" rel="${"nofollow"}">gVisor</a> or <a href="${"https://katacontainers.io/"}" rel="${"nofollow"}">virtual machines</a>, we\u2019ve settled on a solution that isolates through user namespaces. Chris, our Chief Architect and author of the isolation mechanics, has explained how it works in detail in <a href="${"https://youtu.be/l4I2TVAnBuw?t=176"}" rel="${"nofollow"}">this webinar</a>. Long story short, you can now run commands using <code>sudo</code>. So for instance, you can test-install additional packages using <code>apt-get</code>, before adding those commands to your workspace\u2019s Dockerfile (where setup commands should still go eventually).</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/5JUfzet1NNg?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 id="${"docker-"}">Docker \u{1F433}<a href="${"#docker-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With the new privileges you can now also run and build Docker images to start containers within your workspace. Gitpod\u2019s default image (<a href="${"https://github.com/gitpod-io/workspace-images/blob/master/full/Dockerfile"}" rel="${"nofollow"}">workspace-full</a>) comes equipped with Docker now, so all you need to do is run <code>sudo docker-up</code> and wait until the service is listening. Now start another terminal and use the Docker CLI as usual. Here is a short screencast showing how to start a simple hello world example.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/tW9zBHH37Cc?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<blockquote><p>Warning: This is in feature preview for a reason, and there are a few things we still have to sort out. For instance, within Docker containers process ids are not properly mapped which might cause some weird errors. Please provide feedback in the <a href="${"https://community.gitpod.io"}" rel="${"nofollow"}">community</a> or the <a href="${"https://www.github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">issue tracker</a>.</p></blockquote>
<h2 id="${"vs-code-and-other-ides-\u{1F942}"}">VS Code and Other IDEs \u{1F942}<a href="${"#vs-code-and-other-ides-%F0%9F%A5%82"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>At Gitpod we want to help automate your dev environments, so that you are always ready-to-code. We believe you should not have to compromise in terms of what tools you use. Instead we make sure you get all your favourite tools readily configured and initialised for any project and task. Until today you had no choice but to use Theia, which is a great vendor-neutral IDE that leverages a lot of VS Code\u2019s tech and provides a very similar UX. Still there are some differences in behaviour and compatibility so many users asked for supporting VS Code (and other IDEs as well).</p>
<p>Since today you can switch between VS Code and Theia in your settings. You can even bring your own web IDE though a docker image. This enables Gitpod to run other IDEs such as all the Jetbrains IDEs (using <a href="${"https://github.com/JetBrains/projector-server/blob/master/docs/Projector.md"}" rel="${"nofollow"}">projector</a>), Jupyter Notebook, or Jupyter Lab. This feature is however currently still in a private beta, so you need to reach out in order to get access to that.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/5hArIRPZuBI?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<blockquote><p>Warning: This is an early preview of the functionality and we haven\u2019t fully implemented all necessary features, yet. For instance, user settings are not persisted among sessions. Also while you can install extensions, they are also not persisted and extension settings from <code>.gitpod.yml</code> are currently ignored. We\u2019ll follow up with these capabilities ASAP.</p></blockquote>
<blockquote><p>Please provide feedback in the <a href="${"https://community.gitpod.io"}" rel="${"nofollow"}">community</a> or the <a href="${"https://www.github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">issue tracker</a></p></blockquote>
<p>We are also shipping an SSH mode in Q1/21, that will let you connect to Gitpod using your favorite desktop IDE\u2019s remote mode.</p>
<h2 id="${"connect-to-self-managed-gitlab-\uFE0F"}">Connect to Self-managed GitLab \u2764\uFE0F<a href="${"#connect-to-self-managed-gitlab-%EF%B8%8F"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can now <a href="${"/docs/gitlab-integration#oauth-application"}">connect your self-hosted GitLab application with gitpod.io</a>. This way you don\u2019t have to host and operate your own Gitpod installation, just to make it work with your GitLab installation. To make this connection, go to the settings and scroll down to the \u201CGit Provider Integrations\u201D section. Add your instance and follow the instructions.</p>
<p>After completing this process, your entire team can open dev environments by prefixing the projects and merge requests URLs on the self-managed instance with <code>gitpod.io#</code> or simply use the Gitpod button provided by GitLab (make sure it is enabled).</p>
<p><img src="${"/images/blog/root-docker-and-vscode/teaser-gitlab-gitpod.jpg"}" alt="${"Gitpod loves GitLab"}"></p>
<h2 id="${"next-steps-"}">Next Steps \u23E9<a href="${"#next-steps-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>There will be a Gitpod Self-Hosted release before Christmas that includes the features listed here as well as many additional enhancements and bugfixes for installing and running Gitpod on different infrastructures.</p>
<p>In the near future, we will complete the features in preview, work on some important updates around prebuilds, support SSH access to workspaces, and are kicking off a redesign of the dashboard. The future is bright \u{1F305}.</p>`
  })}`;
});
var rootDockerAndVscode = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Root_docker_and_vscode,
  metadata: metadata$2A,
  prerender: prerender$2O
});
const metadata$2z = {
  author: "meysholdt",
  date: "Thu Dec 19 2019 11:49:24 GMT+0000 (UTC)",
  excerpt: "Eighteen months ago we launched the public beta of Gitpod. That date marked the beginning of an amazing journey with plenty of feedback",
  image: "globe.png",
  slug: "self-host-your-gitpod",
  subtitle: "Gitpod on Your Infrastructure",
  teaserImage: "globe.png",
  title: "Self-Host Your Gitpod"
};
const prerender$2N = true;
const Self_host_your_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2z), {}, {
    default: () => `<p>Eighteen months ago we launched the public beta of Gitpod.
That date marked the beginning of an amazing journey with plenty of feedback, fixes and improvements.
It is exciting to see how far we have come and where that simple idea of instant, ready-to-code workspaces has taken us.</p>
<p>None of this would have been possible if it weren\u2019t for the troves of developers, hackers, coders and other purveyors of Open-Source who provide ample feedback and use Gitpod as their IDE of choice.
If the technical side of Gitpod is fun, the user side of Gitpod is truly amazing.</p>
<p>We are blown away every day because of the quantity and quality of what you guys do with Gitpod.</p>
<h2 id="${"a-public-service-is-not-enough"}">A Public Service is Not Enough<a href="${"#a-public-service-is-not-enough"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>However, until now Gitpod has not truly been available for everyone.
There are many situations, especially in the enterprise, where working on your source code on a third-party cloud service is out of question.
Maybe the codebase you work on lives on a GitLab or GitHub Enterprise instance in your company\u2019s network, guarded by a firewall.
Maybe working on the code requires access to services that are available only inside your company network, such as databases, npm/Docker/Maven registires or a Kubernetes cluster.</p>
<p>Well, why not have Gitpod where you need it?</p>
<h2 id="${"introducing-gitpod-self-hosted"}">Introducing: Gitpod Self-Hosted<a href="${"#introducing-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Today we announce the availability of Gitpod Self-Hosted.
Much like eighteen months ago, this marks the starting point of a new section of our journey.</p>
<p>To create Gitpod Self-Hosted, we took our codebase from gitpod.io and made it dramatially easier to configure, install and run.
As a result, you\u2019ll find all the features you know from gitpod.io in Gitpod Self-Hosted.</p>
<p>Gitpod Self-Hosted runs on Kubernetes and integrates via OAuth with GitHub Enterprise, GitLab CE and GitLab EE.
This way no additional user management is required and users get easy access to Git repositories based on the permissions already present in GitLab/GitHub.</p>
<p>We operate gitpod.io on GCP, hence running Gitpod Self-Hosted on Google Cloud Platform (GCP) is a battle-tested solution.
We consider running Gitpod Self-Hosted on vanilla Kubernetes in beta.</p>
<h2 id="${"easy-installation"}">Easy Installation<a href="${"#easy-installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Installing Gitpod Self-Hosted on your own infrastructure works much like any other piece of kit running on Kubernetes.</p>
<ol><li><p>Clone the example configuration repo: <code>git clone https://github.com/gitpod-io/self-hosted</code></p></li>
<li><p>Adjust the configuration from the repository to your needs (with <a href="${"/docs/self-hosted/latest/self-hosted"}">ample documentation available</a> to guide you).</p></li>
<li><p>Install using <a href="${"https://helm.sh/"}" rel="${"nofollow"}">helm</a>: <code>helm install ... gitpod</code></p></li></ol>
<p>The <a href="${"/docs/self-hosted/latest/install/install-on-kubernetes"}">vanilla Kubernetes setup</a> will work most Kubernetes clusters.
For Google Cloud Platform we provide an <a href="${"/docs/self-hosted/latest/install/install-on-gcp-script"}">automated installation script</a>.</p>
<h2 id="${"pricing"}">Pricing<a href="${"#pricing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod Self-Hosted is free for up to three users. If you\u2019re a small shop that will get you up and running.
If you need more, there is a <a href="${"https://gitpod.io/selfhosted-trial"}" rel="${"nofollow"}">free one-month unlimited license</a> available.
In case you need support running your PoC in-house please <a href="${"mailto:contact@gitpod.io"}">reach out</a> and we\u2019ll be happy to help.
Our remodeled <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">community</a> will also fill with helpful tips and tricks regarding Gitpod Self-Hosted.</p>
<p>We are absolutely thrilled to see Gitpod and its community growing.
Self-Hosted will enable even more developers to focus more on coding and less on setting up their machine or waiting for builds to finish.</p>`
  })}`;
});
var selfHostYourGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_host_your_gitpod,
  metadata: metadata$2z,
  prerender: prerender$2N
});
const metadata$2y = {
  author: "csweichel",
  date: "Tue Jan 29 2019 10:32:22 GMT+0000 (UTC)",
  excerpt: "A core value at Gitpod is transparency: a lot of what we do is out in the open, because we believe that that\u2019s the best way to earn the",
  image: "teaser-status-page.png",
  slug: "status-page",
  subtitle: "Status Update",
  title: "Gitpod \u2764\uFE0F Statusfy",
  url: "https://medium.com/gitpod/status-update-gitpod-%EF%B8%8F-statusfy-ed8266d63a20"
};
const prerender$2M = true;
const Status_page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2y), {}, {
    default: () => `<p>A core value at Gitpod is transparency: a lot of what we do is out in the open, because we believe that that\u2019s the best way to earn the trust of our users. Until recently there was one point where we had some catching up to do in that regard: having a status page.</p>
<p>We had three main requirements for our status page:</p>
<ul><li><p>It had to be <strong>rock solid</strong> because if your status page is not available, how am I going to trust your product?</p></li>
<li><p>It should <strong>present the status of our service, nothing else</strong>. We already have an extensive monitoring setup (based on Prometheus/Grafana/InfluxDB) that watches over our infrastructure. No need to introduce yet another monitoring solution. A surprising amount of status page projects also do monitoring/health checks on the side.</p></li>
<li><p>It had to <strong>integrate into our existing infrastructure</strong>. If we could use Git, our existing cloud infrastructure and Gitpod to update/manage our incident reports, all the better. We already have this infrastructure in place, so if we could avoid setting up a brand new website deployment, that is a plus.</p></li></ul>
<p>Our <a href="${"https://github.com/gitpod-io/gitpod-docs"}" rel="${"nofollow"}">documentation</a> and website are statically generated from Markdown which we edit using Gitpod, push to GitHub and build/deploy using Jenkins. This pattern works well for us, it would be nice if we could use the same process for our status page.</p>
<h2 id="${"hello-statusfy"}">Hello Statusfy<a href="${"#hello-statusfy"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Enter <a href="${"https://statusfy.co/"}" rel="${"nofollow"}">Statusfy</a>, an Open Source status page system that can render the status page statically or dynamically from Markdown files. It supports a wide range of deployment options, including pushing the statically generated files to a <a href="${"https://cloud.google.com/storage/docs/key-terms#buckets"}" rel="${"nofollow"}">GCP bucket</a>.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/7088/1*8yRrsPnasOhAbZ9CbsTTIg.png"}" alt="${"gitpod-status repository in Gitpod"}"></p>
<p>Turns out that Gitpod and Statusfy are perfectly complementary. Say we just found an issue and want to update the status page, the steps are as simple as:</p>
<ol><li><p>Open the <a href="${"https://github.com/gitpod-io/gitpod-status"}" rel="${"nofollow"}">gitpod-status</a> repository in Gitpod</p></li>
<li><p>Create a new incident using yarn new-incident</p></li>
<li><p>Preview the incident to make sure everything looks alright</p></li>
<li><p>git commit &amp;&amp; git push which has Jenkins pick up the changes, re-generate the status page and push it to the Google Bucket.</p></li></ol>
<p>This setup ticks all boxes: it\u2019s rather solid (GCP buckets have a decent track record), deals with incidents and incidents only, and fits well in our existing infrastructure.</p>
<h2 id="${"getting-started"}">Getting started<a href="${"#getting-started"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>It took us only a couple of hours to build our status page using Statusfy. In part that\u2019s because we had a few things in place already, but mainly because Gitpod and Statusfy make for a great team.</p>
<p>If you want to replicate this setup at home, create a repo on GitHub, open Gitpod on that repo and run npx statusfy init. The next steps and deployment options are described in Statusfy\u2019s excellent <a href="${"https://docs.statusfy.co/guide/getting-started.html#installation"}" rel="${"nofollow"}">Getting Started guide</a>.</p>`
  })}`;
});
var statusPage = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Status_page,
  metadata: metadata$2y,
  prerender: prerender$2M
});
const metadata$2x = {
  author: "svenefftinge",
  date: "Thu Dec 23 2019 11:49:24 GMT+0000 (UTC)",
  excerpt: "Ho ho ho! Christmas came early! We\u2019ve just released a bunch of exciting new features and I'm not talking about Gitpod Enterprise which was",
  image: "winter.jpeg",
  slug: "update-december-2019",
  subtitle: "A Last, Big Update in 2019",
  teaserImage: "winter.jpeg",
  title: "Christmas Release \u{1F384}"
};
const prerender$2L = true;
const Update_december_2019 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2x), {}, {
    default: () => `<p>Ho ho ho! Christmas came early!
We\u2019ve just released a bunch of exciting new features and I\u2019m not talking about Gitpod Enterprise which was announced last week or the <a href="${"/blog/gitlab-support"}">GitLab support</a> we\u2019ve shipped the week before.</p>
<ul><li><span aria-hidden="${"true"}">\u{1F513}</span>[Try with Your Private Repositories For Free](#private-project-trial)</li>
<li><span aria-hidden="${"true"}">\u{1F6E0}</span>[Get Your Projects Setup with an Assistant](#setup-assistant)</li>
<li><span aria-hidden="${"true"}">\u{1F917}</span>[New, Cheaper Plans with More Features](#new-plans)</li>
<li><span aria-hidden="${"true"}">\u{1F313}</span>[Light and Dark Theme](#light-theme)</li>
<li><span aria-hidden="${"true"}">\u267B</span>[Automatic Garbage Collection](#garbage-collection)</li>
<li><span aria-hidden="${"true"}">\u{1F4AC}</span>[New Community Forum](#new-community-home)</li></ul>
<h2 id="${"-private-project-trial"}">\u{1F513} Private Project Trial<a href="${"#-private-project-trial"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Users can now try Gitpod on their private GitHub and GitLab projects for one month for free without providing payment information or automatic subscription start afterward.</p>
<p>To get started, simply prefix your private repository\u2019s GitHub or GitLab URL with <strong>gitpod.io/#</strong> and go through the OAuth flow. To fully get the hang of Gitpod, you need to configure your project accordingly. You can either <a href="${"https://calendly.com/gitpod/onboarding"}" rel="${"nofollow"}">schedule a call</a> with an engineer, study the <a href="${"/docs/configure"}">documentation</a>, or use the new and shiny setup assistant.</p>
<h2 id="${"-setup-assistant"}">\u{1F6E0} Setup Assistant<a href="${"#-setup-assistant"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Although setting up a project for Gitpod is usually a one-off effort, it can be a little involving depending on the complexity of the project\u2019s structure. With the arrival of a new setup assistant configuring Gitpod has become a whole lot easier now.</p>
<p>The assistant informs you through a small notification when your project lacks a <code>.gitpod.yml</code> and guides you through a 5 step process to create, test and propose a proper Gitpod configuration.</p>
<p>You can of course try it out on an arbitrary open-source project, too. We want the assistant to become really smart over time and understand all kinds of languages and build tools. So please share ideas and other kinds of feedback.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/IRzCR0r7DSE?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 id="${"-new-plans"}">\u{1F917} New Plans<a href="${"#-new-plans"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We have reworked the plans and added a bunch of features to them as well.</p>
<h3 id="${"free-for-open-source-\uFE0F"}">Free for Open Source \u2764\uFE0F<a href="${"#free-for-open-source-%EF%B8%8F"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>So far Gitpod has been free to use on public repositories for up to 100hours/month. We analyzed how people have been using Gitpod and found out that while a lot of people use it regularly for open-source work and reach the 100 hours limit, there are others using the free plan to run their expensive processes and builds (miners and the like are automatically killed, btw, and are violating our terms) which is not what we had in mind when offering a generous open-source plan.</p>
<p>To protect us from such miss-use and at the same time better support open-source work, we made the following two changes:</p>
<ol><li>Add a <strong>free, unlimited hours for professional open-source developers</strong>.</li>
<li>Reduce the free plan to 50h/month, which is still plenty for part-time contributors and trying Gitpod.</li></ol>
<p>Please <a href="${"/contact"}">apply</a> for the unlimited open-source plan, once you ran against the 50 hours limit. We\u2019ll check your track record and get you going within one business day.</p>
<h3 id="${"personal-plan"}">Personal Plan<a href="${"#personal-plan"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The Personal Plan got a change in that it <strong>can now be used commercially</strong> as well. This hasn\u2019t changed the price of \u20AC8 / $9.</p>
<h3 id="${"professional-plan-"}">Professional Plan \u{1F195}<a href="${"#professional-plan-"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>We added a plan in the middle that offers <strong>unlimited usage hours for \u20AC23 / $25</strong>.</p>
<h3 id="${"unlimited-plan"}">Unlimited Plan<a href="${"#unlimited-plan"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The Unlimited plan got a couple of cool upgrades.</p>
<p>Most importantly, <strong>Unlimited users enjoy a 60min timeout with an additional 3 hours booster</strong>. For regular users the timeout is strict 30 minutes. The additional booster can be triggered from within a workspace. Simply press the hourglass sign in the status bar (only visible if you are an unlimited users)</p>
<p><img src="${"/images/blog/update-december-2019/timeout-boost.png"}" alt="${"Timeout Booster"}"></p>
<p>Furthermore, with Unlimited you can <strong>start up 16 workspaces in parallel</strong>.</p>
<p>Checkout the <a href="${"/pricing"}">pricing page</a> for an overview.</p>
<h2 id="${"light--dark-theme"}">\u{1F313}Light &amp; Dark Theme<a href="${"#light--dark-theme"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod comes with a dark theme by default. You can now switch to light and the styles will be applied on all your workspaces and the dashboard pages. Full support for VS Code themes is already landing in Theia, the open-source IDE we are developing for Gitpod, and will be shipped in January.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/CcTI9X9na8A?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 id="${"-garbage-collection"}">\u267B Garbage Collection<a href="${"#-garbage-collection"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With prebuilt, disposable workspaces, Gitpod encourages to start fresh workspaces for every task. Whenever I need to code, do a review or just want to try something, I simply spin up a fresh workspace, do my thing and forget about it afterward.</p>
<p><strong>But what happens to all those old workspaces?</strong></p>
<p>Well, in order to really be able to forget about it, we have implemented an automatic garbage collection. It automatically deletes old workspaces after an inactivity of 30 days. You can exclude workspace from being garbage collected by manually pinning them in the workspaces list on the dashboard (see belows screenshot).</p>
<p><strong>Garbage collection starts on January 20th.</strong></p>
<p><img src="${"/images/blog/update-december-2019/pin-gc.jpg"}" alt="${"Pin Workspaces"}"></p>
<h2 id="${"new-community-forum"}">\u{1F4AC}New Community Forum<a href="${"#new-community-forum"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We\u2019ve moved the support forum to <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">community.gitpod.io</a>, which is based on the awesome Discourse platform.</p>
<p><a href="${"https://community.gitpod.io"}" rel="${"nofollow"}">Join the Community</a></p>
<h2 id="${"\u{1F942}have-a-great-holiday-season"}">\u{1F942}Have a Great Holiday Season!<a href="${"#%F0%9F%A5%82have-a-great-holiday-season"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>That\u2019s all for now. I hope you have a great time with your families and friends. Many thanks to everyone supporting us in our quest to simplify and streamline developer\u2019s daily live.</p>
<p>See you online &amp; happy coding!</p>`
  })}`;
});
var updateDecember2019 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Update_december_2019,
  metadata: metadata$2x,
  prerender: prerender$2L
});
const metadata$2w = {
  author: "svenefftinge",
  date: "Tue Nov 05 2019 16:16:17 GMT+0000 (UTC)",
  excerpt: "With Visual Studio Online (VSO) Microsoft is entering the space of cloud-based development environments. So, what are the differences? Glad",
  image: "gitpod-vs-code-online.png",
  slug: "visual-studio-online-vs-gitpod",
  subtitle: "What are the differences?",
  title: "Visual Studio Online vs Gitpod"
};
const prerender$2K = true;
const Visual_studio_online_vs_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2w), {}, {
    default: () => `<p>With <a href="${"https://visualstudio.microsoft.com/services/visual-studio-online/"}" rel="${"nofollow"}">Visual Studio Online</a> (VSO) Microsoft is entering the space of cloud-based development environments. So, what are the differences? Glad you asked:</p>
<h2 class="${"h1"}">Next Generation Cloud IDE</h2>
<p>Cloud IDEs are not exactly a new thing. Platforms like Cloud9 or Eclipse Che have been around for quite some time. However, these days we see the advent of a new generation of cloud IDEs, which are either based on VS Code, like VSO, or on the vendor-neutral alternative <a href="${"https://theia-ide.org"}" rel="${"nofollow"}">Eclipse Theia</a>, such as Gitpod.</p>
<p>Make no mistake, the \u201CEclipse\u201D in Eclipse Theia doesn\u2019t mean it is based on the classic Eclipse IDE, but that it is governed by the <a href="${"https://www.eclipse.org/org/"}" rel="${"nofollow"}">Eclipse Foundation</a> rather than controlled by a single company. The Eclipse Foundation is a not-for-profit Open-Source Foundation.</p>
<blockquote><p>This is open-source at its best, as it means others can innovate on top of a stable platform without risking the project is making unexpected turns.</p></blockquote>
<p>Theia has not even seen a 1.0 release, yet, but is already adopted by many companies, such as Google, ARM, Arduino, RedHat, IBM, SAP, Ericsson and yes, Gitpod. We actually started the project together with Ericsson and are still among the most active contributors.</p>
<p>With regards to features neither VS Code nor Theia has a significant competitive advantage over the other as both support VS Code extensions and the UI is almost identical. Theia is more flexible when it comes to extending the core IDE, though, as you can build all kinds of modern cloud and desktop IDEs based on it. But as an end user of Gitpod this doesn\u2019t really make a difference as we are embracing the look and feel of VS Code.</p>
<p>Long story short, from the user\u2019s perspective the IDE itself is a common good and therefore not a real differentiator, so we need to dig a little deeper to discover the real differences.</p>
<h2 class="${"h1"}">Continuous Dev Environments</h2>
<p><a href="${"/blog/continuous-dev-environment-in-devops"}">Continuous Dev Environments</a> are at the core of Gitpod.</p>
<blockquote><p>We believe that the way to go are short-lived dev environments that are easy and fast to create from any Git branch.</p></blockquote>
<p>For that we eliminated any \u2018create environment\u2019-wizards and dashboards standing between you and your dev environment. With Gitpod you just go to your Git project and start coding. GitHub or GitLab is your dashboard.</p>
<p>In the launch post for VSO disposable dev environments are mentioned, which is an important part of our vision, but unfortunately VSO doesn\u2019t embrace it in the actual product. After getting through the account creation of VSO, you land on a dashboard and create a dev environment through a form based configuration dialog. Due to the lack of prebuilds, creating fresh dev environments all the time is tedious, as you need to wait for the build, downloading dependencies and running tests. This dashboard-centric approach encourages people to reuse their workspaces instead of relying on a well-working, automated setup continuously.</p>
<p>Gitpod, on the other hand, builds your branches similar to a CI build <em>before</em> you open a dev environment. This way you are really ready-to-code whenever you open a workspace. Disposable dev environments really need such a feature as you\u2019d otherwise waste your time on <a href="${"/blog/prebuilds"}">watching your build</a>.</p>
<h2 class="${"h1"}">Self Hosting</h2>
<p>Gitpod can be installed on any Kubernetes cluster and deeply integrates with your existing tool chain. Whether you use GitHub, GitLab or Bitbucket a deep integration is possible, providing a frictionless dev experience. We also support custom OAuth and styling/re-branding so you could even use our technology in the context of your branded service or product.</p>
<p>On VSO there is something called \u2018self-hosted\u2019 but that doesn\u2019t mean you can self host VSO itself. Instead, you can only point it to hardware running elsewhere and start dev environments there. You are still stuck in Microsoft / Azure land.</p>
<h2 class="${"h1"}">DX</h2>
<p>A list of checkboxes doesn\u2019t make a good product, although in terms of features Gitpod definitely is ahead of VSO, as it supports capabilities like snapshots, prebuilds, the deep integration with GitHub and GitLab or all the advanced automation possibilities the configuration allows.</p>
<p>That said, VSO is still in beta and they have features on their agenda that are also not yet supported on Gitpod, such as starting Windows VMs.</p>
<p>Anyhow, the Gitpod team is not striving for an ever growing feature list. Instead,</p>
<blockquote><p>we are focussing on a coherent developer experience (DX) that doesn\u2019t get into your way, but lets you focus on coding.</p></blockquote>
<h2 class="${"h1"}">Microsoft Monopoly?</h2>
<p>Not really related to product functionality, but I\u2019m honestly a little concerned about the massive control MS has gained over the developer world in the last few years. They have hired awesome talent and allow them to create crazy good developer products such as TypeScript and VS Code. Acquiring GitHub was another huge cornerstone and I wonder if the other big tech companies don\u2019t realize this or whether they already have given up on this.</p>
<p>For GitHub, GitLab seems to be the only real competitor and Azure DevOps is trying to take over the CI tools space. <a href="${"https://insights.stackoverflow.com/survey/2019/#development-environments-and-tools"}" rel="${"nofollow"}">VS Code has surpassed 50% market share</a> which I believe is the highest number for an IDE/Editor in history. The stuff MS has created is amazing and the people behind them are great and friendly engineers, but for the rest of the industry is definitely not healthy to have everything under control of a single vendor as it hinders competition and with that diversity and inventions.</p>
<h2 class="${"h1"}">Conclusion</h2>
<p>In this post I covered the most important differences between Gitpod and Visual Studio Online. In a nutshell:
on the IDE feature level there are not many differences, <strong>but</strong></p>
<ul><li>regarding how dev environments are provisioned, Gitpod\u2019s approach is clearly leading the pack.</li>
<li>Self-hosting is not really supported by VSO and</li>
<li>Microsoft is growing a little too dominant in the developer world these days.</li></ul>
<p>Please reach out if you have further questions.</p>`
  })}`;
});
var visualStudioOnlineVsGitpod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Visual_studio_online_vs_gitpod,
  metadata: metadata$2w,
  prerender: prerender$2K
});
const metadata$2v = {
  author: "svenefftinge",
  date: "Fri Aug 2 2019 12:16:17 GMT+0000 (UTC)",
  excerpt: "Today, we are excited to announce the start of our public beta phase for VS Code extensions in Gitpod, the next generation cloud IDE. So far",
  image: "tools.jpg",
  slug: "vscode-extension-in-online-ide",
  subtitle: "Join the Beta!",
  teaserImage: "tools.jpg",
  title: "Your Favorite VS Code Extension in an Online IDE"
};
const Vscode_extension_in_online_ide = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2v), {}, {
    default: () => `<p>Today, we are excited to announce the start of our public beta phase for VS Code extensions in Gitpod, the next generation cloud IDE.</p>
<p>So far Gitpod supported the mainstream languages like JavaScript, Java, Python, Ruby, Rust, C++ and Go, but many others weren\u2019t covered yet. With today\u2019s release, we have added support for installing any of the 10K+ existing extensions for VS Code. Finally, Scala, Swift and F# developers will feel at home in Gitpod, too.</p>
<h2 id="${"part-of-your-projects-configuration"}">Part of Your Project\u2019s Configuration<a href="${"#part-of-your-projects-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod automatically creates fresh, disposable dev environments on demand. Unlike traditional dev environments which you setup once and then have to maintain over time, you get a fresh one for every task. Therefore any installed extensions would normally be gone when discarding the workspace.</p>
<p>That\u2019s because a Gitpod dev environment is tailored and optimized for the project at hand. I might work on multiple different projects, e.g. a Scala project as well as some Node.js projects. Why should I need to have the Scala extension in all my projects?</p>
<blockquote><p>Traditionally you would maintain one bloated editor for all your projects or alternatively maintain multiple per project.</p></blockquote>
<p>Gitpod solves this problem for you by providing a small configuration that is part of your git history. This includes information about dependencies, start up tasks and now also lists the extensions needed for the project at that point in time (version).</p>
<p>Here is how it works:</p>
<h2 id="${"installing-an-extension"}">Installing an Extension<a href="${"#installing-an-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Installing extensions is a matter of dragging and dropping a *.vsix file into the extension view. Gitpod will automatically install and activate the new extension, and add an entry to the .gitpod.yml file. You can now test the experience and if you are happy with it share this new experience with your team by pushing the change to your remote Git repository.
Here\u2019s a small screencast:</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/hEqmXM62cjo?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 id="${"where-do-i-find-extensions"}">Where Do I Find Extensions?<a href="${"#where-do-i-find-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Microsoft prohibits the direct use of the <a href="${"https://marketplace.visualstudio.com/vscode"}" rel="${"nofollow"}">Visual Studio Marketplace</a> for any other software but their own. Although most extensions are open-source and not even developed or maintained by MS, the access to the Marketplace is restricted.
However, if you have the <code>.vsix</code> file available, you can upload the extension yourself. <code>.vsix</code> files are not only available from the Visual Studio Marketplace but can be found on GitHub as well, e.g. <a href="${"https://github.com/prettier/prettier-vscode/releases"}" rel="${"nofollow"}">prettier-vscode</a>.</p>
<p>An extension only needs to be uploaded once and is available for you and your teammates afterwards. Please make sure you comply with the licenses of those extensions.
Additionally, of course, you can develop and upload your own extensions. They won\u2019t be listed anywhere publicly except in your own <code>.gitpod.yml</code> file.</p>
<h2 id="${"your-extension-doesnt-work-as-expected"}">Your extension doesn\u2019t work as expected?<a href="${"#your-extension-doesnt-work-as-expected"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Covering the full API surface of VS Code extension is a huge task and the Theia community has been working hard on that for over a year now.</p>
<p>As we are approaching 100% coverage of the implementation it is time to expose this feature to more users. Which is why we decided to make it available as a beta feature to the Gitpod community.</p>
<p>So if you want to help us hardening this exciting new feature, please try your favorite extensions and <a href="${"https://github.com/theia-ide/theia/issues/new"}" rel="${"nofollow"}">submit issues on the Theia project</a> for anything that you think needs improving.</p>
<p>Happy coding!</p>`
  })}`;
});
var vscodeExtensionInOnlineIde = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Vscode_extension_in_online_ide,
  metadata: metadata$2v
});
const metadata$2u = {
  author: "svenefftinge",
  date: "Thu Dec 20 2018 21:51:05 GMT+0000 (UTC)",
  excerpt: "Learn how to streamline your code review experience. Code reviews are one of the best things you can do to keep your codebase clean. They",
  image: "when-code-reviews-lgtm.jpeg",
  slug: "when-code-reviews-lgtm",
  subtitle: "Say goodbye to shallow reviews!",
  teaserImage: "when-code-reviews-lgtm.jpeg",
  title: "When code reviews LGTM",
  url: "https://hackernoon.com/when-code-reviews-lgtm-say-goodbye-to-shallow-reviews-a4e01b84ddef"
};
const prerender$2J = true;
const When_code_reviews_lgtm = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2u), {}, {
    default: () => `<p>Learn how to streamline your code review experience.</p>
<p>Code reviews are one of the best things you can do to keep your codebase clean. They improve code quality, reduce code ownership and let you learn a lot from your teammates.</p>
<p>Much has been said about the <a href="${"https://blog.codinghorror.com/code-reviews-just-do-it/"}" rel="${"nofollow"}">advantages</a> <a href="${"https://www.quora.com/Why-is-code-review-so-important-in-the-software-industry"}" rel="${"nofollow"}">of code reviews</a> for individuals, teams and codebases. Research has found that projects that do proper code reviews identify <a href="${"https://web.archive.org/web/20151009203148/http://ieeexplore.ieee.org/xpl/login.jsp?reload=true&tp=&arnumber=4815279"}" rel="${"nofollow"}">\u201C\u2026 more than half of the defects in code reviews\u201D</a>.</p>
<p>Assuming you understood the importance of it, I want to discuss the tools, the process and how you can improve your code review experience using <a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">Gitpod</a> and new app for GitHub that lets you do deep code reviews.</p>
<h2 id="${"context-switches--shallow-reviews"}">Context Switches &amp; Shallow Reviews<a href="${"#context-switches--shallow-reviews"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Code reviews are super valuable but they add friction to our daily tasks. Without reviews you would probably write code all day, maybe have a discussion here and there. But you would would mostly working on a single task or at least one after the other.</p>
<p>Therefore, changing our local dev environment between different branches is something we want to avoid. Especially if setup times (rebuilding, etc.) are long. So instead of doing our colleague a favor and providing a proper code review, we too often take the shortcut and just glimpse over the code online in a code review tool. Be it GitHub, Gitlab, Bitbucket, or Gerrit they all just present syntax coloured diffs. These tools allow us to glimpse over the changes, but we cannot run the code, navigate around (and use the smart editing features for that) or even add code (e.g. tests).</p>
<p>As a result, many bugs are not spotted and potentially wrong assumptions are not identified during such shallow code reviews.</p>
<h2 id="${"deep-code-reviews"}">Deep Code Reviews<a href="${"#deep-code-reviews"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Instead of glimpsing over the changes on GitHub, we should check out the branch in a real development environment. So we can read, run, and test them.</p>
<p>Yes, it messes up our local development context and might even take a bit of time to set up. And, yes, we have to go back to the online code review tool to add our comments. It\u2019s all a bit cumbersome so \u2026 <strong>maybe for this little change I could just go with a quick LGTM?</strong></p>
<p>I feel your pain, but you should not take that shortcut. It will fire back eventually. Instead, let\u2019s improve our workflows, streamline the context switches and get rid of unnecessary overhead.</p>
<h2 id="${"enter-gitpod"}">Enter Gitpod<a href="${"#enter-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">Gitpod</a> gives you a full development environment with a single click for any pull request on GitHub. You don\u2019t have to manually setup or even change anything on your local development environment. Just click a button and you have the best of both worlds:</p>
<ul><li><p>a full development environment (similar to VS Code)</p></li>
<li><p>a great code review experience (similar to GitHub)</p></li></ul>
<h2 id="${"code-review-in-gitpod"}">Code Review in Gitpod<a href="${"#code-review-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When you start a Gitpod workspace from a pull request, it will automatically open with the list of changes on the left. You can now use either the cursor keys or the mouse to go through the changes one by one.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2880/1*JXfHOvLeHj-RyczGleIpZg.gif"}" alt="${"Gitpod Diff Editor"}"></p>
<p>The opened diff editors are full-fledged code editors, so you can navigate to inspect references and easily check out alternative code. You can even comment right within those editors.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6200/1*qGnEh6LFqkiChDY9-UXk8w.png"}" alt="${"Diff Editor an example review comment"}"></p>
<p>The build starts automatically, so you can already spot any issues coming up from there, while you are reviewing.</p>
<p>Launching the tests or even running and trying the application is something that is part of a good code review as well.</p>
<p>The last thing you do is to submit your review and close the browser tab.</p>
<p><img src="${"https://cdn-images-1.medium.com/max/6200/1*eu_d_3DJvBOhC9rMDwjb1w.png"}" alt="${"Gitpod submit review tab"}"></p>
<h2 id="${"tldr"}">TL;DR<a href="${"#tldr"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While we cannot get rid of context switches completely when doing code reviews, we can streamline and automate those switches so that they are less time consuming and distracting.</p>
<p>Gitpod integrates the review features of GitHub in an online IDE and provides an automated experience with a single click. All you need is a browser, and once you are done with the review, you just close the window and don\u2019t need to look back.</p>
<p>Gitpod is free and you can use it now. Just go to any pull request on GitHub and prefix the URL with. <code>gitpod.io/#</code>, e.g.
<a href="${"https://gitpod.io/#https://github.com/theia-ide/theia/pull/1204"}" rel="${"nofollow"}">https://gitpod.io/#https://github.com/theia-ide/theia/pull/1204</a></p>`
  })}`;
});
var whenCodeReviewsLgtm = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: When_code_reviews_lgtm,
  metadata: metadata$2u,
  prerender: prerender$2J
});
const metadata$2t = {
  author: "svenefftinge",
  date: "Wed Nov 21 2018 13:34:27 GMT+0000 (UTC)",
  excerpt: "Whenever you want to share a reproducible example on StackOverflow or an issue report, providing real code that can be quickly tried",
  image: "workspace-snapshots.jpeg",
  slug: "workspace-snapshots",
  subtitle: "Code never lies",
  title: "Creating reproducibles for any programming language",
  url: "https://medium.com/gitpod/code-never-lies-creating-reproducibles-for-any-programming-language-7946021a68f2"
};
const prerender$2I = true;
const Workspace_snapshots = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Blog_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2t), {}, {
    default: () => `<p>Whenever you want to share a reproducible example on StackOverflow or an issue report, providing real code that can be quickly tried, executed and explored is the best you can do. Online code playgrounds, such as CodePen or JSFiddle, are an excellent way to do that, as they are very accessible for both the creator and the readers. Unfortunately, they are not available for every programming platform, language and often don\u2019t work for larger projects or examples.</p>
<p>In this post I\u2019d like to introduce you to a new feature in <a href="${"https://gitpod.io"}" rel="${"nofollow"}">Gitpod</a>, that lets you create reproducible examples for any programming environment and any size of project.</p>
<h2 id="${"new-in-gitpod-snapshots"}">New in Gitpod: Snapshots<a href="${"#new-in-gitpod-snapshots"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>No matter what state your Gitpod workspace is in, taking a Snapshot captures everything and provides you a link to share anywhere: on issues, forums (StackOverflow), emails and blogs. Anybody who clicks on a snapshot link instantly gets an exact copy of that workspace, including any uncommitted file changes and the UI layout.</p>
<p>Let\u2019s go through an example.</p>
<h3 id="${"spring-boot-example"}">Spring Boot Example<a href="${"#spring-boot-example"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>I went over to <strong>spring-boot</strong> and picked the first issue in the list:
<a href="${"https://github.com/spring-projects/spring-boot/issues/15326"}" rel="${"nofollow"}"><strong>Bean overriding in spring boot 2.1 \xB7 Issue #15326 \xB7 spring-projects/spring-boot</strong>
<em>I have an issue with bean overriding with spring boot 2.1.0 I have a main application class that we use in\u2026</em>github.com</a></p>
<p>The issue has a detailed description on how to reproduce the problem. It even has a link to a GitHub repository containing the code! So the author did a lot to make it easy for the maintainers to reproduce the issue and figure out what\u2019s wrong.</p>
<p>However, instead of laying out the steps in prose, an automated solution would be much better. A snapshot would have reduced this to a single click for the maintainers, and the author wouldn\u2019t have to write a lengthy explanation.</p>
<h3 id="${"take-a-snapshot"}">Take a Snapshot<a href="${"#take-a-snapshot"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Before we are taking the snapshot, we want to make sure everything is in the state we want it to be. So the maintainers get pointed to the culprit immediately. For this example I made sure</p>
<ul><li><p>the build ran through,</p></li>
<li><p>the right editors are opened
(I choose to open the two files mentioned in the issue in split mode),</p></li>
<li><p>the sample application is started automatically</p></li></ul>
<p>Taking care of the first two items is easy. For the third, you need to add a <strong><em>.gitpod.yml</em></strong> to the root of the project containing the tasks you want to start.</p>
<p>In the case of this project I added a task to start the failing Java process:</p>
<pre class="${"language-null"}">${`<code class="language-null">tasks:
    - command: &gt;
    mvn -q exec:exec         -Dexec.executable=java         -Dexec.args=\u201D-cp %classpath com.example.beanoverriding.EmbeddedApplication\u201D         -Dexec.classpathScope=\u201Dtest\u201D</code>`}</pre>
<blockquote><p>Btw. to figure out how to start that damn thing using Maven, I had to ask the community on StackOverflow. Of course, by providing a Gitpod Snapshot :-)
<a href="${"https://stackoverflow.com/questions/53536751/run-main-from-test-scope-in-maven-the-parameters-mainclass-for-goal-org-code"}" rel="${"nofollow"}"><strong>Run main from test scope in Maven: \u201CThe parameters \u2018mainClass\u2019 for goal\u2026</strong> &gt; <em>Thanks for contributing an answer to Stack Overflow! Some of your past answers have not been well-received, and you\u2019re\u2026</em>stackoverflow.com</a></p></blockquote>
<p>With the <strong>.gitpod.yml </strong>configured and the editors and views laid out as needed, we are ready to take a snapshot. Simply click on the avatar on the top right:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/2212/1*nOXkwor5kPsdJb-o2oHy4w.png"}" alt="${"Gitpod menu share workspace snapshot"}"></p>
<p>Pick \u201CShare Workspace Snapshot\u201D and copy and share the link or one of the snippets in the opened dialog:</p>
<p><img src="${"https://cdn-images-1.medium.com/max/4348/1*2aDOY4sHSyefz2uepzGskw.png"}" alt="${"Gitpod workspace snapshot prompt"}"></p>
<p>Here\u2019s the snapshot link for you to try:
<a href="${"https://gitpod.io/#snapshot/f7f5954a-250b-4113-909c-aae88b64321c"}" rel="${"nofollow"}">https://gitpod.io/#snapshot/f7f5954a-250b-4113-909c-aae88b64321c</a></p>
<h2 id="${"summary"}">Summary<a href="${"#summary"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod Snapshots are a very convenient way to create and consume large and small examples for any programming language and platform. Make sure to check out the <a href="${"https://docs.gitpod.io"}" rel="${"nofollow"}">documentation</a>, which goes into more detail on the options available.</p>
<p>We think snapshots are not only great for reproducing issues or showing solutions and examples, but very useful in other situations. Preparing workshops and tutorials should be super convenient with snapshots, as it will free your audience from any tedious setup procedures. We are looking forward to learning about all the creative ways you will put this feature to use. Please <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">let us know</a> and have fun!</p>`
  })}`;
});
var workspaceSnapshots = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspace_snapshots,
  metadata: metadata$2t,
  prerender: prerender$2I
});
var contributors_svelte = "span.svelte-1qimm4u a{font-weight:400}";
const css$_ = {
  code: "span.svelte-1qimm4u a{font-weight:400}",
  map: '{"version":3,"file":"contributors.svelte","sources":["contributors.svelte"],"sourcesContent":["<script lang=\\"ts\\">import Avatars from \\"../avatars.svelte\\";\\n/**\\n * One or more comma-separated GitHub username.\\n */\\nexport let usernames;\\nconst displayNames = usernames\\n    .split(\\",\\")\\n    .map((username) => username.trim())\\n    .reduce((result, username, i, usernames) => Object.assign({}, {\\n    ...result,\\n    [username]: `@${username}${i < usernames.length - 1 ? \\",\\" : \\"\\"}`,\\n}), {});\\n</script>\\n\\n<style>span :global(a){font-weight:400}</style>\\n\\n<span\\n  class=\\"inline-flex flex-wrap mr-4 px-2 bg-white rounded-xl text-dark-grey focus:bg-off-white focus:text-dark-grey hover:bg-off-white md:flex-row\\"\\n>\\n  <span class=\\"flex-shrink-0\\">\\n    <Avatars {usernames} socialMediaLinkClasses=\\"filter hover:drop-shadow\\" />\\n  </span>\\n  <!-- <span class=\\"hidden md:inline\\">\\n    <span>Thanks </span><Avatars\\n      {usernames}\\n      {displayNames}\\n      showAvatar={false}\\n    />\\n  </span> -->\\n</span>\\n"],"names":[],"mappings":"AAcO,mBAAI,CAAC,AAAQ,CAAC,AAAC,CAAC,YAAY,GAAG,CAAC"}'
};
const Contributors = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {usernames} = $$props;
  usernames.split(",").map((username) => username.trim()).reduce((result, username, i, usernames2) => Object.assign({}, {
    ...result,
    [username]: `@${username}${i < usernames2.length - 1 ? "," : ""}`
  }), {});
  if ($$props.usernames === void 0 && $$bindings.usernames && usernames !== void 0)
    $$bindings.usernames(usernames);
  $$result.css.add(css$_);
  return `<span class="${"inline-flex flex-wrap mr-4 px-2 bg-white rounded-xl text-dark-grey focus:bg-off-white focus:text-dark-grey hover:bg-off-white md:flex-row svelte-1qimm4u"}"><span class="${"flex-shrink-0 svelte-1qimm4u"}">${validate_component(Avatars, "Avatars").$$render($$result, {
    usernames,
    socialMediaLinkClasses: "filter hover:drop-shadow"
  }, {}, {})}</span>
  </span>`;
});
const metadata$2s = {date: "2021-02-28T00:00:00.000Z"};
const _2021_02 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p><img src="${"/images/changelog/2021-02-28.jpg"}" alt="${"VS Code on Gitpod"}"></p>
<h2 id="${"synchronize-theia-user-settings-with-vs-code"}">Synchronize Theia user settings with VS Code<a href="${"#synchronize-theia-user-settings-with-vs-code"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We recently launched <a href="${"https://www.gitpod.io/blog/root-docker-and-vscode/#vs-code"}" rel="${"nofollow"}">support for VS Code</a>.</p>
<p>If you switch your editor to VS Code, your user settings and extensions configured in Theia will be synchronized with VS Code automatically when you start a new workspace (unless you manually uploaded an extension).</p>
<p>${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "akosyakov, svenefftinge"}, {}, {})}</p>
<h3 id="${"fixes-and-improvements"}">Fixes and improvements<a href="${"#fixes-and-improvements"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><a href="${"https://github.com/gitpod-com/gitpod/pull/3087"}" rel="${"nofollow"}">#3087</a> - Remove the privileged feature flag. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "csweichel,akosyakov"}, {}, {})}</li>
<li><a href="${"https://github.com/gitpod-com/gitpod/pull/3175"}" rel="${"nofollow"}">#3175</a> - Fix Env Var context parsing. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "AlexTugarev,csweichel"}, {}, {})}</li>
<li><a href="${"https://github.com/gitpod-com/gitpod/pull/3177"}" rel="${"nofollow"}">#3177</a> - [supervisor] Let supervisor fail when first IDE start fails.${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "corneliusludmann,csweichel"}, {}, {})}</li>
<li><a href="${"https://github.com/gitpod-com/gitpod/pull/3182"}" rel="${"nofollow"}">#3182</a> - [registry-facade] Remove feature flag. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "csweichel,corneliusludmann"}, {}, {})}</li>
<li><a href="${"https://github.com/gitpod-io/gitpod/pull/3228"}" rel="${"nofollow"}">#3228</a> - Allow air-gap Gitpod installations. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "corneliusludmann,geropl"}, {}, {})}</li>
<li>Improved workspace startup time in high-load situations. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "geropl"}, {}, {})}</li>
<li>Started to <a href="${"https://kubernetes.io/docs/concepts/architecture/controller/"}" rel="${"nofollow"}">adopt the controller framework</a> which will lead to Gitpod producing less load on the Kubernetes API. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "aledbf"}, {}, {})}</li></ul>`;
});
var _202102 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: _2021_02,
  metadata: metadata$2s
});
const metadata$2r = {date: "2021-03-31T00:00:00.000Z"};
const _2021_03 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p><img src="${"/images/changelog/2021-03-31.png"}" alt="${"Redesigned Gitpod dashboard"}"></p>
<h2 id="${"-dashboard-redesign"}">\u{1F34A} Dashboard Redesign<a href="${"#-dashboard-redesign"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Aligned with our <a href="${"https://www.gitpod.io/blog/next-chapter-for-gitpod"}" rel="${"nofollow"}">Next Chapter for Gitpod</a> announcement, we reimplemented and redesigned the Gitpod dashboard!</p>
<p>Technical improvements under the hood result in a more performant, snappier dashboard. We would love to hear your feedback and learn how we can provide you with an even better experience. Please provide your comments in our <a href="${"https://github.com/gitpod-io/gitpod/issues/3727"}" rel="${"nofollow"}">feedback issue #3727</a> \u{1F64F}\u{1F3FB}.</p>
<p>${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "svenefftinge,jankeromnes,geropl,csweichel,gtsiolis,AlexTugarev"
  }, {}, {})}</p>`;
});
var _202103 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: _2021_03,
  metadata: metadata$2r
});
const metadata$2q = {date: "2021-04-30T00:00:00.000Z"};
const _2021_04 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p><img src="${"/images/changelog/2021-04-30.png"}" alt="${"Redesigned Gitpod dashboard"}"></p>
<h2 id="${"hello-dark-mode"}">Hello Dark mode<a href="${"#hello-dark-mode"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We heard you and implemented a dashboard dark mode (<a href="${"https://github.com/gitpod-io/gitpod/pull/3901"}" rel="${"nofollow"}">PR #3901</a>) \u{1F311}! Head over to <a href="${"https://gitpod.io/preferences"}" rel="${"nofollow"}">https://gitpod.io/preferences</a> to pick the light or dark theme. Alternatively, select \u201CSystem\u201D and let us pick the theme that matches your system settings.</p>
<p>If you have specific feedback related to dark mode, please let us know in our <a href="${"https://github.com/gitpod-io/gitpod/issues/4100"}" rel="${"nofollow"}">feedback issue #3727</a> \u{1F64F}\u{1F3FB}.</p>
<p>${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "jankeromnes,meysholdt,gtsiolis,svenefftinge,filiptronicek"
  }, {}, {})}</p>
<h3 id="${"fixes-and-improvements"}">Fixes and improvements<a href="${"#fixes-and-improvements"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/3940"}" rel="${"nofollow"}">#3940</a> - Add OAuth2 host check (credit: <a href="${"https://gitlab.com/joernchen"}" rel="${"nofollow"}">Joern Schneeweisz</a> from the GitLab Security Research Team). ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "AlexTugarev,csweichel"}, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/4051"}" rel="${"nofollow"}">#4051</a> - Ask user for confirmation before deleting an environment variable. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "jankeromnes,gtsiolis"}, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/4069"}" rel="${"nofollow"}">#4069</a> - Fix loading Gitpod\u2019s dashboard in Safari less than v14. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "akosyakov,svenefftinge"}, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/3830"}" rel="${"nofollow"}">#3830</a> - Optimize Gitpod\u2019s dashboard to make it lighter and load faster. ${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "aledbf,Divlo,AlexTugarev,csweichel,gtsiolis,jankeromnes"
  }, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/4018"}" rel="${"nofollow"}">#4018</a> - Make the Docker daemon in workspaces auto-start when needed by introducing a socket activated \u2018sudo docker-up\u2019. ${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "csweichel,akosyakov,jankeromnes"
  }, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/3945"}" rel="${"nofollow"}">#3945</a> - UX: Fix accidental workspace deletion when using the \u2018Enter\u2019 key. ${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "svenefftinge,apolopena,csweichel"
  }, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/3938"}" rel="${"nofollow"}">#3938</a> - Also show environment variables with identical names but different scopes in the dashboard. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "jankeromnes,gtsiolis"}, {}, {})}</p></li>
<li><p><a href="${"https://github.com/gitpod-com/gitpod/pull/3866"}" rel="${"nofollow"}">#3866</a> - Fix quantity type conversion in Team plans. ${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "jankeromnes,gtsiolis,AlexTugarev"
  }, {}, {})}</p></li></ul>`;
});
var _202104 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: _2021_04,
  metadata: metadata$2q
});
const metadata$2p = {date: "2021-05-31T00:00:00.000Z"};
const _2021_05 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p><img src="${"/images/changelog/2021-05-31.jpg"}" alt="${"Incremental prebuilds"}"></p>
<h2 id="${"faster-incremental-prebuilds"}">Faster, incremental prebuilds<a href="${"#faster-incremental-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">prebuilds</a>, Gitpod continously builds your development environment so that it is ready-to-code by the time you start a new workspace.</p>
<p>So far, Gitpod started each prebuild from a clean slate. With this latest release, Gitpod now supports incremental prebuilds, which means Gitpod will try to re-use a prebuild from an earlier commit in order to create new prebuilds faster. In short, it now takes less time for your prebuild to be ready after a new commit is pushed to your git provider.</p>
<p><strong>Note</strong>: This is a controlled feature release so that we can measure the performance impact on projects. There is nothing you need to do other than wait and at some point experience quicker prebuild times \u{1F680}.</p>
<p>${validate_component(Contributors, "Contributors").$$render($$result, {
    usernames: "jankeromnes,svenefftinge,csweichel"
  }, {}, {})}</p>
<h3 id="${"fixes-and-improvements"}">Fixes and improvements<a href="${"#fixes-and-improvements"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><a href="${"https://github.com/gitpod-com/gitpod/pull/3995"}" rel="${"nofollow"}">#3995</a> - Implement new self-hosted setup flow. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "AlexTugarev,gtsiolis,geropl"}, {}, {})}</li>
<li><a href="${"https://github.com/gitpod-com/gitpod/pull/4170"}" rel="${"nofollow"}">#4170</a> - Hide \u201Cstopping\u201D &amp; unpinned workspaces from \u201CActive\u201D in the dashboard. ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "jankeromnes,gtsiolis"}, {}, {})}</li>
<li><a href="${"https://github.com/gitpod-com/gitpod/pull/4118"}" rel="${"nofollow"}">#4118</a> - Fix Cross Origin Websocket Access (credit: <a href="${"https://gitlab.com/joernchen"}" rel="${"nofollow"}">Joern Schneeweisz</a> from the GitLab Security Research Team). ${validate_component(Contributors, "Contributors").$$render($$result, {usernames: "AlexTugarev,geropl"}, {}, {})}</li></ul>`;
});
var _202105 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: _2021_05,
  metadata: metadata$2p
});
const get = ({context}) => {
  const ttlInMin = 60;
  const rssDocument = `<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
   <title>Gitpod Changelog</title>
   <description>New features and improvements to Gitpod.</description>
   <link>https://www.gitpod.io/changelog</link>
   <copyright>${new Date().getFullYear()} Gitpod GmbH. All rights reserved</copyright>
   <lastBuildDate>${new Date(context.changelogEntries[0].date).toUTCString()}</lastBuildDate>
   <pubDate>${new Date(context.changelogEntries[0].date).toUTCString()}</pubDate>
   <ttl>${ttlInMin}</ttl>
   <atom:link href="https://www.gitpod.io/changelog/rss.xml" rel="self" type="application/rss+xml" />
   ${context.changelogEntries.map((entry) => `<item>
      <title>${new Date(Date.parse(entry.date)).toLocaleDateString(void 0, {
    year: "numeric",
    month: "short",
    day: "numeric"
  })}</title>
      <link>https://www.gitpod.io/changelog</link>
      <pubDate>${new Date(Date.parse(entry.date)).toUTCString()}</pubDate>
      <description><![CDATA['${entry.content.replace(/src="\//g, 'src="https://www.gitpod.io/')}']]></description>
    </item>`)}
  </channel>
</rss>`;
  return {
    body: rssDocument,
    headers: {
      "Cache-Control": `max-age=0, s-max-age=${ttlInMin * 60}`,
      "Content-Type": "application/rss+xml"
    }
  };
};
var rss_xml = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get
});
function M(title, path, subMenu) {
  return {
    title,
    path: "/docs" + (path ? "/" + path : ""),
    subMenu
  };
}
const MENU = [
  M("Introduction", ""),
  M("Quickstart", "quickstart", [
    M("Deno", "quickstart/deno"),
    M("Go", "quickstart/go"),
    M("Java Spring", "quickstart/java"),
    M("Node/TypeScript/Express", "quickstart/typescript"),
    M("PHP Drupal", "quickstart/drupal"),
    M("PHP Laravel", "quickstart/laravel"),
    M("Python Django", "quickstart/python"),
    M("Python Flask", "quickstart/flask"),
    M("React", "quickstart/react"),
    M("Ruby on Rails", "quickstart/ruby-on-rails"),
    M("Rust", "quickstart/rust"),
    M("Svelte", "quickstart/svelte")
  ]),
  M("Getting Started", "getting-started"),
  M("Configure", "configure", [
    M(".gitpod.yml", "config-gitpod-file"),
    M("Custom Docker Image", "config-docker"),
    M("Start Tasks", "config-start-tasks"),
    M("VS Code Extensions", "vscode-extensions"),
    M("Exposing Ports", "config-ports"),
    M("Prebuilds", "prebuilds"),
    M("Environment Variables", "environment-variables"),
    M("Checkout and Workspace Location", "checkout-location")
  ]),
  M("Develop", "develop", [
    M("One workspace per task", "workspaces"),
    M("Life of a workspace", "life-of-workspace"),
    M("Contexts", "context-urls"),
    M("Collaboration & Sharing", "sharing-and-collaboration"),
    M("Command Line Interface", "command-line-interface")
  ]),
  M("Integrations", "integrations", [
    M("GitLab", "gitlab-integration"),
    M("GitHub", "github-integration"),
    M("Bitbucket", "bitbucket-integration"),
    M("Browser Extension", "browser-extension")
  ]),
  M("Gitpod Self-Hosted", "self-hosted/latest/self-hosted", [
    M("Install on Google Cloud Platform", "self-hosted/latest/install/install-on-gcp-script"),
    M("Install on Amazon Web Services", "self-hosted/latest/install/install-on-aws-script"),
    M("Install on self-managed Kubernetes", "self-hosted/latest/install/install-on-kubernetes"),
    M("Configure Ingress", "self-hosted/latest/install/configure-ingress"),
    M("Configure a Database", "self-hosted/latest/install/database"),
    M("Configure a Docker Registry", "self-hosted/latest/install/docker-registry"),
    M("Configure Storage", "self-hosted/latest/install/storage"),
    M("Configure Nodes", "self-hosted/latest/install/nodes"),
    M("Configure Workspaces", "self-hosted/latest/install/workspaces")
  ]),
  M("References", "references", [
    M(".gitpod.yml", "references/gitpod-yml"),
    M("Changelog", "references/changelog"),
    M("Roadmap", "references/roadmap")
  ])
];
function getMenuContext(slug, menu2 = MENU, context = {}) {
  for (const e of menu2) {
    if (context.next) {
      return context;
    }
    if (context.thisEntry) {
      context.next = e;
      return context;
    } else if (e.path === slug) {
      context.thisEntry = e;
    } else {
      context.prev = e;
    }
    if (e.subMenu) {
      getMenuContext(slug, e.subMenu, context);
    }
  }
  return context;
}
var menu = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  MENU,
  getMenuContext
});
var layoutMain_svelte = "main.svelte-1c2lq7w{display:flex;flex-direction:column;flex:1;flex-grow:2;min-height:50vh}";
const css$Z = {
  code: "main.svelte-1c2lq7w{display:flex;flex-direction:column;flex:1;flex-grow:2;min-height:50vh}",
  map: '{"version":3,"file":"layout-main.svelte","sources":["layout-main.svelte"],"sourcesContent":["<style>main{display:flex;flex-direction:column;flex:1;flex-grow:2;min-height:50vh}</style>\\n\\n<main>\\n  <slot />\\n</main>\\n"],"names":[],"mappings":"AAAO,mBAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,WAAW,IAAI,CAAC"}'
};
const Layout_main = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$Z);
  return `<main class="${"svelte-1c2lq7w"}">${slots.default ? slots.default({}) : ``}</main>`;
});
var layoutRoot_svelte = "div.svelte-expkgt{display:flex;flex-direction:column;min-height:100vh}";
const css$Y = {
  code: "div.svelte-expkgt{display:flex;flex-direction:column;min-height:100vh}",
  map: '{"version":3,"file":"layout-root.svelte","sources":["layout-root.svelte"],"sourcesContent":["<style>div{display:flex;flex-direction:column;min-height:100vh}</style>\\n\\n<div>\\n  <slot />\\n</div>\\n"],"names":[],"mappings":"AAAO,iBAAG,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,WAAW,KAAK,CAAC"}'
};
const Layout_root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$Y);
  return `<div class="${"svelte-expkgt"}">${slots.default ? slots.default({}) : ``}</div>`;
});
var loginButton_svelte = ".btn-tertiary.svelte-1y5p77e{display:flex;align-items:center;justify-content:center;height:2rem;width:5.313rem}";
const css$X = {
  code: ".btn-tertiary.svelte-1y5p77e{display:flex;align-items:center;justify-content:center;height:2rem;width:5.313rem}",
  map: '{"version":3,"file":"login-button.svelte","sources":["login-button.svelte"],"sourcesContent":["<style>.btn-tertiary{display:flex;align-items:center;justify-content:center;height:2rem;width:5.313rem}</style>\\n\\n<a href=\\"https://gitpod.io/login/\\" class=\\"btn-tertiary\\"> Login </a>\\n"],"names":[],"mappings":"AAAO,4BAAa,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,gBAAgB,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,QAAQ,CAAC"}'
};
const Login_button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$X);
  return `<a href="${"https://gitpod.io/login/"}" class="${"btn-tertiary svelte-1y5p77e"}">Login </a>`;
});
var navItem_svelte = "a.svelte-1ox6rh3{color:var(--dark-grey)}@media(max-width:768px){a.svelte-1ox6rh3{color:var(--black)}}.active.svelte-1ox6rh3,a.svelte-1ox6rh3:focus,a.svelte-1ox6rh3:hover{color:var(--black)}a sup{color:var(--brand-ripe)}";
const css$W = {
  code: "a.svelte-1ox6rh3{color:var(--dark-grey)}@media(max-width:768px){a.svelte-1ox6rh3{color:var(--black)}}.active.svelte-1ox6rh3,a.svelte-1ox6rh3:focus,a.svelte-1ox6rh3:hover{color:var(--black)}a sup{color:var(--brand-ripe)}",
  map: '{"version":3,"file":"nav-item.svelte","sources":["nav-item.svelte"],"sourcesContent":["<script>\\n  import { page } from \\"$app/stores\\";\\n\\n  export let href;\\n\\n  $: isActivePage =\\n    $page.path === \\"/\\" ? /\\\\/$/.test(href) : href.indexOf($page.path) >= 0;\\n</script>\\n\\n<style lang=\\"scss\\">a{color:var(--dark-grey)}@media (max-width:768px){a{color:var(--black)}}.active,a:focus,a:hover{color:var(--black)}:global(a) :global(sup){color:var(--brand-ripe)}</style>\\n\\n<a class:active={isActivePage} {href} on:click sveltekit:prefetch><slot /></a>\\n"],"names":[],"mappings":"AASmB,gBAAC,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,gBAAC,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,sBAAO,CAAC,gBAAC,MAAM,CAAC,gBAAC,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,AAAQ,CAAC,AAAC,CAAC,AAAQ,GAAG,AAAC,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC"}'
};
const Nav_item = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isActivePage;
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  let {href} = $$props;
  if ($$props.href === void 0 && $$bindings.href && href !== void 0)
    $$bindings.href(href);
  $$result.css.add(css$W);
  isActivePage = $page.path === "/" ? /\/$/.test(href) : href.indexOf($page.path) >= 0;
  $$unsubscribe_page();
  return `<a${add_attribute("href", href, 0)} sveltekit:prefetch class="${["svelte-1ox6rh3", isActivePage ? "active" : ""].join(" ").trim()}">${slots.default ? slots.default({}) : ``}</a>`;
});
const subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = [];
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (let i = 0; i < subscribers.length; i += 1) {
          const s2 = subscribers[i];
          s2[1]();
          subscriber_queue.push(s2, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.push(subscriber);
    if (subscribers.length === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      const index2 = subscribers.indexOf(subscriber);
      if (index2 !== -1) {
        subscribers.splice(index2, 1);
      }
      if (subscribers.length === 0) {
        stop();
        stop = null;
      }
    };
  }
  return {set, update, subscribe: subscribe2};
}
var menuState = writable(false);
const Mobile_menu$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $menuState, $$unsubscribe_menuState;
  $$unsubscribe_menuState = subscribe(menuState, (value) => $menuState = value);
  let {navItems = []} = $$props;
  if ($$props.navItems === void 0 && $$bindings.navItems && navItems !== void 0)
    $$bindings.navItems(navItems);
  $$unsubscribe_menuState();
  return `${$menuState ? `<div class="${"items h"}">${each(navItems, ({href, label}) => `${validate_component(Nav_item, "NavItem").$$render($$result, {href}, {}, {default: () => `${label}`})}`)}
    ${validate_component(Login_button, "LoginButton").$$render($$result, {}, {}, {})}</div>` : ``}`;
});
var button_svelte = "button.svelte-1y6fas8{display:flex;justify-content:center;align-items:center;height:1.5rem;width:3rem;text-align:center;border-radius:.75rem;background:var(--black)}@media(min-width:769px){button.svelte-1y6fas8{display:none}}svg.svelte-1y6fas8{display:inline-block}";
const css$V = {
  code: "button.svelte-1y6fas8{display:flex;justify-content:center;align-items:center;height:1.5rem;width:3rem;text-align:center;border-radius:.75rem;background:var(--black)}@media(min-width:769px){button.svelte-1y6fas8{display:none}}svg.svelte-1y6fas8{display:inline-block}",
  map: '{"version":3,"file":"button.svelte","sources":["button.svelte"],"sourcesContent":["<script>\\n  import menuState from \\"./state\\";\\n</script>\\n\\n<style lang=\\"scss\\">button{display:flex;justify-content:center;align-items:center;height:1.5rem;width:3rem;text-align:center;border-radius:.75rem;background:var(--black)}@media (min-width:769px){button{display:none}}svg{display:inline-block}</style>\\n\\n<button\\n  on:click={() => ($menuState = !$menuState)}\\n  aria-label=\\"Show / hiide nav items\\"\\n>\\n  {#if $menuState}\\n    <svg\\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      fill=\\"none\\"\\n      width=\\"12\\"\\n      height=\\"12\\"\\n      viewBox=\\"0 0 12 12\\"\\n    >\\n      <path\\n        fill=\\"#F3F1F0\\"\\n        fillRule=\\"evenodd\\"\\n        d=\\"M10.242 11.657a1 1 0 001.414-1.414L7.413 6l4.243-4.243A1 1 0 0010.242.343L5.999 4.586 1.757.343A1 1 0 10.342 1.757L4.585 6 .342 10.243a1 1 0 001.415 1.414l4.242-4.243 4.243 4.243z\\"\\n        clipRule=\\"evenodd\\"\\n      />\\n    </svg>\\n  {:else}\\n    <svg\\n      width=\\"16\\"\\n      height=\\"8\\"\\n      viewBox=\\"0 0 16 8\\"\\n      fill=\\"none\\"\\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n    >\\n      <rect width=\\"16\\" height=\\"2\\" rx=\\"1\\" fill=\\"#F4F2F1\\" />\\n      <rect y=\\"6\\" width=\\"16\\" height=\\"2\\" rx=\\"1\\" fill=\\"#F3F1F0\\" />\\n    </svg>\\n  {/if}\\n</button>\\n"],"names":[],"mappings":"AAImB,qBAAM,CAAC,QAAQ,IAAI,CAAC,gBAAgB,MAAM,CAAC,YAAY,MAAM,CAAC,OAAO,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,MAAM,CAAC,cAAc,MAAM,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,qBAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,kBAAG,CAAC,QAAQ,YAAY,CAAC"}'
};
const Button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $menuState, $$unsubscribe_menuState;
  $$unsubscribe_menuState = subscribe(menuState, (value) => $menuState = value);
  $$result.css.add(css$V);
  $$unsubscribe_menuState();
  return `<button aria-label="${"Show / hiide nav items"}" class="${"svelte-1y6fas8"}">${$menuState ? `<svg xmlns="${"http://www.w3.org/2000/svg"}" fill="${"none"}" width="${"12"}" height="${"12"}" viewBox="${"0 0 12 12"}" class="${"svelte-1y6fas8"}"><path fill="${"#F3F1F0"}" fillRule="${"evenodd"}" d="${"M10.242 11.657a1 1 0 001.414-1.414L7.413 6l4.243-4.243A1 1 0 0010.242.343L5.999 4.586 1.757.343A1 1 0 10.342 1.757L4.585 6 .342 10.243a1 1 0 001.415 1.414l4.242-4.243 4.243 4.243z"}" clipRule="${"evenodd"}"></path></svg>` : `<svg width="${"16"}" height="${"8"}" viewBox="${"0 0 16 8"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-1y6fas8"}"><rect width="${"16"}" height="${"2"}" rx="${"1"}" fill="${"#F4F2F1"}"></rect><rect y="${"6"}" width="${"16"}" height="${"2"}" rx="${"1"}" fill="${"#F3F1F0"}"></rect></svg>`}</button>`;
});
const Logo = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="${"131"}" height="${"40"}" viewBox="${"0 0 131 40"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}"><path d="${"M56.0449 30.4444C50.1877 30.4444 46 26.25 46 20.7222C46 15.1944 50.216 11 55.96 11C58.7895 11 60.9966 12.0833 62.8358 13.6667L61.6757 16.0278C60.2609 14.6389 58.45 13.5 55.8468 13.5C51.6025 13.5 48.5466 16.4167 48.5466 20.7222C48.5466 25.0278 51.5742 27.9444 55.8751 27.9444C59.5818 27.9444 62.2133 25.75 62.6377 22.4167H55.0828V19.9167H65.5239V20.0278C65.5239 26.1389 62.0152 30.4444 56.0449 30.4444Z"}" fill="${"#12100C"}"></path><path d="${"M68.1803 16.5556H70.6137V30.4444H68.1803V16.5556Z"}" fill="${"#12100C"}"></path><path d="${"M82.1393 30.25V28.1389C81.3753 28.2778 80.7528 28.3611 79.8473 28.3611C78.6589 28.3611 78.2345 27.75 78.2345 26.6944V18.6389H82.111V16.5556H78.2345V12.8333H75.8011V16.5556H72.9998V18.6389H75.8011V26.5556C75.8011 29.5 77.131 30.5833 79.7059 30.5833C80.6113 30.5833 81.4036 30.4444 82.1393 30.25Z"}" fill="${"#12100C"}"></path><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M87.0989 36H84.6655V16.5556H87.0989V18.5556C88.259 17.0278 89.9851 16.2222 92.0789 16.2222C96.0969 16.2222 98.8981 19.2222 98.8981 23.5C98.8981 27.7778 96.0969 30.7778 92.0789 30.7778C90.07 30.7778 88.4288 30 87.0989 28.4167V36ZM86.9292 23.5C86.9292 26.5833 88.7967 28.5556 91.6545 28.5556C94.5123 28.5556 96.3798 26.5556 96.3798 23.5C96.3798 20.4444 94.5123 18.4444 91.6545 18.4444C88.7967 18.4444 86.9292 20.4167 86.9292 23.5Z"}" fill="${"#12100C"}"></path><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M100.413 23.5C100.413 27.6667 103.582 30.7778 107.826 30.7778C112.071 30.7778 115.24 27.6667 115.24 23.5C115.24 19.3333 112.071 16.2222 107.826 16.2222C103.582 16.2222 100.413 19.3333 100.413 23.5ZM112.722 23.5C112.722 26.3889 110.769 28.4722 107.826 28.4722C104.884 28.4722 102.931 26.3889 102.931 23.5C102.931 20.6111 104.884 18.5278 107.826 18.5278C110.769 18.5278 112.722 20.6111 112.722 23.5Z"}" fill="${"#12100C"}"></path><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M128.567 11H131V30.4444H128.567V28.4444C127.406 29.9722 125.68 30.7778 123.587 30.7778C119.569 30.7778 116.767 27.7778 116.767 23.5C116.767 19.2222 119.569 16.2222 123.587 16.2222C125.596 16.2222 127.237 17 128.567 18.5833V11ZM128.736 23.5C128.736 20.4167 126.869 18.4444 124.011 18.4444C121.153 18.4444 119.286 20.4444 119.286 23.5C119.286 26.5556 121.153 28.5556 124.011 28.5556C126.869 28.5556 128.736 26.5833 128.736 23.5Z"}" fill="${"#12100C"}"></path><path d="${"M69.4026 14.7302C70.3643 14.7302 71.1439 13.9679 71.1439 13.0275C71.1439 12.087 70.3643 11.3247 69.4026 11.3247C68.4408 11.3247 67.6612 12.087 67.6612 13.0275C67.6612 13.9679 68.4408 14.7302 69.4026 14.7302Z"}" fill="${"#12100C"}"></path><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M21.388 1.99199C22.4572 3.8871 21.8071 6.30126 19.936 7.38418L8.30155 14.1176C7.99402 14.2956 7.8042 14.6271 7.8042 14.9861V25.5563C7.8042 25.9153 7.99402 26.2467 8.30155 26.4247L17.511 31.7548C17.8141 31.9301 18.1859 31.9301 18.489 31.7548L27.6985 26.4247C28.006 26.2467 28.1958 25.9153 28.1958 25.5563V18.9825L19.9175 23.7132C18.0406 24.7858 15.6605 24.1142 14.6015 22.2133C13.5425 20.3123 14.2056 17.9017 16.0825 16.8292L27.9277 10.0602C31.5358 7.99827 36 10.6386 36 14.8346V26.3588C36 29.0581 34.572 31.5504 32.258 32.8896L21.6846 39.009C19.4014 40.3303 16.5986 40.3303 14.3154 39.009L3.74196 32.8896C1.42803 31.5504 0 29.0581 0 26.3588V14.1835C0 11.4843 1.42803 8.99201 3.74196 7.65282L16.064 0.521394C17.9351 -0.561524 20.3188 0.0968851 21.388 1.99199Z"}" fill="${"url(#paint0_linear)"}"></path><defs><linearGradient id="${"paint0_linear"}" x1="${"27.0957"}" y1="${"6.04878"}" x2="${"8.28086"}" y2="${"35.2541"}" gradientUnits="${"userSpaceOnUse"}"><stop stop-color="${"#FFB45B"}"></stop><stop offset="${"1"}" stop-color="${"#FF8A00"}"></stop></linearGradient></defs></svg>`;
});
const Main_nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $menuState, $$unsubscribe_menuState;
  $$unsubscribe_menuState = subscribe(menuState, (value) => $menuState = value);
  const navItems = [
    {href: "/features", label: "Features"},
    {href: "/pricing", label: "Pricing"},
    {href: "/blog", label: "Blog"},
    {href: "/docs", label: "Docs"},
    {href: "/changelog", label: "Changelog"},
    {
      href: "/careers",
      label: "We're hiring <sup>*</sup>"
    }
  ];
  $$unsubscribe_menuState();
  return `<nav id="${"choose-project-observer-target-top"}"${add_attribute("class", `nav text-small ${$menuState ? "bg-off-white" : ""}`, 0)}><div class="${"wrapper"}"><a href="${"/"}" aria-label="${"Gitpod"}">${validate_component(Logo, "Logo").$$render($$result, {}, {}, {})}</a>
    <div class="${"items w"}">${each(navItems, ({href, label}) => `${validate_component(Nav_item, "NavItem").$$render($$result, {href}, {}, {default: () => `${label}`})}`)}</div>
    <div class="${"login"}">${validate_component(Login_button, "LoginButton").$$render($$result, {}, {}, {})}</div>
    ${validate_component(Button, "MobileMenuButton").$$render($$result, {}, {}, {})}</div>
  ${validate_component(Mobile_menu$1, "MobileMenu").$$render($$result, {navItems}, {}, {})}</nav>`;
});
const Logo_textless = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg viewBox="${"0 0 24 24"}" height="${"24"}" width="${"24"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}"><g clip-path="${"url(#clip0)"}"><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M14.07 1.195a2.364 2.364 0 01-.887 3.236l-7.11 4.04a.6.6 0 00-.304.52v6.343a.6.6 0 00.304.52l5.628 3.199a.605.605 0 00.598 0l5.628-3.198a.6.6 0 00.304-.521V11.39l-5.06 2.838a2.392 2.392 0 01-3.248-.9 2.364 2.364 0 01.905-3.23l7.239-4.062C20.272 4.8 23 6.383 23 8.901v6.914c0 1.62-.873 3.115-2.287 3.919l-6.461 3.671a4.56 4.56 0 01-4.504 0l-6.461-3.671A4.509 4.509 0 011 15.815V8.51c0-1.62.873-3.115 2.287-3.918l7.53-4.28a2.392 2.392 0 013.253.883z"}" fill="${"url(#paint0_linear)"}"></path></g><defs><linearGradient id="${"paint0_linear"}" x1="${"17.558"}" y1="${"3.629"}" x2="${"6.356"}" y2="${"21.34"}" gradientUnits="${"userSpaceOnUse"}"><stop stop-color="${"#FFB45B"}"></stop><stop offset="${"1"}" stop-color="${"#FF8A00"}"></stop></linearGradient><clipPath id="${"clip0"}"><path fill="${"#fff"}" d="${"M0 0h24v24H0z"}"></path></clipPath></defs></svg>`;
});
const Footer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const socialLinks = [
    {
      href: "https://twitter.com/gitpod",
      alt: "Twitter",
      icon: "/svg/brands/twitter.svg"
    },
    {
      href: "https://github.com/gitpod-io",
      alt: "GitHub",
      icon: "/svg/brands/github.svg"
    },
    {
      href: "https://community.gitpod.io/",
      alt: "Discourse",
      icon: "/svg/brands/discourse.svg"
    }
  ];
  return `<div class="${"footer__container pb-8"}"><footer class="${"footer"}"><div class="${"footer__entries"}"><ul><li>Gitpod</li>
        <li><a href="${"/"}">Home</a></li>
        <li><a href="${"/features"}">Features</a></li>
        <li><a href="${"/pricing"}">Pricing</a></li>
        <li><a href="${"/changelog"}">Changelog</a></li>
        <li><a href="${"/self-hosted"}">Self-Hosted</a></li>
        <li><a href="${"/gitpod-vs-github-codespaces"}">Gitpod vs GitHub <br>Codespaces
          </a></li></ul>
      <ul><li>Developer</li>
        <li><a href="${"/#get-started"}">Getting started</a></li>
        <li><a href="${"/screencasts"}">Screencasts</a></li>
        <li><a href="${"/blog"}">Blog</a></li>
        <li><a href="${"/docs"}">Documentation</a></li>
        <li><a href="${"https://github.com/gitpod-io/gitpod/issues/new?template=bug_report.md"}" target="${"_blank"}" rel="${"noopener"}">Report a bug</a></li>
        <li><a href="${"https://community.gitpod.io"}" target="${"_blank"}" rel="${"noopener"}">Community
          </a></li></ul>
      
      <ul><li>Company</li>
        <li><a href="${"/about"}">About</a></li>
        <li><a href="${"/careers"}">Careers<sup>*</sup></a></li>
        <li><a href="${"/contact"}">Contact</a></li>
        <li><a href="${"/media-kit"}">Media Kit</a></li></ul>
      <ul><li>Legal</li>
        <li><a href="${"/imprint"}">Imprint</a></li>
        <li><a href="${"/terms"}">Terms of Service</a></li>
        <li><a href="${"/privacy"}">Privacy Policy</a></li></ul></div>

    <div class="${"footer__bottom"}"><div class="${"footer__copy"}"><a href="${"/"}"><div class="${"logo-wrapper"}"><img src="${"/svg/logo-textless.svg"}" alt="${"Gitpod"}" height="${"24"}" width="${"24"}"></div></a><span>Copyright \xA9 Gitpod</span></div>
      <div class="${"footer__social"}">${each(socialLinks, (link) => `<a${add_attribute("href", link.href, 0)} class="${"footer__social-link"}"><img${add_attribute("src", link.icon, 0)}${add_attribute("alt", link.alt, 0)} height="${"24"}" width="${"24"}">
          </a>`)}</div></div></footer></div>`;
});
var base_svelte = ".top.svelte-1xzd5em{top:0}.bottom.svelte-1xzd5em{position:fixed;bottom:0;z-index:10}";
const css$U = {
  code: ".top.svelte-1xzd5em{top:0}.bottom.svelte-1xzd5em{position:fixed;bottom:0;z-index:10}",
  map: '{"version":3,"file":"base.svelte","sources":["base.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport { fade } from \\"svelte/transition\\";\\nexport let storageKey;\\nexport let location = \\"top\\";\\nlet showBanner = false;\\nconst closeBanner = () => {\\n    showBanner = false;\\n    window.localStorage.setItem(storageKey, \\"true\\");\\n};\\nonMount(() => {\\n    showBanner = !window.localStorage.getItem(storageKey);\\n});\\n</script>\\n\\n<style>.top{top:0}.bottom{position:fixed;bottom:0;z-index:10}</style>\\n\\n{#if showBanner}\\n  <div\\n    transition:fade\\n    class=\\"{location} px-4 py-2 flex justify-between items-center w-full bg-sand-dark shadow-sm text-xs sm:text-sm md:text-base\\"\\n  >\\n    <slot {closeBanner} />\\n  </div>\\n{/if}\\n"],"names":[],"mappings":"AAcO,mBAAI,CAAC,IAAI,CAAC,CAAC,sBAAO,CAAC,SAAS,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC"}'
};
const Base = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {storageKey} = $$props;
  let {location = "top"} = $$props;
  let showBanner = false;
  const closeBanner = () => {
    showBanner = false;
    window.localStorage.setItem(storageKey, "true");
  };
  onMount(() => {
    showBanner = !window.localStorage.getItem(storageKey);
  });
  if ($$props.storageKey === void 0 && $$bindings.storageKey && storageKey !== void 0)
    $$bindings.storageKey(storageKey);
  if ($$props.location === void 0 && $$bindings.location && location !== void 0)
    $$bindings.location(location);
  $$result.css.add(css$U);
  return `${showBanner ? `<div class="${escape(location) + " px-4 py-2 flex justify-between items-center w-full bg-sand-dark shadow-sm text-xs sm:text-sm md:text-base svelte-1xzd5em"}">${slots.default ? slots.default({closeBanner}) : ``}</div>` : ``}`;
});
const Cookie_consent = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Base, "Banner").$$render($$result, {
    location: "bottom",
    storageKey: "cookie-consent"
  }, {}, {
    default: ({closeBanner}) => `<p class="${"w-7/12 md:w-9/12"}">This website uses cookies to enhance the user experience. Read our <a href="${"/privacy"}">privacy policy</a> for more info.
  </p>
  <button class="${"px-3 py-1 bg-off-white rounded-lg md:px-6 hover:bg-white"}">Accept Cookies</button>`
  })}`;
});
var $layout_svelte$1 = "#svelte-announcer{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}";
const css$T = {
  code: "#svelte-announcer{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}",
  map: '{"version":3,"file":"$layout.svelte","sources":["$layout.svelte"],"sourcesContent":["<script>\\n  // import GoogleAnalytics from \\"../components/google-analytics.svelte\\";\\n  import LayoutMain from \\"../components/layout-main.svelte\\";\\n  import LayoutRoot from \\"../components/layout-root.svelte\\";\\n  import Nav from \\"../components/main-nav/index.svelte\\";\\n  import Footer from \\"../components/footer.svelte\\";\\n  // import AnnouncementBanner from \\"../components/banners/announcement.svelte\\";\\n  import CookieConsent from \\"../components/banners/cookie-consent.svelte\\";\\n</script>\\n\\n<style>:global(#svelte-announcer){position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}</style>\\n\\n<!-- <AnnouncementBanner /> -->\\n<LayoutRoot>\\n  <Nav />\\n  <LayoutMain>\\n    <slot />\\n  </LayoutMain>\\n  <Footer />\\n</LayoutRoot>\\n<CookieConsent />\\n<!-- <GoogleAnalytics /> -->\\n"],"names":[],"mappings":"AAUe,iBAAiB,AAAC,CAAC,SAAS,QAAQ,CAAC,MAAM,GAAG,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,MAAM,CAAC,aAAa,CAAC,CAAC"}'
};
const $layout$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$T);
  return `
${validate_component(Layout_root, "LayoutRoot").$$render($$result, {}, {}, {
    default: () => `${validate_component(Main_nav, "Nav").$$render($$result, {}, {}, {})}
  ${validate_component(Layout_main, "LayoutMain").$$render($$result, {}, {}, {
      default: () => `${slots.default ? slots.default({}) : ``}`
    })}
  ${validate_component(Footer, "Footer").$$render($$result, {}, {}, {})}`
  })}
${validate_component(Cookie_consent, "CookieConsent").$$render($$result, {}, {}, {})}
`;
});
var $layout$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: $layout$2
});
var section_svelte = "section.svelte-15d98kd{margin-top:var(--xx-large)}section.svelte-15d98kd:last-of-type{margin-bottom:var(--xx-large)}@media(max-width:972px){section.svelte-15d98kd{margin-top:var(--x-large)}section.svelte-15d98kd:last-of-type{margin-bottom:var(--x-large)}}";
const css$S = {
  code: "section.svelte-15d98kd{margin-top:var(--xx-large)}section.svelte-15d98kd:last-of-type{margin-bottom:var(--xx-large)}@media(max-width:972px){section.svelte-15d98kd{margin-top:var(--x-large)}section.svelte-15d98kd:last-of-type{margin-bottom:var(--x-large)}}",
  map: '{"version":3,"file":"section.svelte","sources":["section.svelte"],"sourcesContent":["<script lang=\\"ts\\">export let id = \\"\\";\\nexport let className = \\"\\";\\n</script>\\n\\n<style lang=\\"scss\\">section{margin-top:var(--xx-large)}section:last-of-type{margin-bottom:var(--xx-large)}@media (max-width:972px){section{margin-top:var(--x-large)}section:last-of-type{margin-bottom:var(--x-large)}}</style>\\n\\n<section {id} class={className}>\\n  <slot />\\n</section>\\n"],"names":[],"mappings":"AAImB,sBAAO,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,sBAAO,aAAa,CAAC,cAAc,IAAI,UAAU,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sBAAO,CAAC,WAAW,IAAI,SAAS,CAAC,CAAC,sBAAO,aAAa,CAAC,cAAc,IAAI,SAAS,CAAC,CAAC,CAAC"}'
};
const Section = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {id: id2 = ""} = $$props;
  let {className = ""} = $$props;
  if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
    $$bindings.id(id2);
  if ($$props.className === void 0 && $$bindings.className && className !== void 0)
    $$bindings.className(className);
  $$result.css.add(css$S);
  return `<section${add_attribute("id", id2, 0)} class="${escape(null_to_empty(className)) + " svelte-15d98kd"}">${slots.default ? slots.default({}) : ``}</section>`;
});
const prerender$2H = true;
function load$3({error: error2, status}) {
  return {props: {error: error2, status}};
}
const $error = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {status} = $$props;
  let {error: error2} = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
    $$bindings.error(error2);
  return `<div class="${"error-page row"}">${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<img src="${"/images/illustration-large.jpg"}" alt="${"The Gitpod cube set up as a remote workspace"}">
    <h1>${escape(status)}</h1>
    <p>Oh, no! Something went wrong on our side.</p>

    ${``}

    <p><a href="${"/contact"}">Contact Us</a>
      \u2014
      <a href="${"https://status.gitpod.io/"}">Gitpod Status</a>
      \u2014
      <a href="${"https://twitter.com/gitpod"}">@gitpod</a></p>
    <p><a class="${"btn"}" href="${"https://www.gitpod.io"}">Go Home</a></p>`
  })}</div>

${``}`;
});
var $error$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: $error,
  prerender: prerender$2H,
  load: load$3
});
const brands = [
  {
    alt: "GitLab",
    href: "https://about.gitlab.com/",
    logo: "svg/brands/gitlab-logo.svg",
    className: "grey-logo"
  },
  {
    alt: "freeCodeCamp",
    href: "https://www.freecodecamp.org/",
    logo: "svg/brands/freecodecamp.svg",
    className: "fcc"
  },
  {
    alt: "D-Wave",
    href: "https://www.dwavesys.com/",
    logo: "svg/brands/dwave.svg",
    transform: "scale(1.3)",
    className: "dwave-logo"
  },
  {
    alt: "Google",
    href: "https://about.google/",
    logo: "svg/brands/google.svg",
    transform: "scale(0.9)",
    className: "grey-logo"
  },
  {
    alt: "Amazon",
    href: "https://www.aboutamazon.com",
    logo: "svg/brands/amazon.svg",
    transform: "scale(0.9) translateY(5px)",
    className: "grey-logo"
  },
  {
    alt: "Facebook",
    href: "https://about.fb.com/",
    logo: "svg/brands/facebook.svg",
    className: "grey-logo"
  },
  {
    alt: "Uber",
    href: "https://www.uber.com",
    logo: "svg/brands/uber.svg",
    className: "grey-logo"
  },
  {
    alt: "OpenAI",
    href: "https://openai.com/",
    logo: "svg/brands/openai.svg",
    transform: "scale(1.1)",
    className: "grey-logo"
  },
  {
    alt: "Sauce Labs",
    href: "https://saucelabs.com/",
    logo: "svg/brands/sauce-labs.svg",
    className: "grey-logo"
  },
  {
    alt: "Intel",
    href: "https://www.intel.com",
    logo: "svg/brands/intel.svg",
    transform: "scale(0.8)",
    className: "grey-logo"
  },
  {
    alt: "Eclipse Theia",
    href: "https://theia-ide.org",
    logo: "svg/brands/theia.svg",
    transform: "scale(1.1)",
    className: "grey-logo"
  },
  {
    alt: "Code Institute",
    href: "https://codeinstitute.net/",
    logo: "svg/brands/code-institute.svg",
    className: "grey-logo"
  },
  {
    alt: "4Geeks Academy",
    href: "https://www.4geeksacademy.co/",
    logo: "svg/brands/4-geeks-academy.png",
    className: "four-geeks grey-logo"
  }
];
const projects = [
  {
    logo: "svg/projects/ts.svg",
    title: "Node or TypeScript",
    githubUrl: "https://github.com/gitpod-io/example-typescript-node",
    alt: "Node or TypeScript"
  },
  {
    logo: "svg/projects/python.svg",
    title: "Python",
    githubUrl: "https://github.com/gitpod-io/example-python-django",
    alt: "Python"
  },
  {
    logo: "svg/projects/go.svg",
    title: "Go",
    githubUrl: "https://github.com/gitpod-io/example-golang-cli",
    alt: "Go Language"
  },
  {
    logo: "svg/projects/rust.svg",
    title: "Rust",
    githubUrl: "https://github.com/gitpod-io/example-rust-cli",
    alt: "Rust"
  },
  {
    logo: "svg/projects/java.svg",
    title: "Java",
    githubUrl: "https://github.com/gitpod-io/spring-petclinic",
    gitlabUrl: "https://gitlab.com/gitpod/spring-petclinic",
    bitbucketUrl: "https://bitbucket.org/gitpod/spring-petclinic",
    alt: "Java"
  },
  {
    logo: "svg/projects/svelte.svg",
    title: "Svelte",
    githubUrl: "https://github.com/gitpod-io/sveltejs-template",
    alt: "Svelte"
  }
];
const testimonials = [
  {
    name: "Ben Halpern",
    avatar: "ben-halpern.jpg",
    org: `<span>
          @forem
        </span>
        and
        <span>
          @ThePracticalDev
        </span>`,
    role: "Creator and Co-founder",
    text: `
      <p>GitPod is incredibly cool.</p>
      <p>In my opinion, this is a big step in open source software contribution. I'm excited to see where we go from here.</p>
    `,
    twitterHandle: "bendhalpern",
    tweetId: "1115274432958930946"
  },
  {
    name: "Michael Friedrich",
    avatar: "michael-friedrich.jpg",
    org: `<span>
        @GitLab
      </span>`,
    role: "Developer Evangelist",
    text: `
        <p>
          Let's say we were overwhelmed how smooth @gitpod workspaces creation & own Docker image for workspaces worked.
        </p>
        <p>
          Plus, installing @code extensions from the store and integrating @gitlab CI. That blew my mind entirely, and that is hard ;)
        </p>
      `,
    twitterHandle: "dnsmichi",
    tweetId: "1311560585717460992"
  },
  {
    name: "Julius Volz",
    avatar: "julius-volz.jpg",
    org: `<span>
        @PrometheusIO
      </span>`,
    role: "Creator",
    text: `
      <p>
        Look at any PR (pull request) in a full coding environment where you can edit, build, and test the PR code, by just prepending "gitpod.io#" to the PR URL. Super useful for reviewing/testing stuff without having to check it out locally!
      </p>
      `,
    twitterHandle: "juliusvolz",
    tweetId: "1298972181708275717"
  },
  {
    name: "David Ressler",
    avatar: "david-ressler.jpg",
    org: `
      <span>
        @instagram
      </span>
    `,
    role: "Engineering Manager",
    text: `
        <p>
          I think I\u2019m in love with @gitpod. It\u2019s such a powerful tool. I\u2019ve learned so much in the past week
          just from stumbling across Github repos that interest me and appending
          \u201Chttp://gitpod.io/#\u201D to the URL. A+ tool all around.
        </p>
      `,
    twitterHandle: "DavidRessler",
    tweetId: "1191710936605831169"
  },
  {
    name: "Bart\u0142omiej P\u0142otka",
    avatar: "bwplotka.jpg",
    org: `
      <span>
        @RedHat
      </span>
    `,
    role: "Principal Software Engineer",
    text: `
        <div>
          <p>
            This @gitpod thing is magic! Pretty cool, without any extra configuration. Good work!
          </p>

          <p>https://gitpod.io/#https://github.com/thanos-io/thanos</p>
        </div>
      `,
    twitterHandle: "bwplotka",
    tweetId: "1387735880853606402"
  },
  {
    name: "Mrugesh Mohapatra",
    avatar: "mrugesh-mohapatra.jpg",
    org: `
      <span>
        @freeCodeCamp
      </span>
    `,
    role: "Technology & Community",
    text: `
      <p>
          Ya'all @gitpod is freaking amazing! We integrated it into our workflow for working on @freeCodeCamp's codebase and I am honestly loving it. \u{1F525}\u{1F525}!
          <br />
          Go check it out on our repo https://github.com/freeCodeCamp/f... now!
        </p>
    `,
    twitterHandle: "raisedadead",
    tweetId: "1167463499779338243"
  },
  {
    name: "Sven Peters",
    avatar: "sven-peters.jpg",
    org: `
      <span>
        @MongoDB
      </span>
    `,
    role: "Dev Advocate",
    text: `
      <p>
          Huge time saver, less frustrations for devs: Automated ready-to-code
          dev environments with pre-build workspaces. #gitpod #cloudide
        </p>
    `,
    twitterHandle: "svenpet",
    tweetId: "1159698330764611584"
  },
  {
    name: "Jonathan Lister Parsons",
    avatar: "jonathan-lister-parsons.jpg",
    org: `
      <span>
        @PensionBee
      </span>
    `,
    role: "CTO",
    text: `
        <p>
          I'm really enjoying @gitpod - for me, it's made full-stack development in the browser (yes,including mobile) a reality
        </p>
      `,
    twitterHandle: "jayfresh",
    tweetId: "1217728632887611397"
  },
  {
    name: "Alejandro",
    avatar: "alejandro-sanchez.jpeg",
    org: `
      <span>
        @4GeeksAcademy
      </span>
    `,
    role: "Co-Founder",
    text: `
        <p>
          My setup is on @gitpod, just like Christopher McCandless, where I go my code goes with me,
          no setup whatsoever Smiling face with sunglasses \u{1F60E} #IntoTheWild
        </p>
      `,
    twitterHandle: "alesanchezr",
    tweetId: "1247219573767667715"
  },
  {
    name: "ROKU",
    avatar: "roman-kuba.jpg",
    org: `
      <span>
        @GitLab
      </span>
    `,
    role: "Engineering Manager",
    text: `
        <p>
          Have to say that @gitpod is just super nice to use. Very impressed by the performance!
        </p>
    `,
    twitterHandle: "Codebryo",
    tweetId: "1331252316255768578"
  },
  {
    name: "Hugh Durkin",
    avatar: "hugh-durkin.jpg",
    org: `
      <span>
        @HubSpot
      </span>
    `,
    role: "Platform Ecosystem",
    text: `
        <p>
          I've been playing around with the "next generation" of Cloud IDEs
          lately, and @gitpodio is quickly emerging as one of the best \u{1F468}\u200D\u{1F4BB} <br /> Awesome @github integration, slick Chrome extension, and super fast \u{1F680}
          https://gitpod.io/index.html
        </p>
      `,
    twitterHandle: "hughdurkin",
    tweetId: "1102215129696010240"
  },
  {
    name: "Marcel van Remmerden",
    avatar: "marcel-van-remmerden.jpg",
    org: `
      <span>
        @GitLab
      </span>
    `,
    role: "Product Design Manager",
    text: `<p>
          Can only agree, opening a GitLab repository in gitpod is a magical
          experience, thanks for the integration @gitpod!
        </p>`,
    twitterHandle: "MvRemmerden",
    tweetId: "1215707492740739072"
  },
  {
    name: "Brendan O\u2019Leary",
    avatar: "brendan-o-leary.jpg",
    org: `
      <span>
        @GitLab
      </span>
    `,
    role: "Dev. Evangelist",
    text: `
        <p>
          I just discovered the @gitlab @gitpod integration is alive on http://GitLab.com (released in 13.4 behind a feature flag). And it's AMAZING https://docs.gitlab.com/ee/integration....
          .
        </p>
        <p>Now I can code from *anywhere*</p>
      `,
    twitterHandle: "olearycrew",
    tweetId: "1310376245629198341"
  },
  {
    name: "Joonas Lehtinen",
    avatar: "joonas-lehtinen.png",
    org: `
      <span>
        @vaadin
      </span>
    `,
    role: "Co-founder",
    text: `
        <p>
          Wow - @gitpod is a brilliant way of evaluating a framework without installing anything.
        </p>
        <p>
          Launch gitpod for @vaadin at https://vaadin.com/start/v14 ("Online workspace" tab). You'll have app running and will be editing code in 3min from clicking "Launch" button.
        </p>
    `,
    twitterHandle: "joonaslehtinen",
    tweetId: "1238597160121200640"
  },
  {
    name: "Yo",
    avatar: "yogi.jpg",
    org: `
      <span>
        @Taskord
      </span>
    `,
    role: "Creator",
    text: `
        <p>
          Now contributing to @gitlab is a cakewalk with @gitpod \u{1F389}!
        </p>
        <p>Already started my game! #100DaysOfCode</p>
      `,
    twitterHandle: "big1nt",
    tweetId: "1317483426421776385"
  },
  {
    name: "Senior Enterprise Geek",
    avatar: "k33g.jpg",
    org: `
      <span>
        @GitLab
      </span>
    `,
    role: "Senior Technical Account Manager",
    text: `
        <p>
          Today is a great day, we added the @gitpod support to the @golo_lang repository. So now you can start hacking @golo_lang in almost only one click. Enjoy \u{1F389}
        </p>
        <p>gitpod.io/#https://githu...</p>
      `,
    twitterHandle: "k33g_org",
    tweetId: "1329461150422065152"
  }
];
const terminalSource = `[33mGitpod[39m [34m/Workspace[39m $ cargo install --path . --features=stable
  [33mBlocking[39m waiting for file lock on package cache
[33mInstalling[39m nu v0.28.0 (/workspace/nushell)
  [33mBlocking[39m waiting for file lock on package cache
  [33mUpdating[39m crates.io index
[33mDownloading[39m crates ...
[33mDownloaded[39m byteorder v1.4.3
[33mDownloaded[39m http-client v6.3.5
[33mDownloaded[39m typenum v1.13.0
[33mDownloaded[39m openssl v0.10.33
[33mDownloaded[39m regex-syntax v0.6.23
[33mDownloaded[39m openssl-sys v0.9.61
[33mDownloaded[39m regex v1.4.5
[33mDownloaded[39m ptree v0.3.2
[33mDownloaded[39m byte-unit v4.0.10
[33mDownloaded[39m directories v3.0.1
[33mDownloaded[39m syn v1.0.64
 [33mCompiling[39m libc v0.2.88
 [33mCompiling[39m proc-macro2 v1.0.24
 [33mCompiling[39m unicode-xid v0.2.1
 [33mCompiling[39m syn v1.0.64
 [33mCompiling[39m autocfg v1.0.1
 [33mCompiling[39m cfg-if v1.0.0
 [33mCompiling[39m memchr v2.3.4
 [33mCompiling[39m version_check v0.9.2
 [33mCompiling[39m serde_derive v1.0.124
 [33mCompiling[39m serde v1.0.124
 [33mCompiling[39m value-bag v1.0.0-alpha.6
 [33mCompiling[39m log v0.4.14
 [33mCompiling[39m pkg-config v0.3.19
 [33mCompiling[39m lazy_static v1.4.0
 [33mCompiling[39m itoa v0.4.7
 [33mCompiling[39m byteorder v1.4.3
 [33mCompiling[39m bitflags v1.2.1
 [33mCompiling[39m ryu v1.0.5
 [33mCompiling[39m futures-core v0.3.13
 [33mCompiling[39m regex-syntax v0.6.23
 [33mCompiling[39m slab v0.4.2
 [33mCompiling[39m cfg-if v0.1.10
 [33mCompiling[39m pin-project-lite v0.2.6
 [33mCompiling[39m serde_json v1.0.64
 [33mCompiling[39m hashbrown v0.9.1
 [33mCompiling[39m futures-io v0.3.13
 [33mCompiling[39m fnv v1.0.7
 [33mCompiling[39m proc-macro-hack v0.5.19
 [33mCompiling[39m typenum v1.13.0
 [33mCompiling[39m pin-utils v0.1.0
 [33mCompiling[39m unicode-width v0.1.8
 [33mCompiling[39m getrandom v0.2.2
 [33mCompiling[39m futures v0.1.31
 [33mCompiling[39m futures-sink v0.3.13
 [33mCompiling[39m ppv-lite86 v0.2.10
 [33mCompiling[39m termcolor v1.1.2
 [33mCompiling[39m typed-arena v1.7.0
 [33mCompiling[39m dtoa v0.4.7
 [33mCompiling[39m proc-macro-nested v0.1.7
 [33mCompiling[39m once_cell v1.7.2
 [33mCompiling[39m matches v0.1.8
 [33mCompiling[39m percent-encoding v2.1.0
 [33mCompiling[39m bytes v0.5.6
 [33mCompiling[39m futures-task v0.3.13
 [33mCompiling[39m utf8-width v0.1.4
 [33mCompiling[39m scopeguard v1.1.0
 [33mCompiling[39m glob v0.3.0
 [33mCompiling[39m tinyvec_macros v0.1.0
 [33mCompiling[39m either v1.6.1
 [33mCompiling[39m pin-project-lite v0.1.12
 [33mCompiling[39m remove_dir_all v0.5.3
 [33mCompiling[39m dunce v1.0.1
 [33mCompiling[39m fastrand v1.4.0
 [33mCompiling[39m cache-padded v1.1.1
 [33mCompiling[39m parking v2.0.0
 [33mCompiling[39m waker-fn v1.1.0
 [33mCompiling[39m opaque-debug v0.3.0
 [33mCompiling[39m event-listener v2.5.1
 [33mCompiling[39m yaml-rust v0.4.5
 [33mCompiling[39m futures-executor v0.3.13
 [33mCompiling[39m async-global-executor v2.0.2
 [33mCompiling[39m tokio-util v0.3.1
 [33mCompiling[39m tokio-tls v0.3.1
 [33mCompiling[39m serde_yaml v0.8.17
 [33mCompiling[39m config v0.10.1
 [33mCompiling[39m futures v0.3.13
 [33mCompiling[39m h2 v0.2.7
 [33mCompiling[39m async-std v1.9.0
 [33mCompiling[39m futures_codec v0.4.1
 [33mCompiling[39m ptree v0.3.2
 [33mCompiling[39m dtparse v1.2.0
 [33mCompiling[39m bzip2 v0.3.3
 [33mCompiling[39m ichwh v0.3.4
 [33mCompiling[39m zip v0.5.11
 [33mCompiling[39m hyper v0.13.10
 [33mCompiling[39m calamine v0.17.0
 [33mCompiling[39m onig v6.1.1
 [33mCompiling[39m syntect v4.5.0
 [33mCompiling[39m hyper-tls v0.4.3
 [33mCompiling[39m surf v1.0.3
 [33mCompiling[39m http-client v6.3.5
 [33mCompiling[39m surf v2.2.0
 [33mCompiling[39m git2 v0.13.17
 [33mCompiling[39m shadow-rs v0.5.24
 [33mCompiling[39m nu v0.28.0
[33mInstalling[39m /workspace/.cargo/bin/nu
  [33mFinished[39m dev target(s) in 12m 30s

 exit
 \u{1F919} This task ran as a workspace prebuild
 \u{1F389} Well done on saving 12 minutes

[33mGitpod[39m [34m/Workspace[39m $ `;
const linuxSource = `[33mGitpod[39m [34m/Workspace[39m $ sudo apt-get install mc
[33mGitpod[39m [34m/Workspace[39m $ docker run -it alpine:latest
Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
Status: Downloaded newer image for alpine:latest
/ # `;
const features$1 = [
  {
    title: "Think CI/CD for dev environments",
    paragraph: "We invented prebuilds so application code, configuration and infrastructure can all be stored as machine-executable code in your git repositories and applied to dev environments automatically and continuously.",
    moreButton: {
      text: "More on prebuilds",
      href: "/docs/prebuilds"
    },
    documentationLink: "/docs",
    terminalSource
  }
];
var console_svelte = '.aspect.svelte-zxn9ex.svelte-zxn9ex{position:relative;height:100%;max-height:500px;min-height:240px}.aspect.svelte-zxn9ex.svelte-zxn9ex:before{content:"";display:block;padding-bottom:125%}.aspect.narrow.svelte-zxn9ex.svelte-zxn9ex:before{padding-bottom:70%}@media(min-width:769px){.aspect.svelte-zxn9ex.svelte-zxn9ex:before{padding-bottom:80%}.aspect.narrow.svelte-zxn9ex.svelte-zxn9ex:before{padding-bottom:40%}}.wrapper.svelte-zxn9ex.svelte-zxn9ex{position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden;background:#f9f9f9;border-radius:20px;transform:translateZ(0)}.wrapper.dark.svelte-zxn9ex.svelte-zxn9ex{background:rgba(18,16,12,.7)}.wrapper.shadowGrey.svelte-zxn9ex.svelte-zxn9ex{box-shadow:0 2px 5px rgba(0,0,0,.08),0 5px 20px rgba(0,0,0,.12)}.wrapper.shadowBrand.svelte-zxn9ex.svelte-zxn9ex{box-shadow:var(--shadow-brand)}.titlebar.svelte-zxn9ex.svelte-zxn9ex{z-index:1;position:absolute;top:0;left:0;width:100%;height:48px;background:hsla(0,0%,97.6%,.9);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px)}.dark.svelte-zxn9ex .titlebar.svelte-zxn9ex{background:#696662}.titlebar.svelte-zxn9ex.svelte-zxn9ex:before{content:"";display:block;width:16px;height:16px;position:absolute;top:16px;left:16px;border-radius:8px;background:#e7e7e7}.dark.svelte-zxn9ex .titlebar.svelte-zxn9ex:before{background:#807c78}figcaption.svelte-zxn9ex.svelte-zxn9ex{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}';
const css$R = {
  code: '.aspect.svelte-zxn9ex.svelte-zxn9ex{position:relative;height:100%;max-height:500px;min-height:240px}.aspect.svelte-zxn9ex.svelte-zxn9ex:before{content:"";display:block;padding-bottom:125%}.aspect.narrow.svelte-zxn9ex.svelte-zxn9ex:before{padding-bottom:70%}@media(min-width:769px){.aspect.svelte-zxn9ex.svelte-zxn9ex:before{padding-bottom:80%}.aspect.narrow.svelte-zxn9ex.svelte-zxn9ex:before{padding-bottom:40%}}.wrapper.svelte-zxn9ex.svelte-zxn9ex{position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden;background:#f9f9f9;border-radius:20px;transform:translateZ(0)}.wrapper.dark.svelte-zxn9ex.svelte-zxn9ex{background:rgba(18,16,12,.7)}.wrapper.shadowGrey.svelte-zxn9ex.svelte-zxn9ex{box-shadow:0 2px 5px rgba(0,0,0,.08),0 5px 20px rgba(0,0,0,.12)}.wrapper.shadowBrand.svelte-zxn9ex.svelte-zxn9ex{box-shadow:var(--shadow-brand)}.titlebar.svelte-zxn9ex.svelte-zxn9ex{z-index:1;position:absolute;top:0;left:0;width:100%;height:48px;background:hsla(0,0%,97.6%,.9);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px)}.dark.svelte-zxn9ex .titlebar.svelte-zxn9ex{background:#696662}.titlebar.svelte-zxn9ex.svelte-zxn9ex:before{content:"";display:block;width:16px;height:16px;position:absolute;top:16px;left:16px;border-radius:8px;background:#e7e7e7}.dark.svelte-zxn9ex .titlebar.svelte-zxn9ex:before{background:#807c78}figcaption.svelte-zxn9ex.svelte-zxn9ex{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}',
  map: '{"version":3,"file":"console.svelte","sources":["console.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nexport let source = \\"\\";\\nexport let dark = false;\\nexport let shadow = \\"grey\\";\\nexport let narrow = false;\\nexport let skipToEnd = false;\\nexport let alt = \\"\\";\\n$: colors = dark\\n    ? {\\n        black: \\"#F9F9F9\\",\\n        orange: \\"#fc8800\\",\\n        green: \\"#57c700\\",\\n        blue: \\"#FFE4BC\\",\\n    }\\n    : {\\n        black: \\"rgba(18, 16, 12, 0.7)\\",\\n        orange: \\"#fc8800\\",\\n        green: \\"#57c700\\",\\n        blue: \\"#0099EF\\",\\n    };\\nlet wrapper;\\nlet canvas;\\nfunction debounce(fn, wait, callFirst) {\\n    var timeout;\\n    return function () {\\n        if (!wait) {\\n            return fn.apply(this, arguments);\\n        }\\n        var context = this;\\n        var args = arguments;\\n        var callNow = callFirst && !timeout;\\n        clearTimeout(timeout);\\n        timeout = setTimeout(function () {\\n            timeout = null;\\n            if (!callNow) {\\n                return fn.apply(context, args);\\n            }\\n        }, wait);\\n        if (callNow) {\\n            return fn.apply(this, arguments);\\n        }\\n    };\\n}\\nonMount(() => {\\n    let font_size;\\n    let line_height;\\n    let margins;\\n    let c = canvas.getContext(\\"2d\\");\\n    let width;\\n    let height;\\n    let char_width;\\n    let char_max;\\n    function resize() {\\n        width = wrapper.clientWidth;\\n        height = wrapper.clientHeight;\\n        let dpr = devicePixelRatio > 1 ? 2 : 1;\\n        canvas.width = dpr * width;\\n        canvas.height = dpr * height;\\n        canvas.style.width = width + \\"px\\";\\n        canvas.style.height = height + \\"px\\";\\n        c.scale(dpr, dpr);\\n        if (width < 500) {\\n            font_size = 12;\\n            line_height = 19;\\n            margins = {\\n                top: 52 + line_height,\\n                right: 10,\\n                bottom: 15,\\n                left: 15,\\n            };\\n        }\\n        else {\\n            font_size = narrow ? 16 : 18;\\n            line_height = narrow ? 28 : 33;\\n            margins = {\\n                top: 52 + line_height,\\n                right: narrow ? 20 : 40,\\n                bottom: narrow ? 20 : 48,\\n                left: narrow ? 20 : 40,\\n            };\\n        }\\n        c.font = `${font_size}px SF Mono, monospace`;\\n        c.fillStyle = colors.black;\\n        char_width = c.measureText(\\" \\".repeat(64)).width / 64;\\n        char_max = Math.floor((width - margins.left - margins.right) / char_width);\\n    }\\n    resize();\\n    function parse(source) {\\n        let color = colors.black;\\n        let lines = [];\\n        let line;\\n        let offset = 0;\\n        function new_line() {\\n            offset = 0;\\n            line = { input: [], output: [] };\\n            lines.push(line);\\n        }\\n        function parse_chunk(type, chunk) {\\n            chunk.replace(/(\\\\u001b\\\\[30m)|(\\\\u001b\\\\[31m)|(\\\\u001b\\\\[32m)|(\\\\u001b\\\\[33m)|(\\\\u001b\\\\[34m)|(\\\\u001b\\\\[39m)|([^\\\\u001b]+)/g, (_, c_black, c_red, c_green, c_yellow, c_blue, c_default, str) => {\\n                if (c_black)\\n                    color = colors.black;\\n                if (c_red)\\n                    color = colors.orange;\\n                if (c_green)\\n                    color = colors.green;\\n                if (c_yellow)\\n                    color = colors.orange;\\n                if (c_blue)\\n                    color = colors.blue;\\n                if (c_default)\\n                    color = colors.black;\\n                if (str) {\\n                    let start = 0;\\n                    let end = Math.min(str.length, char_max - offset);\\n                    let text;\\n                    while ((text = str.slice(start, end))) {\\n                        line[type].push({ type, color, text });\\n                        offset += end - start;\\n                        if (offset >= char_max && end < str.length) {\\n                            new_line();\\n                        }\\n                        start = end;\\n                        end = Math.min(str.length, end + char_max - offset);\\n                    }\\n                }\\n            });\\n        }\\n        for (let str of source.split(\\"\\\\n\\")) {\\n            new_line();\\n            if (str.indexOf(\\"$\\") !== -1 ||\\n                str.indexOf(\\">\\") !== -1 ||\\n                str.indexOf(\\"#\\") !== -1) {\\n                let [, prompt, text] = str.match(/([^$>#]+(?:[$>#]))(.*)/);\\n                parse_chunk(\\"output\\", prompt);\\n                parse_chunk(\\"input\\", text);\\n            }\\n            else {\\n                parse_chunk(\\"output\\", str);\\n            }\\n        }\\n        function count_characters(runs) {\\n            return runs.reduce((acc, cur) => acc + cur.text.length, 0);\\n        }\\n        for (let line of lines) {\\n            line.input.characters = count_characters(line.input);\\n            line.output.characters = count_characters(line.output);\\n        }\\n        return lines;\\n    }\\n    let state;\\n    function init() {\\n        let lines = parse(source);\\n        if (skipToEnd) {\\n            state = {\\n                tick: -1,\\n                line: lines.length - 1,\\n                character: lines[lines.length - 1].input.characters - 1,\\n                lines: lines,\\n                triggers: {\\n                    line: 0,\\n                    character: -1,\\n                },\\n            };\\n        }\\n        else {\\n            state = {\\n                tick: -1,\\n                line: -1,\\n                character: -1,\\n                lines: lines,\\n                triggers: {\\n                    line: 0,\\n                    character: -1,\\n                },\\n            };\\n        }\\n    }\\n    init();\\n    function now(trigger) {\\n        return state.tick === trigger;\\n    }\\n    function random(min, max) {\\n        return Math.floor(min + (max - min) * Math.random());\\n    }\\n    function update() {\\n        state.tick += 1;\\n        if (now(state.triggers.line)) {\\n            if (state.line < state.lines.length - 1) {\\n                state.line += 1;\\n                state.character = 0;\\n                if (state.character < state.lines[state.line].input.characters - 1) {\\n                    state.triggers.character = state.tick + random(2, 3);\\n                }\\n                else {\\n                    state.triggers.line = state.tick + random(1, 2);\\n                }\\n            }\\n        }\\n        if (now(state.triggers.character)) {\\n            if (state.character < state.lines[state.line].input.characters - 1) {\\n                state.character += 1;\\n                state.triggers.character = state.tick + random(2, 3);\\n            }\\n            else {\\n                if (state.line < state.lines.length - 1) {\\n                    if (state.lines[state.line + 1].output.characters) {\\n                        state.triggers.line = state.tick + random(20, 30);\\n                    }\\n                    else {\\n                        state.triggers.line = state.tick + random(2, 3);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    function draw(time) {\\n        c.clearRect(0, 0, width, height);\\n        let scroll_y = 0;\\n        if (state.line * line_height + margins.top >= height - margins.bottom) {\\n            scroll_y =\\n                state.line * line_height - height + margins.top + margins.bottom;\\n        }\\n        for (let i = 0; i <= state.line; i++) {\\n            let offset = 0;\\n            for (let run of state.lines[i].output) {\\n                c.fillStyle = run.color;\\n                c.fillText(run.text, margins.left + offset * char_width, margins.top + line_height * i - scroll_y);\\n                offset += run.text.length;\\n            }\\n            let prompt_length = offset;\\n            for (let run of state.lines[i].input) {\\n                c.fillStyle = run.color;\\n                if (i === state.line) {\\n                    let run_length = state.character - (offset - prompt_length) + 1;\\n                    c.fillText(run.text.slice(0, run_length), margins.left + offset * char_width, margins.top + line_height * i - scroll_y);\\n                    if (time % 1000 < 500) {\\n                        c.fillRect(margins.left + (offset + run_length) * char_width + 0.5, margins.top + line_height * i - scroll_y - line_height * 0.575, char_width, line_height * 0.7);\\n                    }\\n                }\\n                else {\\n                    c.fillText(run.text, margins.left + offset * char_width, margins.top + line_height * i - scroll_y);\\n                }\\n                offset += run.text.length;\\n            }\\n        }\\n    }\\n    let handle_resize = debounce(() => {\\n        if (width === wrapper.clientWidth) {\\n            // iOS Safari gives us a resize event when the toolbar is hidden or shown.\\n            // We don\'t want to invalidate the layout then, as the width stays the same.\\n            return;\\n        }\\n        // If the width has changed, we invalidate the layout as the total number of lines may have changed.\\n        resize();\\n        init();\\n    }, 1000, false);\\n    window.addEventListener(\\"resize\\", handle_resize);\\n    let mounted = true;\\n    let intersecting = false;\\n    const observer = new IntersectionObserver(([entry]) => {\\n        intersecting = entry.isIntersecting;\\n    });\\n    observer.observe(wrapper);\\n    function render(time) {\\n        if (!mounted) {\\n            return;\\n        }\\n        requestAnimationFrame(render);\\n        if (!intersecting) {\\n            return;\\n        }\\n        update();\\n        draw(time);\\n    }\\n    requestAnimationFrame(render);\\n    return () => {\\n        mounted = false;\\n        window.removeEventListener(\\"resize\\", handle_resize);\\n        observer.disconnect();\\n    };\\n});\\n</script>\\n\\n<style>.aspect{position:relative;height:100%;max-height:500px;min-height:240px}.aspect:before{content:\\"\\";display:block;padding-bottom:125%}.aspect.narrow:before{padding-bottom:70%}@media (min-width:769px){.aspect:before{padding-bottom:80%}.aspect.narrow:before{padding-bottom:40%}}.wrapper{position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden;background:#f9f9f9;border-radius:20px;transform:translateZ(0)}.wrapper.dark{background:rgba(18,16,12,.7)}.wrapper.shadowGrey{box-shadow:0 2px 5px rgba(0,0,0,.08),0 5px 20px rgba(0,0,0,.12)}.wrapper.shadowBrand{box-shadow:var(--shadow-brand)}.titlebar{z-index:1;position:absolute;top:0;left:0;width:100%;height:48px;background:hsla(0,0%,97.6%,.9);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px)}.dark .titlebar{background:#696662}.titlebar:before{content:\\"\\";display:block;width:16px;height:16px;position:absolute;top:16px;left:16px;border-radius:8px;background:#e7e7e7}.dark .titlebar:before{background:#807c78}figcaption{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}</style>\\n\\n<div class=\\"aspect\\" class:narrow>\\n  <figure\\n    class=\\"wrapper\\"\\n    class:dark\\n    class:shadowGrey={shadow === \\"grey\\"}\\n    class:shadowBrand={shadow === \\"brand\\"}\\n    bind:this={wrapper}\\n  >\\n    <div class=\\"titlebar\\" />\\n    <canvas bind:this={canvas} />\\n    {#if alt}\\n      <figcaption>{alt}</figcaption>\\n    {/if}\\n  </figure>\\n</div>\\n"],"names":[],"mappings":"AA2RO,mCAAO,CAAC,SAAS,QAAQ,CAAC,OAAO,IAAI,CAAC,WAAW,KAAK,CAAC,WAAW,KAAK,CAAC,mCAAO,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,KAAK,CAAC,eAAe,IAAI,CAAC,OAAO,mCAAO,OAAO,CAAC,eAAe,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,mCAAO,OAAO,CAAC,eAAe,GAAG,CAAC,OAAO,mCAAO,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,oCAAQ,CAAC,SAAS,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS,MAAM,CAAC,WAAW,OAAO,CAAC,cAAc,IAAI,CAAC,UAAU,WAAW,CAAC,CAAC,CAAC,QAAQ,iCAAK,CAAC,WAAW,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,QAAQ,uCAAW,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,wCAAY,CAAC,WAAW,IAAI,cAAc,CAAC,CAAC,qCAAS,CAAC,QAAQ,CAAC,CAAC,SAAS,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,WAAW,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,wBAAwB,KAAK,IAAI,CAAC,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,mBAAK,CAAC,uBAAS,CAAC,WAAW,OAAO,CAAC,qCAAS,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,KAAK,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS,QAAQ,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,cAAc,GAAG,CAAC,WAAW,OAAO,CAAC,mBAAK,CAAC,uBAAS,OAAO,CAAC,WAAW,OAAO,CAAC,sCAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,SAAS,MAAM,CAAC,SAAS,QAAQ,CAAC,YAAY,MAAM,CAAC,MAAM,GAAG,CAAC"}'
};
function debounce(fn, wait, callFirst) {
  var timeout;
  return function() {
    if (!wait) {
      return fn.apply(this, arguments);
    }
    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(function() {
      timeout = null;
      if (!callNow) {
        return fn.apply(context, args);
      }
    }, wait);
    if (callNow) {
      return fn.apply(this, arguments);
    }
  };
}
const Console = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let colors;
  let {source = ""} = $$props;
  let {dark = false} = $$props;
  let {shadow = "grey"} = $$props;
  let {narrow = false} = $$props;
  let {skipToEnd = false} = $$props;
  let {alt = ""} = $$props;
  let wrapper;
  let canvas;
  onMount(() => {
    let font_size;
    let line_height;
    let margins;
    let c = canvas.getContext("2d");
    let width;
    let height;
    let char_width;
    let char_max;
    function resize() {
      width = wrapper.clientWidth;
      height = wrapper.clientHeight;
      let dpr = devicePixelRatio > 1 ? 2 : 1;
      canvas.width = dpr * width;
      canvas.height = dpr * height;
      canvas.style.width = width + "px";
      canvas.style.height = height + "px";
      c.scale(dpr, dpr);
      if (width < 500) {
        font_size = 12;
        line_height = 19;
        margins = {
          top: 52 + line_height,
          right: 10,
          bottom: 15,
          left: 15
        };
      } else {
        font_size = narrow ? 16 : 18;
        line_height = narrow ? 28 : 33;
        margins = {
          top: 52 + line_height,
          right: narrow ? 20 : 40,
          bottom: narrow ? 20 : 48,
          left: narrow ? 20 : 40
        };
      }
      c.font = `${font_size}px SF Mono, monospace`;
      c.fillStyle = colors.black;
      char_width = c.measureText(" ".repeat(64)).width / 64;
      char_max = Math.floor((width - margins.left - margins.right) / char_width);
    }
    resize();
    function parse2(source2) {
      let color = colors.black;
      let lines = [];
      let line;
      let offset = 0;
      function new_line() {
        offset = 0;
        line = {input: [], output: []};
        lines.push(line);
      }
      function parse_chunk(type, chunk) {
        chunk.replace(/(\u001b\[30m)|(\u001b\[31m)|(\u001b\[32m)|(\u001b\[33m)|(\u001b\[34m)|(\u001b\[39m)|([^\u001b]+)/g, (_, c_black, c_red, c_green, c_yellow, c_blue, c_default, str) => {
          if (c_black)
            color = colors.black;
          if (c_red)
            color = colors.orange;
          if (c_green)
            color = colors.green;
          if (c_yellow)
            color = colors.orange;
          if (c_blue)
            color = colors.blue;
          if (c_default)
            color = colors.black;
          if (str) {
            let start = 0;
            let end = Math.min(str.length, char_max - offset);
            let text;
            while (text = str.slice(start, end)) {
              line[type].push({type, color, text});
              offset += end - start;
              if (offset >= char_max && end < str.length) {
                new_line();
              }
              start = end;
              end = Math.min(str.length, end + char_max - offset);
            }
          }
        });
      }
      for (let str of source2.split("\n")) {
        new_line();
        if (str.indexOf("$") !== -1 || str.indexOf(">") !== -1 || str.indexOf("#") !== -1) {
          let [, prompt, text] = str.match(/([^$>#]+(?:[$>#]))(.*)/);
          parse_chunk("output", prompt);
          parse_chunk("input", text);
        } else {
          parse_chunk("output", str);
        }
      }
      function count_characters(runs) {
        return runs.reduce((acc, cur) => acc + cur.text.length, 0);
      }
      for (let line2 of lines) {
        line2.input.characters = count_characters(line2.input);
        line2.output.characters = count_characters(line2.output);
      }
      return lines;
    }
    let state;
    function init2() {
      let lines = parse2(source);
      if (skipToEnd) {
        state = {
          tick: -1,
          line: lines.length - 1,
          character: lines[lines.length - 1].input.characters - 1,
          lines,
          triggers: {line: 0, character: -1}
        };
      } else {
        state = {
          tick: -1,
          line: -1,
          character: -1,
          lines,
          triggers: {line: 0, character: -1}
        };
      }
    }
    init2();
    function now(trigger) {
      return state.tick === trigger;
    }
    function random(min, max2) {
      return Math.floor(min + (max2 - min) * Math.random());
    }
    function update() {
      state.tick += 1;
      if (now(state.triggers.line)) {
        if (state.line < state.lines.length - 1) {
          state.line += 1;
          state.character = 0;
          if (state.character < state.lines[state.line].input.characters - 1) {
            state.triggers.character = state.tick + random(2, 3);
          } else {
            state.triggers.line = state.tick + random(1, 2);
          }
        }
      }
      if (now(state.triggers.character)) {
        if (state.character < state.lines[state.line].input.characters - 1) {
          state.character += 1;
          state.triggers.character = state.tick + random(2, 3);
        } else {
          if (state.line < state.lines.length - 1) {
            if (state.lines[state.line + 1].output.characters) {
              state.triggers.line = state.tick + random(20, 30);
            } else {
              state.triggers.line = state.tick + random(2, 3);
            }
          }
        }
      }
    }
    function draw(time) {
      c.clearRect(0, 0, width, height);
      let scroll_y = 0;
      if (state.line * line_height + margins.top >= height - margins.bottom) {
        scroll_y = state.line * line_height - height + margins.top + margins.bottom;
      }
      for (let i = 0; i <= state.line; i++) {
        let offset = 0;
        for (let run2 of state.lines[i].output) {
          c.fillStyle = run2.color;
          c.fillText(run2.text, margins.left + offset * char_width, margins.top + line_height * i - scroll_y);
          offset += run2.text.length;
        }
        let prompt_length = offset;
        for (let run2 of state.lines[i].input) {
          c.fillStyle = run2.color;
          if (i === state.line) {
            let run_length = state.character - (offset - prompt_length) + 1;
            c.fillText(run2.text.slice(0, run_length), margins.left + offset * char_width, margins.top + line_height * i - scroll_y);
            if (time % 1e3 < 500) {
              c.fillRect(margins.left + (offset + run_length) * char_width + 0.5, margins.top + line_height * i - scroll_y - line_height * 0.575, char_width, line_height * 0.7);
            }
          } else {
            c.fillText(run2.text, margins.left + offset * char_width, margins.top + line_height * i - scroll_y);
          }
          offset += run2.text.length;
        }
      }
    }
    let handle_resize = debounce(() => {
      if (width === wrapper.clientWidth) {
        return;
      }
      resize();
      init2();
    }, 1e3, false);
    window.addEventListener("resize", handle_resize);
    let mounted = true;
    let intersecting = false;
    const observer = new IntersectionObserver(([entry]) => {
      intersecting = entry.isIntersecting;
    });
    observer.observe(wrapper);
    function render2(time) {
      if (!mounted) {
        return;
      }
      requestAnimationFrame(render2);
      if (!intersecting) {
        return;
      }
      update();
      draw(time);
    }
    requestAnimationFrame(render2);
    return () => {
      mounted = false;
      window.removeEventListener("resize", handle_resize);
      observer.disconnect();
    };
  });
  if ($$props.source === void 0 && $$bindings.source && source !== void 0)
    $$bindings.source(source);
  if ($$props.dark === void 0 && $$bindings.dark && dark !== void 0)
    $$bindings.dark(dark);
  if ($$props.shadow === void 0 && $$bindings.shadow && shadow !== void 0)
    $$bindings.shadow(shadow);
  if ($$props.narrow === void 0 && $$bindings.narrow && narrow !== void 0)
    $$bindings.narrow(narrow);
  if ($$props.skipToEnd === void 0 && $$bindings.skipToEnd && skipToEnd !== void 0)
    $$bindings.skipToEnd(skipToEnd);
  if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0)
    $$bindings.alt(alt);
  $$result.css.add(css$R);
  colors = dark ? {
    black: "#F9F9F9",
    orange: "#fc8800",
    green: "#57c700",
    blue: "#FFE4BC"
  } : {
    black: "rgba(18, 16, 12, 0.7)",
    orange: "#fc8800",
    green: "#57c700",
    blue: "#0099EF"
  };
  return `<div class="${["aspect svelte-zxn9ex", narrow ? "narrow" : ""].join(" ").trim()}"><figure class="${[
    "wrapper svelte-zxn9ex",
    (dark ? "dark" : "") + " " + (shadow === "grey" ? "shadowGrey" : "") + " " + (shadow === "brand" ? "shadowBrand" : "")
  ].join(" ").trim()}"${add_attribute("this", wrapper, 1)}><div class="${"titlebar svelte-zxn9ex"}"></div>
    <canvas${add_attribute("this", canvas, 1)}></canvas>
    ${alt ? `<figcaption class="${"svelte-zxn9ex"}">${escape(alt)}</figcaption>` : ``}</figure></div>`;
});
var feature_svelte$1 = ".feature.svelte-16fb04s.svelte-16fb04s{display:flex;justify-content:space-between;min-height:340px}@media(max-width:800px){.feature.svelte-16fb04s.svelte-16fb04s{flex-direction:column}}.feature__text.svelte-16fb04s.svelte-16fb04s{display:flex;flex-direction:column;justify-content:space-between;flex:0 0 50%}@media(min-width:801px){.feature__text.svelte-16fb04s.svelte-16fb04s{margin:var(--medium) 0}}.feature.svelte-16fb04s .buttons-wrapper.svelte-16fb04s{justify-content:flex-start}.feature__preview.svelte-16fb04s.svelte-16fb04s{flex:0 0 45%}@media(max-width:800px){.feature__preview.svelte-16fb04s.svelte-16fb04s{margin-top:var(--small)}.feature__preview.svelte-16fb04s img.svelte-16fb04s{margin-left:auto;margin-right:auto}}.feature__preview.svelte-16fb04s img.svelte-16fb04s{display:block;max-height:500px;border-radius:1.25rem;box-shadow:0 1.25rem 2.5rem rgba(0,0,0,.1)}@media(max-width:850px){.feature__buttons.svelte-16fb04s.svelte-16fb04s{margin-top:var(--xx-small)}}";
const css$Q = {
  code: ".feature.svelte-16fb04s.svelte-16fb04s{display:flex;justify-content:space-between;min-height:340px}@media(max-width:800px){.feature.svelte-16fb04s.svelte-16fb04s{flex-direction:column}}.feature__text.svelte-16fb04s.svelte-16fb04s{display:flex;flex-direction:column;justify-content:space-between;flex:0 0 50%}@media(min-width:801px){.feature__text.svelte-16fb04s.svelte-16fb04s{margin:var(--medium) 0}}.feature.svelte-16fb04s .buttons-wrapper.svelte-16fb04s{justify-content:flex-start}.feature__preview.svelte-16fb04s.svelte-16fb04s{flex:0 0 45%}@media(max-width:800px){.feature__preview.svelte-16fb04s.svelte-16fb04s{margin-top:var(--small)}.feature__preview.svelte-16fb04s img.svelte-16fb04s{margin-left:auto;margin-right:auto}}.feature__preview.svelte-16fb04s img.svelte-16fb04s{display:block;max-height:500px;border-radius:1.25rem;box-shadow:0 1.25rem 2.5rem rgba(0,0,0,.1)}@media(max-width:850px){.feature__buttons.svelte-16fb04s.svelte-16fb04s{margin-top:var(--xx-small)}}",
  map: '{"version":3,"file":"feature.svelte","sources":["feature.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nimport Console from \\"./console.svelte\\";\\nimport Section from \\"./section.svelte\\";\\nexport let feature;\\nconst { documentationLink, moreButton, paragraph, title, terminalSource, image, } = feature;\\n</script>\\n\\n<style lang=\\"scss\\">.feature{display:flex;justify-content:space-between;min-height:340px}@media (max-width:800px){.feature{flex-direction:column}}.feature__text{display:flex;flex-direction:column;justify-content:space-between;flex:0 0 50%}@media (min-width:801px){.feature__text{margin:var(--medium) 0}}.feature .buttons-wrapper{justify-content:flex-start}.feature__preview{flex:0 0 45%}@media (max-width:800px){.feature__preview{margin-top:var(--small)}.feature__preview img{margin-left:auto;margin-right:auto}}.feature__preview img{display:block;max-height:500px;border-radius:1.25rem;box-shadow:0 1.25rem 2.5rem rgba(0,0,0,.1)}@media (max-width:850px){.feature__buttons{margin-top:var(--xx-small)}}</style>\\n\\n<Section>\\n  <div class=\\"feature\\">\\n    <div class=\\"feature__text\\">\\n      <div class=\\"text-large\\">\\n        <h2 class=\\"h3\\">{title}</h2>\\n        <p>{paragraph}</p>\\n      </div>\\n      <div\\n        class={`feature__buttons ${\\n          moreButton && documentationLink ? \\"buttons-wrapper\\" : \\"\\"\\n        }`}\\n      >\\n        <a href={moreButton.href} class=\\"btn-primary\\">\\n          {moreButton.text}\\n        </a>\\n        {#if documentationLink}\\n          <a href={documentationLink} class=\\"btn-secondary\\">Documentation </a>\\n        {/if}\\n      </div>\\n    </div>\\n    <div class=\\"feature__preview\\">\\n      {#if terminalSource}\\n        <Console source={terminalSource} />\\n      {/if}\\n      {#if image}\\n        <img src={image.src} alt={image.alt} />\\n        <!--height=\\"{image.height}\\" width=\\"{image.width}\\" />-->\\n      {/if}\\n    </div>\\n  </div>\\n</Section>\\n"],"names":[],"mappings":"AAOmB,sCAAQ,CAAC,QAAQ,IAAI,CAAC,gBAAgB,aAAa,CAAC,WAAW,KAAK,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sCAAQ,CAAC,eAAe,MAAM,CAAC,CAAC,4CAAc,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,gBAAgB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,4CAAc,CAAC,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,uBAAQ,CAAC,+BAAgB,CAAC,gBAAgB,UAAU,CAAC,+CAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,+CAAiB,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,gCAAiB,CAAC,kBAAG,CAAC,YAAY,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,gCAAiB,CAAC,kBAAG,CAAC,QAAQ,KAAK,CAAC,WAAW,KAAK,CAAC,cAAc,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,+CAAiB,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,CAAC"}'
};
const Feature$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {feature} = $$props;
  const {documentationLink, moreButton, paragraph, title, terminalSource: terminalSource2, image} = feature;
  if ($$props.feature === void 0 && $$bindings.feature && feature !== void 0)
    $$bindings.feature(feature);
  $$result.css.add(css$Q);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<div class="${"feature svelte-16fb04s"}"><div class="${"feature__text svelte-16fb04s"}"><div class="${"text-large"}"><h2 class="${"h3"}">${escape(title)}</h2>
        <p>${escape(paragraph)}</p></div>
      <div class="${escape(null_to_empty(`feature__buttons ${moreButton && documentationLink ? "buttons-wrapper" : ""}`)) + " svelte-16fb04s"}"><a${add_attribute("href", moreButton.href, 0)} class="${"btn-primary"}">${escape(moreButton.text)}</a>
        ${documentationLink ? `<a${add_attribute("href", documentationLink, 0)} class="${"btn-secondary"}">Documentation </a>` : ``}</div></div>
    <div class="${"feature__preview svelte-16fb04s"}">${terminalSource2 ? `${validate_component(Console, "Console").$$render($$result, {source: terminalSource2}, {}, {})}` : ``}
      ${image ? `<img${add_attribute("src", image.src, 0)}${add_attribute("alt", image.alt, 0)} class="${"svelte-16fb04s"}">
        ` : ``}</div></div>`
  })}`;
});
const Features$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {features: features2 = []} = $$props;
  if ($$props.features === void 0 && $$bindings.features && features2 !== void 0)
    $$bindings.features(features2);
  return `${each(features2, (feature) => `${validate_component(Feature$1, "Feature").$$render($$result, {feature}, {}, {})}`)}`;
});
var chooseProject_svelte = '.row.svelte-rpsjvw{width:100%}h2.svelte-rpsjvw{text-align:center;max-width:67.7rem;margin:0 auto}@media(max-width:1194px){h2.svelte-rpsjvw{font-size:var(--h3)}}@media(max-width:682px){h2.svelte-rpsjvw{max-width:23.75rem}}@media(max-width:382px){h2.svelte-rpsjvw{font-size:1.7rem;min-width:292px}}del.svelte-rpsjvw{text-decoration:none}.desktop.svelte-rpsjvw{display:none}@media(min-width:683px){.desktop.svelte-rpsjvw{display:inline;display:initial}.mobile.svelte-rpsjvw{display:none}}span.svelte-rpsjvw{transition:all .2s;display:inline-block;position:relative;color:inherit}.strikethrough.svelte-rpsjvw{transition:all .5s cubic-bezier(.55,0,.1,1);color:var(--light-grey)}.strikethrough.svelte-rpsjvw:after{content:"";position:absolute;display:block;width:100%;height:3px;margin-top:-.6em;transform-origin:center left;-webkit-animation:svelte-rpsjvw-strikethrough .6s cubic-bezier(.55,0,.1,1) .4s 1 forwards;animation:svelte-rpsjvw-strikethrough .6s cubic-bezier(.55,0,.1,1) .4s 1 forwards;transition:transform .4s cubic-bezier(.55,0,.1,1)}@-webkit-keyframes svelte-rpsjvw-strikethrough{0%{transform:scaleX(0);background:var(--light-grey)}to{transform:scaleX(1);background:var(--light-grey)}}@keyframes svelte-rpsjvw-strikethrough{0%{transform:scaleX(0);background:var(--light-grey)}to{transform:scaleX(1);background:var(--light-grey)}}';
const css$P = {
  code: '.row.svelte-rpsjvw{width:100%}h2.svelte-rpsjvw{text-align:center;max-width:67.7rem;margin:0 auto}@media(max-width:1194px){h2.svelte-rpsjvw{font-size:var(--h3)}}@media(max-width:682px){h2.svelte-rpsjvw{max-width:23.75rem}}@media(max-width:382px){h2.svelte-rpsjvw{font-size:1.7rem;min-width:292px}}del.svelte-rpsjvw{text-decoration:none}.desktop.svelte-rpsjvw{display:none}@media(min-width:683px){.desktop.svelte-rpsjvw{display:inline;display:initial}.mobile.svelte-rpsjvw{display:none}}span.svelte-rpsjvw{transition:all .2s;display:inline-block;position:relative;color:inherit}.strikethrough.svelte-rpsjvw{transition:all .5s cubic-bezier(.55,0,.1,1);color:var(--light-grey)}.strikethrough.svelte-rpsjvw:after{content:"";position:absolute;display:block;width:100%;height:3px;margin-top:-.6em;transform-origin:center left;-webkit-animation:svelte-rpsjvw-strikethrough .6s cubic-bezier(.55,0,.1,1) .4s 1 forwards;animation:svelte-rpsjvw-strikethrough .6s cubic-bezier(.55,0,.1,1) .4s 1 forwards;transition:transform .4s cubic-bezier(.55,0,.1,1)}@-webkit-keyframes svelte-rpsjvw-strikethrough{0%{transform:scaleX(0);background:var(--light-grey)}to{transform:scaleX(1);background:var(--light-grey)}}@keyframes svelte-rpsjvw-strikethrough{0%{transform:scaleX(0);background:var(--light-grey)}to{transform:scaleX(1);background:var(--light-grey)}}',
  map: `{"version":3,"file":"choose-project.svelte","sources":["choose-project.svelte"],"sourcesContent":["<script>\\n  import { onMount } from \\"svelte\\";\\n  import Section from \\"../section.svelte\\";\\n\\n  let animatedTexts = {\\n    desktop: [\\n      {\\n        isVisible: false,\\n        text: \\"check dependencies, checkout branch, view\\",\\n      },\\n      {\\n        isVisible: false,\\n        text: \\"readme.txt, install tools, run build, run test,\\",\\n      },\\n    ],\\n    mobile: [\\n      {\\n        isVisible: false,\\n        text: \\"check dependencies,\\",\\n      },\\n      {\\n        isVisible: false,\\n        text: \\"checkout branch, view\\",\\n      },\\n      {\\n        isVisible: false,\\n        text: \\"readme.txt, install tools,\\",\\n      },\\n      {\\n        isVisible: false,\\n        text: \\"run build, run test,\\",\\n      },\\n    ],\\n  };\\n\\n  /*\\n   * In order to trigger the animated text at the right time on both desktop and mobile,\\n   * we kick off the animation when the nav element starts to move out of the viewport\\n   * and the next section starts to enter the viewport. At that time, the animated Gitpod\\n   * benefits text is placed roughly at the center of the browser's viewport.\\n   */\\n  let isTopHidden = false;\\n  let isBottomShown = false;\\n  let hasAnimated = false;\\n\\n  const startAnimation = () => {\\n    let t = 0;\\n    Object.entries(animatedTexts).forEach(([, texts]) =>\\n      texts.forEach((text) => {\\n        setTimeout(() => {\\n          text.isVisible = true;\\n          animatedTexts = animatedTexts; // This triggers Svelte's reactivity\\n        }, t);\\n        t = t + 400;\\n      })\\n    );\\n    hasAnimated = true;\\n  };\\n\\n  const manageAnimation = () => {\\n    if (isTopHidden && isBottomShown && !hasAnimated) {\\n      startAnimation();\\n    }\\n  };\\n\\n  onMount(() => {\\n    const callbackTop = (entries) => {\\n      entries.forEach((entry) => {\\n        isTopHidden = !entry.isIntersecting;\\n      });\\n      manageAnimation();\\n    };\\n\\n    const callbackBottom = (entries) => {\\n      entries.forEach((entry) => {\\n        isBottomShown = entry.isIntersecting;\\n      });\\n      manageAnimation();\\n    };\\n\\n    const observerTop = new IntersectionObserver(callbackTop, {\\n      threshold: [0.9],\\n    });\\n    const observerBottom = new IntersectionObserver(callbackBottom, {\\n      threshold: [0],\\n    });\\n    const targetTop = document.querySelector(\\n      \\"#choose-project-observer-target-top\\"\\n    );\\n    const targetBottom = document.querySelector(\\n      \\"#choose-project-observer-target-bottom\\"\\n    );\\n    observerTop.observe(targetTop);\\n    observerBottom.observe(targetBottom);\\n\\n    return () => {\\n      observerTop.disconnect();\\n      observerBottom.disconnect();\\n    };\\n  });\\n</script>\\n\\n<style lang=\\"scss\\">.row{width:100%}h2{text-align:center;max-width:67.7rem;margin:0 auto}@media (max-width:1194px){h2{font-size:var(--h3)}}@media (max-width:682px){h2{max-width:23.75rem}}@media (max-width:382px){h2{font-size:1.7rem;min-width:292px}}del{text-decoration:none}.desktop{display:none}@media (min-width:683px){.desktop{display:inline;display:initial}.mobile{display:none}}span{transition:all .2s;display:inline-block;position:relative;color:inherit}.strikethrough{transition:all .5s cubic-bezier(.55,0,.1,1);color:var(--light-grey)}.strikethrough:after{content:\\"\\";position:absolute;display:block;width:100%;height:3px;margin-top:-.6em;transform-origin:center left;-webkit-animation:strikethrough .6s cubic-bezier(.55,0,.1,1) .4s 1 forwards;animation:strikethrough .6s cubic-bezier(.55,0,.1,1) .4s 1 forwards;transition:transform .4s cubic-bezier(.55,0,.1,1)}@-webkit-keyframes strikethrough{0%{transform:scaleX(0);background:var(--light-grey)}to{transform:scaleX(1);background:var(--light-grey)}}@keyframes strikethrough{0%{transform:scaleX(0);background:var(--light-grey)}to{transform:scaleX(1);background:var(--light-grey)}}</style>\\n\\n<div class=\\"row\\">\\n  <Section>\\n    <h2 class=\\"h1\\">\\n      Select project,\\n      <br />\\n      {#each Object.entries(animatedTexts) as [device, texts]}\\n        <del class={device}>\\n          {#each texts as { isVisible, text }}\\n            <span class:strikethrough={isVisible}>{text}</span>\\n          {/each}\\n        </del>\\n      {/each}\\n      <br />\\n      start coding.\\n    </h2>\\n  </Section>\\n</div>\\n"],"names":[],"mappings":"AAsGmB,kBAAI,CAAC,MAAM,IAAI,CAAC,gBAAE,CAAC,WAAW,MAAM,CAAC,UAAU,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,gBAAE,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,gBAAE,CAAC,UAAU,QAAQ,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,gBAAE,CAAC,UAAU,MAAM,CAAC,UAAU,KAAK,CAAC,CAAC,iBAAG,CAAC,gBAAgB,IAAI,CAAC,sBAAQ,CAAC,QAAQ,IAAI,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sBAAQ,CAAC,QAAQ,MAAM,CAAC,QAAQ,OAAO,CAAC,qBAAO,CAAC,QAAQ,IAAI,CAAC,CAAC,kBAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,QAAQ,YAAY,CAAC,SAAS,QAAQ,CAAC,MAAM,OAAO,CAAC,4BAAc,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,4BAAc,MAAM,CAAC,QAAQ,EAAE,CAAC,SAAS,QAAQ,CAAC,QAAQ,KAAK,CAAC,MAAM,IAAI,CAAC,OAAO,GAAG,CAAC,WAAW,KAAK,CAAC,iBAAiB,MAAM,CAAC,IAAI,CAAC,kBAAkB,2BAAa,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,2BAAa,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,SAAS,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,2BAAa,CAAC,EAAE,CAAC,UAAU,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,YAAY,CAAC,CAAC,EAAE,CAAC,UAAU,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,YAAY,CAAC,CAAC,CAAC,WAAW,2BAAa,CAAC,EAAE,CAAC,UAAU,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,YAAY,CAAC,CAAC,EAAE,CAAC,UAAU,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,YAAY,CAAC,CAAC,CAAC"}`
};
const Choose_project = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let animatedTexts = {
    desktop: [
      {
        isVisible: false,
        text: "check dependencies, checkout branch, view"
      },
      {
        isVisible: false,
        text: "readme.txt, install tools, run build, run test,"
      }
    ],
    mobile: [
      {
        isVisible: false,
        text: "check dependencies,"
      },
      {
        isVisible: false,
        text: "checkout branch, view"
      },
      {
        isVisible: false,
        text: "readme.txt, install tools,"
      },
      {
        isVisible: false,
        text: "run build, run test,"
      }
    ]
  };
  let isTopHidden = false;
  let isBottomShown = false;
  let hasAnimated = false;
  const startAnimation = () => {
    let t = 0;
    Object.entries(animatedTexts).forEach(([, texts]) => texts.forEach((text) => {
      setTimeout(() => {
        text.isVisible = true;
        animatedTexts = animatedTexts;
      }, t);
      t = t + 400;
    }));
    hasAnimated = true;
  };
  const manageAnimation = () => {
    if (isTopHidden && isBottomShown && !hasAnimated) {
      startAnimation();
    }
  };
  onMount(() => {
    const callbackTop = (entries) => {
      entries.forEach((entry) => {
        isTopHidden = !entry.isIntersecting;
      });
      manageAnimation();
    };
    const callbackBottom = (entries) => {
      entries.forEach((entry) => {
        isBottomShown = entry.isIntersecting;
      });
      manageAnimation();
    };
    const observerTop = new IntersectionObserver(callbackTop, {threshold: [0.9]});
    const observerBottom = new IntersectionObserver(callbackBottom, {threshold: [0]});
    const targetTop = document.querySelector("#choose-project-observer-target-top");
    const targetBottom = document.querySelector("#choose-project-observer-target-bottom");
    observerTop.observe(targetTop);
    observerBottom.observe(targetBottom);
    return () => {
      observerTop.disconnect();
      observerBottom.disconnect();
    };
  });
  $$result.css.add(css$P);
  return `<div class="${"row svelte-rpsjvw"}">${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h2 class="${"h1 svelte-rpsjvw"}">Select project,
      <br>
      ${each(Object.entries(animatedTexts), ([device, texts]) => `<del class="${escape(null_to_empty(device)) + " svelte-rpsjvw"}">${each(texts, ({isVisible, text}) => `<span class="${["svelte-rpsjvw", isVisible ? "strikethrough" : ""].join(" ").trim()}">${escape(text)}</span>`)}
        </del>`)}
      <br>
      start coding.
    </h2>`
  })}</div>`;
});
var hero_svelte = ".hero.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{display:flex;align-items:center;justify-content:space-between;margin-top:var(--x-small)}@media(max-width:647px){.hero.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{flex-direction:column;max-width:450px;margin-left:auto;margin-right:auto}}@media(max-width:375px){.hero.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--x-small)}}.hero__text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{max-width:560px;flex:0 0 45%}@media(max-width:972px){.hero__text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{flex:0 0 50%}}@media(max-width:698px){.hero__text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{flex:0 0 54%}}.hero__intro-text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:-16px}@media(max-width:972px){.hero__intro-text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{font-size:var(--p-medium)}}.hero__action.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--small);align-items:end}@media(max-width:972px){.hero__action.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--xx-small)}}.hero__action.svelte-d4fg9i>.svelte-d4fg9i.svelte-d4fg9i{display:grid;grid-template-columns:160px 100%;grid-gap:var(--xx-small);gap:var(--xx-small)}@media(max-width:1140px){.hero__action.svelte-d4fg9i>.svelte-d4fg9i.svelte-d4fg9i{display:flex;grid-gap:initial;gap:initial}.hero__action.svelte-d4fg9i>.svelte-d4fg9i>.svelte-d4fg9i:not(:last-child){margin-right:var(--micro)}}.hero__try-now.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-bottom:var(--micro)}@media(max-width:972px){.hero__try-now.svelte-d4fg9i p.svelte-d4fg9i.svelte-d4fg9i{font-size:var(--btn-small)}}@media(max-width:360px){.hero__try-now.svelte-d4fg9i br.svelte-d4fg9i.svelte-d4fg9i{display:none}}.hero__icons.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{display:flex;justify-content:space-between;width:120px;padding:0 var(--macro)}@media(min-width:1141px){.hero__icons.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{width:160px}}@media(max-width:768px){.hero__icons.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{width:145px}}.hero__icons.svelte-d4fg9i img.svelte-d4fg9i.svelte-d4fg9i{height:29px;width:29px}@media(max-width:1140px){.hero__icons.svelte-d4fg9i img.svelte-d4fg9i.svelte-d4fg9i{height:27px;width:27px}}.hero__stars.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{height:2rem}.hero__illustration.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{max-width:700px;padding-left:70px;padding-top:20px;flex:1}@media(max-width:972px){.hero__illustration.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--micro);padding:0}}";
const css$O = {
  code: ".hero.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{display:flex;align-items:center;justify-content:space-between;margin-top:var(--x-small)}@media(max-width:647px){.hero.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{flex-direction:column;max-width:450px;margin-left:auto;margin-right:auto}}@media(max-width:375px){.hero.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--x-small)}}.hero__text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{max-width:560px;flex:0 0 45%}@media(max-width:972px){.hero__text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{flex:0 0 50%}}@media(max-width:698px){.hero__text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{flex:0 0 54%}}.hero__intro-text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:-16px}@media(max-width:972px){.hero__intro-text.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{font-size:var(--p-medium)}}.hero__action.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--small);align-items:end}@media(max-width:972px){.hero__action.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--xx-small)}}.hero__action.svelte-d4fg9i>.svelte-d4fg9i.svelte-d4fg9i{display:grid;grid-template-columns:160px 100%;grid-gap:var(--xx-small);gap:var(--xx-small)}@media(max-width:1140px){.hero__action.svelte-d4fg9i>.svelte-d4fg9i.svelte-d4fg9i{display:flex;grid-gap:initial;gap:initial}.hero__action.svelte-d4fg9i>.svelte-d4fg9i>.svelte-d4fg9i:not(:last-child){margin-right:var(--micro)}}.hero__try-now.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-bottom:var(--micro)}@media(max-width:972px){.hero__try-now.svelte-d4fg9i p.svelte-d4fg9i.svelte-d4fg9i{font-size:var(--btn-small)}}@media(max-width:360px){.hero__try-now.svelte-d4fg9i br.svelte-d4fg9i.svelte-d4fg9i{display:none}}.hero__icons.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{display:flex;justify-content:space-between;width:120px;padding:0 var(--macro)}@media(min-width:1141px){.hero__icons.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{width:160px}}@media(max-width:768px){.hero__icons.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{width:145px}}.hero__icons.svelte-d4fg9i img.svelte-d4fg9i.svelte-d4fg9i{height:29px;width:29px}@media(max-width:1140px){.hero__icons.svelte-d4fg9i img.svelte-d4fg9i.svelte-d4fg9i{height:27px;width:27px}}.hero__stars.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{height:2rem}.hero__illustration.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{max-width:700px;padding-left:70px;padding-top:20px;flex:1}@media(max-width:972px){.hero__illustration.svelte-d4fg9i.svelte-d4fg9i.svelte-d4fg9i{margin-top:var(--micro);padding:0}}",
  map: '{"version":3,"file":"hero.svelte","sources":["hero.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nlet githubStarsEl;\\nonMount(async () => {\\n    const githubButtons = await import(\\"github-buttons\\");\\n    githubButtons.render(githubStarsEl, (el) => {\\n        githubStarsEl.parentNode.replaceChild(el, githubStarsEl);\\n    });\\n});\\n</script>\\n\\n<style lang=\\"scss\\">.hero{display:flex;align-items:center;justify-content:space-between;margin-top:var(--x-small)}@media (max-width:647px){.hero{flex-direction:column;max-width:450px;margin-left:auto;margin-right:auto}}@media (max-width:375px){.hero{margin-top:var(--x-small)}}.hero__text{max-width:560px;flex:0 0 45%}@media (max-width:972px){.hero__text{flex:0 0 50%}}@media (max-width:698px){.hero__text{flex:0 0 54%}}.hero__intro-text{margin-top:-16px}@media (max-width:972px){.hero__intro-text{font-size:var(--p-medium)}}.hero__action{margin-top:var(--small);align-items:end}@media (max-width:972px){.hero__action{margin-top:var(--xx-small)}}.hero__action>*{display:grid;grid-template-columns:160px 100%;grid-gap:var(--xx-small);gap:var(--xx-small)}@media (max-width:1140px){.hero__action>*{display:flex;grid-gap:initial;gap:initial}.hero__action>*>:not(:last-child){margin-right:var(--micro)}}.hero__try-now{margin-bottom:var(--micro)}@media (max-width:972px){.hero__try-now p{font-size:var(--btn-small)}}@media (max-width:360px){.hero__try-now br{display:none}}.hero__icons{display:flex;justify-content:space-between;width:120px;padding:0 var(--macro)}@media (min-width:1141px){.hero__icons{width:160px}}@media (max-width:768px){.hero__icons{width:145px}}.hero__icons img{height:29px;width:29px}@media (max-width:1140px){.hero__icons img{height:27px;width:27px}}.hero__stars{height:2rem}.hero__illustration{max-width:700px;padding-left:70px;padding-top:20px;flex:1}@media (max-width:972px){.hero__illustration{margin-top:var(--micro);padding:0}}</style>\\n\\n<div class=\\"hero\\">\\n  <div class=\\"hero__text\\">\\n    <h1 class=\\"homeh1\\">\\n      Always<br /> Ready to Code.\\n    </h1>\\n    <p id=\\"choose-project-observer-target\\" class=\\"hero__intro-text text-large\\">\\n      Spin up fresh, automated dev environments<br />\\n      for each task, in the cloud, in seconds.\\n    </p>\\n    <div class=\\"hero__action\\">\\n      <div class=\\"hero__try-now text-small\\">\\n        <div>\\n          <a href=\\"#get-started\\" class=\\"btn-conversion\\">Try Now</a>\\n        </div>\\n        <p>\\n          Open a workspace.\\n          <br />\\n          Start from any Git context.\\n        </p>\\n      </div>\\n      <div>\\n        <div class=\\"hero__icons\\">\\n          <img src=\\"/svg/gitlab.svg\\" alt=\\"GitLab logo\\" width=\\"30\\" height=\\"30\\" />\\n          <img src=\\"/svg/github.svg\\" alt=\\"GitHub logo\\" width=\\"30\\" height=\\"30\\" />\\n          <img\\n            src=\\"/svg/bitbucket.svg\\"\\n            alt=\\"Bitbucket logo\\"\\n            width=\\"30\\"\\n            height=\\"30\\"\\n          />\\n        </div>\\n        <div class=\\"hero__stars\\">\\n          <a\\n            bind:this={githubStarsEl}\\n            class=\\"github-button\\"\\n            href=\\"https://github.com/gitpod-io/gitpod\\"\\n            data-icon=\\"octicon-star\\"\\n            data-size=\\"large\\"\\n            data-show-count=\\"true\\"\\n            aria-label=\\"Star the Gitpod Repo on GitHub\\">Star</a\\n          >\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\"hero__illustration\\">\\n    <img\\n      src=\\"/images/illustration-large.jpg\\"\\n      alt=\\"Gitpod in a Nutshell\\"\\n      width=\\"700\\"\\n      height=\\"724\\"\\n    />\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAUmB,+CAAK,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,gBAAgB,aAAa,CAAC,WAAW,IAAI,SAAS,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,+CAAK,CAAC,eAAe,MAAM,CAAC,UAAU,KAAK,CAAC,YAAY,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,+CAAK,CAAC,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,qDAAW,CAAC,UAAU,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,qDAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,qDAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,2DAAiB,CAAC,WAAW,KAAK,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2DAAiB,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,uDAAa,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,YAAY,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,uDAAa,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,CAAC,2BAAa,CAAC,4BAAC,CAAC,QAAQ,IAAI,CAAC,sBAAsB,KAAK,CAAC,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,2BAAa,CAAC,4BAAC,CAAC,QAAQ,IAAI,CAAC,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC,2BAAa,CAAC,cAAC,eAAC,KAAK,WAAW,CAAC,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,CAAC,wDAAc,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,4BAAc,CAAC,6BAAC,CAAC,UAAU,IAAI,WAAW,CAAC,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,4BAAc,CAAC,8BAAE,CAAC,QAAQ,IAAI,CAAC,CAAC,sDAAY,CAAC,QAAQ,IAAI,CAAC,gBAAgB,aAAa,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,sDAAY,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sDAAY,CAAC,MAAM,KAAK,CAAC,CAAC,0BAAY,CAAC,+BAAG,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,0BAAY,CAAC,+BAAG,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,sDAAY,CAAC,OAAO,IAAI,CAAC,6DAAmB,CAAC,UAAU,KAAK,CAAC,aAAa,IAAI,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,6DAAmB,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC"}'
};
const Hero = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let githubStarsEl;
  onMount(async () => {
    const githubButtons = await import("github-buttons");
    githubButtons.render(githubStarsEl, (el) => {
      githubStarsEl.parentNode.replaceChild(el, githubStarsEl);
    });
  });
  $$result.css.add(css$O);
  return `<div class="${"hero svelte-d4fg9i"}"><div class="${"hero__text svelte-d4fg9i"}"><h1 class="${"homeh1"}">Always<br> Ready to Code.
    </h1>
    <p id="${"choose-project-observer-target"}" class="${"hero__intro-text text-large svelte-d4fg9i"}">Spin up fresh, automated dev environments<br>
      for each task, in the cloud, in seconds.
    </p>
    <div class="${"hero__action svelte-d4fg9i"}"><div class="${"hero__try-now text-small svelte-d4fg9i"}"><div class="${"svelte-d4fg9i"}"><a href="${"#get-started"}" class="${"btn-conversion"}">Try Now</a></div>
        <p class="${"svelte-d4fg9i"}">Open a workspace.
          <br class="${"svelte-d4fg9i"}">
          Start from any Git context.
        </p></div>
      <div class="${"svelte-d4fg9i"}"><div class="${"hero__icons svelte-d4fg9i"}"><img src="${"/svg/gitlab.svg"}" alt="${"GitLab logo"}" width="${"30"}" height="${"30"}" class="${"svelte-d4fg9i"}">
          <img src="${"/svg/github.svg"}" alt="${"GitHub logo"}" width="${"30"}" height="${"30"}" class="${"svelte-d4fg9i"}">
          <img src="${"/svg/bitbucket.svg"}" alt="${"Bitbucket logo"}" width="${"30"}" height="${"30"}" class="${"svelte-d4fg9i"}"></div>
        <div class="${"hero__stars svelte-d4fg9i"}"><a class="${"github-button"}" href="${"https://github.com/gitpod-io/gitpod"}" data-icon="${"octicon-star"}" data-size="${"large"}" data-show-count="${"true"}" aria-label="${"Star the Gitpod Repo on GitHub"}"${add_attribute("this", githubStarsEl, 1)}>Star</a></div></div></div></div>
  <div class="${"hero__illustration svelte-d4fg9i"}"><img src="${"/images/illustration-large.jpg"}" alt="${"Gitpod in a Nutshell"}" width="${"700"}" height="${"724"}"></div></div>`;
});
var sectionScreenshot_svelte = ".screenshot.svelte-1l5wi43.svelte-1l5wi43{display:block;margin:2rem auto;border-radius:.875rem}@media(max-width:768px){.screenshot.svelte-1l5wi43.svelte-1l5wi43{margin-bottom:-20px;border-radius:.25rem}}.content.svelte-1l5wi43.svelte-1l5wi43{text-align:center;max-width:900px;margin:auto}.content.svelte-1l5wi43 p.svelte-1l5wi43{margin:var(--small) 0}@media(max-width:429px){.btn-otherbrand.svelte-1l5wi43.svelte-1l5wi43{width:12rem}}";
const css$N = {
  code: ".screenshot.svelte-1l5wi43.svelte-1l5wi43{display:block;margin:2rem auto;border-radius:.875rem}@media(max-width:768px){.screenshot.svelte-1l5wi43.svelte-1l5wi43{margin-bottom:-20px;border-radius:.25rem}}.content.svelte-1l5wi43.svelte-1l5wi43{text-align:center;max-width:900px;margin:auto}.content.svelte-1l5wi43 p.svelte-1l5wi43{margin:var(--small) 0}@media(max-width:429px){.btn-otherbrand.svelte-1l5wi43.svelte-1l5wi43{width:12rem}}",
  map: '{"version":3,"file":"section-screenshot.svelte","sources":["section-screenshot.svelte"],"sourcesContent":["<script>\\n  import Section from \\"../section.svelte\\";\\n\\n  const buttons = [\\n    {\\n      icon: \\"svg/browsers/chrome.svg\\",\\n      text: \\"Chrome Extension\\",\\n      href:\\n        \\"https://chrome.google.com/webstore/detail/gitpod-dev-environments-i/dodmmooeoklaejobgleioelladacbeki\\",\\n    },\\n    {\\n      icon: \\"svg/browsers/firefox.svg\\",\\n      text: \\"Firefox Extension\\",\\n      href: \\"https://addons.mozilla.org/firefox/addon/gitpod/\\",\\n    },\\n  ];\\n</script>\\n\\n<style lang=\\"scss\\">.screenshot{display:block;margin:2rem auto;border-radius:.875rem}@media (max-width:768px){.screenshot{margin-bottom:-20px;border-radius:.25rem}}.content{text-align:center;max-width:900px;margin:auto}.content p{margin:var(--small) 0}@media (max-width:429px){.btn-otherbrand{width:12rem}}</style>\\n\\n<Section>\\n  <div class=\\"row\\">\\n    <h2 class=\\"mb-small text-center text-h2\\">\\n      Remote-first. Secure by design.\\n    </h2>\\n    <img\\n      class=\\"screenshot shadow-brand\\"\\n      src=\\"/images/gitpod-editor.jpg\\"\\n      alt=\\"Gitpod\\"\\n      height=\\"819\\"\\n      width=\\"1269\\"\\n    />\\n    <div class=\\"content\\">\\n      <p class=\\"text-large\\">\\n        You no longer need an over-powered laptop to code, Gitpod works just as\\n        smoothly on a Chromebook or iPad. All you need is a browser. Gitpod\\n        centralizes all source code and never stores it on insecure machines and\\n        networks.\\n      </p>\\n      <div class=\\"buttons-wrapper\\">\\n        {#each buttons as { href, icon, text }}\\n          <a\\n            {href}\\n            target=\\"_blank\\"\\n            rel=\\"noopener\\"\\n            class=\\"btn-otherbrand text-medium\\"\\n          >\\n            <img src={`/${icon}`} alt={text} width=\\"24\\" height=\\"24\\" />\\n            {text}\\n          </a>\\n        {/each}\\n      </div>\\n    </div>\\n  </div>\\n</Section>\\n"],"names":[],"mappings":"AAkBmB,yCAAW,CAAC,QAAQ,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,OAAO,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,yCAAW,CAAC,cAAc,KAAK,CAAC,cAAc,MAAM,CAAC,CAAC,sCAAQ,CAAC,WAAW,MAAM,CAAC,UAAU,KAAK,CAAC,OAAO,IAAI,CAAC,uBAAQ,CAAC,gBAAC,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,6CAAe,CAAC,MAAM,KAAK,CAAC,CAAC"}'
};
const Section_screenshot = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const buttons = [
    {
      icon: "svg/browsers/chrome.svg",
      text: "Chrome Extension",
      href: "https://chrome.google.com/webstore/detail/gitpod-dev-environments-i/dodmmooeoklaejobgleioelladacbeki"
    },
    {
      icon: "svg/browsers/firefox.svg",
      text: "Firefox Extension",
      href: "https://addons.mozilla.org/firefox/addon/gitpod/"
    }
  ];
  $$result.css.add(css$N);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<div class="${"row"}"><h2 class="${"mb-small text-center text-h2"}">Remote-first. Secure by design.
    </h2>
    <img class="${"screenshot shadow-brand svelte-1l5wi43"}" src="${"/images/gitpod-editor.jpg"}" alt="${"Gitpod"}" height="${"819"}" width="${"1269"}">
    <div class="${"content svelte-1l5wi43"}"><p class="${"text-large svelte-1l5wi43"}">You no longer need an over-powered laptop to code, Gitpod works just as
        smoothly on a Chromebook or iPad. All you need is a browser. Gitpod
        centralizes all source code and never stores it on insecure machines and
        networks.
      </p>
      <div class="${"buttons-wrapper"}">${each(buttons, ({href, icon, text}) => `<a${add_attribute("href", href, 0)} target="${"_blank"}" rel="${"noopener"}" class="${"btn-otherbrand text-medium svelte-1l5wi43"}"><img${add_attribute("src", `/${icon}`, 0)}${add_attribute("alt", text, 0)} width="${"24"}" height="${"24"}">
            ${escape(text)}
          </a>`)}</div></div></div>`
  })}`;
});
var carousel_svelte = "div.svelte-13fysql{-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:thin;scrollbar-color:var(--divider) var(--white)}div.svelte-13fysql::-webkit-scrollbar{-webkit-appearance:none}div.svelte-13fysql::-webkit-scrollbar:horizontal{height:.375rem}div.svelte-13fysql::-webkit-scrollbar-thumb{background-color:var(--divider);border-radius:.625rem;border:2px solidvar(--white)}div.svelte-13fysql::-webkit-scrollbar-track{border-radius:.625rem;background-color:var(--white)}";
const css$M = {
  code: "div.svelte-13fysql{-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:thin;scrollbar-color:var(--divider) var(--white)}div.svelte-13fysql::-webkit-scrollbar{-webkit-appearance:none}div.svelte-13fysql::-webkit-scrollbar:horizontal{height:.375rem}div.svelte-13fysql::-webkit-scrollbar-thumb{background-color:var(--divider);border-radius:.625rem;border:2px solidvar(--white)}div.svelte-13fysql::-webkit-scrollbar-track{border-radius:.625rem;background-color:var(--white)}",
  map: '{"version":3,"file":"carousel.svelte","sources":["carousel.svelte"],"sourcesContent":["<style>div{-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:thin;scrollbar-color:var(--divider) var(--white)}div::-webkit-scrollbar{-webkit-appearance:none}div::-webkit-scrollbar:horizontal{height:.375rem}div::-webkit-scrollbar-thumb{background-color:var(--divider);border-radius:.625rem;border:2px solidvar(--white)}div::-webkit-scrollbar-track{border-radius:.625rem;background-color:var(--white)}</style>\\n\\n<div class=\\"flex overflow-x-scroll space-x-6\\" dir=\\"ltr\\">\\n  <slot />\\n</div>\\n"],"names":[],"mappings":"AAAO,kBAAG,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,IAAI,SAAS,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,kBAAG,mBAAmB,CAAC,mBAAmB,IAAI,CAAC,kBAAG,mBAAmB,WAAW,CAAC,OAAO,OAAO,CAAC,kBAAG,yBAAyB,CAAC,iBAAiB,IAAI,SAAS,CAAC,CAAC,cAAc,OAAO,CAAC,OAAO,GAAG,CAAC,SAAS,OAAO,CAAC,CAAC,kBAAG,yBAAyB,CAAC,cAAc,OAAO,CAAC,iBAAiB,IAAI,OAAO,CAAC,CAAC"}'
};
const Carousel = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$M);
  return `<div class="${"flex overflow-x-scroll space-x-6 svelte-13fysql"}" dir="${"ltr"}">${slots.default ? slots.default({}) : ``}</div>`;
});
var brand_svelte = "img.svelte-ttwl4d.svelte-ttwl4d{width:5.9375rem}.brand.svelte-ttwl4d.svelte-ttwl4d{flex-basis:calc(14% - 1.375rem);display:flex;border:2px solid transparent;justify-content:center;margin:.75rem}.brand.svelte-ttwl4d img.svelte-ttwl4d{height:100%}.brand.svelte-ttwl4d .grey-logo.svelte-ttwl4d{filter:grayscale(100%) contrast(0) brightness(116%);-webkit-filter:grayscale(100%) contrast(0) brightness(116%)}.brand.svelte-ttwl4d .fcc.svelte-ttwl4d{filter:grayscale(100%) contrast(0)}@media(min-width:841px){.brand.svelte-ttwl4d .fcc.svelte-ttwl4d{width:8.125rem;transform:translateX(-.625rem)}}.brand.svelte-ttwl4d .dwave-logo.svelte-ttwl4d{transform:scale(1);filter:grayscale(100%) contrast(0) brightness(112%);-webkit-filter:grayscale(100%) contrast(0) brightness(112%)}.brand.svelte-ttwl4d .four-geeks.svelte-ttwl4d{transform:scale(.9)}.brand.svelte-ttwl4d .gatsby-logo.svelte-ttwl4d{filter:grayscale(100%) opacity(47%);-webkit-filter:grayscale(100%) opacity(47%)}.brand.svelte-ttwl4d .vue-logo.svelte-ttwl4d{filter:grayscale(100%) opacity(62%);-webkit-filter:grayscale(100%) opacity(62%)}";
const css$L = {
  code: "img.svelte-ttwl4d.svelte-ttwl4d{width:5.9375rem}.brand.svelte-ttwl4d.svelte-ttwl4d{flex-basis:calc(14% - 1.375rem);display:flex;border:2px solid transparent;justify-content:center;margin:.75rem}.brand.svelte-ttwl4d img.svelte-ttwl4d{height:100%}.brand.svelte-ttwl4d .grey-logo.svelte-ttwl4d{filter:grayscale(100%) contrast(0) brightness(116%);-webkit-filter:grayscale(100%) contrast(0) brightness(116%)}.brand.svelte-ttwl4d .fcc.svelte-ttwl4d{filter:grayscale(100%) contrast(0)}@media(min-width:841px){.brand.svelte-ttwl4d .fcc.svelte-ttwl4d{width:8.125rem;transform:translateX(-.625rem)}}.brand.svelte-ttwl4d .dwave-logo.svelte-ttwl4d{transform:scale(1);filter:grayscale(100%) contrast(0) brightness(112%);-webkit-filter:grayscale(100%) contrast(0) brightness(112%)}.brand.svelte-ttwl4d .four-geeks.svelte-ttwl4d{transform:scale(.9)}.brand.svelte-ttwl4d .gatsby-logo.svelte-ttwl4d{filter:grayscale(100%) opacity(47%);-webkit-filter:grayscale(100%) opacity(47%)}.brand.svelte-ttwl4d .vue-logo.svelte-ttwl4d{filter:grayscale(100%) opacity(62%);-webkit-filter:grayscale(100%) opacity(62%)}",
  map: '{"version":3,"file":"brand.svelte","sources":["brand.svelte"],"sourcesContent":["<script>\\n  export let brand;\\n  const { href, logo, alt, transform, className } = brand;\\n</script>\\n\\n<style lang=\\"scss\\">img{width:5.9375rem}.brand{flex-basis:calc(14% - 1.375rem);display:flex;border:2px solid transparent;justify-content:center;margin:.75rem}.brand img{height:100%}.brand .grey-logo{filter:grayscale(100%) contrast(0) brightness(116%);-webkit-filter:grayscale(100%) contrast(0) brightness(116%)}.brand .fcc{filter:grayscale(100%) contrast(0)}@media (min-width:841px){.brand .fcc{width:8.125rem;transform:translateX(-.625rem)}}.brand .dwave-logo{transform:scale(1);filter:grayscale(100%) contrast(0) brightness(112%);-webkit-filter:grayscale(100%) contrast(0) brightness(112%)}.brand .four-geeks{transform:scale(.9)}.brand .gatsby-logo{filter:grayscale(100%) opacity(47%);-webkit-filter:grayscale(100%) opacity(47%)}.brand .vue-logo{filter:grayscale(100%) opacity(62%);-webkit-filter:grayscale(100%) opacity(62%)}</style>\\n\\n<a {href} target=\\"_blank\\" rel=\\"noopener\\" class=\\"brand\\">\\n  <img\\n    src={`/${logo}`}\\n    {alt}\\n    style={`transform: ${transform}`}\\n    class={className}\\n  />\\n</a>\\n"],"names":[],"mappings":"AAKmB,+BAAG,CAAC,MAAM,SAAS,CAAC,kCAAM,CAAC,WAAW,KAAK,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,IAAI,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,gBAAgB,MAAM,CAAC,OAAO,MAAM,CAAC,oBAAM,CAAC,iBAAG,CAAC,OAAO,IAAI,CAAC,oBAAM,CAAC,wBAAU,CAAC,OAAO,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,eAAe,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,oBAAM,CAAC,kBAAI,CAAC,OAAO,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,oBAAM,CAAC,kBAAI,CAAC,MAAM,QAAQ,CAAC,UAAU,WAAW,QAAQ,CAAC,CAAC,CAAC,oBAAM,CAAC,yBAAW,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,OAAO,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,eAAe,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,oBAAM,CAAC,yBAAW,CAAC,UAAU,MAAM,EAAE,CAAC,CAAC,oBAAM,CAAC,0BAAY,CAAC,OAAO,UAAU,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,eAAe,UAAU,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,oBAAM,CAAC,uBAAS,CAAC,OAAO,UAAU,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,eAAe,UAAU,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC"}'
};
const Brand = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {brand} = $$props;
  const {href, logo, alt, transform, className} = brand;
  if ($$props.brand === void 0 && $$bindings.brand && brand !== void 0)
    $$bindings.brand(brand);
  $$result.css.add(css$L);
  return `<a${add_attribute("href", href, 0)} target="${"_blank"}" rel="${"noopener"}" class="${"brand svelte-ttwl4d"}"><img${add_attribute("src", `/${logo}`, 0)}${add_attribute("alt", alt, 0)}${add_attribute("style", `transform: ${transform}`, 0)} class="${escape(null_to_empty(className)) + " svelte-ttwl4d"}"></a>`;
});
var brands_svelte = ".brands.svelte-1w1yam6{display:flex;flex-wrap:wrap;justify-content:center;align-items:center;max-width:1140px;margin:0 auto;padding-top:var(--large)}@media(max-width:840px){.brands.svelte-1w1yam6{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr))}}";
const css$K = {
  code: ".brands.svelte-1w1yam6{display:flex;flex-wrap:wrap;justify-content:center;align-items:center;max-width:1140px;margin:0 auto;padding-top:var(--large)}@media(max-width:840px){.brands.svelte-1w1yam6{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr))}}",
  map: '{"version":3,"file":"brands.svelte","sources":["brands.svelte"],"sourcesContent":["<script>\\n  import { brands } from \\"../../contents/home\\";\\n  import Brand from \\"./brand.svelte\\";\\n</script>\\n\\n<style lang=\\"scss\\">.brands{display:flex;flex-wrap:wrap;justify-content:center;align-items:center;max-width:1140px;margin:0 auto;padding-top:var(--large)}@media (max-width:840px){.brands{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr))}}</style>\\n\\n<div class=\\"brands\\">\\n  {#each brands as brand}\\n    <Brand {brand} />\\n  {/each}\\n</div>\\n"],"names":[],"mappings":"AAKmB,sBAAO,CAAC,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC,gBAAgB,MAAM,CAAC,YAAY,MAAM,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,OAAO,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sBAAO,CAAC,QAAQ,IAAI,CAAC,sBAAsB,OAAO,QAAQ,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC"}'
};
const Brands = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$K);
  return `<div class="${"brands svelte-1w1yam6"}">${each(brands, (brand) => `${validate_component(Brand, "Brand").$$render($$result, {brand}, {}, {})}`)}</div>`;
});
var testimonial_svelte = ".testimonial.svelte-18sw0qh{color:var(--black);scroll-snap-align:start}@media(max-width:768px){.testimonial.svelte-18sw0qh{width:320px}}.testimonial.svelte-18sw0qh a{color:var(--blue);font-weight:600}.testimonial.svelte-18sw0qh p+p{margin-top:var(--macro)}.role.svelte-18sw0qh span{font-weight:700}";
const css$J = {
  code: ".testimonial.svelte-18sw0qh{color:var(--black);scroll-snap-align:start}@media(max-width:768px){.testimonial.svelte-18sw0qh{width:320px}}.testimonial.svelte-18sw0qh a{color:var(--blue);font-weight:600}.testimonial.svelte-18sw0qh p+p{margin-top:var(--macro)}.role.svelte-18sw0qh span{font-weight:700}",
  map: '{"version":3,"file":"testimonial.svelte","sources":["testimonial.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nexport let testimonial;\\nconst { name, avatar, role, org, text, twitterHandle, tweetId } = testimonial;\\n</script>\\n\\n<style lang=\\"scss\\">.testimonial{color:var(--black);scroll-snap-align:start}@media (max-width:768px){.testimonial{width:320px}}.testimonial :global(a){color:var(--blue);font-weight:600}.testimonial :global(p)+:global(p){margin-top:var(--macro)}.role :global(span){font-weight:700}</style>\\n\\n<a\\n  href={`https://twitter.com/${twitterHandle}/status/${tweetId}`}\\n  target=\\"_blank\\"\\n  class=\\"my-2 text-small\\"\\n>\\n  <div\\n    class=\\"testimonial w-96 p-6 overflow-hidden rounded-2xl shadow-md bg-white hover:shadow-xl transition-shadow duration-300 ease-in-out\\"\\n  >\\n    <div>{@html text}</div>\\n    <div class=\\"mt-4 flex\\">\\n      <img\\n        src={`/images/avatars/${avatar}`}\\n        alt={name}\\n        class=\\"w-12 h-12 rounded-full\\"\\n        width=\\"48\\"\\n        height=\\"48\\"\\n      />\\n      <div class=\\"ml-3\\">\\n        <p class=\\"mb-0 font-semibold text-small leading-6\\">{name}</p>\\n        <p class=\\"role\\">{role} {@html org}</p>\\n      </div>\\n    </div>\\n  </div>\\n</a>\\n"],"names":[],"mappings":"AAKmB,2BAAY,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,kBAAkB,KAAK,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2BAAY,CAAC,MAAM,KAAK,CAAC,CAAC,2BAAY,CAAC,AAAQ,CAAC,AAAC,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,YAAY,GAAG,CAAC,2BAAY,CAAC,AAAQ,CAAC,AAAC,CAAC,AAAQ,CAAC,AAAC,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,oBAAK,CAAC,AAAQ,IAAI,AAAC,CAAC,YAAY,GAAG,CAAC"}'
};
const Testimonial = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {testimonial} = $$props;
  const {name, avatar, role, org, text, twitterHandle, tweetId} = testimonial;
  if ($$props.testimonial === void 0 && $$bindings.testimonial && testimonial !== void 0)
    $$bindings.testimonial(testimonial);
  $$result.css.add(css$J);
  return `<a${add_attribute("href", `https://twitter.com/${twitterHandle}/status/${tweetId}`, 0)} target="${"_blank"}" class="${"my-2 text-small"}"><div class="${"testimonial w-96 p-6 overflow-hidden rounded-2xl shadow-md bg-white hover:shadow-xl transition-shadow duration-300 ease-in-out svelte-18sw0qh"}"><div>${text}</div>
    <div class="${"mt-4 flex"}"><img${add_attribute("src", `/images/avatars/${avatar}`, 0)}${add_attribute("alt", name, 0)} class="${"w-12 h-12 rounded-full"}" width="${"48"}" height="${"48"}">
      <div class="${"ml-3"}"><p class="${"mb-0 font-semibold text-small leading-6"}">${escape(name)}</p>
        <p class="${"role svelte-18sw0qh"}">${escape(role)} ${org}</p></div></div></div></a>`;
});
var testimonials_svelte = "h2.svelte-1ezeqa1{text-align:center}.slides{margin-bottom:var(--small)}.slides>div>div{display:flex;justify-content:center}.carousel.carousel.carousel li{background-color:var(--divider);transition:all .2s}.carousel.carousel.carousel li.active,.carousel.carousel.carousel li:hover{background-color:var(--light-grey)}";
const css$I = {
  code: "h2.svelte-1ezeqa1{text-align:center}.slides{margin-bottom:var(--small)}.slides>div>div{display:flex;justify-content:center}.carousel.carousel.carousel li{background-color:var(--divider);transition:all .2s}.carousel.carousel.carousel li.active,.carousel.carousel.carousel li:hover{background-color:var(--light-grey)}",
  map: '{"version":3,"file":"testimonials.svelte","sources":["testimonials.svelte"],"sourcesContent":["<script lang=\\"ts\\">import Carousel from \\"../carousel.svelte\\";\\nimport Section from \\"../section.svelte\\";\\nimport Brands from \\"./brands.svelte\\";\\nimport Testimonial from \\"./testimonial.svelte\\";\\n;\\nexport let testimonials;\\n</script>\\n\\n<style lang=\\"scss\\">h2{text-align:center}:global(.slides){margin-bottom:var(--small)}:global(.slides)>:global(div)>:global(div){display:flex;justify-content:center}:global(.carousel.carousel.carousel) :global(li){background-color:var(--divider);transition:all .2s}:global(.carousel.carousel.carousel) :global(li).active,:global(.carousel.carousel.carousel) :global(li):hover{background-color:var(--light-grey)}</style>\\n\\n<Section>\\n  <div class=\\"row\\">\\n    <h2 class=\\"h1\\">Used by 350,000+ developers.</h2>\\n    <Carousel>\\n      {#each testimonials as testimonial}\\n        <Testimonial {testimonial} />\\n      {/each}\\n    </Carousel>\\n    <Brands />\\n  </div>\\n</Section>\\n"],"names":[],"mappings":"AAQmB,iBAAE,CAAC,WAAW,MAAM,CAAC,AAAQ,OAAO,AAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,AAAQ,OAAO,AAAC,CAAC,AAAQ,GAAG,AAAC,CAAC,AAAQ,GAAG,AAAC,CAAC,QAAQ,IAAI,CAAC,gBAAgB,MAAM,CAAC,AAAQ,2BAA2B,AAAC,CAAC,AAAQ,EAAE,AAAC,CAAC,iBAAiB,IAAI,SAAS,CAAC,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,AAAQ,2BAA2B,AAAC,CAAC,AAAQ,EAAE,AAAC,OAAO,CAAC,AAAQ,2BAA2B,AAAC,CAAC,AAAQ,EAAE,AAAC,MAAM,CAAC,iBAAiB,IAAI,YAAY,CAAC,CAAC"}'
};
const Testimonials = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {testimonials: testimonials2} = $$props;
  if ($$props.testimonials === void 0 && $$bindings.testimonials && testimonials2 !== void 0)
    $$bindings.testimonials(testimonials2);
  $$result.css.add(css$I);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<div class="${"row"}"><h2 class="${"h1 svelte-1ezeqa1"}">Used by 350,000+ developers.</h2>
    ${validate_component(Carousel, "Carousel").$$render($$result, {}, {}, {
      default: () => `${each(testimonials2, (testimonial) => `${validate_component(Testimonial, "Testimonial").$$render($$result, {testimonial}, {}, {})}`)}`
    })}
    ${validate_component(Brands, "Brands").$$render($$result, {}, {}, {})}</div>`
  })}`;
});
var project_svelte = ".project.svelte-h7c295.svelte-h7c295{display:flex;align-items:center;justify-content:space-between;padding:.75rem .75rem .75rem var(--micro);background:var(--off-white);border-radius:.75rem;transition:all .2s}@media(max-width:454px){.project.svelte-h7c295.svelte-h7c295{padding:var(--macro) var(--micro)}}.project__left.svelte-h7c295.svelte-h7c295{display:flex;align-items:center;justify-items:center;place-items:center}.project__logo.svelte-h7c295.svelte-h7c295{height:1.6875rem;width:1.6875rem;margin-right:var(--micro);filter:grayscale(100%) opacity(.5);-webkit-filter:grayscale(100%) opacity(.5);transition:all .2s}@media(max-width:454px){.project__logo.svelte-h7c295.svelte-h7c295{width:25px;margin-right:var(--macro)}}.project.svelte-h7c295.svelte-h7c295:not(:last-child){margin-bottom:.75rem}.project.svelte-h7c295.svelte-h7c295:focus,.project.svelte-h7c295.svelte-h7c295:hover{background:var(--brand-light)}.project.svelte-h7c295:focus .project__logo.svelte-h7c295,.project.svelte-h7c295:hover .project__logo.svelte-h7c295{filter:grayscale(0) opacity(1);-webkit-filter:grayscale(0) opacity(1)}.project.svelte-h7c295:focus .btn-tertiary.svelte-h7c295,.project.svelte-h7c295:hover .btn-tertiary.svelte-h7c295{opacity:1}.btn-tertiary.svelte-h7c295.svelte-h7c295{border-radius:.75rem;max-width:9rem;padding:.5rem .75rem;opacity:0}@media(max-width:500px){.btn-tertiary.svelte-h7c295.svelte-h7c295{display:none}}";
const css$H = {
  code: ".project.svelte-h7c295.svelte-h7c295{display:flex;align-items:center;justify-content:space-between;padding:.75rem .75rem .75rem var(--micro);background:var(--off-white);border-radius:.75rem;transition:all .2s}@media(max-width:454px){.project.svelte-h7c295.svelte-h7c295{padding:var(--macro) var(--micro)}}.project__left.svelte-h7c295.svelte-h7c295{display:flex;align-items:center;justify-items:center;place-items:center}.project__logo.svelte-h7c295.svelte-h7c295{height:1.6875rem;width:1.6875rem;margin-right:var(--micro);filter:grayscale(100%) opacity(.5);-webkit-filter:grayscale(100%) opacity(.5);transition:all .2s}@media(max-width:454px){.project__logo.svelte-h7c295.svelte-h7c295{width:25px;margin-right:var(--macro)}}.project.svelte-h7c295.svelte-h7c295:not(:last-child){margin-bottom:.75rem}.project.svelte-h7c295.svelte-h7c295:focus,.project.svelte-h7c295.svelte-h7c295:hover{background:var(--brand-light)}.project.svelte-h7c295:focus .project__logo.svelte-h7c295,.project.svelte-h7c295:hover .project__logo.svelte-h7c295{filter:grayscale(0) opacity(1);-webkit-filter:grayscale(0) opacity(1)}.project.svelte-h7c295:focus .btn-tertiary.svelte-h7c295,.project.svelte-h7c295:hover .btn-tertiary.svelte-h7c295{opacity:1}.btn-tertiary.svelte-h7c295.svelte-h7c295{border-radius:.75rem;max-width:9rem;padding:.5rem .75rem;opacity:0}@media(max-width:500px){.btn-tertiary.svelte-h7c295.svelte-h7c295{display:none}}",
  map: '{"version":3,"file":"project.svelte","sources":["project.svelte"],"sourcesContent":["<script>\\n  export let project;\\n  const { logo, alt, title, githubUrl } = project;\\n</script>\\n\\n<style lang=\\"scss\\">.project{display:flex;align-items:center;justify-content:space-between;padding:.75rem .75rem .75rem var(--micro);background:var(--off-white);border-radius:.75rem;transition:all .2s}@media (max-width:454px){.project{padding:var(--macro) var(--micro)}}.project__left{display:flex;align-items:center;justify-items:center;place-items:center}.project__logo{height:1.6875rem;width:1.6875rem;margin-right:var(--micro);filter:grayscale(100%) opacity(.5);-webkit-filter:grayscale(100%) opacity(.5);transition:all .2s}@media (max-width:454px){.project__logo{width:25px;margin-right:var(--macro)}}.project:not(:last-child){margin-bottom:.75rem}.project:focus,.project:hover{background:var(--brand-light)}.project:focus .project__logo,.project:hover .project__logo{filter:grayscale(0) opacity(1);-webkit-filter:grayscale(0) opacity(1)}.project:focus .btn-tertiary,.project:hover .btn-tertiary{opacity:1}.btn-tertiary{border-radius:.75rem;max-width:9rem;padding:.5rem .75rem;opacity:0}@media (max-width:500px){.btn-tertiary{display:none}}</style>\\n\\n<a\\n  href={`https://gitpod.io#${githubUrl}`}\\n  target=\\"_blank\\"\\n  class=\\"project group\\"\\n>\\n  <div class=\\"project__left\\">\\n    <img src={`/${logo}`} {alt} class=\\"project__logo\\" width=\\"27\\" height=\\"27\\" />\\n    <p\\n      class=\\"leading-5 text-h6 text-gray-800 font-semibold transition duration-200 group-focus:text-black group-hover:text-black\\"\\n    >\\n      {title}\\n    </p>\\n  </div>\\n  <span class=\\"btn-tertiary\\">Launch workspace</span>\\n</a>\\n"],"names":[],"mappings":"AAKmB,oCAAQ,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,gBAAgB,aAAa,CAAC,QAAQ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,CAAC,cAAc,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,oCAAQ,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,0CAAc,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,cAAc,MAAM,CAAC,YAAY,MAAM,CAAC,0CAAc,CAAC,OAAO,SAAS,CAAC,MAAM,SAAS,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,OAAO,UAAU,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,UAAU,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,0CAAc,CAAC,MAAM,IAAI,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,CAAC,oCAAQ,KAAK,WAAW,CAAC,CAAC,cAAc,MAAM,CAAC,oCAAQ,MAAM,CAAC,oCAAQ,MAAM,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC,sBAAQ,MAAM,CAAC,4BAAc,CAAC,sBAAQ,MAAM,CAAC,4BAAc,CAAC,OAAO,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,sBAAQ,MAAM,CAAC,2BAAa,CAAC,sBAAQ,MAAM,CAAC,2BAAa,CAAC,QAAQ,CAAC,CAAC,yCAAa,CAAC,cAAc,MAAM,CAAC,UAAU,IAAI,CAAC,QAAQ,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,yCAAa,CAAC,QAAQ,IAAI,CAAC,CAAC"}'
};
const Project = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {project} = $$props;
  const {logo, alt, title, githubUrl} = project;
  if ($$props.project === void 0 && $$bindings.project && project !== void 0)
    $$bindings.project(project);
  $$result.css.add(css$H);
  return `<a${add_attribute("href", `https://gitpod.io#${githubUrl}`, 0)} target="${"_blank"}" class="${"project group svelte-h7c295"}"><div class="${"project__left svelte-h7c295"}"><img${add_attribute("src", `/${logo}`, 0)}${add_attribute("alt", alt, 0)} class="${"project__logo svelte-h7c295"}" width="${"27"}" height="${"27"}">
    <p class="${"leading-5 text-h6 text-gray-800 font-semibold transition duration-200 group-focus:text-black group-hover:text-black"}">${escape(title)}</p></div>
  <span class="${"btn-tertiary svelte-h7c295"}">Launch workspace</span></a>`;
});
var launchExampleWorkspace_svelte = ".projects.svelte-1norl3b{margin:var(--x-small) 0}";
const css$G = {
  code: ".projects.svelte-1norl3b{margin:var(--x-small) 0}",
  map: '{"version":3,"file":"launch-example-workspace.svelte","sources":["launch-example-workspace.svelte"],"sourcesContent":["<script>\\n  import { projects } from \\"../../../contents/home\\";\\n  import Project from \\"./project.svelte\\";\\n</script>\\n\\n<style lang=\\"scss\\">.projects{margin:var(--x-small) 0}</style>\\n\\n<h3>Launch an example workspace</h3>\\n<p class=\\"text-large\\">Dive into one of our example workspaces</p>\\n<div class=\\"projects\\">\\n  {#each projects as project}\\n    <Project {project} />\\n  {/each}\\n</div>\\n\\n<!-- <a href=\\"#\\">More example workspaces \u2197</a> -->\\n"],"names":[],"mappings":"AAKmB,wBAAS,CAAC,OAAO,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC"}'
};
const Launch_example_workspace = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$G);
  return `<h3>Launch an example workspace</h3>
<p class="${"text-large"}">Dive into one of our example workspaces</p>
<div class="${"projects svelte-1norl3b"}">${each(projects, (project) => `${validate_component(Project, "Project").$$render($$result, {project}, {}, {})}`)}</div>

`;
});
var linkGitRepository_svelte = ".buttons.svelte-gpn29u.svelte-gpn29u{display:inline-flex;flex-direction:column;margin:var(--large) 0}.buttons.svelte-gpn29u .btn.svelte-gpn29u{display:flex;padding:var(--macro) var(--x-small);border-radius:.75rem;color:var(--white);border:1px solid transparent;align-items:center;justify-items:center;place-items:center;transition:all .2s}.buttons.svelte-gpn29u .btn.svelte-gpn29u:active,.buttons.svelte-gpn29u .btn.svelte-gpn29u:focus,.buttons.svelte-gpn29u .btn.svelte-gpn29u:hover{opacity:.9}.buttons.svelte-gpn29u .btn.svelte-gpn29u:not(:last-child){margin-bottom:var(--micro)}.buttons.svelte-gpn29u .btn--github.svelte-gpn29u{background:#000}.buttons.svelte-gpn29u .btn--github.svelte-gpn29u:active,.buttons.svelte-gpn29u .btn--github.svelte-gpn29u:focus,.buttons.svelte-gpn29u .btn--github.svelte-gpn29u:hover{opacity:1;background:var(--black-hover)}.buttons.svelte-gpn29u .btn--bitbucket.svelte-gpn29u{background:#2684ff}.buttons.svelte-gpn29u .btn--gitlab.svelte-gpn29u{background:#fc6d26}.buttons.svelte-gpn29u svg.svelte-gpn29u{height:1.75rem;width:1.75rem;margin-right:var(--micro)}.prefix.svelte-gpn29u.svelte-gpn29u{display:inline-block;padding:0 var(--micro);margin-top:var(--macro);background:var(--brand-light);border-radius:.75rem}";
const css$F = {
  code: ".buttons.svelte-gpn29u.svelte-gpn29u{display:inline-flex;flex-direction:column;margin:var(--large) 0}.buttons.svelte-gpn29u .btn.svelte-gpn29u{display:flex;padding:var(--macro) var(--x-small);border-radius:.75rem;color:var(--white);border:1px solid transparent;align-items:center;justify-items:center;place-items:center;transition:all .2s}.buttons.svelte-gpn29u .btn.svelte-gpn29u:active,.buttons.svelte-gpn29u .btn.svelte-gpn29u:focus,.buttons.svelte-gpn29u .btn.svelte-gpn29u:hover{opacity:.9}.buttons.svelte-gpn29u .btn.svelte-gpn29u:not(:last-child){margin-bottom:var(--micro)}.buttons.svelte-gpn29u .btn--github.svelte-gpn29u{background:#000}.buttons.svelte-gpn29u .btn--github.svelte-gpn29u:active,.buttons.svelte-gpn29u .btn--github.svelte-gpn29u:focus,.buttons.svelte-gpn29u .btn--github.svelte-gpn29u:hover{opacity:1;background:var(--black-hover)}.buttons.svelte-gpn29u .btn--bitbucket.svelte-gpn29u{background:#2684ff}.buttons.svelte-gpn29u .btn--gitlab.svelte-gpn29u{background:#fc6d26}.buttons.svelte-gpn29u svg.svelte-gpn29u{height:1.75rem;width:1.75rem;margin-right:var(--micro)}.prefix.svelte-gpn29u.svelte-gpn29u{display:inline-block;padding:0 var(--micro);margin-top:var(--macro);background:var(--brand-light);border-radius:.75rem}",
  map: '{"version":3,"file":"link-git-repository.svelte","sources":["link-git-repository.svelte"],"sourcesContent":["<style lang=\\"scss\\">.buttons{display:inline-flex;flex-direction:column;margin:var(--large) 0}.buttons .btn{display:flex;padding:var(--macro) var(--x-small);border-radius:.75rem;color:var(--white);border:1px solid transparent;align-items:center;justify-items:center;place-items:center;transition:all .2s}.buttons .btn:active,.buttons .btn:focus,.buttons .btn:hover{opacity:.9}.buttons .btn:not(:last-child){margin-bottom:var(--micro)}.buttons .btn--github{background:#000}.buttons .btn--github:active,.buttons .btn--github:focus,.buttons .btn--github:hover{opacity:1;background:var(--black-hover)}.buttons .btn--bitbucket{background:#2684ff}.buttons .btn--gitlab{background:#fc6d26}.buttons svg{height:1.75rem;width:1.75rem;margin-right:var(--micro)}.prefix{display:inline-block;padding:0 var(--micro);margin-top:var(--macro);background:var(--brand-light);border-radius:.75rem}</style>\\n\\n<h3>Connect Git repository</h3>\\n<p class=\\"text-large\\">\\n  Select a Git provider to start with an existing project from any Git context.\\n</p>\\n<div class=\\"buttons\\">\\n  <a href=\\"https://gitpod.io/login\\" class=\\"btn btn--gitlab\\">\\n    <svg viewBox=\\"0 0 30 28\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n      <title>Bitbucket</title>\\n      <path\\n        d=\\"M14.583 27.214L9.21 10.954h10.738l-5.365 16.26z\\"\\n        fill=\\"#fff\\"\\n      /><path\\n        d=\\"M27.476 10.954l1.637 4.94c.148.449-.012.944-.403 1.223L14.584 27.214l12.892-16.26z\\"\\n        fill=\\"#fff\\"\\n        fill-opacity=\\".65\\"\\n      /><path\\n        d=\\"M27.476 10.954h-7.527l3.24-9.793c.165-.5.888-.5 1.06 0l3.227 9.793z\\"\\n        fill=\\"#fff\\"\\n      /><path\\n        d=\\"M1.685 10.954l-1.63 4.94c-.148.449.012.944.403 1.223l14.127 10.097-12.9-16.26z\\"\\n        fill=\\"#fff\\"\\n        fill-opacity=\\".65\\"\\n      /><path\\n        d=\\"M1.685 10.954H9.21L5.978 1.161c-.166-.5-.888-.5-1.06 0l-3.233 9.793z\\"\\n        fill=\\"#fff\\"\\n      /><path\\n        d=\\"M14.585 27.214l-5.373-16.26H1.685l12.9 16.26z\\"\\n        fill=\\"#fff\\"\\n        fill-opacity=\\".85\\"\\n      /><path\\n        d=\\"M14.584 27.214l12.892-16.26h-7.527l-5.365 16.26z\\"\\n        fill=\\"#fff\\"\\n        fill-opacity=\\".85\\"\\n      /></svg\\n    >\\n    Continue with GitLab\\n  </a>\\n  <a href=\\"https://gitpod.io/login\\" class=\\"btn btn--github\\">\\n    <svg viewBox=\\"0 0 29 30\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n      <title>GitHub Octocat</title>\\n      <path\\n        fill-rule=\\"evenodd\\"\\n        clip-rule=\\"evenodd\\"\\n        d=\\"M14.57.5a14.374 14.374 0 00-9.442 3.54 14.947 14.947 0 00-4.94 8.946A15.133 15.133 0 002.106 23.07a14.615 14.615 0 007.862 6.406c.733.137.992-.329.992-.721v-2.528c-4.065.903-4.923-1.999-4.923-1.999a3.97 3.97 0 00-1.617-2.181c-1.314-.913.107-.913.107-.913.46.067.9.24 1.285.505.386.265.707.617.94 1.029.197.366.464.688.784.949a3.047 3.047 0 003.45.292c.057-.751.374-1.457.894-1.99-3.234-.374-6.63-1.652-6.63-7.3a5.82 5.82 0 011.493-3.989 5.529 5.529 0 01.143-3.933s1.224-.402 4.002 1.524a13.49 13.49 0 017.291 0c2.779-1.926 3.994-1.524 3.994-1.524.536 1.233.6 2.627.179 3.906a5.82 5.82 0 011.492 3.988c0 5.713-3.404 6.963-6.648 7.3.348.358.617.787.788 1.26.17.472.24.976.204 1.479v4.079c0 .484.26.858 1 .712a14.623 14.623 0 007.752-6.43 15.134 15.134 0 001.87-10.019 14.949 14.949 0 00-4.89-8.892A14.377 14.377 0 0014.57.5z\\"\\n        fill=\\"#F9F9F9\\"\\n      />\\n    </svg>\\n    Continue with GitHub\\n  </a>\\n  <a href=\\"https://gitpod.io/login\\" class=\\"btn btn--bitbucket\\">\\n    <svg viewBox=\\"0 0 27 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n      <title>Bitbucket</title>\\n      <path\\n        d=\\"M.848.25h-.01a.841.841 0 00-.827.971L3.565 22.8c.091.543.563.945 1.114.95h17.053a.84.84 0 00.837-.703l3.554-21.822a.841.841 0 00-.826-.971h-.011L.848.25zm14.968 15.595h-5.443L8.899 8.146h8.236l-1.32 7.7z\\"\\n        fill=\\"#fff\\"\\n      />\\n    </svg>\\n    Continue with Bitbucket\\n  </a>\\n  <!-- <a href=\\"#\\" class=\\"link--light-grey\\">Third-party providers \u2197</a> -->\\n</div>\\n<p class=\\"text-large\\">\\n  Or prefix any GitLab, GitHub or Bitbucket URL with\\n  <br />\\n  <span class=\\"prefix\\"> gitpod.io/# </span>\\n</p>\\n"],"names":[],"mappings":"AAAmB,oCAAQ,CAAC,QAAQ,WAAW,CAAC,eAAe,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,sBAAQ,CAAC,kBAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,cAAc,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,MAAM,CAAC,cAAc,MAAM,CAAC,YAAY,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,sBAAQ,CAAC,kBAAI,OAAO,CAAC,sBAAQ,CAAC,kBAAI,MAAM,CAAC,sBAAQ,CAAC,kBAAI,MAAM,CAAC,QAAQ,EAAE,CAAC,sBAAQ,CAAC,kBAAI,KAAK,WAAW,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,sBAAQ,CAAC,0BAAY,CAAC,WAAW,IAAI,CAAC,sBAAQ,CAAC,0BAAY,OAAO,CAAC,sBAAQ,CAAC,0BAAY,MAAM,CAAC,sBAAQ,CAAC,0BAAY,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC,sBAAQ,CAAC,6BAAe,CAAC,WAAW,OAAO,CAAC,sBAAQ,CAAC,0BAAY,CAAC,WAAW,OAAO,CAAC,sBAAQ,CAAC,iBAAG,CAAC,OAAO,OAAO,CAAC,MAAM,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,mCAAO,CAAC,QAAQ,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC,cAAc,MAAM,CAAC"}'
};
const Link_git_repository = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$F);
  return `<h3>Connect Git repository</h3>
<p class="${"text-large"}">Select a Git provider to start with an existing project from any Git context.
</p>
<div class="${"buttons svelte-gpn29u"}"><a href="${"https://gitpod.io/login"}" class="${"btn btn--gitlab svelte-gpn29u"}"><svg viewBox="${"0 0 30 28"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-gpn29u"}"><title>Bitbucket</title><path d="${"M14.583 27.214L9.21 10.954h10.738l-5.365 16.26z"}" fill="${"#fff"}"></path><path d="${"M27.476 10.954l1.637 4.94c.148.449-.012.944-.403 1.223L14.584 27.214l12.892-16.26z"}" fill="${"#fff"}" fill-opacity="${".65"}"></path><path d="${"M27.476 10.954h-7.527l3.24-9.793c.165-.5.888-.5 1.06 0l3.227 9.793z"}" fill="${"#fff"}"></path><path d="${"M1.685 10.954l-1.63 4.94c-.148.449.012.944.403 1.223l14.127 10.097-12.9-16.26z"}" fill="${"#fff"}" fill-opacity="${".65"}"></path><path d="${"M1.685 10.954H9.21L5.978 1.161c-.166-.5-.888-.5-1.06 0l-3.233 9.793z"}" fill="${"#fff"}"></path><path d="${"M14.585 27.214l-5.373-16.26H1.685l12.9 16.26z"}" fill="${"#fff"}" fill-opacity="${".85"}"></path><path d="${"M14.584 27.214l12.892-16.26h-7.527l-5.365 16.26z"}" fill="${"#fff"}" fill-opacity="${".85"}"></path></svg>
    Continue with GitLab
  </a>
  <a href="${"https://gitpod.io/login"}" class="${"btn btn--github svelte-gpn29u"}"><svg viewBox="${"0 0 29 30"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-gpn29u"}"><title>GitHub Octocat</title><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M14.57.5a14.374 14.374 0 00-9.442 3.54 14.947 14.947 0 00-4.94 8.946A15.133 15.133 0 002.106 23.07a14.615 14.615 0 007.862 6.406c.733.137.992-.329.992-.721v-2.528c-4.065.903-4.923-1.999-4.923-1.999a3.97 3.97 0 00-1.617-2.181c-1.314-.913.107-.913.107-.913.46.067.9.24 1.285.505.386.265.707.617.94 1.029.197.366.464.688.784.949a3.047 3.047 0 003.45.292c.057-.751.374-1.457.894-1.99-3.234-.374-6.63-1.652-6.63-7.3a5.82 5.82 0 011.493-3.989 5.529 5.529 0 01.143-3.933s1.224-.402 4.002 1.524a13.49 13.49 0 017.291 0c2.779-1.926 3.994-1.524 3.994-1.524.536 1.233.6 2.627.179 3.906a5.82 5.82 0 011.492 3.988c0 5.713-3.404 6.963-6.648 7.3.348.358.617.787.788 1.26.17.472.24.976.204 1.479v4.079c0 .484.26.858 1 .712a14.623 14.623 0 007.752-6.43 15.134 15.134 0 001.87-10.019 14.949 14.949 0 00-4.89-8.892A14.377 14.377 0 0014.57.5z"}" fill="${"#F9F9F9"}"></path></svg>
    Continue with GitHub
  </a>
  <a href="${"https://gitpod.io/login"}" class="${"btn btn--bitbucket svelte-gpn29u"}"><svg viewBox="${"0 0 27 24"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-gpn29u"}"><title>Bitbucket</title><path d="${"M.848.25h-.01a.841.841 0 00-.827.971L3.565 22.8c.091.543.563.945 1.114.95h17.053a.84.84 0 00.837-.703l3.554-21.822a.841.841 0 00-.826-.971h-.011L.848.25zm14.968 15.595h-5.443L8.899 8.146h8.236l-1.32 7.7z"}" fill="${"#fff"}"></path></svg>
    Continue with Bitbucket
  </a>
  </div>
<p class="${"text-large"}">Or prefix any GitLab, GitHub or Bitbucket URL with
  <br>
  <span class="${"prefix svelte-gpn29u"}">gitpod.io/# </span></p>`;
});
var index_svelte$4 = ".cards-container.svelte-g9vucl{display:flex;justify-content:space-between}@media(max-width:944px){.cards-container.svelte-g9vucl{flex-direction:column;max-width:600px;margin:0 auto}}.card.svelte-g9vucl{flex:0 0 49%;text-align:center;background:var(--white)}@media(max-width:1140px){.card.svelte-g9vucl{padding:var(--small) var(--x-small)}}@media(max-width:944px){.card.svelte-g9vucl:not(:last-child){margin-bottom:var(--small)}}";
const css$E = {
  code: ".cards-container.svelte-g9vucl{display:flex;justify-content:space-between}@media(max-width:944px){.cards-container.svelte-g9vucl{flex-direction:column;max-width:600px;margin:0 auto}}.card.svelte-g9vucl{flex:0 0 49%;text-align:center;background:var(--white)}@media(max-width:1140px){.card.svelte-g9vucl{padding:var(--small) var(--x-small)}}@media(max-width:944px){.card.svelte-g9vucl:not(:last-child){margin-bottom:var(--small)}}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script>\\n  import Section from \\"../../section.svelte\\";\\n  import LaunchExampleWorkspace from \\"./launch-example-workspace.svelte\\";\\n  import LinkGitRepository from \\"./link-git-repository.svelte\\";\\n</script>\\n\\n<style lang=\\"scss\\">.cards-container{display:flex;justify-content:space-between}@media (max-width:944px){.cards-container{flex-direction:column;max-width:600px;margin:0 auto}}.card{flex:0 0 49%;text-align:center;background:var(--white)}@media (max-width:1140px){.card{padding:var(--small) var(--x-small)}}@media (max-width:944px){.card:not(:last-child){margin-bottom:var(--small)}}</style>\\n\\n<Section id=\\"get-started\\">\\n  <h2 class=\\"mb-small text-center text-h2\\">Get started now</h2>\\n  <div class=\\"cards-container\\">\\n    <div class=\\"card\\">\\n      <LinkGitRepository />\\n    </div>\\n    <div class=\\"card\\">\\n      <LaunchExampleWorkspace />\\n    </div>\\n  </div>\\n</Section>\\n"],"names":[],"mappings":"AAMmB,8BAAgB,CAAC,QAAQ,IAAI,CAAC,gBAAgB,aAAa,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,8BAAgB,CAAC,eAAe,MAAM,CAAC,UAAU,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,mBAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,MAAM,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,mBAAK,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,mBAAK,KAAK,WAAW,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,CAAC"}'
};
const Get_started = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$E);
  return `${validate_component(Section, "Section").$$render($$result, {id: "get-started"}, {}, {
    default: () => `<h2 class="${"mb-small text-center text-h2"}">Get started now</h2>
  <div class="${"cards-container svelte-g9vucl"}"><div class="${"card svelte-g9vucl"}">${validate_component(Link_git_repository, "LinkGitRepository").$$render($$result, {}, {}, {})}</div>
    <div class="${"card svelte-g9vucl"}">${validate_component(Launch_example_workspace, "LaunchExampleWorkspace").$$render($$result, {}, {}, {})}</div></div>`
  })}`;
});
const prerender$2G = true;
const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod streamlines developer workflows by providing prebuilt, collaborative development environments in your browser - powered by VS Code.",
      title: "Gitpod - Always ready to code"
    }
  }, {}, {})}

${validate_component(Hero, "Hero").$$render($$result, {}, {}, {})}
${validate_component(Choose_project, "ChooseProject").$$render($$result, {}, {}, {})}
<div id="${"choose-project-observer-target-bottom"}">${validate_component(Features$1, "Features").$$render($$result, {features: features$1}, {}, {})}</div>
${validate_component(Section_screenshot, "SectionScreenshot").$$render($$result, {}, {}, {})}
${validate_component(Testimonials, "Testimonials").$$render($$result, {testimonials}, {}, {})}
${validate_component(Get_started, "GetStarted").$$render($$result, {}, {}, {})}`;
});
var index$9 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Routes,
  prerender: prerender$2G
});
var header_svelte = "header.svelte-1y3fxej p.svelte-1y3fxej a{text-decoration:underline}";
const css$D = {
  code: "header.svelte-1y3fxej p.svelte-1y3fxej a{text-decoration:underline}",
  map: '{"version":3,"file":"header.svelte","sources":["header.svelte"],"sourcesContent":["<script lang=\\"ts\\">export let title;\\n</script>\\n\\n<style>header p :global(a){text-decoration:underline}</style>\\n\\n<header>\\n  <h1>{title}</h1>\\n  <p>\\n    <slot name=\\"description\\" />\\n  </p>\\n  <a\\n    target=\\"_blank\\"\\n    href=\\"https://gitpod.io/plans\\"\\n    class=\\"btn-conversion mt-small\\"\\n  >\\n    Claim Offer\\n  </a>\\n</header>\\n"],"names":[],"mappings":"AAGO,qBAAM,CAAC,gBAAC,CAAC,AAAQ,CAAC,AAAC,CAAC,gBAAgB,SAAS,CAAC"}'
};
const Header$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {title} = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$D);
  return `<header class="${"svelte-1y3fxej"}"><h1>${escape(title)}</h1>
  <p class="${"svelte-1y3fxej"}">${slots.description ? slots.description({}) : ``}</p>
  <a target="${"_blank"}" href="${"https://gitpod.io/plans"}" class="${"btn-conversion mt-small"}">Claim Offer
  </a></header>`;
});
var pricingBox_svelte = ".box.svelte-61r48i.svelte-61r48i{display:flex;flex-direction:column;justify-content:space-between;background:var(--off-white);padding:var(--x-small) 0 var(--medium);border-radius:1rem;box-shadow:var(--shadow);text-align:center;transition:all .2s;margin:0 var(--micro) var(--x-small);width:295px}@media(max-width:1140px){.box.svelte-61r48i.svelte-61r48i{padding:var(--x-small) 0 var(--medium)}}.box.svelte-61r48i .h1.svelte-61r48i{margin-bottom:.25rem;font-weight:700;color:var(--black)}.box__duration.svelte-61r48i.svelte-61r48i,.box__list.svelte-61r48i.svelte-61r48i{padding-left:var(--medium);padding-right:var(--medium)}@media(max-width:1140px){.box__duration.svelte-61r48i.svelte-61r48i,.box__list.svelte-61r48i.svelte-61r48i{padding-left:var(--large);padding-right:var(--large)}}.box__duration.svelte-61r48i.svelte-61r48i{margin-bottom:var(--xx-small);color:var(--light-grey);font-weight:600}.box__list.svelte-61r48i.svelte-61r48i{margin:var(--small) 0;text-align:left}.box__list-item.svelte-61r48i.svelte-61r48i{position:relative;color:var(--black)}.box__list-item.svelte-61r48i.svelte-61r48i:before{content:url(/tick.svg);position:absolute;left:-2.188rem;display:inline-block;height:1.375rem;width:1.375rem}.box__list-item.svelte-61r48i.svelte-61r48i:not(:last-child){margin-bottom:var(--micro)}.box.svelte-61r48i.svelte-61r48i:hover,.spiced.svelte-61r48i.svelte-61r48i{box-shadow:var(--shadow-brand)}.btn-cta.svelte-61r48i.svelte-61r48i{align-self:center}.learn-more.svelte-61r48i.svelte-61r48i{text-decoration:underline}.crossed-out{text-decoration:line-through}.crossed-out,.price-small{color:var(--light-grey);font-size:var(--h4);margin-right:var(--macro)}";
const css$C = {
  code: ".box.svelte-61r48i.svelte-61r48i{display:flex;flex-direction:column;justify-content:space-between;background:var(--off-white);padding:var(--x-small) 0 var(--medium);border-radius:1rem;box-shadow:var(--shadow);text-align:center;transition:all .2s;margin:0 var(--micro) var(--x-small);width:295px}@media(max-width:1140px){.box.svelte-61r48i.svelte-61r48i{padding:var(--x-small) 0 var(--medium)}}.box.svelte-61r48i .h1.svelte-61r48i{margin-bottom:.25rem;font-weight:700;color:var(--black)}.box__duration.svelte-61r48i.svelte-61r48i,.box__list.svelte-61r48i.svelte-61r48i{padding-left:var(--medium);padding-right:var(--medium)}@media(max-width:1140px){.box__duration.svelte-61r48i.svelte-61r48i,.box__list.svelte-61r48i.svelte-61r48i{padding-left:var(--large);padding-right:var(--large)}}.box__duration.svelte-61r48i.svelte-61r48i{margin-bottom:var(--xx-small);color:var(--light-grey);font-weight:600}.box__list.svelte-61r48i.svelte-61r48i{margin:var(--small) 0;text-align:left}.box__list-item.svelte-61r48i.svelte-61r48i{position:relative;color:var(--black)}.box__list-item.svelte-61r48i.svelte-61r48i:before{content:url(/tick.svg);position:absolute;left:-2.188rem;display:inline-block;height:1.375rem;width:1.375rem}.box__list-item.svelte-61r48i.svelte-61r48i:not(:last-child){margin-bottom:var(--micro)}.box.svelte-61r48i.svelte-61r48i:hover,.spiced.svelte-61r48i.svelte-61r48i{box-shadow:var(--shadow-brand)}.btn-cta.svelte-61r48i.svelte-61r48i{align-self:center}.learn-more.svelte-61r48i.svelte-61r48i{text-decoration:underline}.crossed-out{text-decoration:line-through}.crossed-out,.price-small{color:var(--light-grey);font-size:var(--h4);margin-right:var(--macro)}",
  map: '{"version":3,"file":"pricing-box.svelte","sources":["pricing-box.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nexport let pricing;\\nconst { title, duration, features, price, btnHref, btnText, spiced, learnMoreHref, footnote, } = pricing;\\n</script>\\n\\n<style lang=\\"scss\\">.box{display:flex;flex-direction:column;justify-content:space-between;background:var(--off-white);padding:var(--x-small) 0 var(--medium);border-radius:1rem;box-shadow:var(--shadow);text-align:center;transition:all .2s;margin:0 var(--micro) var(--x-small);width:295px}@media (max-width:1140px){.box{padding:var(--x-small) 0 var(--medium)}}.box .h1{margin-bottom:.25rem;font-weight:700;color:var(--black)}.box__duration,.box__list{padding-left:var(--medium);padding-right:var(--medium)}@media (max-width:1140px){.box__duration,.box__list{padding-left:var(--large);padding-right:var(--large)}}.box__duration{margin-bottom:var(--xx-small);color:var(--light-grey);font-weight:600}.box__list{margin:var(--small) 0;text-align:left}.box__list-item{position:relative;color:var(--black)}.box__list-item:before{content:url(/tick.svg);position:absolute;left:-2.188rem;display:inline-block;height:1.375rem;width:1.375rem}.box__list-item:not(:last-child){margin-bottom:var(--micro)}.box:hover,.spiced{box-shadow:var(--shadow-brand)}.btn-cta{align-self:center}.learn-more{text-decoration:underline}:global(.crossed-out){text-decoration:line-through}:global(.crossed-out),:global(.price-small){color:var(--light-grey);font-size:var(--h4);margin-right:var(--macro)}</style>\\n\\n<div class={`box ${spiced ? \\"spiced\\" : \\"\\"}`}>\\n  <div class=\\"min-h-full flex flex-col\\">\\n    <h2 class=\\"h4\\">{title}</h2>\\n    <div class=\\"h1 flex items-center justify-center\\">{@html price}</div>\\n    <div class=\\"box__duration\\">\\n      {#if duration}\\n        {duration}\\n      {:else}\\n        <span>&nbsp;</span>\\n      {/if}\\n    </div>\\n    {#if features}\\n      <ul class=\\"box__list\\">\\n        {#each features as feature}\\n          <li class=\\"box__list-item\\">{feature}</li>\\n        {/each}\\n      </ul>\\n    {/if}\\n    {#if learnMoreHref}\\n      <div class=\\"flex flex-1 justify-center items-center\\">\\n        <a href={learnMoreHref} class=\\"learn-more\\">Learn More</a>\\n      </div>\\n    {/if}\\n  </div>\\n  {#if btnHref && btnText}\\n    <a href={btnHref} class=\\"btn-cta\\">{btnText}</a>\\n  {/if}\\n  {#if footnote}\\n    <div class=\\"text-p-xsmall px-small text-gray-700\\">{footnote}</div>\\n  {/if}\\n</div>\\n"],"names":[],"mappings":"AAKmB,gCAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,gBAAgB,aAAa,CAAC,WAAW,IAAI,WAAW,CAAC,CAAC,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,cAAc,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,CAAC,WAAW,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,gCAAI,CAAC,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,kBAAI,CAAC,iBAAG,CAAC,cAAc,MAAM,CAAC,YAAY,GAAG,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,0CAAc,CAAC,sCAAU,CAAC,aAAa,IAAI,QAAQ,CAAC,CAAC,cAAc,IAAI,QAAQ,CAAC,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,0CAAc,CAAC,sCAAU,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,CAAC,0CAAc,CAAC,cAAc,IAAI,UAAU,CAAC,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,YAAY,GAAG,CAAC,sCAAU,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,2CAAe,CAAC,SAAS,QAAQ,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,2CAAe,OAAO,CAAC,QAAQ,IAAI,SAAS,CAAC,CAAC,SAAS,QAAQ,CAAC,KAAK,SAAS,CAAC,QAAQ,YAAY,CAAC,OAAO,QAAQ,CAAC,MAAM,QAAQ,CAAC,2CAAe,KAAK,WAAW,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,gCAAI,MAAM,CAAC,mCAAO,CAAC,WAAW,IAAI,cAAc,CAAC,CAAC,oCAAQ,CAAC,WAAW,MAAM,CAAC,uCAAW,CAAC,gBAAgB,SAAS,CAAC,AAAQ,YAAY,AAAC,CAAC,gBAAgB,YAAY,CAAC,AAAQ,YAAY,AAAC,CAAC,AAAQ,YAAY,AAAC,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC"}'
};
const Pricing_box = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {pricing: pricing2} = $$props;
  const {title, duration, features: features2, price, btnHref, btnText, spiced, learnMoreHref, footnote} = pricing2;
  if ($$props.pricing === void 0 && $$bindings.pricing && pricing2 !== void 0)
    $$bindings.pricing(pricing2);
  $$result.css.add(css$C);
  return `<div class="${escape(null_to_empty(`box ${spiced ? "spiced" : ""}`)) + " svelte-61r48i"}"><div class="${"min-h-full flex flex-col"}"><h2 class="${"h4"}">${escape(title)}</h2>
    <div class="${"h1 flex items-center justify-center svelte-61r48i"}">${price}</div>
    <div class="${"box__duration svelte-61r48i"}">${duration ? `${escape(duration)}` : `<span>\xA0</span>`}</div>
    ${features2 ? `<ul class="${"box__list svelte-61r48i"}">${each(features2, (feature) => `<li class="${"box__list-item svelte-61r48i"}">${escape(feature)}</li>`)}</ul>` : ``}
    ${learnMoreHref ? `<div class="${"flex flex-1 justify-center items-center"}"><a${add_attribute("href", learnMoreHref, 0)} class="${"learn-more svelte-61r48i"}">Learn More</a></div>` : ``}</div>
  ${btnHref && btnText ? `<a${add_attribute("href", btnHref, 0)} class="${"btn-cta svelte-61r48i"}">${escape(btnText)}</a>` : ``}
  ${footnote ? `<div class="${"text-p-xsmall px-small text-gray-700"}">${escape(footnote)}</div>` : ``}</div>`;
});
const Pricing_boxes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {pricingPlans: pricingPlans2} = $$props;
  if ($$props.pricingPlans === void 0 && $$bindings.pricingPlans && pricingPlans2 !== void 0)
    $$bindings.pricingPlans(pricingPlans2);
  return `<div class="${"pricingContainer"}">${each(pricingPlans2, (pricing2) => `${validate_component(Pricing_box, "PricingBox").$$render($$result, {pricing: pricing2}, {}, {})}`)}</div>`;
});
var pricingOffers_svelte = ".top.svelte-170utkj a{text-decoration:underline}";
const css$B = {
  code: ".top.svelte-170utkj a{text-decoration:underline}",
  map: '{"version":3,"file":"pricing-offers.svelte","sources":["pricing-offers.svelte"],"sourcesContent":["<script lang=\\"ts\\">import PricingBoxes from \\"../pricing/pricing-boxes.svelte\\";\\n;\\nexport let title;\\nexport let pricingPlans;\\n</script>\\n\\n<style lang=\\"scss\\">.top :global(a){text-decoration:underline}</style>\\n\\n<div class=\\"text-center\\">\\n  <div class=\\"top max-w-3xl mx-auto mb-small\\">\\n    <h2>{title}</h2>\\n    <div><slot name=\\"description\\" /></div>\\n  </div>\\n\\n  <PricingBoxes {pricingPlans} />\\n</div>\\n"],"names":[],"mappings":"AAMmB,mBAAI,CAAC,AAAQ,CAAC,AAAC,CAAC,gBAAgB,SAAS,CAAC"}'
};
const Pricing_offers = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {title} = $$props;
  let {pricingPlans: pricingPlans2} = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.pricingPlans === void 0 && $$bindings.pricingPlans && pricingPlans2 !== void 0)
    $$bindings.pricingPlans(pricingPlans2);
  $$result.css.add(css$B);
  return `<div class="${"text-center"}"><div class="${"top max-w-3xl mx-auto mb-small svelte-170utkj"}"><h2>${escape(title)}</h2>
    <div>${slots.description ? slots.description({}) : ``}</div></div>

  ${validate_component(Pricing_boxes, "PricingBoxes").$$render($$result, {pricingPlans: pricingPlans2}, {}, {})}</div>`;
});
const Explore = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {contents} = $$props;
  const {title = "Explore Gitpod", description = "Automated and ephemeral dev environments in the cloud.", link = {text: "See Features", href: "/features"}} = contents || {};
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<div class="${"explore"}"><div class="${"explore__text"}"><h2 class="${"h1"}">${escape(title)}</h2>
      <p class="${"explore__paragraph h4"}">${escape(description)}</p>
      <a${add_attribute("href", link.href, 0)} class="${"btn-conversion"}">${escape(link.text)}</a></div>
    <div class="${"explore__illustration"}"><img src="${"/images/illustration-grid.jpg"}" alt="${"Gitpod in a Nutshell"}">
      <img src="${"/images/illustration-small.jpg"}" class="${"small"}" alt="${"Gitpod in a Nutshell"}"></div></div>`
  })}`;
});
const Headline = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {text} = $$props;
  if ($$props.text === void 0 && $$bindings.text && text !== void 0)
    $$bindings.text(text);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h2 class="${"text-center m-auto max-w-5xl"}">${escape(text)}</h2>`
  })}`;
});
const isEurope = () => {
  const offset = new Date().getTimezoneOffset();
  return offset <= 0 && offset >= -180;
};
const hyphenate = (str = "") => str.toLocaleLowerCase().replace(/\s/g, "-");
const ghStudentPricingPlans = [
  {
    title: "Open Source",
    price: "Free",
    features: ["50 hours/month", "Public Repos", "Private repos 30d trial"],
    btnText: "Try Now",
    btnHref: "/#get-started"
  },
  {
    title: "Student",
    price: `<span class="crossed-out">${isEurope() ? "\u20AC8" : "$9"}</span> Free</>`,
    duration: "Per User/Month",
    features: [
      "100 hours/month",
      "Private & Public Repos",
      "4 Parallel Workspaces",
      "30min Timeout",
      "Limited to 6 months"
    ],
    btnText: "Claim Offer",
    btnHref: "https://gitpod.io/plans/",
    spiced: true
  },
  {
    title: "Student Unlimited",
    price: `<span class="crossed-out">${isEurope() ? "\u20AC35" : "$39"}</span> ${isEurope() ? "\u20AC8" : "$9"}`,
    duration: "Per User/Month",
    features: [
      "All in personal plus",
      "16 Parallel Workspaces",
      "Team Manageable",
      "1h Timeout"
    ],
    btnText: "Buy Now",
    btnHref: "https://gitpod.io/plans/"
  }
];
const ghTeacherPricingPlans = [
  {
    title: "Open Source",
    price: "Free",
    features: ["50 hours/month", "Public Repos", "Private repos 30d trial"],
    btnText: "Try Now",
    btnHref: "/#get-started"
  },
  {
    title: "Teacher",
    price: `<span class="crossed-out">${isEurope() ? "\u20AC8" : "$9"}</span> Free`,
    duration: "100 hours/Month",
    features: [
      "100 hours/month",
      "Private & Public Repos",
      "4 Parallel Workspaces",
      "30min Timeout",
      "Limited to 6 months"
    ],
    btnText: "Claim Offer",
    btnHref: "https://gitpod.io/plans/",
    spiced: true
  },
  {
    title: "Gitpod Education",
    price: `<span class="price-small">From</span> ${isEurope() ? "\u20AC0.75" : "$0.9"}`,
    learnMoreHref: "/education",
    footnote: "Only available for educational institutions"
  }
];
const Github_student_developer_pack = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      title: "GitHub Student Developer Pack",
      description: "With the GitHub Student Developer Pack, you get the same features as with our usual plans but at a much better price. We\u2019re happy to be able to empower student developers participating in it."
    }
  }, {}, {})}

${validate_component(Header$1, "Header").$$render($$result, {title: "GitHub Student Developer Pack"}, {}, {
    description: () => `Make Your Life Easier with Gitpod. With Gitpod you have no more tedious
    setups, you save hours of compiling code, and you can start coding from any
    device, immediately.
  `
  })}
${validate_component(Pricing_offers, "PricingOffers").$$render($$result, {
    title: "GitHub Student Offer",
    pricingPlans: ghStudentPricingPlans
  }, {}, {
    description: () => `<p>With the <a href="${"https://education.github.com/pack/?utm_source=github+gitpod"}" target="${"_blank"}">GitHub Student Developer Pack</a>, you get the same features as with our usual plans but at a much better
      price. We\u2019re happy to be able to empower student developers participating
      in it.
    </p>`
  })}
${validate_component(Headline, "Headline").$$render($$result, {
    text: "Stop wasting time with tedious setups, learn amazing programming skills instead!"
  }, {}, {})}
${validate_component(Explore, "Explore").$$render($$result, {}, {}, {})}`;
});
var githubStudentDeveloperPack = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Github_student_developer_pack
});
var gitpodVsGithubCodespaces_svelte = ".featureTable.svelte-583lh2+p.svelte-583lh2.svelte-583lh2{margin:auto;max-width:60%}.featureTable.svelte-583lh2>.svelte-583lh2>.svelte-583lh2{grid-auto-rows:3rem}.featureTable.svelte-583lh2 .toc li.svelte-583lh2.svelte-583lh2{font-weight:700;margin-bottom:1rem;padding-left:2.175rem;font-size:12px;display:flex;align-items:center}.featureTable.svelte-583lh2 .card.svelte-583lh2.svelte-583lh2{padding-top:1rem;padding-bottom:2rem}.featureTable.svelte-583lh2 .card-heading.svelte-583lh2.svelte-583lh2{height:5rem;display:flex;align-items:center;justify-content:center}.featureTable.svelte-583lh2 .toc img.svelte-583lh2.svelte-583lh2{width:24px}.featureTable.svelte-583lh2 [aria-label].svelte-583lh2.svelte-583lh2{min-height:1.5rem;min-width:1.5rem}.ticklist.svelte-583lh2>li.svelte-583lh2.svelte-583lh2{display:flex;align-items:flex-start}.ticklist.svelte-583lh2>li.svelte-583lh2>img.svelte-583lh2{width:24px;margin-right:1rem}.max-w-30rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{max-width:30rem}.mt-1rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-top:1rem}.mt-2rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-top:2rem}.mb-7rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-bottom:7rem}.mx-auto.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-left:auto;margin-right:auto}.p-4rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{padding:4rem}.card-image-legend.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-top:2rem;margin-bottom:0;font-size:12px;align-self:stretch}.cards.svelte-583lh2.svelte-583lh2.svelte-583lh2,.halfimages.svelte-583lh2 .card.svelte-583lh2.svelte-583lh2{justify-content:space-between;max-width:80vw;margin-left:auto;margin-right:auto;border-radius:2rem}.halfimages.svelte-583lh2 article.svelte-583lh2>div.svelte-583lh2{min-width:300px}@media(max-width:768px){.cards.svelte-583lh2.svelte-583lh2.svelte-583lh2,.halfimages.svelte-583lh2 .card.svelte-583lh2.svelte-583lh2{max-width:98vw}.cards.svelte-583lh2>div.svelte-583lh2.svelte-583lh2:last-child,.halfimages.svelte-583lh2 article.svelte-583lh2>div.svelte-583lh2:last-child{margin-top:3rem}.cards.double.svelte-583lh2>div.svelte-583lh2.svelte-583lh2{min-width:100%}}.cards.svelte-583lh2>.svelte-583lh2.svelte-583lh2,.halfimages.svelte-583lh2 article.svelte-583lh2>div.svelte-583lh2{align-self:stretch;display:flex;flex-direction:column;align-items:flex-start;margin:0}.flex-grow.svelte-583lh2.svelte-583lh2.svelte-583lh2{flex-grow:1}.text-center.svelte-583lh2.svelte-583lh2.svelte-583lh2{text-align:center}.text-xl.svelte-583lh2.svelte-583lh2.svelte-583lh2{font-size:1.25rem;line-height:1.75rem}";
const css$A = {
  code: ".featureTable.svelte-583lh2+p.svelte-583lh2.svelte-583lh2{margin:auto;max-width:60%}.featureTable.svelte-583lh2>.svelte-583lh2>.svelte-583lh2{grid-auto-rows:3rem}.featureTable.svelte-583lh2 .toc li.svelte-583lh2.svelte-583lh2{font-weight:700;margin-bottom:1rem;padding-left:2.175rem;font-size:12px;display:flex;align-items:center}.featureTable.svelte-583lh2 .card.svelte-583lh2.svelte-583lh2{padding-top:1rem;padding-bottom:2rem}.featureTable.svelte-583lh2 .card-heading.svelte-583lh2.svelte-583lh2{height:5rem;display:flex;align-items:center;justify-content:center}.featureTable.svelte-583lh2 .toc img.svelte-583lh2.svelte-583lh2{width:24px}.featureTable.svelte-583lh2 [aria-label].svelte-583lh2.svelte-583lh2{min-height:1.5rem;min-width:1.5rem}.ticklist.svelte-583lh2>li.svelte-583lh2.svelte-583lh2{display:flex;align-items:flex-start}.ticklist.svelte-583lh2>li.svelte-583lh2>img.svelte-583lh2{width:24px;margin-right:1rem}.max-w-30rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{max-width:30rem}.mt-1rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-top:1rem}.mt-2rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-top:2rem}.mb-7rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-bottom:7rem}.mx-auto.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-left:auto;margin-right:auto}.p-4rem.svelte-583lh2.svelte-583lh2.svelte-583lh2{padding:4rem}.card-image-legend.svelte-583lh2.svelte-583lh2.svelte-583lh2{margin-top:2rem;margin-bottom:0;font-size:12px;align-self:stretch}.cards.svelte-583lh2.svelte-583lh2.svelte-583lh2,.halfimages.svelte-583lh2 .card.svelte-583lh2.svelte-583lh2{justify-content:space-between;max-width:80vw;margin-left:auto;margin-right:auto;border-radius:2rem}.halfimages.svelte-583lh2 article.svelte-583lh2>div.svelte-583lh2{min-width:300px}@media(max-width:768px){.cards.svelte-583lh2.svelte-583lh2.svelte-583lh2,.halfimages.svelte-583lh2 .card.svelte-583lh2.svelte-583lh2{max-width:98vw}.cards.svelte-583lh2>div.svelte-583lh2.svelte-583lh2:last-child,.halfimages.svelte-583lh2 article.svelte-583lh2>div.svelte-583lh2:last-child{margin-top:3rem}.cards.double.svelte-583lh2>div.svelte-583lh2.svelte-583lh2{min-width:100%}}.cards.svelte-583lh2>.svelte-583lh2.svelte-583lh2,.halfimages.svelte-583lh2 article.svelte-583lh2>div.svelte-583lh2{align-self:stretch;display:flex;flex-direction:column;align-items:flex-start;margin:0}.flex-grow.svelte-583lh2.svelte-583lh2.svelte-583lh2{flex-grow:1}.text-center.svelte-583lh2.svelte-583lh2.svelte-583lh2{text-align:center}.text-xl.svelte-583lh2.svelte-583lh2.svelte-583lh2{font-size:1.25rem;line-height:1.75rem}",
  map: `{"version":3,"file":"gitpod-vs-github-codespaces.svelte","sources":["gitpod-vs-github-codespaces.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script>\\n  import OpenGraph from \\"../components/open-graph.svelte\\";\\n</script>\\n\\n<style>.featureTable+p{margin:auto;max-width:60%}.featureTable>*>*{grid-auto-rows:3rem}.featureTable .toc li{font-weight:700;margin-bottom:1rem;padding-left:2.175rem;font-size:12px;display:flex;align-items:center}.featureTable .card{padding-top:1rem;padding-bottom:2rem}.featureTable .card-heading{height:5rem;display:flex;align-items:center;justify-content:center}.featureTable .toc img{width:24px}.featureTable [aria-label]{min-height:1.5rem;min-width:1.5rem}.ticklist>li{display:flex;align-items:flex-start}.ticklist>li>img{width:24px;margin-right:1rem}.max-w-30rem{max-width:30rem}.mt-1rem{margin-top:1rem}.mt-2rem{margin-top:2rem}.mb-7rem{margin-bottom:7rem}.mr-1rem{margin-right:1rem}.mx-auto{margin-left:auto;margin-right:auto}.p-4rem{padding:4rem}.card-image-legend{margin-top:2rem;margin-bottom:0;font-size:12px;align-self:stretch}.cards,.halfimages .card{justify-content:space-between;max-width:80vw;margin-left:auto;margin-right:auto;border-radius:2rem}.halfimages article>div{min-width:300px}@media (max-width:768px){.cards,.halfimages .card{max-width:98vw}.cards>div:last-child,.halfimages article>div:last-child{margin-top:3rem}.cards.double>div{min-width:100%}}.cards>*,.halfimages article>div{align-self:stretch;display:flex;flex-direction:column;align-items:flex-start;margin:0}.flex-grow{flex-grow:1}.inline-block{display:inline-block}.text-center{text-align:center}.text-xl{font-size:1.25rem;line-height:1.75rem}.leading-3{line-height:.75rem}</style>\\n\\n<OpenGraph\\n  data={{\\n    description:\\n      \\"Gitpod is the faster, more powerful, open-source platform that integrates with your individual stack.\\",\\n    title: \\"Gitpod vs GitHub Codespaces\\",\\n  }}\\n/>\\n<header>\\n  <h1>Gitpod vs GitHub Codespaces</h1>\\n  <p>\\n    Gitpod is the faster, more powerful, open-source platform that integrates\\n    with your individual stack.\\n  </p>\\n</header>\\n\\n<div class=\\"halfimages\\">\\n  <article class=\\"card\\">\\n    <div>\\n      <!-- svelte-ignore a11y-missing-attribute -->\\n      <img src=\\"/images/codespace/spaces-1.svg\\" role=\\"presentation\\" />\\n      <p class=\\"card-image-legend\\">\\n        Compared start-up time until ready-to-code for<br /><a\\n          href=\\"https://github.com/gitpod-io/vscode\\"\\n          ><strong>https://github.com/gitpod-io/vscode</strong></a\\n        >. Last verified 25 Sep 2020.\\n      </p>\\n    </div>\\n    <div>\\n      <h2 class=\\"max-w-30rem\\">Ready in a flash</h2>\\n      <p class=\\"text-large max-w-30rem flex-grow\\">\\n        Gitpod removes long init and build times by continuously pre-building\\n        workspaces for your project. Thereby it allows you to start coding or\\n        debugging immediately, from any context, at any time.\\n      </p>\\n      <a href=\\"/blog/continuous-dev-environment-in-devops\\" class=\\"btn-secondary\\"\\n        >More about Continuous Dev Environments.</a\\n      >\\n    </div>\\n  </article>\\n\\n  <article class=\\"card\\">\\n    <div>\\n      <!-- svelte-ignore a11y-missing-attribute -->\\n      <img\\n        src=\\"/images/codespace/spaces-2.svg\\"\\n        role=\\"presentation\\"\\n        width=\\"550\\"\\n        height=\\"414\\"\\n      />\\n      <p class=\\"card-image-legend\\">\\n        Compared resources for 100 active hours at $9/month. Last verified 25\\n        Sep 2020.<br />Sources: <a href=\\"/pricing\\"><strong>Gitpod</strong></a>,\\n        <a\\n          href=\\"https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/about-billing-for-codespaces\\"\\n          ><strong>GitHub Codespaces</strong></a\\n        >.\\n      </p>\\n    </div>\\n    <div>\\n      <h2 class=\\"max-w-30rem\\">3x more power</h2>\\n      <p class=\\"text-large max-w-30rem\\">\\n        By leveraging cloud technologies like containers and Kubernetes, Gitpod\\n        achieves best-in-class resource-efficiency with scalable workspaces\\n        running on shared high-powered cloud servers.\\n      </p>\\n    </div>\\n  </article>\\n</div>\\n\\n<div class=\\"featureTable\\">\\n  <section class=\\"card toc\\">\\n    <ul class=\\"tableOfContents\\" role=\\"presentation\\">\\n      <li>Pricing (Hosted)</li>\\n      <li>License</li>\\n      <li class=\\"hasIcon\\">\\n        <img src=\\"/svg/github.svg\\" alt=\\"GitHub\\" width=\\"24\\" /> GitHub Integration\\n      </li>\\n\\n      <li class=\\"hasIcon\\">\\n        <img src=\\"/svg/gitlab.svg\\" alt=\\"GitLab\\" width=\\"24\\" />GitLab Integration\\n      </li>\\n\\n      <li class=\\"hasIcon\\">\\n        <img src=\\"/svg/bitbucket.svg\\" alt=\\"Bitbucket\\" width=\\"24\\" /> Bitbucket Integration\\n      </li>\\n\\n      <li class=\\"hasIcon\\">\\n        <img src=\\"/svg/brands/gcp.svg\\" alt=\\"Google Cloud Platform\\" width=\\"24\\" />\\n        Self-Host on GCP\\n      </li>\\n\\n      <li class=\\"hasIcon\\">\\n        <img\\n          src=\\"/svg/brands/aws.svg\\"\\n          alt=\\"Amazon Web Services\\"\\n          width=\\"24\\"\\n        />Self-Host on AWS\\n      </li>\\n      <li class=\\"hasIcon\\">\\n        <img\\n          src=\\"/svg/brands/kubernetes.svg\\"\\n          alt=\\"Kubernetes\\"\\n          width=\\"24\\"\\n        />Self-Host on Kubernetes\\n      </li>\\n      <li>Prebuilds</li>\\n      <li>Snapshots</li>\\n      <li>VS Code Extensions</li>\\n      <li>iPad Support</li>\\n      <li>Virtual Desktop (VNC)</li>\\n      <li>Multi-IDE Support</li>\\n    </ul>\\n  </section>\\n  <section class=\\"card alive text-center\\">\\n    <h2 class=\\"card-heading\\">\\n      <img alt=\\"Gitpod\\" src=\\"/images/gitpod-logo.svg\\" width=\\"40\\" height=\\"36\\" />\\n    </h2>\\n    <dl id=\\"gitpodPricing\\" class=\\"tableColumn\\">\\n      <dt>Pricing (Hosted)</dt>\\n      <dd>Free for Open-Source</dd>\\n      <dt>License</dt>\\n      <dd>Open Source</dd>\\n      <dt>GitHub Integration</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>GitLab Integration</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Bitbucket Integration</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Self-Host on GCP</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Self-Host on AWS</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Self-Host on Kubernetes</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Prebuilds</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Snapshots</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>VS Code Extensions</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>iPad Support</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Virtual Desktop (VNC)</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Multi-IDE Support</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n    </dl>\\n  </section>\\n  <section class=\\"card text-center\\">\\n    <h2 class=\\"text-xl card-heading h4\\">GitHub<br />Codespaces</h2>\\n    <dl>\\n      <dt>Pricing (Hosted)</dt>\\n      <dd>\\n        <span aria-label=\\"unknown\\" class=\\"icon\\">$$$</span>\\n      </dd>\\n      <dt>License</dt>\\n      <dd>Proprietary</dd>\\n      <dt>GitHub Integration</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>GitLab Integration</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>Bitbucket Integration</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>Self-Host on GCP</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>Self-Host on AWS</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>Self-Host on Kubernetes</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>Prebuilds</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>Snapshots</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n      <dt>VS Code Extensions</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>iPad Support</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Virtual Desktop (VNC)</dt>\\n      <dd>\\n        <img alt=\\"Yes\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/tick.svg\\" />\\n      </dd>\\n      <dt>Multi-IDE Support</dt>\\n      <dd>\\n        <img alt=\\"No\\" class=\\"mx-auto\\" height=\\"24\\" width=\\"24\\" src=\\"/cross.svg\\" />\\n      </dd>\\n    </dl>\\n  </section>\\n</div>\\n<p>\\n  <small\\n    >Disclaimer: All information, prices, and data were last verified on Sept.\\n    25, 2020. To report any incorrect or outdated information, please <a\\n      href=\\"/contact\\">contact us.</a\\n    ></small\\n  >\\n</p>\\n\\n<div class=\\"brief\\">\\n  <h2>Ready to feel the difference?</h2>\\n  <p class=\\"text-large\\">\\n    Spin up an example workspace now, just link your git provider\\n  </p>\\n  <p>\\n    <a href=\\"/#get-started\\" class=\\"btn-conversion mt-2rem\\">Try Now</a>\\n  </p>\\n</div>\\n\\n<div class=\\"halfimages\\">\\n  <article class=\\"card\\">\\n    <div>\\n      <!-- svelte-ignore a11y-missing-attribute -->\\n      <img\\n        src=\\"/images/codespace/spaces-3.svg\\"\\n        role=\\"presentation\\"\\n        width=\\"550\\"\\n      />\\n    </div>\\n    <div>\\n      <h2>Open-Source</h2>\\n      <p class=\\"text-large\\">\\n        Gitpod puts developers' interest first and thereby guarantees full\\n        transparency and flexibility. Integrate, don't dictate.\\n      </p>\\n      <ul class=\\"text-large ticklist\\">\\n        <li>\\n          <img alt=\\"\u2713\\" src=\\"/tick.svg\\" />\\n          <span\\n            >Host Gitpod yourself on GCP, AWS, Azure or self-managed Kubernetes</span\\n          >\\n        </li>\\n        <li>\\n          <img alt=\\"\u2713\\" src=\\"/tick.svg\\" />\\n          <span>Contribute to Gitpod and build customizations yourself</span>\\n        </li>\\n        <li>\\n          <img alt=\\"\u2713\\" src=\\"/tick.svg\\" />\\n          <span>Works just as smoothly with GitHub, GitLab and Bitbucket</span>\\n        </li>\\n      </ul>\\n    </div>\\n  </article>\\n</div>\\n\\n<div class=\\"cards double mt-1rem mb-7rem\\">\\n  <div class=\\"card p-4rem\\">\\n    <h2 class=\\"h3\\">Automation-first</h2>\\n    <p class=\\"flex-grow\\">\\n      Simply add your build command into a .gitpod.yml file and let Gitpod do\\n      the heavy-lifting. Once you\u2019ve experienced the freedom of ephemeral\\n      workspaces, you\u2019ll never want to go back to long-lived,\\n      manually-maintained environments.\\n    </p>\\n    <p>\\n      <a href=\\"/#get-started\\" class=\\"btn-primary\\">Try Now</a>\\n    </p>\\n  </div>\\n  <div class=\\"card p-4rem\\">\\n    <h2 class=\\"h3\\">Code in a carbon-neutral workspace</h2>\\n    <p class=\\"flex-grow\\">\\n      Not only is Gitpod more resource-efficient but it also runs on 100%\\n      carbon-neutral cloud servers (GCP). All the power, with a lower cost to\\n      our planet.\\n    </p>\\n    <p>\\n      <a\\n        href=\\"https://cloud.google.com/sustainability\\"\\n        class=\\"btn-green\\"\\n        target=\\"_blank\\"\\n        rel=\\"noopener\\">More on GCP carbon neutral</a\\n      >\\n    </p>\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAQO,2BAAa,CAAC,6BAAC,CAAC,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,2BAAa,CAAC,cAAC,CAAC,cAAC,CAAC,eAAe,IAAI,CAAC,2BAAa,CAAC,IAAI,CAAC,8BAAE,CAAC,YAAY,GAAG,CAAC,cAAc,IAAI,CAAC,aAAa,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,2BAAa,CAAC,iCAAK,CAAC,YAAY,IAAI,CAAC,eAAe,IAAI,CAAC,2BAAa,CAAC,yCAAa,CAAC,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,gBAAgB,MAAM,CAAC,2BAAa,CAAC,IAAI,CAAC,+BAAG,CAAC,MAAM,IAAI,CAAC,2BAAa,CAAC,CAAC,UAAU,6BAAC,CAAC,WAAW,MAAM,CAAC,UAAU,MAAM,CAAC,uBAAS,CAAC,8BAAE,CAAC,QAAQ,IAAI,CAAC,YAAY,UAAU,CAAC,uBAAS,CAAC,gBAAE,CAAC,iBAAG,CAAC,MAAM,IAAI,CAAC,aAAa,IAAI,CAAC,sDAAY,CAAC,UAAU,KAAK,CAAC,kDAAQ,CAAC,WAAW,IAAI,CAAC,kDAAQ,CAAC,WAAW,IAAI,CAAC,kDAAQ,CAAC,cAAc,IAAI,CAAC,AAA2B,kDAAQ,CAAC,YAAY,IAAI,CAAC,aAAa,IAAI,CAAC,iDAAO,CAAC,QAAQ,IAAI,CAAC,4DAAkB,CAAC,WAAW,IAAI,CAAC,cAAc,CAAC,CAAC,UAAU,IAAI,CAAC,WAAW,OAAO,CAAC,gDAAM,CAAC,yBAAW,CAAC,iCAAK,CAAC,gBAAgB,aAAa,CAAC,UAAU,IAAI,CAAC,YAAY,IAAI,CAAC,aAAa,IAAI,CAAC,cAAc,IAAI,CAAC,yBAAW,CAAC,qBAAO,CAAC,iBAAG,CAAC,UAAU,KAAK,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,gDAAM,CAAC,yBAAW,CAAC,iCAAK,CAAC,UAAU,IAAI,CAAC,oBAAM,CAAC,+BAAG,WAAW,CAAC,yBAAW,CAAC,qBAAO,CAAC,iBAAG,WAAW,CAAC,WAAW,IAAI,CAAC,MAAM,qBAAO,CAAC,+BAAG,CAAC,UAAU,IAAI,CAAC,CAAC,oBAAM,CAAC,4BAAC,CAAC,yBAAW,CAAC,qBAAO,CAAC,iBAAG,CAAC,WAAW,OAAO,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,YAAY,UAAU,CAAC,OAAO,CAAC,CAAC,oDAAU,CAAC,UAAU,CAAC,CAAC,AAAmC,sDAAY,CAAC,WAAW,MAAM,CAAC,kDAAQ,CAAC,UAAU,OAAO,CAAC,YAAY,OAAO,CAAC"}`
};
const prerender$2F = true;
const Gitpod_vs_github_codespaces = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$A);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod is the faster, more powerful, open-source platform that integrates with your individual stack.",
      title: "Gitpod vs GitHub Codespaces"
    }
  }, {}, {})}
<header><h1>Gitpod vs GitHub Codespaces</h1>
  <p>Gitpod is the faster, more powerful, open-source platform that integrates
    with your individual stack.
  </p></header>

<div class="${"halfimages svelte-583lh2"}"><article class="${"card svelte-583lh2"}"><div class="${"svelte-583lh2"}">
      <img src="${"/images/codespace/spaces-1.svg"}" role="${"presentation"}">
      <p class="${"card-image-legend svelte-583lh2"}">Compared start-up time until ready-to-code for<br><a href="${"https://github.com/gitpod-io/vscode"}"><strong>https://github.com/gitpod-io/vscode</strong></a>. Last verified 25 Sep 2020.
      </p></div>
    <div class="${"svelte-583lh2"}"><h2 class="${"max-w-30rem svelte-583lh2"}">Ready in a flash</h2>
      <p class="${"text-large max-w-30rem flex-grow svelte-583lh2"}">Gitpod removes long init and build times by continuously pre-building
        workspaces for your project. Thereby it allows you to start coding or
        debugging immediately, from any context, at any time.
      </p>
      <a href="${"/blog/continuous-dev-environment-in-devops"}" class="${"btn-secondary"}">More about Continuous Dev Environments.</a></div></article>

  <article class="${"card svelte-583lh2"}"><div class="${"svelte-583lh2"}">
      <img src="${"/images/codespace/spaces-2.svg"}" role="${"presentation"}" width="${"550"}" height="${"414"}">
      <p class="${"card-image-legend svelte-583lh2"}">Compared resources for 100 active hours at $9/month. Last verified 25
        Sep 2020.<br>Sources: <a href="${"/pricing"}"><strong>Gitpod</strong></a>,
        <a href="${"https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/about-billing-for-codespaces"}"><strong>GitHub Codespaces</strong></a>.
      </p></div>
    <div class="${"svelte-583lh2"}"><h2 class="${"max-w-30rem svelte-583lh2"}">3x more power</h2>
      <p class="${"text-large max-w-30rem svelte-583lh2"}">By leveraging cloud technologies like containers and Kubernetes, Gitpod
        achieves best-in-class resource-efficiency with scalable workspaces
        running on shared high-powered cloud servers.
      </p></div></article></div>

<div class="${"featureTable svelte-583lh2"}"><section class="${"card toc svelte-583lh2"}"><ul class="${"tableOfContents svelte-583lh2"}" role="${"presentation"}"><li class="${"svelte-583lh2"}">Pricing (Hosted)</li>
      <li class="${"svelte-583lh2"}">License</li>
      <li class="${"hasIcon svelte-583lh2"}"><img src="${"/svg/github.svg"}" alt="${"GitHub"}" width="${"24"}" class="${"svelte-583lh2"}"> GitHub Integration
      </li>

      <li class="${"hasIcon svelte-583lh2"}"><img src="${"/svg/gitlab.svg"}" alt="${"GitLab"}" width="${"24"}" class="${"svelte-583lh2"}">GitLab Integration
      </li>

      <li class="${"hasIcon svelte-583lh2"}"><img src="${"/svg/bitbucket.svg"}" alt="${"Bitbucket"}" width="${"24"}" class="${"svelte-583lh2"}"> Bitbucket Integration
      </li>

      <li class="${"hasIcon svelte-583lh2"}"><img src="${"/svg/brands/gcp.svg"}" alt="${"Google Cloud Platform"}" width="${"24"}" class="${"svelte-583lh2"}">
        Self-Host on GCP
      </li>

      <li class="${"hasIcon svelte-583lh2"}"><img src="${"/svg/brands/aws.svg"}" alt="${"Amazon Web Services"}" width="${"24"}" class="${"svelte-583lh2"}">Self-Host on AWS
      </li>
      <li class="${"hasIcon svelte-583lh2"}"><img src="${"/svg/brands/kubernetes.svg"}" alt="${"Kubernetes"}" width="${"24"}" class="${"svelte-583lh2"}">Self-Host on Kubernetes
      </li>
      <li class="${"svelte-583lh2"}">Prebuilds</li>
      <li class="${"svelte-583lh2"}">Snapshots</li>
      <li class="${"svelte-583lh2"}">VS Code Extensions</li>
      <li class="${"svelte-583lh2"}">iPad Support</li>
      <li class="${"svelte-583lh2"}">Virtual Desktop (VNC)</li>
      <li class="${"svelte-583lh2"}">Multi-IDE Support</li></ul></section>
  <section class="${"card alive text-center svelte-583lh2"}"><h2 class="${"card-heading svelte-583lh2"}"><img alt="${"Gitpod"}" src="${"/images/gitpod-logo.svg"}" width="${"40"}" height="${"36"}" class="${"svelte-583lh2"}"></h2>
    <dl id="${"gitpodPricing"}" class="${"tableColumn svelte-583lh2"}"><dt>Pricing (Hosted)</dt><dd>Free for Open-Source</dd><dt>License</dt><dd>Open Source</dd><dt>GitHub Integration</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>GitLab Integration</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Bitbucket Integration</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Self-Host on GCP</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Self-Host on AWS</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Self-Host on Kubernetes</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Prebuilds</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Snapshots</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>VS Code Extensions</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>iPad Support</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Virtual Desktop (VNC)</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Multi-IDE Support</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}"></dd></dl></section>
  <section class="${"card text-center svelte-583lh2"}"><h2 class="${"text-xl card-heading h4 svelte-583lh2"}">GitHub<br>Codespaces</h2>
    <dl class="${"svelte-583lh2"}"><dt>Pricing (Hosted)</dt><dd><span aria-label="${"unknown"}" class="${"icon svelte-583lh2"}">$$$</span>
      </dd><dt>License</dt><dd>Proprietary</dd><dt>GitHub Integration</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>GitLab Integration</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>Bitbucket Integration</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>Self-Host on GCP</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>Self-Host on AWS</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>Self-Host on Kubernetes</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>Prebuilds</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>Snapshots</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}">
      </dd><dt>VS Code Extensions</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>iPad Support</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Virtual Desktop (VNC)</dt><dd><img alt="${"Yes"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/tick.svg"}">
      </dd><dt>Multi-IDE Support</dt><dd><img alt="${"No"}" class="${"mx-auto svelte-583lh2"}" height="${"24"}" width="${"24"}" src="${"/cross.svg"}"></dd></dl></section></div>
<p class="${"svelte-583lh2"}"><small>Disclaimer: All information, prices, and data were last verified on Sept.
    25, 2020. To report any incorrect or outdated information, please <a href="${"/contact"}">contact us.</a></small></p>

<div class="${"brief"}"><h2>Ready to feel the difference?</h2>
  <p class="${"text-large"}">Spin up an example workspace now, just link your git provider
  </p>
  <p><a href="${"/#get-started"}" class="${"btn-conversion mt-2rem svelte-583lh2"}">Try Now</a></p></div>

<div class="${"halfimages svelte-583lh2"}"><article class="${"card svelte-583lh2"}"><div class="${"svelte-583lh2"}">
      <img src="${"/images/codespace/spaces-3.svg"}" role="${"presentation"}" width="${"550"}"></div>
    <div class="${"svelte-583lh2"}"><h2>Open-Source</h2>
      <p class="${"text-large"}">Gitpod puts developers&#39; interest first and thereby guarantees full
        transparency and flexibility. Integrate, don&#39;t dictate.
      </p>
      <ul class="${"text-large ticklist svelte-583lh2"}"><li class="${"svelte-583lh2"}"><img alt="${"\u2713"}" src="${"/tick.svg"}" class="${"svelte-583lh2"}">
          <span>Host Gitpod yourself on GCP, AWS, Azure or self-managed Kubernetes</span></li>
        <li class="${"svelte-583lh2"}"><img alt="${"\u2713"}" src="${"/tick.svg"}" class="${"svelte-583lh2"}">
          <span>Contribute to Gitpod and build customizations yourself</span></li>
        <li class="${"svelte-583lh2"}"><img alt="${"\u2713"}" src="${"/tick.svg"}" class="${"svelte-583lh2"}">
          <span>Works just as smoothly with GitHub, GitLab and Bitbucket</span></li></ul></div></article></div>

<div class="${"cards double mt-1rem mb-7rem svelte-583lh2"}"><div class="${"card p-4rem svelte-583lh2"}"><h2 class="${"h3"}">Automation-first</h2>
    <p class="${"flex-grow svelte-583lh2"}">Simply add your build command into a .gitpod.yml file and let Gitpod do
      the heavy-lifting. Once you\u2019ve experienced the freedom of ephemeral
      workspaces, you\u2019ll never want to go back to long-lived,
      manually-maintained environments.
    </p>
    <p><a href="${"/#get-started"}" class="${"btn-primary"}">Try Now</a></p></div>
  <div class="${"card p-4rem svelte-583lh2"}"><h2 class="${"h3"}">Code in a carbon-neutral workspace</h2>
    <p class="${"flex-grow svelte-583lh2"}">Not only is Gitpod more resource-efficient but it also runs on 100%
      carbon-neutral cloud servers (GCP). All the power, with a lower cost to
      our planet.
    </p>
    <p><a href="${"https://cloud.google.com/sustainability"}" class="${"btn-green"}" target="${"_blank"}" rel="${"noopener"}">More on GCP carbon neutral</a></p></div></div>`;
});
var gitpodVsGithubCodespaces = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_vs_github_codespaces,
  prerender: prerender$2F
});
const Github_teacher_toolbox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      title: "GitHub Teacher Toolbox",
      description: "With Gitpod you can create coding exams and exercises easily, help out your students via live tutoring, and benefit from a simple onboarding with any device."
    }
  }, {}, {})}

${validate_component(Header$1, "Header").$$render($$result, {title: "GitHub Teacher Toolbox"}, {}, {
    description: () => `Let\u2019s Focus on Teaching Code, not Tedious Setups! With Gitpod you can create
    coding exams and exercises easily, help out your students via live tutoring,
    and benefit from a simple onboarding with any device <a href="${"/education"}">Learn more</a>.
  `
  })}
${validate_component(Pricing_offers, "PricingOffers").$$render($$result, {
    title: "GitHub Teacher Offer",
    pricingPlans: ghTeacherPricingPlans
  }, {}, {
    description: () => `<p class="${"mb-4"}">With the <a href="${"https://education.github.com/toolbox/?utm_source=github+gitpod"}" target="${"_blank"}">GitHub Teacher Toolbox</a>, you get the same free plan as your students with the
      <a href="${"https://education.github.com/pack/?utm_source=github+gitpod"}" target="${"blank"}">GitHub Student Developer Pack</a>.
    </p>
    <p>We\u2019re happy to support educators teaching frictionless coding.</p>`
  })}
${validate_component(Headline, "Headline").$$render($$result, {
    text: " Stop wasting time with tedious setups, teach amazing programming skills instead!"
  }, {}, {})}
${validate_component(Explore, "Explore").$$render($$result, {}, {}, {})}`;
});
var githubTeacherToolbox = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Github_teacher_toolbox
});
var extensionActivation_svelte = ".buttons.svelte-yh233j.svelte-yh233j{display:inline-flex;flex-direction:row;align-items:baseline}@media(max-width:848px){.buttons.svelte-yh233j.svelte-yh233j{flex-direction:column;display:block;text-align:center}}.buttons.svelte-yh233j .btn.svelte-yh233j{display:flex;padding:var(--macro) var(--x-small);border-radius:.75rem;color:var(--white);border:1px solid transparent;align-items:center;justify-items:center;place-items:center;transition:all .2s;margin:8px}.buttons.svelte-yh233j .btn.svelte-yh233j:active,.buttons.svelte-yh233j .btn.svelte-yh233j:focus,.buttons.svelte-yh233j .btn.svelte-yh233j:hover{opacity:.9}.buttons.svelte-yh233j .btn.svelte-yh233j:not(:last-child){margin-bottom:var(--micro)}.buttons.svelte-yh233j .btn--github.svelte-yh233j{background:#000}.buttons.svelte-yh233j .btn--github.svelte-yh233j:active,.buttons.svelte-yh233j .btn--github.svelte-yh233j:focus,.buttons.svelte-yh233j .btn--github.svelte-yh233j:hover{opacity:1;background:var(--black-hover)}.buttons.svelte-yh233j .btn--bitbucket.svelte-yh233j{background:#2684ff}.buttons.svelte-yh233j .btn--gitlab.svelte-yh233j{background:#fc6d26}.buttons.svelte-yh233j svg.svelte-yh233j{height:1.75rem;width:1.75rem;margin-right:var(--micro)}@media(max-width:1400px){.buttons.svelte-yh233j svg.svelte-yh233j{display:none}}";
const css$z = {
  code: ".buttons.svelte-yh233j.svelte-yh233j{display:inline-flex;flex-direction:row;align-items:baseline}@media(max-width:848px){.buttons.svelte-yh233j.svelte-yh233j{flex-direction:column;display:block;text-align:center}}.buttons.svelte-yh233j .btn.svelte-yh233j{display:flex;padding:var(--macro) var(--x-small);border-radius:.75rem;color:var(--white);border:1px solid transparent;align-items:center;justify-items:center;place-items:center;transition:all .2s;margin:8px}.buttons.svelte-yh233j .btn.svelte-yh233j:active,.buttons.svelte-yh233j .btn.svelte-yh233j:focus,.buttons.svelte-yh233j .btn.svelte-yh233j:hover{opacity:.9}.buttons.svelte-yh233j .btn.svelte-yh233j:not(:last-child){margin-bottom:var(--micro)}.buttons.svelte-yh233j .btn--github.svelte-yh233j{background:#000}.buttons.svelte-yh233j .btn--github.svelte-yh233j:active,.buttons.svelte-yh233j .btn--github.svelte-yh233j:focus,.buttons.svelte-yh233j .btn--github.svelte-yh233j:hover{opacity:1;background:var(--black-hover)}.buttons.svelte-yh233j .btn--bitbucket.svelte-yh233j{background:#2684ff}.buttons.svelte-yh233j .btn--gitlab.svelte-yh233j{background:#fc6d26}.buttons.svelte-yh233j svg.svelte-yh233j{height:1.75rem;width:1.75rem;margin-right:var(--micro)}@media(max-width:1400px){.buttons.svelte-yh233j svg.svelte-yh233j{display:none}}",
  map: '{"version":3,"file":"extension-activation.svelte","sources":["extension-activation.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script lang=\\"ts\\">const currentBrowser = [\\"Opera\\", \\"Chrome\\", \\"Firefox\\", \\"IE\\"].find((browser) => typeof window !== \\"undefined\\" &&\\n    window.navigator.userAgent.includes(browser));\\nconst features = [\\n    {\\n        icon: \\"/images/extension-activation/prebuild.svg\\",\\n        title: \\"Skip the Waiting\\",\\n        description: \\"Gitpod continuously builds your git branches like a CI server. This means no more waiting for dependencies to be downloaded and builds to finish.\\",\\n    },\\n    {\\n        icon: \\"/images/extension-activation/collaborate.svg\\",\\n        title: \\"Code Together\\",\\n        description: \\"Do code reviews within Gitpod, work together in one workspace in real-time and share reproducible workspaces with your team.\\",\\n    },\\n    {\\n        icon: \\"/images/extension-activation/fresh.svg\\",\\n        title: \\"Work Remotely\\",\\n        description: \\"You no longer need an over-powered laptop, Gitpod works just as smoothly on a Chromebook or iPad. All you need is a browser.\\",\\n    },\\n];\\n</script>\\n\\n<style lang=\\"scss\\">.buttons{display:inline-flex;flex-direction:row;align-items:baseline}@media (max-width:848px){.buttons{flex-direction:column;display:block;text-align:center}}.buttons .btn{display:flex;padding:var(--macro) var(--x-small);border-radius:.75rem;color:var(--white);border:1px solid transparent;align-items:center;justify-items:center;place-items:center;transition:all .2s;margin:8px}.buttons .btn:active,.buttons .btn:focus,.buttons .btn:hover{opacity:.9}.buttons .btn:not(:last-child){margin-bottom:var(--micro)}.buttons .btn--github{background:#000}.buttons .btn--github:active,.buttons .btn--github:focus,.buttons .btn--github:hover{opacity:1;background:var(--black-hover)}.buttons .btn--bitbucket{background:#2684ff}.buttons .btn--gitlab{background:#fc6d26}.buttons svg{height:1.75rem;width:1.75rem;margin-right:var(--micro)}@media (max-width:1400px){.buttons svg{display:none}}</style>\\n\\n<header>\\n  Extension Installed\\n  <h1>Gitpod for {currentBrowser} is Now Active</h1>\\n</header>\\n\\n<section class=\\"halfimages\\">\\n  <article>\\n    <div>\\n      <img\\n        src=\\"/images/extension-activation/extension-screenshot.png\\"\\n        alt=\\"A GitHub project page with the Gitpod button highlighted\\"\\n        height=\\"688\\"\\n        width=\\"688\\"\\n      />\\n    </div>\\n    <div>\\n      <h2 class=\\"h3\\">\\n        Now you can easily spin up dev environments with a single click.\\n      </h2>\\n      <p class=\\"text-large\\">\\n        The extension adds a Gitpod button on every project and branch across\\n        GitLab, GitHub, and Bitbucket so you can easily open a new workspace for\\n        any existing project.\\n      </p>\\n      <div class=\\"buttons\\">\\n        <a href=\\"https://gitlab.com\\" class=\\"btn btn--gitlab\\">\\n          <svg\\n            viewBox=\\"0 0 30 28\\"\\n            fill=\\"none\\"\\n            xmlns=\\"http://www.w3.org/2000/svg\\"\\n          >\\n            <title>Bitbucket</title>\\n            <path\\n              d=\\"M14.583 27.214L9.21 10.954h10.738l-5.365 16.26z\\"\\n              fill=\\"#fff\\"\\n            /><path\\n              d=\\"M27.476 10.954l1.637 4.94c.148.449-.012.944-.403 1.223L14.584 27.214l12.892-16.26z\\"\\n              fill=\\"#fff\\"\\n              fill-opacity=\\".65\\"\\n            /><path\\n              d=\\"M27.476 10.954h-7.527l3.24-9.793c.165-.5.888-.5 1.06 0l3.227 9.793z\\"\\n              fill=\\"#fff\\"\\n            /><path\\n              d=\\"M1.685 10.954l-1.63 4.94c-.148.449.012.944.403 1.223l14.127 10.097-12.9-16.26z\\"\\n              fill=\\"#fff\\"\\n              fill-opacity=\\".65\\"\\n            /><path\\n              d=\\"M1.685 10.954H9.21L5.978 1.161c-.166-.5-.888-.5-1.06 0l-3.233 9.793z\\"\\n              fill=\\"#fff\\"\\n            /><path\\n              d=\\"M14.585 27.214l-5.373-16.26H1.685l12.9 16.26z\\"\\n              fill=\\"#fff\\"\\n              fill-opacity=\\".85\\"\\n            /><path\\n              d=\\"M14.584 27.214l12.892-16.26h-7.527l-5.365 16.26z\\"\\n              fill=\\"#fff\\"\\n              fill-opacity=\\".85\\"\\n            /></svg\\n          >\\n          Open GitLab\\n        </a>\\n        <a href=\\"https://github.com\\" class=\\"btn btn--github\\">\\n          <svg\\n            viewBox=\\"0 0 29 30\\"\\n            fill=\\"none\\"\\n            xmlns=\\"http://www.w3.org/2000/svg\\"\\n          >\\n            <title>GitHub Octocat</title>\\n            <path\\n              fill-rule=\\"evenodd\\"\\n              clip-rule=\\"evenodd\\"\\n              d=\\"M14.57.5a14.374 14.374 0 00-9.442 3.54 14.947 14.947 0 00-4.94 8.946A15.133 15.133 0 002.106 23.07a14.615 14.615 0 007.862 6.406c.733.137.992-.329.992-.721v-2.528c-4.065.903-4.923-1.999-4.923-1.999a3.97 3.97 0 00-1.617-2.181c-1.314-.913.107-.913.107-.913.46.067.9.24 1.285.505.386.265.707.617.94 1.029.197.366.464.688.784.949a3.047 3.047 0 003.45.292c.057-.751.374-1.457.894-1.99-3.234-.374-6.63-1.652-6.63-7.3a5.82 5.82 0 011.493-3.989 5.529 5.529 0 01.143-3.933s1.224-.402 4.002 1.524a13.49 13.49 0 017.291 0c2.779-1.926 3.994-1.524 3.994-1.524.536 1.233.6 2.627.179 3.906a5.82 5.82 0 011.492 3.988c0 5.713-3.404 6.963-6.648 7.3.348.358.617.787.788 1.26.17.472.24.976.204 1.479v4.079c0 .484.26.858 1 .712a14.623 14.623 0 007.752-6.43 15.134 15.134 0 001.87-10.019 14.949 14.949 0 00-4.89-8.892A14.377 14.377 0 0014.57.5z\\"\\n              fill=\\"#F9F9F9\\"\\n            />\\n          </svg>\\n          Open GitHub\\n        </a>\\n        <a href=\\"http://bitbucket.org/\\" class=\\"btn btn--bitbucket\\">\\n          <svg\\n            viewBox=\\"0 0 27 24\\"\\n            fill=\\"none\\"\\n            xmlns=\\"http://www.w3.org/2000/svg\\"\\n          >\\n            <title>Bitbucket</title>\\n            <path\\n              d=\\"M.848.25h-.01a.841.841 0 00-.827.971L3.565 22.8c.091.543.563.945 1.114.95h17.053a.84.84 0 00.837-.703l3.554-21.822a.841.841 0 00-.826-.971h-.011L.848.25zm14.968 15.595h-5.443L8.899 8.146h8.236l-1.32 7.7z\\"\\n              fill=\\"#fff\\"\\n            />\\n          </svg>\\n          Open Bitbucket\\n        </a>\\n      </div>\\n    </div>\\n  </article>\\n</section>\\n\\n<section class=\\"cards triple\\">\\n  {#each features as feature}\\n    <div class=\\"card\\">\\n      <div>\\n        <!-- svelte-ignore a11y-missing-attribute -->\\n        <img src={feature.icon} role=\\"presentation\\" height=\\"100\\" width=\\"100\\" />\\n        <h2>{feature.title}</h2>\\n        <p>{feature.description}</p>\\n      </div>\\n    </div>\\n  {/each}\\n</section>\\n\\n<section class=\\"brief\\">\\n  <h2>Learn More About Gitpod</h2>\\n  <a href=\\"/docs\\" class=\\"btn-conversion\\">See Docs</a>\\n</section>\\n"],"names":[],"mappings":"AAyBmB,oCAAQ,CAAC,QAAQ,WAAW,CAAC,eAAe,GAAG,CAAC,YAAY,QAAQ,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,oCAAQ,CAAC,eAAe,MAAM,CAAC,QAAQ,KAAK,CAAC,WAAW,MAAM,CAAC,CAAC,sBAAQ,CAAC,kBAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,cAAc,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,MAAM,CAAC,cAAc,MAAM,CAAC,YAAY,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,sBAAQ,CAAC,kBAAI,OAAO,CAAC,sBAAQ,CAAC,kBAAI,MAAM,CAAC,sBAAQ,CAAC,kBAAI,MAAM,CAAC,QAAQ,EAAE,CAAC,sBAAQ,CAAC,kBAAI,KAAK,WAAW,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,sBAAQ,CAAC,0BAAY,CAAC,WAAW,IAAI,CAAC,sBAAQ,CAAC,0BAAY,OAAO,CAAC,sBAAQ,CAAC,0BAAY,MAAM,CAAC,sBAAQ,CAAC,0BAAY,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC,sBAAQ,CAAC,6BAAe,CAAC,WAAW,OAAO,CAAC,sBAAQ,CAAC,0BAAY,CAAC,WAAW,OAAO,CAAC,sBAAQ,CAAC,iBAAG,CAAC,OAAO,OAAO,CAAC,MAAM,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,MAAM,AAAC,WAAW,MAAM,CAAC,CAAC,sBAAQ,CAAC,iBAAG,CAAC,QAAQ,IAAI,CAAC,CAAC"}'
};
const prerender$2E = true;
const Extension_activation = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const currentBrowser = ["Opera", "Chrome", "Firefox", "IE"].find((browser) => typeof window !== "undefined" && window.navigator.userAgent.includes(browser));
  const features2 = [
    {
      icon: "/images/extension-activation/prebuild.svg",
      title: "Skip the Waiting",
      description: "Gitpod continuously builds your git branches like a CI server. This means no more waiting for dependencies to be downloaded and builds to finish."
    },
    {
      icon: "/images/extension-activation/collaborate.svg",
      title: "Code Together",
      description: "Do code reviews within Gitpod, work together in one workspace in real-time and share reproducible workspaces with your team."
    },
    {
      icon: "/images/extension-activation/fresh.svg",
      title: "Work Remotely",
      description: "You no longer need an over-powered laptop, Gitpod works just as smoothly on a Chromebook or iPad. All you need is a browser."
    }
  ];
  $$result.css.add(css$z);
  return `<header>Extension Installed
  <h1>Gitpod for ${escape(currentBrowser)} is Now Active</h1></header>

<section class="${"halfimages"}"><article><div><img src="${"/images/extension-activation/extension-screenshot.png"}" alt="${"A GitHub project page with the Gitpod button highlighted"}" height="${"688"}" width="${"688"}"></div>
    <div><h2 class="${"h3"}">Now you can easily spin up dev environments with a single click.
      </h2>
      <p class="${"text-large"}">The extension adds a Gitpod button on every project and branch across
        GitLab, GitHub, and Bitbucket so you can easily open a new workspace for
        any existing project.
      </p>
      <div class="${"buttons svelte-yh233j"}"><a href="${"https://gitlab.com"}" class="${"btn btn--gitlab svelte-yh233j"}"><svg viewBox="${"0 0 30 28"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-yh233j"}"><title>Bitbucket</title><path d="${"M14.583 27.214L9.21 10.954h10.738l-5.365 16.26z"}" fill="${"#fff"}"></path><path d="${"M27.476 10.954l1.637 4.94c.148.449-.012.944-.403 1.223L14.584 27.214l12.892-16.26z"}" fill="${"#fff"}" fill-opacity="${".65"}"></path><path d="${"M27.476 10.954h-7.527l3.24-9.793c.165-.5.888-.5 1.06 0l3.227 9.793z"}" fill="${"#fff"}"></path><path d="${"M1.685 10.954l-1.63 4.94c-.148.449.012.944.403 1.223l14.127 10.097-12.9-16.26z"}" fill="${"#fff"}" fill-opacity="${".65"}"></path><path d="${"M1.685 10.954H9.21L5.978 1.161c-.166-.5-.888-.5-1.06 0l-3.233 9.793z"}" fill="${"#fff"}"></path><path d="${"M14.585 27.214l-5.373-16.26H1.685l12.9 16.26z"}" fill="${"#fff"}" fill-opacity="${".85"}"></path><path d="${"M14.584 27.214l12.892-16.26h-7.527l-5.365 16.26z"}" fill="${"#fff"}" fill-opacity="${".85"}"></path></svg>
          Open GitLab
        </a>
        <a href="${"https://github.com"}" class="${"btn btn--github svelte-yh233j"}"><svg viewBox="${"0 0 29 30"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-yh233j"}"><title>GitHub Octocat</title><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M14.57.5a14.374 14.374 0 00-9.442 3.54 14.947 14.947 0 00-4.94 8.946A15.133 15.133 0 002.106 23.07a14.615 14.615 0 007.862 6.406c.733.137.992-.329.992-.721v-2.528c-4.065.903-4.923-1.999-4.923-1.999a3.97 3.97 0 00-1.617-2.181c-1.314-.913.107-.913.107-.913.46.067.9.24 1.285.505.386.265.707.617.94 1.029.197.366.464.688.784.949a3.047 3.047 0 003.45.292c.057-.751.374-1.457.894-1.99-3.234-.374-6.63-1.652-6.63-7.3a5.82 5.82 0 011.493-3.989 5.529 5.529 0 01.143-3.933s1.224-.402 4.002 1.524a13.49 13.49 0 017.291 0c2.779-1.926 3.994-1.524 3.994-1.524.536 1.233.6 2.627.179 3.906a5.82 5.82 0 011.492 3.988c0 5.713-3.404 6.963-6.648 7.3.348.358.617.787.788 1.26.17.472.24.976.204 1.479v4.079c0 .484.26.858 1 .712a14.623 14.623 0 007.752-6.43 15.134 15.134 0 001.87-10.019 14.949 14.949 0 00-4.89-8.892A14.377 14.377 0 0014.57.5z"}" fill="${"#F9F9F9"}"></path></svg>
          Open GitHub
        </a>
        <a href="${"http://bitbucket.org/"}" class="${"btn btn--bitbucket svelte-yh233j"}"><svg viewBox="${"0 0 27 24"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" class="${"svelte-yh233j"}"><title>Bitbucket</title><path d="${"M.848.25h-.01a.841.841 0 00-.827.971L3.565 22.8c.091.543.563.945 1.114.95h17.053a.84.84 0 00.837-.703l3.554-21.822a.841.841 0 00-.826-.971h-.011L.848.25zm14.968 15.595h-5.443L8.899 8.146h8.236l-1.32 7.7z"}" fill="${"#fff"}"></path></svg>
          Open Bitbucket
        </a></div></div></article></section>

<section class="${"cards triple"}">${each(features2, (feature) => `<div class="${"card"}"><div>
        <img${add_attribute("src", feature.icon, 0)} role="${"presentation"}" height="${"100"}" width="${"100"}">
        <h2>${escape(feature.title)}</h2>
        <p>${escape(feature.description)}</p></div>
    </div>`)}</section>

<section class="${"brief"}"><h2>Learn More About Gitpod</h2>
  <a href="${"/docs"}" class="${"btn-conversion"}">See Docs</a></section>`;
});
var extensionActivation = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Extension_activation,
  prerender: prerender$2E
});
var extensionUninstall_svelte = ".letter.svelte-1a1yn04.svelte-1a1yn04{display:flex;align-content:center;justify-content:center;place-content:center center;padding:3em;order:-1}.letter.svelte-1a1yn04 p.svelte-1a1yn04{padding:2rem;background-color:var(--white);border:1px solid var(--divider);max-width:20rem}";
const css$y = {
  code: ".letter.svelte-1a1yn04.svelte-1a1yn04{display:flex;align-content:center;justify-content:center;place-content:center center;padding:3em;order:-1}.letter.svelte-1a1yn04 p.svelte-1a1yn04{padding:2rem;background-color:var(--white);border:1px solid var(--divider);max-width:20rem}",
  map: '{"version":3,"file":"extension-uninstall.svelte","sources":["extension-uninstall.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script lang=\\"ts\\">;\\n;\\nconst extensionUrls = {\\n    chrome: \\"https://chrome.google.com/webstore/detail/gitpod-dev-environments-i/dodmmooeoklaejobgleioelladacbeki\\",\\n    firefox: \\"https://addons.mozilla.org/en-GB/firefox/addon/gitpod/\\",\\n};\\nconst currentBrowser = [\\"Chrome\\", \\"Firefox\\"].find((browser) => typeof window !== \\"undefined\\" &&\\n    window.navigator.userAgent.includes(browser)) || \\"\\";\\nconst extensionUrl = extensionUrls[currentBrowser.toLowerCase()];\\nconst reasons = [\\n    { id: \\"usage\\", label: \\"I never used it\\" },\\n    { id: \\"configuring\\", label: \\"I have problems configuring my projects\\" },\\n    { id: \\"local\\", label: \\"I prefer my local development\\" },\\n    { id: \\"expected\\", label: \\"Gitpod isn\u2019t what I expected\\" },\\n];\\nconst formData = {\\n    reason: {\\n        el: null,\\n        valid: false,\\n        selected: [],\\n    },\\n    otherFeedback: {\\n        el: null,\\n        valid: true,\\n        value: \\"\\",\\n    },\\n};\\nlet isFormDirty = false;\\nlet isEmailSent = false;\\n$: isFormValid = Object.values(formData).every((field) => field.valid);\\nconst handleSubmit = async () => {\\n    isFormDirty = true;\\n    if (!isFormValid) {\\n        return;\\n    }\\n    const email = {\\n        from: {\\n            email: \\"contact+browserextension@gitpod.io\\",\\n            name: \\"Contact - Browser Extension Uninstall\\",\\n        },\\n        subject: \\"Why did I uninstall the browser extension?\\",\\n        feedback: formData.reason.selected.reduce((result, reason) => `${reasons.find(({ id }) => id === reason).label}\\\\n${result}`, ``),\\n        otherFeedback: formData.otherFeedback.value,\\n    };\\n    try {\\n        const response = await fetch(\\"/.netlify/functions/submit-form\\", {\\n            method: \\"POST\\",\\n            body: JSON.stringify(email),\\n        });\\n        if (response.ok) {\\n            isEmailSent = true;\\n        }\\n        else {\\n            console.error(response.statusText);\\n        }\\n    }\\n    catch (error) {\\n        console.error(error);\\n    }\\n};\\nexport {};\\n</script>\\n\\n<style>.letter{display:flex;align-content:center;justify-content:center;place-content:center center;padding:3em;order:-1}.letter p{padding:2rem;background-color:var(--white);border:1px solid var(--divider);max-width:20rem}</style>\\n\\n<header>\\n  {#if extensionUrl}\\n    <a href={extensionUrl} rel=\\"noopener\\" target=\\"_blank\\">Reinstall Extension</a\\n    >\\n  {/if}\\n  <h1>How Can We Improve?</h1>\\n</header>\\n<section class=\\" halfimages\\">\\n  <article class=\\"card\\">\\n    <div class=\\"letter\\">\\n      <p>\\n        Hi there, Sad to see you leave \u{1F615} To improve and make sure that other\\n        developers are happier with Gitpod, we\u2019d love to get your opinion on why\\n        you decided to uninstall your browser extension. We will work hard to\\n        build a product that (hopefully) convinces you to use Gitpod again at a\\n        later point \u270C\uFE0F\\n      </p>\\n    </div>\\n    <form\\n      on:submit|preventDefault={handleSubmit}\\n      name=\\"Extension Deletion\\"\\n      novalidate\\n    >\\n      <input type=\\"hidden\\" name=\\"form-name\\" value=\\"extension-deletion\\" />\\n      <p class=\\"h5\\">Why did you uninstall the browser extension?</p>\\n      <ul>\\n        <li class:error={isFormDirty && !formData.reason.valid}>\\n          <fieldset>\\n            <legend>Check all that apply:</legend>\\n            <ul>\\n              {#each reasons as { id, label }}\\n                <li>\\n                  <input\\n                    type=\\"checkbox\\"\\n                    name=\\"reason\\"\\n                    value={id}\\n                    {id}\\n                    data-text={label}\\n                    bind:group={formData.reason.selected}\\n                    bind:this={formData.reason.el}\\n                    on:change={() => {\\n                      formData.reason.valid =\\n                        formData.reason.selected.length > 0 &&\\n                        formData.reason.el.validity.valid;\\n                    }}\\n                  />\\n                  <label for={id}>{label}</label>\\n                </li>\\n              {/each}\\n            </ul>\\n          </fieldset>\\n        </li>\\n        <li class:error={isFormDirty && !formData.otherFeedback.valid}>\\n          <label for=\\"otherFeedback\\">Do you have any other feedback?</label>\\n          <textarea\\n            aria-label=\\"Do you have any other feedback?\\"\\n            id=\\"otherFeedback\\"\\n            name=\\"otherFeedback\\"\\n            bind:value={formData.otherFeedback.value}\\n            bind:this={formData.otherFeedback.el}\\n            on:change={() => {\\n              formData.otherFeedback.valid =\\n                formData.otherFeedback.value === \\"\\"\\n                  ? true\\n                  : formData.otherFeedback.el.validity.valid;\\n            }}\\n          />\\n        </li>\\n        <li>\\n          <button\\n            class=\\"btn-conversion\\"\\n            disabled={isFormDirty && !isFormValid}\\n            type=\\"submit\\">Send</button\\n          >\\n        </li>\\n      </ul>\\n      {#if isEmailSent}\\n        <p>Thanks for your Feedback</p>\\n      {/if}\\n    </form>\\n  </article>\\n</section>\\n"],"names":[],"mappings":"AAmEO,qCAAO,CAAC,QAAQ,IAAI,CAAC,cAAc,MAAM,CAAC,gBAAgB,MAAM,CAAC,cAAc,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,MAAM,EAAE,CAAC,sBAAO,CAAC,gBAAC,CAAC,QAAQ,IAAI,CAAC,iBAAiB,IAAI,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,UAAU,KAAK,CAAC"}'
};
const prerender$2D = true;
const Extension_uninstall = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const extensionUrls = {
    chrome: "https://chrome.google.com/webstore/detail/gitpod-dev-environments-i/dodmmooeoklaejobgleioelladacbeki",
    firefox: "https://addons.mozilla.org/en-GB/firefox/addon/gitpod/"
  };
  const currentBrowser = ["Chrome", "Firefox"].find((browser) => typeof window !== "undefined" && window.navigator.userAgent.includes(browser)) || "";
  const extensionUrl = extensionUrls[currentBrowser.toLowerCase()];
  const reasons = [
    {id: "usage", label: "I never used it"},
    {
      id: "configuring",
      label: "I have problems configuring my projects"
    },
    {
      id: "local",
      label: "I prefer my local development"
    },
    {
      id: "expected",
      label: "Gitpod isn\u2019t what I expected"
    }
  ];
  const formData = {
    reason: {el: null, valid: false, selected: []},
    otherFeedback: {el: null, valid: true, value: ""}
  };
  $$result.css.add(css$y);
  Object.values(formData).every((field) => field.valid);
  return `<header>${extensionUrl ? `<a${add_attribute("href", extensionUrl, 0)} rel="${"noopener"}" target="${"_blank"}">Reinstall Extension</a>` : ``}
  <h1>How Can We Improve?</h1></header>
<section class="${" halfimages"}"><article class="${"card"}"><div class="${"letter svelte-1a1yn04"}"><p class="${"svelte-1a1yn04"}">Hi there, Sad to see you leave \u{1F615} To improve and make sure that other
        developers are happier with Gitpod, we\u2019d love to get your opinion on why
        you decided to uninstall your browser extension. We will work hard to
        build a product that (hopefully) convinces you to use Gitpod again at a
        later point \u270C\uFE0F
      </p></div>
    <form name="${"Extension Deletion"}" novalidate><input type="${"hidden"}" name="${"form-name"}" value="${"extension-deletion"}">
      <p class="${"h5"}">Why did you uninstall the browser extension?</p>
      <ul><li${add_classes([""].join(" ").trim())}><fieldset><legend>Check all that apply:</legend>
            <ul>${each(reasons, ({id: id2, label}) => `<li><input type="${"checkbox"}" name="${"reason"}"${add_attribute("value", id2, 0)}${add_attribute("id", id2, 0)}${add_attribute("data-text", label, 0)}${add_attribute("this", formData.reason.el, 1)}>
                  <label${add_attribute("for", id2, 0)}>${escape(label)}</label>
                </li>`)}</ul></fieldset></li>
        <li${add_classes([
    ""
  ].join(" ").trim())}><label for="${"otherFeedback"}">Do you have any other feedback?</label>
          <textarea aria-label="${"Do you have any other feedback?"}" id="${"otherFeedback"}" name="${"otherFeedback"}"${add_attribute("this", formData.otherFeedback.el, 1)}>${formData.otherFeedback.value || ""}</textarea></li>
        <li><button class="${"btn-conversion"}" ${""} type="${"submit"}">Send</button></li></ul>
      ${``}</form></article></section>`;
});
var extensionUninstall = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Extension_uninstall,
  prerender: prerender$2D
});
var submissionSuccess_svelte = "div.svelte-t4qcgt{height:45rem;background-image:url(/images/illustration-crop.jpg)}";
const countryList = [
  "Afghanistan",
  "Albania",
  "Algeria",
  "American Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarctica",
  "Antigua and Barbuda",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbaijan",
  "Bahamas (the)",
  "Bahrain",
  "Bangladesh",
  "Barbados",
  "Belarus",
  "Belgium",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivia (Plurinational State of)",
  "Bonaire, Sint Eustatius and Saba",
  "Bosnia and Herzegovina",
  "Botswana",
  "Bouvet Island",
  "Brazil",
  "British Indian Ocean Territory (the)",
  "Brunei Darussalam",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Cabo Verde",
  "Cambodia",
  "Cameroon",
  "Canada",
  "Cayman Islands (the)",
  "Central African Republic (the)",
  "Chad",
  "Chile",
  "China",
  "Christmas Island",
  "Cocos (Keeling) Islands (the)",
  "Colombia",
  "Comoros (the)",
  "Congo (the Democratic Republic of the)",
  "Congo (the)",
  "Cook Islands (the)",
  "Costa Rica",
  "Croatia",
  "Cuba",
  "Cura\xE7ao",
  "Cyprus",
  "Czechia",
  "C\xF4te d'Ivoire",
  "Denmark",
  "Djibouti",
  "Dominica",
  "Dominican Republic (the)",
  "Ecuador",
  "Egypt",
  "El Salvador",
  "Equatorial Guinea",
  "Eritrea",
  "Estonia",
  "Eswatini",
  "Ethiopia",
  "Falkland Islands (the) [Malvinas]",
  "Faroe Islands (the)",
  "Fiji",
  "Finland",
  "France",
  "French Guiana",
  "French Polynesia",
  "French Southern Territories (the)",
  "Gabon",
  "Gambia (the)",
  "Georgia",
  "Germany",
  "Ghana",
  "Gibraltar",
  "Greece",
  "Greenland",
  "Grenada",
  "Guadeloupe",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Holy See (the)",
  "Honduras",
  "Hong Kong",
  "Hungary",
  "Iceland",
  "India",
  "Indonesia",
  "Iran (Islamic Republic of)",
  "Iraq",
  "Ireland",
  "Isle of Man",
  "Israel",
  "Italy",
  "Jamaica",
  "Japan",
  "Jersey",
  "Jordan",
  "Kazakhstan",
  "Kenya",
  "Kiribati",
  "Korea (the Democratic People's Republic of)",
  "Korea (the Republic of)",
  "Kuwait",
  "Kyrgyzstan",
  "Lao People's Democratic Republic (the)",
  "Latvia",
  "Lebanon",
  "Lesotho",
  "Liberia",
  "Libya",
  "Liechtenstein",
  "Lithuania",
  "Luxembourg",
  "Macao",
  "Madagascar",
  "Malawi",
  "Malaysia",
  "Maldives",
  "Mali",
  "Malta",
  "Marshall Islands (the)",
  "Martinique",
  "Mauritania",
  "Mauritius",
  "Mayotte",
  "Mexico",
  "Micronesia (Federated States of)",
  "Moldova (the Republic of)",
  "Monaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Morocco",
  "Mozambique",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Netherlands (the)",
  "New Caledonia",
  "New Zealand",
  "Nicaragua",
  "Niger (the)",
  "Nigeria",
  "Niue",
  "Norfolk Island",
  "Northern Mariana Islands (the)",
  "Norway",
  "Oman",
  "Pakistan",
  "Palau",
  "Palestine, State of",
  "Panama",
  "Papua New Guinea",
  "Paraguay",
  "Peru",
  "Philippines (the)",
  "Pitcairn",
  "Poland",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Republic of North Macedonia",
  "Romania",
  "Russian Federation (the)",
  "Rwanda",
  "R\xE9union",
  "Saint Barth\xE9lemy",
  "Saint Helena, Ascension and Tristan da Cunha",
  "Saint Kitts and Nevis",
  "Saint Lucia",
  "Saint Martin (French part)",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tome and Principe",
  "Saudi Arabia",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leone",
  "Singapore",
  "Sint Maarten (Dutch part)",
  "Slovakia",
  "Slovenia",
  "Solomon Islands",
  "Somalia",
  "South Africa",
  "South Georgia and the South Sandwich Islands",
  "South Sudan",
  "Spain",
  "Sri Lanka",
  "Sudan (the)",
  "Suriname",
  "Svalbard and Jan Mayen",
  "Sweden",
  "Switzerland",
  "Syrian Arab Republic",
  "Taiwan",
  "Tajikistan",
  "Tanzania, United Republic of",
  "Thailand",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad and Tobago",
  "Tunisia",
  "Turkey",
  "Turkmenistan",
  "Turks and Caicos Islands (the)",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "United Arab Emirates (the)",
  "United Kingdom of Great Britain and Northern Ireland (the)",
  "United States Minor Outlying Islands (the)",
  "United States of America (the)",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela (Bolivarian Republic of)",
  "Viet Nam",
  "Virgin Islands (British)",
  "Virgin Islands (U.S.)",
  "Wallis and Futuna",
  "Western Sahara",
  "Yemen",
  "Zambia",
  "Zimbabwe",
  "\xC5land Islands"
];
var enterpriseLicense_svelte = "header.svelte-10qunv3.svelte-10qunv3{margin-bottom:var(--small)}.title.svelte-10qunv3.svelte-10qunv3:not(:first-child){margin-top:var(--medium)}.half.svelte-10qunv3 .svelte-10qunv3:last-child{margin-top:var(--macro)}.option.svelte-10qunv3.svelte-10qunv3{color:var(--dark-grey)}";
const css$x = {
  code: "header.svelte-10qunv3.svelte-10qunv3{margin-bottom:var(--small)}.title.svelte-10qunv3.svelte-10qunv3:not(:first-child){margin-top:var(--medium)}.half.svelte-10qunv3 .svelte-10qunv3:last-child{margin-top:var(--macro)}.option.svelte-10qunv3.svelte-10qunv3{color:var(--dark-grey)}",
  map: '{"version":3,"file":"enterprise-license.svelte","sources":["enterprise-license.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nimport SubmissionSuccess from \\"../components/submission-success.svelte\\";\\nimport { countryList } from \\"../contents/license-key\\";\\nimport { isEurope } from \\"../utils/helper\\";\\n;\\nlet orderTotal = 0;\\nlet sectionStart;\\nconst yearlyPricesPerSeat = {\\n    eur: 216,\\n    usd: 240,\\n};\\nconst formData = {\\n    seats: {\\n        el: null,\\n        valid: false,\\n        value: \\"0\\",\\n    },\\n    domain: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    firstName: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    lastName: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    email: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    company: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    address: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    postalCode: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    city: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    country: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    noOfEmployees: {\\n        el: null,\\n        valid: true,\\n        value: \\"\\",\\n    },\\n    message: {\\n        el: null,\\n        valid: true,\\n        value: \\"\\",\\n    },\\n};\\nlet isRequested = false;\\nlet isFormDirty = false;\\n$: isFormValid = Object.values(formData).every((field) => field.valid);\\nconst handleSeatsInput = (e) => {\\n    const input = e.target.value;\\n    if (input == \\"\\") {\\n        orderTotal = 0;\\n    }\\n    else {\\n        const number = parseInt(input);\\n        orderTotal = isEurope()\\n            ? yearlyPricesPerSeat.eur * number\\n            : yearlyPricesPerSeat.usd * number;\\n    }\\n};\\nconst handleSubmit = async () => {\\n    isFormDirty = true;\\n    if (!isFormValid) {\\n        return;\\n    }\\n    const email = {\\n        from: {\\n            email: formData.email.value,\\n            name: `${formData.firstName.value} ${formData.lastName.value}`,\\n        },\\n        subject: \\"Requesting a professional self-hosted license\\" +\\n            \\"  (from \\" +\\n            formData.email.value +\\n            \\")\\",\\n        message: `\\n        ${formData.company.value}\\n        ${formData.firstName.value} ${formData.lastName.value}\\n        ${formData.address.value}\\n        ${formData.postalCode.value} ${formData.city.value}\\n        ${formData.country.value}\\n\\n        domain: ${formData.domain.value}\\n        seats: ${formData.seats.value}\\n        employees: ${formData.noOfEmployees.value}\\n\\n        Message:\\n        ${formData.message.value}\\n      `,\\n    };\\n    try {\\n        const response = await fetch(\\"/.netlify/functions/submit-form\\", {\\n            method: \\"POST\\",\\n            body: JSON.stringify(email),\\n        });\\n        if (response.ok) {\\n            isRequested = true;\\n            setTimeout(() => {\\n                sectionStart.scrollIntoView();\\n            });\\n        }\\n        else {\\n            console.error(response.statusText);\\n        }\\n    }\\n    catch (error) {\\n        console.error(error);\\n    }\\n};\\n</script>\\n\\n<style lang=\\"scss\\">header{margin-bottom:var(--small)}.title:not(:first-child){margin-top:var(--medium)}.half :last-child{margin-top:var(--macro)}.option{color:var(--dark-grey)}</style>\\n\\n<header>\\n  <h1>Request License Key</h1>\\n  <p>\\n    Please fill out your order to receive a license key for Gitpod Self-Hosted.\\n  </p>\\n</header>\\n\\n<section class=\\"card shadow-xl mb-32 sm:mx-8\\" bind:this={sectionStart}>\\n  {#if isRequested}\\n    <SubmissionSuccess title=\\"Thanks\\" text=\\"We\'ll get back to you soon.\\" />\\n  {:else}\\n    <form on:submit|preventDefault={handleSubmit} novalidate>\\n      <label class=\\"title\\" for=\\"seats\\">\\n        <h2 class=\\"h4\\">How many seats would you like to purchase?*</h2>\\n      </label>\\n\\n      <div class=\\"flex flex-wrap items-center justify-between\\">\\n        <div class=\\"flex flex-wrap items-center\\">\\n          <input\\n            id=\\"seats\\"\\n            type=\\"number\\"\\n            placeholder=\\"Seats\\"\\n            name=\\"seats\\"\\n            bind:value={formData.seats.value}\\n            bind:this={formData.seats.el}\\n            on:input={(e) => {\\n              handleSeatsInput(e);\\n              formData.seats.valid =\\n                formData.seats.value && formData.seats.el.checkValidity();\\n            }}\\n            min=\\"0\\"\\n            class:error={isFormDirty && !formData.seats.valid}\\n            class=\\"mb-micro\\"\\n          />\\n          <div class=\\"sm:ml-xx-small mb-micro\\">\\n            &nbsp;x {isEurope()\\n              ? `${yearlyPricesPerSeat.eur}\u20AC`\\n              : `${yearlyPricesPerSeat.usd}$`} per user yearly &nbsp;\\n          </div>\\n        </div>\\n        <div class=\\"mb-micro\\">\\n          Order Total: <strong\\n            >{new Intl.NumberFormat().format(orderTotal)}</strong\\n          >\\n          {isEurope() ? \\"\u20AC\\" : \\"$\\"}\\n        </div>\\n      </div>\\n\\n      <label class=\\"title\\" for=\\"domain\\">\\n        <h2 class=\\"h4\\">\\n          What is the domain name of your Gitpod Self-Hosted installation?*\\n        </h2>\\n      </label>\\n      <input\\n        type=\\"text\\"\\n        id=\\"domain\\"\\n        placeholder=\\"e.g. gitpod.mycompany.com\\"\\n        bind:value={formData.domain.value}\\n        bind:this={formData.domain.el}\\n        on:change={() => {\\n          formData.domain.valid =\\n            formData.domain.value && formData.domain.el.checkValidity();\\n        }}\\n        class:error={isFormDirty && !formData.domain.valid}\\n        autocomplete=\\"url\\"\\n      />\\n\\n      <p>The license key will be bound to this domain.</p>\\n\\n      <h2 class=\\"h4 title\\">Customer Information</h2>\\n\\n      <div class=\\"grid grid-cols-1 sm:grid-cols-2 gap-x-small\\">\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.firstName.valid}\\n        >\\n          First Name*\\n          <input\\n            name=\\"firstName\\"\\n            type=\\"text\\"\\n            bind:value={formData.firstName.value}\\n            bind:this={formData.firstName.el}\\n            on:change={() => {\\n              formData.firstName.valid =\\n                formData.firstName.value &&\\n                formData.firstName.el.checkValidity();\\n            }}\\n            autocomplete=\\"given-name\\"\\n          />\\n        </label>\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.lastName.valid}\\n        >\\n          Last Name*\\n          <input\\n            name=\\"lastName\\"\\n            type=\\"text\\"\\n            bind:value={formData.lastName.value}\\n            bind:this={formData.lastName.el}\\n            on:change={() => {\\n              formData.lastName.valid =\\n                formData.lastName.value && formData.lastName.el.checkValidity();\\n            }}\\n            autocomplete=\\"family-name\\"\\n          />\\n        </label>\\n        <label class=\\"half\\" class:error={isFormDirty && !formData.email.valid}>\\n          Work Email*\\n          <input\\n            type=\\"email\\"\\n            name=\\"email\\"\\n            bind:value={formData.email.value}\\n            bind:this={formData.email.el}\\n            on:change={() => {\\n              formData.email.valid =\\n                formData.email.value && formData.email.el.checkValidity();\\n            }}\\n            autocomplete=\\"email\\"\\n          />\\n        </label>\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.company.valid}\\n        >\\n          Company*\\n          <input\\n            name=\\"company\\"\\n            bind:value={formData.company.value}\\n            bind:this={formData.company.el}\\n            on:change={() => {\\n              formData.company.valid =\\n                formData.company.value && formData.company.el.checkValidity();\\n            }}\\n            type=\\"text\\"\\n            autocomplete=\\"organization\\"\\n          />\\n        </label>\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.address.valid}\\n        >\\n          Street Address*\\n          <input\\n            name=\\"address\\"\\n            bind:value={formData.address.value}\\n            bind:this={formData.address.el}\\n            on:change={() => {\\n              formData.address.valid =\\n                formData.address.value && formData.address.el.checkValidity();\\n            }}\\n            type=\\"text\\"\\n            autocomplete=\\"street-address\\"\\n          />\\n        </label>\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.postalCode.valid}\\n        >\\n          Postal Code*\\n          <input\\n            name=\\"postalCode\\"\\n            bind:value={formData.postalCode.value}\\n            bind:this={formData.postalCode.el}\\n            on:change={() => {\\n              formData.postalCode.valid =\\n                formData.postalCode.value &&\\n                formData.postalCode.el.checkValidity();\\n            }}\\n            type=\\"text\\"\\n            autocomplete=\\"postal-code\\"\\n          />\\n        </label>\\n        <label class=\\"half\\" class:error={isFormDirty && !formData.city.valid}>\\n          City*\\n          <input\\n            name=\\"city\\"\\n            bind:value={formData.city.value}\\n            bind:this={formData.city.el}\\n            on:change={() => {\\n              formData.city.valid =\\n                formData.city.value && formData.city.el.checkValidity();\\n            }}\\n            type=\\"text\\"\\n            autocomplete=\\"address-level2\\"\\n          />\\n        </label>\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.country.valid}\\n        >\\n          Country*\\n          <select\\n            name=\\"country\\"\\n            bind:value={formData.country.value}\\n            bind:this={formData.country.el}\\n            on:blur={() => {\\n              formData.country.valid =\\n                formData.country.value && formData.country.el.checkValidity();\\n            }}\\n            class=\\"option\\"\\n            autocomplete=\\"country\\"\\n          >\\n            <option class=\\"option\\">Select</option>\\n            {#each countryList as c}\\n              <option class=\\"option\\" value={c}>\\n                {c}\\n              </option>\\n            {/each}\\n          </select>\\n        </label>\\n        <label\\n          class=\\"half\\"\\n          class:error={isFormDirty && !formData.noOfEmployees.valid}\\n        >\\n          Total Number of Employees <span>(optional)</span>\\n          <select\\n            name=\\"noOfEmployees\\"\\n            bind:value={formData.noOfEmployees.value}\\n            bind:this={formData.noOfEmployees.el}\\n          >\\n            <option class=\\"option\\">Select</option>\\n            {#each [\\"2-5\\", \\"6-20\\", \\"21-50\\", \\"51-250\\", \\"+250\\"] as n, i}\\n              <option class=\\"option\\" value={n}>\\n                {n}\\n              </option>\\n            {/each}\\n          </select>\\n        </label>\\n      </div>\\n\\n      <h2 class=\\"h4 title\\">Other</h2>\\n      <label class=\\"half\\">\\n        <p>\\n          Add personal message <span>(optional)</span>\\n        </p>\\n        <textarea\\n          cols=\\"30\\"\\n          rows=\\"8\\"\\n          bind:value={formData.message.value}\\n          bind:this={formData.message.el}\\n          name=\\"message\\"\\n        />\\n      </label>\\n\\n      <button\\n        type=\\"submit\\"\\n        class=\\"btn-conversion title\\"\\n        disabled={isFormDirty && !isFormValid}>Request Now</button\\n      >\\n    </form>\\n  {/if}\\n</section>\\n"],"names":[],"mappings":"AA0ImB,oCAAM,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,oCAAM,KAAK,YAAY,CAAC,CAAC,WAAW,IAAI,QAAQ,CAAC,CAAC,oBAAK,gBAAC,WAAW,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,qCAAO,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC"}'
};
const Enterprise_license = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let orderTotal = 0;
  let sectionStart;
  const yearlyPricesPerSeat = {eur: 216, usd: 240};
  const formData = {
    seats: {el: null, valid: false, value: "0"},
    domain: {el: null, valid: false, value: ""},
    firstName: {el: null, valid: false, value: ""},
    lastName: {el: null, valid: false, value: ""},
    email: {el: null, valid: false, value: ""},
    company: {el: null, valid: false, value: ""},
    address: {el: null, valid: false, value: ""},
    postalCode: {el: null, valid: false, value: ""},
    city: {el: null, valid: false, value: ""},
    country: {el: null, valid: false, value: ""},
    noOfEmployees: {el: null, valid: true, value: ""},
    message: {el: null, valid: true, value: ""}
  };
  $$result.css.add(css$x);
  Object.values(formData).every((field) => field.valid);
  return `<header class="${"svelte-10qunv3"}"><h1>Request License Key</h1>
  <p>Please fill out your order to receive a license key for Gitpod Self-Hosted.
  </p></header>

<section class="${"card shadow-xl mb-32 sm:mx-8"}"${add_attribute("this", sectionStart, 1)}>${`<form novalidate><label class="${"title svelte-10qunv3"}" for="${"seats"}"><h2 class="${"h4"}">How many seats would you like to purchase?*</h2></label>

      <div class="${"flex flex-wrap items-center justify-between"}"><div class="${"flex flex-wrap items-center"}"><input id="${"seats"}" type="${"number"}" placeholder="${"Seats"}" name="${"seats"}" min="${"0"}" class="${["mb-micro", ""].join(" ").trim()}"${add_attribute("value", formData.seats.value, 1)}${add_attribute("this", formData.seats.el, 1)}>
          <div class="${"sm:ml-xx-small mb-micro"}">\xA0x ${escape(isEurope() ? `${yearlyPricesPerSeat.eur}\u20AC` : `${yearlyPricesPerSeat.usd}$`)} per user yearly \xA0
          </div></div>
        <div class="${"mb-micro"}">Order Total: <strong>${escape(new Intl.NumberFormat().format(orderTotal))}</strong>
          ${escape(isEurope() ? "\u20AC" : "$")}</div></div>

      <label class="${"title svelte-10qunv3"}" for="${"domain"}"><h2 class="${"h4"}">What is the domain name of your Gitpod Self-Hosted installation?*
        </h2></label>
      <input type="${"text"}" id="${"domain"}" placeholder="${"e.g. gitpod.mycompany.com"}" autocomplete="${"url"}"${add_classes([""].join(" ").trim())}${add_attribute("value", formData.domain.value, 1)}${add_attribute("this", formData.domain.el, 1)}>

      <p>The license key will be bound to this domain.</p>

      <h2 class="${"h4 title svelte-10qunv3"}">Customer Information</h2>

      <div class="${"grid grid-cols-1 sm:grid-cols-2 gap-x-small"}"><label class="${[
    "half svelte-10qunv3",
    ""
  ].join(" ").trim()}">First Name*
          <input name="${"firstName"}" type="${"text"}" autocomplete="${"given-name"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.firstName.value, 1)}${add_attribute("this", formData.firstName.el, 1)}></label>
        <label class="${[
    "half svelte-10qunv3",
    ""
  ].join(" ").trim()}">Last Name*
          <input name="${"lastName"}" type="${"text"}" autocomplete="${"family-name"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.lastName.value, 1)}${add_attribute("this", formData.lastName.el, 1)}></label>
        <label class="${["half svelte-10qunv3", ""].join(" ").trim()}">Work Email*
          <input type="${"email"}" name="${"email"}" autocomplete="${"email"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.email.value, 1)}${add_attribute("this", formData.email.el, 1)}></label>
        <label class="${["half svelte-10qunv3", ""].join(" ").trim()}">Company*
          <input name="${"company"}" type="${"text"}" autocomplete="${"organization"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.company.value, 1)}${add_attribute("this", formData.company.el, 1)}></label>
        <label class="${["half svelte-10qunv3", ""].join(" ").trim()}">Street Address*
          <input name="${"address"}" type="${"text"}" autocomplete="${"street-address"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.address.value, 1)}${add_attribute("this", formData.address.el, 1)}></label>
        <label class="${[
    "half svelte-10qunv3",
    ""
  ].join(" ").trim()}">Postal Code*
          <input name="${"postalCode"}" type="${"text"}" autocomplete="${"postal-code"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.postalCode.value, 1)}${add_attribute("this", formData.postalCode.el, 1)}></label>
        <label class="${["half svelte-10qunv3", ""].join(" ").trim()}">City*
          <input name="${"city"}" type="${"text"}" autocomplete="${"address-level2"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.city.value, 1)}${add_attribute("this", formData.city.el, 1)}></label>
        <label class="${["half svelte-10qunv3", ""].join(" ").trim()}">Country*
          <select name="${"country"}" class="${"option svelte-10qunv3"}" autocomplete="${"country"}"${add_attribute("value", formData.country.value, 1)}${add_attribute("this", formData.country.el, 1)}><option class="${"option svelte-10qunv3"}" value="${"Select"}">Select</option>${each(countryList, (c) => `<option class="${"option svelte-10qunv3"}"${add_attribute("value", c, 0)}>${escape(c)}
              </option>`)}</select></label>
        <label class="${[
    "half svelte-10qunv3",
    ""
  ].join(" ").trim()}">Total Number of Employees <span class="${"svelte-10qunv3"}">(optional)</span>
          <select name="${"noOfEmployees"}" class="${"svelte-10qunv3"}"${add_attribute("value", formData.noOfEmployees.value, 1)}${add_attribute("this", formData.noOfEmployees.el, 1)}><option class="${"option svelte-10qunv3"}" value="${"Select"}">Select</option>${each(["2-5", "6-20", "21-50", "51-250", "+250"], (n, i) => `<option class="${"option svelte-10qunv3"}"${add_attribute("value", n, 0)}>${escape(n)}
              </option>`)}</select></label></div>

      <h2 class="${"h4 title svelte-10qunv3"}">Other</h2>
      <label class="${"half svelte-10qunv3"}"><p class="${"svelte-10qunv3"}">Add personal message <span class="${"svelte-10qunv3"}">(optional)</span></p>
        <textarea cols="${"30"}" rows="${"8"}" name="${"message"}" class="${"svelte-10qunv3"}"${add_attribute("this", formData.message.el, 1)}>${formData.message.value || ""}</textarea></label>

      <button type="${"submit"}" class="${"btn-conversion title svelte-10qunv3"}" ${""}>Request Now</button></form>`}</section>`;
});
var enterpriseLicense = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Enterprise_license
});
const Preview = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let screencastNumberPadded;
  let {screencast} = $$props;
  let {screencastNumber} = $$props;
  let {headlineOrder} = $$props;
  if ($$props.screencast === void 0 && $$bindings.screencast && screencast !== void 0)
    $$bindings.screencast(screencast);
  if ($$props.screencastNumber === void 0 && $$bindings.screencastNumber && screencastNumber !== void 0)
    $$bindings.screencastNumber(screencastNumber);
  if ($$props.headlineOrder === void 0 && $$bindings.headlineOrder && headlineOrder !== void 0)
    $$bindings.headlineOrder(headlineOrder);
  screencastNumberPadded = `${screencastNumber}`.padStart(3, "0");
  return `<a href="${"/screencasts/" + escape(screencast.title.toLowerCase().replace(/\s/g, "-"))}" class="${"cast min-w-full"}"><div><data>Screencast ${escape(screencastNumberPadded)}</data>
    ${headlineOrder === "h3" ? `<h3 class="${"h2"}">${escape(screencast.title)}</h3>` : `<h2>${escape(screencast.title)}</h2>`}
    ${validate_component(Logo, "Logo").$$render($$result, {}, {}, {})}</div></a>`;
});
var screencast_svelte = "time.svelte-1gv8tr3{color:var(--light-grey)}article.svelte-1gv8tr3{max-width:400px;min-width:320px}p.svelte-1gv8tr3,time.svelte-1gv8tr3{margin-left:1rem}time.svelte-1gv8tr3{font-size:var(--fine-print)}";
const css$w = {
  code: "time.svelte-1gv8tr3{color:var(--light-grey)}article.svelte-1gv8tr3{max-width:400px;min-width:320px}p.svelte-1gv8tr3,time.svelte-1gv8tr3{margin-left:1rem}time.svelte-1gv8tr3{font-size:var(--fine-print)}",
  map: '{"version":3,"file":"screencast.svelte","sources":["screencast.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nimport Preview from \\"./preview.svelte\\";\\nexport let screencast;\\nexport let screencastNumber;\\n$: screencastDurationMinutes = Math.floor(screencast.duration / 60);\\n$: screencastDurationSeconds = screencast.duration % 60;\\n</script>\\n\\n<style lang=\\"scss\\">time{color:var(--light-grey)}article{max-width:400px;min-width:320px}p,time{margin-left:1rem}time{font-size:var(--fine-print)}</style>\\n\\n<article>\\n  <Preview {screencast} {screencastNumber} />\\n  <time\\n    >Duration: {screencastDurationMinutes}m {screencastDurationSeconds}s</time\\n  >\\n  <p>{screencast.description}</p>\\n</article>\\n"],"names":[],"mappings":"AAQmB,mBAAI,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,sBAAO,CAAC,UAAU,KAAK,CAAC,UAAU,KAAK,CAAC,gBAAC,CAAC,mBAAI,CAAC,YAAY,IAAI,CAAC,mBAAI,CAAC,UAAU,IAAI,YAAY,CAAC,CAAC"}'
};
const Screencast = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let screencastDurationMinutes;
  let screencastDurationSeconds;
  let {screencast} = $$props;
  let {screencastNumber} = $$props;
  if ($$props.screencast === void 0 && $$bindings.screencast && screencast !== void 0)
    $$bindings.screencast(screencast);
  if ($$props.screencastNumber === void 0 && $$bindings.screencastNumber && screencastNumber !== void 0)
    $$bindings.screencastNumber(screencastNumber);
  $$result.css.add(css$w);
  screencastDurationMinutes = Math.floor(screencast.duration / 60);
  screencastDurationSeconds = screencast.duration % 60;
  return `<article class="${"svelte-1gv8tr3"}">${validate_component(Preview, "Preview").$$render($$result, {screencast, screencastNumber}, {}, {})}
  <time class="${"svelte-1gv8tr3"}">Duration: ${escape(screencastDurationMinutes)}m ${escape(screencastDurationSeconds)}s</time>
  <p class="${"svelte-1gv8tr3"}">${escape(screencast.description)}</p></article>`;
});
let id = 1;
const screencasts = [
  {
    nextScreencast: id++,
    title: "Always Ready-To-Code",
    description: "How to get a full dev environment in your browser with the click of a button and be immediately ready-to-code.",
    duration: 120,
    tile: "screencast-1.jpg",
    youtubeId: "ZZ0_TQ6UApY",
    relatedDocs: [
      {path: "", title: "Introduction to Gitpod"},
      {path: "/getting-started", title: "Getting Started"},
      {path: "/context-urls", title: "Context URLs"}
    ]
  },
  {
    nextScreencast: id++,
    title: "Personalize Your Workspace",
    description: "How to customize and configure Gitpod for your personal needs and those of your team.",
    duration: 113,
    tile: "screencast-2.jpg",
    youtubeId: "AmApse344bw",
    relatedDocs: [
      {path: "/vscode-extensions", title: "VS Code Extensions"},
      {path: "/environment-variables", title: "Environment Variables"}
    ]
  },
  {
    nextScreencast: id++,
    title: "Fully Automate Your Dev Setup",
    description: "Understanding the automation benefits that arise from the concept of dev-environment-as-code.",
    duration: 139,
    tile: "screencast-3.jpg",
    youtubeId: "ZgY6a78mAnQ",
    relatedDocs: [
      {path: "/configuration", title: "Configure Your Project"},
      {path: "/config-gitpod-file", title: ".gitpod.yml"},
      {path: "/config-docker", title: "Docker Configuration"},
      {path: "/config-start-tasks", title: "Start Tasks"}
    ]
  },
  {
    nextScreencast: id++,
    title: "Continuously Prebuild Your Project",
    description: "How to make Gitpod load in a blink by prebuilding your project ahead-of-time, continuously.",
    duration: 126,
    tile: "screencast-4.jpg",
    youtubeId: "KR8ESjGYsXI",
    relatedDocs: [{path: "/prebuilds", title: "Prebuilt Workspaces"}]
  },
  {
    nextScreencast: id++,
    title: "Fresh Dev Environments For Each New Task",
    description: "Discover ephemeral/disposable workspaces and start fresh for each new task with just a single click. Pure magic!",
    duration: 110,
    tile: "screencast-5.jpg",
    youtubeId: "gsMux9DEU4I",
    relatedDocs: [
      {path: "", title: "Introduction to Gitpod"},
      {path: "/life-of-workspace", title: "Life of a Workspace"}
    ]
  },
  {
    title: "Collaborating With Your Team",
    description: "How to collaborate effectively with Gitpod's Shared Workspaces and Snapshots.",
    duration: 131,
    tile: "screencast-6.jpg",
    youtubeId: "9RftoWFzJ2s",
    relatedDocs: [
      {path: "/sharing-and-collaboration", title: "Collaboration & Sharing"}
    ]
  }
];
var index_svelte$3 = "h1.svelte-1idb770{text-align:center}";
const css$v = {
  code: "h1.svelte-1idb770{text-align:center}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script>\\n  import OpenGraph from \\"../../components/open-graph.svelte\\";\\n  import Screencast from \\"../../components/screencasts/screencast.svelte\\";\\n  import screencasts from \\"../../contents/screencasts\\";\\n  import Section from \\"../../components/section.svelte\\";\\n  import Explore from \\"../../components/explore.svelte\\";\\n</script>\\n\\n<style type=\\"scss\\">h1{text-align:center}</style>\\n\\n<OpenGraph\\n  data={{\\n    description: \\"Learn more about Gitpod with these short screencasts.\\",\\n    title: \\"Screencasts\\",\\n  }}\\n/>\\n\\n<Section>\\n  <h1 class=\\"h2\\">Get started with a screencast</h1>\\n</Section>\\n\\n<section class=\\"screencasts\\">\\n  {#each screencasts as screencast, index}\\n    <Screencast {screencast} screencastNumber={index + 1} />\\n  {/each}\\n</section>\\n\\n<Explore />\\n"],"names":[],"mappings":"AAQmB,iBAAE,CAAC,WAAW,MAAM,CAAC"}'
};
const Screencasts = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$v);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Learn more about Gitpod with these short screencasts.",
      title: "Screencasts"
    }
  }, {}, {})}

${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h1 class="${"h2 svelte-1idb770"}">Get started with a screencast</h1>`
  })}

<section class="${"screencasts"}">${each(screencasts, (screencast, index2) => `${validate_component(Screencast, "Screencast").$$render($$result, {screencast, screencastNumber: index2 + 1}, {}, {})}`)}</section>

${validate_component(Explore, "Explore").$$render($$result, {}, {}, {})}`;
});
var index$8 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Screencasts
});
var youtubeEmbed_svelte = '.youtube.svelte-bpztgf{position:relative;overflow:hidden;max-width:100%;max-height:500px;width:880px;margin:auto}.youtube.svelte-bpztgf:after{display:block;content:"";padding-top:56.25%}iframe.svelte-bpztgf{position:absolute;top:0;left:0;width:100%;height:100%;max-width:100%}';
const css$u = {
  code: '.youtube.svelte-bpztgf{position:relative;overflow:hidden;max-width:100%;max-height:500px;width:880px;margin:auto}.youtube.svelte-bpztgf:after{display:block;content:"";padding-top:56.25%}iframe.svelte-bpztgf{position:absolute;top:0;left:0;width:100%;height:100%;max-width:100%}',
  map: '{"version":3,"file":"youtube-embed.svelte","sources":["youtube-embed.svelte"],"sourcesContent":["<script lang=\\"ts\\">export let embedId;\\nexport let title;\\n</script>\\n\\n<style>.youtube{position:relative;overflow:hidden;max-width:100%;max-height:500px;width:880px;margin:auto}.youtube:after{display:block;content:\\"\\";padding-top:56.25%}iframe{position:absolute;top:0;left:0;width:100%;height:100%;max-width:100%}</style>\\n\\n<div class=\\"youtube\\">\\n  <iframe\\n    src={`https://www.youtube.com/embed/${embedId}`}\\n    {title}\\n    width=\\"560\\"\\n    height=\\"315\\"\\n    frameBorder=\\"0\\"\\n    allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\"\\n    allowfullscreen\\n  />\\n</div>\\n"],"names":[],"mappings":"AAIO,sBAAQ,CAAC,SAAS,QAAQ,CAAC,SAAS,MAAM,CAAC,UAAU,IAAI,CAAC,WAAW,KAAK,CAAC,MAAM,KAAK,CAAC,OAAO,IAAI,CAAC,sBAAQ,MAAM,CAAC,QAAQ,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,MAAM,CAAC,oBAAM,CAAC,SAAS,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC"}'
};
const Youtube_embed = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {embedId} = $$props;
  let {title} = $$props;
  if ($$props.embedId === void 0 && $$bindings.embedId && embedId !== void 0)
    $$bindings.embedId(embedId);
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$u);
  return `<div class="${"youtube svelte-bpztgf"}"><iframe${add_attribute("src", `https://www.youtube.com/embed/${embedId}`, 0)}${add_attribute("title", title, 0)} width="${"560"}" height="${"315"}" frameBorder="${"0"}" allow="${"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"}" allowfullscreen class="${"svelte-bpztgf"}"></iframe></div>`;
});
var _title__svelte = ".related.svelte-oro8y3{margin:2rem auto}.header.svelte-oro8y3{margin-bottom:var(--small)}";
const css$t = {
  code: ".related.svelte-oro8y3{margin:2rem auto}.header.svelte-oro8y3{margin-bottom:var(--small)}",
  map: '{"version":3,"file":"[title].svelte","sources":["[title].svelte"],"sourcesContent":["<script lang=\\"ts\\" context=\\"module\\">import screencasts from \\"../../contents/screencasts\\";\\nexport const load = async function ({ page }) {\\n    const { title } = page.params;\\n    const screencast = screencasts.find((s) => hyphenate(s.title) === title);\\n    return { props: { screencast } };\\n};\\n</script>\\n\\n<script lang=\\"ts\\">;\\nimport ScreencastPreview from \\"../../components/screencasts/preview.svelte\\";\\nimport YouTubeEmbed from \\"../../components/youtube-embed.svelte\\";\\nimport { hyphenate } from \\"../../utils/helper\\";\\nexport let screencast;\\n</script>\\n\\n<style>.related{margin:2rem auto}.header{margin-bottom:var(--small)}</style>\\n\\n<header class=\\"header\\">\\n  <h1>{screencast.title}</h1>\\n  <p>{screencast.description}</p>\\n</header>\\n\\n<YouTubeEmbed embedId={screencast.youtubeId} title={screencast.title} />\\n<p class=\\"related\\">\\n  Related documentation:\\n  {#each screencast.relatedDocs as relatedDoc, i}\\n    <a href=\\"/docs{relatedDoc.path}\\">{relatedDoc.title}</a>\\n    {screencast.relatedDocs.length > 0 &&\\n    screencast.relatedDocs[i + 1] &&\\n    !screencast.relatedDocs[i + 2]\\n      ? \\" and \\"\\n      : screencast.relatedDocs.length > 0 && screencast.relatedDocs[i + 1]\\n      ? \\", \\"\\n      : \\"\\"}\\n  {/each}\\n</p>\\n\\n{#if screencast.nextScreencast}\\n  <div class=\\"max-w-sm my-medium mx-auto\\">\\n    <h2 class=\\"text-center mb-small\\">Next up...</h2>\\n    <ScreencastPreview\\n      screencast={screencasts[screencast.nextScreencast]}\\n      screencastNumber={screencast.nextScreencast}\\n      headlineOrder=\\"h3\\"\\n    />\\n  </div>\\n{/if}\\n"],"names":[],"mappings":"AAeO,sBAAQ,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,qBAAO,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC"}'
};
const load$2 = async function({page: page2}) {
  const {title} = page2.params;
  const screencast = screencasts.find((s2) => hyphenate(s2.title) === title);
  return {props: {screencast}};
};
const U5Btitleu5D = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {screencast} = $$props;
  if ($$props.screencast === void 0 && $$bindings.screencast && screencast !== void 0)
    $$bindings.screencast(screencast);
  $$result.css.add(css$t);
  return `<header class="${"header svelte-oro8y3"}"><h1>${escape(screencast.title)}</h1>
  <p>${escape(screencast.description)}</p></header>

${validate_component(Youtube_embed, "YouTubeEmbed").$$render($$result, {
    embedId: screencast.youtubeId,
    title: screencast.title
  }, {}, {})}
<p class="${"related svelte-oro8y3"}">Related documentation:
  ${each(screencast.relatedDocs, (relatedDoc, i) => `<a href="${"/docs" + escape(relatedDoc.path)}">${escape(relatedDoc.title)}</a>
    ${escape(screencast.relatedDocs.length > 0 && screencast.relatedDocs[i + 1] && !screencast.relatedDocs[i + 2] ? " and " : screencast.relatedDocs.length > 0 && screencast.relatedDocs[i + 1] ? ", " : "")}`)}</p>

${screencast.nextScreencast ? `<div class="${"max-w-sm my-medium mx-auto"}"><h2 class="${"text-center mb-small"}">Next up...</h2>
    ${validate_component(Preview, "ScreencastPreview").$$render($$result, {
    screencast: screencasts[screencast.nextScreencast],
    screencastNumber: screencast.nextScreencast,
    headlineOrder: "h3"
  }, {}, {})}</div>` : ``}`;
});
var _title_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: U5Btitleu5D,
  load: load$2
});
var faq_svelte = ".faq.svelte-qe9f3r.svelte-qe9f3r{border-radius:16px;background:var(--sand-dark);border:1px solid transparent}.faq.svelte-qe9f3r.svelte-qe9f3r:focus,.faq.svelte-qe9f3r.svelte-qe9f3r:hover{border:1px solid #fff}.faq.svelte-qe9f3r.svelte-qe9f3r:not(:last-child){margin-bottom:var(--xx-small)}.faq__top.svelte-qe9f3r.svelte-qe9f3r{padding:var(--medium);align-items:center;width:100%;outline:none}@media(max-width:860px){.faq__top.svelte-qe9f3r.svelte-qe9f3r{padding:var(--xx-small);align-items:flex-start}}@media(max-width:375px){.faq__top.svelte-qe9f3r.svelte-qe9f3r{padding:var(--micro)}}.faq__title.svelte-qe9f3r.svelte-qe9f3r{display:inline-block;width:86%}.faq__arrow.svelte-qe9f3r.svelte-qe9f3r{height:1.5rem;width:1.5rem;outline:none;transition:all .2s}@media(max-width:768px){.faq__arrow.svelte-qe9f3r.svelte-qe9f3r{margin-top:.188rem}}.faq__text.svelte-qe9f3r.svelte-qe9f3r{margin:var(--medium);margin-top:-2.5rem}@media(max-width:860px){.faq__text.svelte-qe9f3r.svelte-qe9f3r{margin:var(--xx-small);margin-top:-1rem}}@media(max-width:375px){.faq__text.svelte-qe9f3r.svelte-qe9f3r{margin:var(--micro);margin-top:-.5rem}}.faq.svelte-qe9f3r a{font-weight:600}.h4.svelte-qe9f3r.svelte-qe9f3r{margin-bottom:0}details[open].svelte-qe9f3r .faq__arrow.svelte-qe9f3r{transform:rotate(180deg)}summary.svelte-qe9f3r.svelte-qe9f3r{list-style:none}summary.svelte-qe9f3r.svelte-qe9f3r::-webkit-details-marker{display:none}";
const css$s = {
  code: ".faq.svelte-qe9f3r.svelte-qe9f3r{border-radius:16px;background:var(--sand-dark);border:1px solid transparent}.faq.svelte-qe9f3r.svelte-qe9f3r:focus,.faq.svelte-qe9f3r.svelte-qe9f3r:hover{border:1px solid #fff}.faq.svelte-qe9f3r.svelte-qe9f3r:not(:last-child){margin-bottom:var(--xx-small)}.faq__top.svelte-qe9f3r.svelte-qe9f3r{padding:var(--medium);align-items:center;width:100%;outline:none}@media(max-width:860px){.faq__top.svelte-qe9f3r.svelte-qe9f3r{padding:var(--xx-small);align-items:flex-start}}@media(max-width:375px){.faq__top.svelte-qe9f3r.svelte-qe9f3r{padding:var(--micro)}}.faq__title.svelte-qe9f3r.svelte-qe9f3r{display:inline-block;width:86%}.faq__arrow.svelte-qe9f3r.svelte-qe9f3r{height:1.5rem;width:1.5rem;outline:none;transition:all .2s}@media(max-width:768px){.faq__arrow.svelte-qe9f3r.svelte-qe9f3r{margin-top:.188rem}}.faq__text.svelte-qe9f3r.svelte-qe9f3r{margin:var(--medium);margin-top:-2.5rem}@media(max-width:860px){.faq__text.svelte-qe9f3r.svelte-qe9f3r{margin:var(--xx-small);margin-top:-1rem}}@media(max-width:375px){.faq__text.svelte-qe9f3r.svelte-qe9f3r{margin:var(--micro);margin-top:-.5rem}}.faq.svelte-qe9f3r a{font-weight:600}.h4.svelte-qe9f3r.svelte-qe9f3r{margin-bottom:0}details[open].svelte-qe9f3r .faq__arrow.svelte-qe9f3r{transform:rotate(180deg)}summary.svelte-qe9f3r.svelte-qe9f3r{list-style:none}summary.svelte-qe9f3r.svelte-qe9f3r::-webkit-details-marker{display:none}",
  map: '{"version":3,"file":"faq.svelte","sources":["faq.svelte"],"sourcesContent":["<script>\\n  export let title;\\n</script>\\n\\n<style lang=\\"scss\\">.faq{border-radius:16px;background:var(--sand-dark);border:1px solid transparent}.faq:focus,.faq:hover{border:1px solid #fff}.faq:not(:last-child){margin-bottom:var(--xx-small)}.faq__top{padding:var(--medium);align-items:center;width:100%;outline:none}@media (max-width:860px){.faq__top{padding:var(--xx-small);align-items:flex-start}}@media (max-width:375px){.faq__top{padding:var(--micro)}}.faq__title{display:inline-block;width:86%}.faq__arrow{height:1.5rem;width:1.5rem;outline:none;transition:all .2s}@media (max-width:768px){.faq__arrow{margin-top:.188rem}}.faq__text{margin:var(--medium);margin-top:-2.5rem}@media (max-width:860px){.faq__text{margin:var(--xx-small);margin-top:-1rem}}@media (max-width:375px){.faq__text{margin:var(--micro);margin-top:-.5rem}}.faq :global(a){font-weight:600}.h4{margin-bottom:0}details[open] .faq__arrow{transform:rotate(180deg)}summary{list-style:none}summary::-webkit-details-marker{display:none}</style>\\n\\n<details class=\\"faq\\">\\n  <summary class=\\"faq__top\\">\\n    <h3 class=\\"h4 faq__title inline\\">{title}</h3>\\n    <img\\n      class=\\"faq__arrow inline float-right\\"\\n      width=\\"24\\"\\n      height=\\"24\\"\\n      src=\\"/arrow.svg\\"\\n      alt=\\"Arrow\\"\\n    />\\n  </summary>\\n  <div class=\\"faq__text text-large\\">\\n    <slot />\\n  </div>\\n</details>\\n"],"names":[],"mappings":"AAImB,gCAAI,CAAC,cAAc,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,gCAAI,MAAM,CAAC,gCAAI,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,gCAAI,KAAK,WAAW,CAAC,CAAC,cAAc,IAAI,UAAU,CAAC,CAAC,qCAAS,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,YAAY,MAAM,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,qCAAS,CAAC,QAAQ,IAAI,UAAU,CAAC,CAAC,YAAY,UAAU,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,qCAAS,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,uCAAW,CAAC,QAAQ,YAAY,CAAC,MAAM,GAAG,CAAC,uCAAW,CAAC,OAAO,MAAM,CAAC,MAAM,MAAM,CAAC,QAAQ,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,uCAAW,CAAC,WAAW,OAAO,CAAC,CAAC,sCAAU,CAAC,OAAO,IAAI,QAAQ,CAAC,CAAC,WAAW,OAAO,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sCAAU,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,sCAAU,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,WAAW,MAAM,CAAC,CAAC,kBAAI,CAAC,AAAQ,CAAC,AAAC,CAAC,YAAY,GAAG,CAAC,+BAAG,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,eAAC,CAAC,yBAAW,CAAC,UAAU,OAAO,MAAM,CAAC,CAAC,mCAAO,CAAC,WAAW,IAAI,CAAC,mCAAO,wBAAwB,CAAC,QAAQ,IAAI,CAAC"}'
};
const Faq = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {title} = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$s);
  return `<details class="${"faq svelte-qe9f3r"}"><summary class="${"faq__top svelte-qe9f3r"}"><h3 class="${"h4 faq__title inline svelte-qe9f3r"}">${escape(title)}</h3>
    <img class="${"faq__arrow inline float-right svelte-qe9f3r"}" width="${"24"}" height="${"24"}" src="${"/arrow.svg"}" alt="${"Arrow"}"></summary>
  <div class="${"faq__text text-large svelte-qe9f3r"}">${slots.default ? slots.default({}) : ``}</div></details>`;
});
var faqs_svelte$1 = "h2.svelte-1idb7bd{text-align:center}";
const css$r = {
  code: "h2.svelte-1idb7bd{text-align:center}",
  map: `{"version":3,"file":"faqs.svelte","sources":["faqs.svelte"],"sourcesContent":["<script>\\n  import Section from \\"../section.svelte\\";\\n  import Faq from \\"../pricing/faq.svelte\\";\\n</script>\\n\\n<style lang=\\"scss\\">h2{text-align:center}</style>\\n\\n<Section>\\n  <h2 class=\\"h1\\">FAQs</h2>\\n  <Faq title=\\"Can I create a team account?\\">\\n    <p>\\n      Of course! You can use Gitpod Self-Hosted on your own infrastructure for\\n      free for unlimited users. If you'd like to access additional features like\\n      unlimited prebuilds, shared workspaces, snapshots and an admin dashboard,\\n      you can upgrade to the Professional Plan at any time. Simply update your\\n      existing instance with a purchased license key. Self-hosted Gitpod\\n      licenses can currently only be purchased by request. Please request a\\n      license key <a href=\\"/enterprise-license\\">here</a> or\\n      <a href=\\"/contact\\">Get in touch</a> if you have any questions.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"Can I add more users to my plan at any time?\\">\\n    <p>Yes, you can add as many users as you like to your plan at any time.</p>\\n  </Faq>\\n  <Faq title=\\"What is the difference between SaaS and Self-Hosted?\\">\\n    <p>\\n      If you choose <strong>Gitpod SaaS</strong>, we will manage and host Gitpod\\n      in the cloud for you. This means minimal setup efforts for you and secure\\n      data storage in the cloud. Gitpod SaaS is be the best solution for teams\\n      who want to get started immediately and don\u2019t want to spend time on setup\\n      and operations.\\n    </p>\\n    <p>\\n      If you choose <strong>Gitpod Self-Hosted</strong>, you will manage and\\n      host Gitpod on your own instances. This means all data remains your\\n      infrastructure, as Gitpod can run behind corporate firewalls and on\\n      air-gapped networks. <strong>Gitpod Self-Hosted</strong> is the best solution\\n      for teams who want to keep full data control or use Gitpod in private networks.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"How can I install Self-Hosted?\\">\\n    <p>\\n      You can either install <strong>Gitpod Self-Hosted</strong> on\\n      <strong>Google Cloud Platform</strong> or on\\n      <strong>K3s</strong>. See\\n      <a href=\\"/docs/self-hosted/latest/self-hosted\\">Self-Hosted Installation</a\\n      > for more information.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"How can I pay?\\">\\n    <p>\\n      Currently, <strong>Gitpod Self-Hosted</strong> can only be purchased on\\n      request. Please request a license key\\n      <a href=\\"/enterprise-license\\">here</a>\\n      and we'll reach out to you. If you have any questions, please\\n      <a href=\\"/contact\\">Get in touch</a>. All our plans can be paid via\\n      invoice.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"Do you offer discounts for educational institutions?\\">\\n    <p>\\n      Yes, qualified educational institutions may receive a special discount.\\n      Please <a href=\\"/contact\\">Contact sales</a>.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"Still have more questions?\\">\\n    <p>\\n      We are happy to answer them, please <a href=\\"/contact\\">Get in Touch</a>.\\n    </p>\\n  </Faq>\\n</Section>\\n"],"names":[],"mappings":"AAKmB,iBAAE,CAAC,WAAW,MAAM,CAAC"}`
};
const Faqs$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$r);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h2 class="${"h1 svelte-1idb7bd"}">FAQs</h2>
  ${validate_component(Faq, "Faq").$$render($$result, {title: "Can I create a team account?"}, {}, {
      default: () => `<p>Of course! You can use Gitpod Self-Hosted on your own infrastructure for
      free for unlimited users. If you&#39;d like to access additional features like
      unlimited prebuilds, shared workspaces, snapshots and an admin dashboard,
      you can upgrade to the Professional Plan at any time. Simply update your
      existing instance with a purchased license key. Self-hosted Gitpod
      licenses can currently only be purchased by request. Please request a
      license key <a href="${"/enterprise-license"}">here</a> or
      <a href="${"/contact"}">Get in touch</a> if you have any questions.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {
      title: "Can I add more users to my plan at any time?"
    }, {}, {
      default: () => `<p>Yes, you can add as many users as you like to your plan at any time.</p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {
      title: "What is the difference between SaaS and Self-Hosted?"
    }, {}, {
      default: () => `<p>If you choose <strong>Gitpod SaaS</strong>, we will manage and host Gitpod
      in the cloud for you. This means minimal setup efforts for you and secure
      data storage in the cloud. Gitpod SaaS is be the best solution for teams
      who want to get started immediately and don\u2019t want to spend time on setup
      and operations.
    </p>
    <p>If you choose <strong>Gitpod Self-Hosted</strong>, you will manage and
      host Gitpod on your own instances. This means all data remains your
      infrastructure, as Gitpod can run behind corporate firewalls and on
      air-gapped networks. <strong>Gitpod Self-Hosted</strong> is the best solution
      for teams who want to keep full data control or use Gitpod in private networks.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "How can I install Self-Hosted?"}, {}, {
      default: () => `<p>You can either install <strong>Gitpod Self-Hosted</strong> on
      <strong>Google Cloud Platform</strong> or on
      <strong>K3s</strong>. See
      <a href="${"/docs/self-hosted/latest/self-hosted"}">Self-Hosted Installation</a> for more information.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "How can I pay?"}, {}, {
      default: () => `<p>Currently, <strong>Gitpod Self-Hosted</strong> can only be purchased on
      request. Please request a license key
      <a href="${"/enterprise-license"}">here</a>
      and we&#39;ll reach out to you. If you have any questions, please
      <a href="${"/contact"}">Get in touch</a>. All our plans can be paid via
      invoice.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {
      title: "Do you offer discounts for educational institutions?"
    }, {}, {
      default: () => `<p>Yes, qualified educational institutions may receive a special discount.
      Please <a href="${"/contact"}">Contact sales</a>.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "Still have more questions?"}, {}, {
      default: () => `<p>We are happy to answer them, please <a href="${"/contact"}">Get in Touch</a>.
    </p>`
    })}`
  })}`;
});
const pricingPlans$1 = [
  {
    title: "Open Source",
    price: "Free",
    features: ["Unlimited Users", "Public Repos", "Private Repos"],
    btnText: "Install now",
    btnHref: "/docs/self-hosted/latest/self-hosted"
  },
  {
    title: "Professional",
    price: isEurope() ? "\u20AC18" : "$20",
    duration: "Per User/Month",
    features: [
      "Everything in Free",
      "Unlimited Prebuilds",
      "Shared Workspaces",
      "Snapshots",
      "Admin Dashboard"
    ],
    btnText: "Get License",
    btnHref: "/enterprise-license",
    spiced: true
  }
];
const Plans_and_pricing$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<header class="${"tight"}"><h1>Self-hosted plans</h1>
  <p>Install Gitpod Self-Hosted on <strong>Google Cloud Platform</strong> and
    <strong>K3s</strong>.
  </p></header>
<div class="${"self-hosted-pricing"}">${validate_component(Pricing_boxes, "PricingBoxes").$$render($$result, {pricingPlans: pricingPlans$1}, {}, {})}</div>`;
});
const prerender$2C = true;
const Self_hosted$6 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Self-Host Gitpod on Your Own Infrastructure.",
      title: "Self-Hosted"
    }
  }, {}, {})}
${validate_component(Plans_and_pricing$1, "PlansAndPricing").$$render($$result, {}, {}, {})}
${validate_component(Faqs$1, "Faqs").$$render($$result, {}, {}, {})}
${validate_component(Explore, "Explore").$$render($$result, {}, {}, {})}`;
});
var selfHosted$6 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted$6,
  prerender: prerender$2C
});
var index_svelte$2 = ".content-docs.svelte-vidsrs a{font-weight:400}.content-docs.svelte-vidsrs img{border-radius:1.5rem}.content-docs.svelte-vidsrs h2{margin-bottom:1rem!important;margin-top:3rem!important}@media(min-width:768px){.content-docs.svelte-vidsrs h2{margin-top:4rem!important}}.content-docs.svelte-vidsrs h3{margin-bottom:1.5rem!important;margin-top:3rem!important}@media(min-width:768px){.content-docs.svelte-vidsrs h3{margin-bottom:2rem!important;margin-top:4rem!important}}.content-docs.svelte-vidsrs li{margin-top:0;margin-bottom:1.5rem}@media(min-width:768px){.content-docs.svelte-vidsrs li{margin-bottom:1rem}}";
const css$q = {
  code: ".content-docs.svelte-vidsrs a{font-weight:400}.content-docs.svelte-vidsrs img{border-radius:1.5rem}.content-docs.svelte-vidsrs h2{margin-bottom:1rem!important;margin-top:3rem!important}@media(min-width:768px){.content-docs.svelte-vidsrs h2{margin-top:4rem!important}}.content-docs.svelte-vidsrs h3{margin-bottom:1.5rem!important;margin-top:3rem!important}@media(min-width:768px){.content-docs.svelte-vidsrs h3{margin-bottom:2rem!important;margin-top:4rem!important}}.content-docs.svelte-vidsrs li{margin-top:0;margin-bottom:1.5rem}@media(min-width:768px){.content-docs.svelte-vidsrs li{margin-bottom:1rem}}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script lang=\\"ts\\" context=\\"module\\">export async function load({ session }) {\\n    const changelogEntries = session.changelogEntries;\\n    return { props: { changelogEntries } };\\n}\\n</script>\\n\\n<script lang=\\"ts\\">;\\nimport OpenGraph from \\"../../components/open-graph.svelte\\";\\nimport \\"../../assets/markdown-commons.scss\\";\\nexport let changelogEntries;\\n</script>\\n\\n<style>.content-docs :global(a){font-weight:400}.content-docs :global(img){border-radius:1.5rem}.content-docs :global(h2){margin-bottom:1rem!important;margin-top:3rem!important}@media (min-width:768px){.content-docs :global(h2){margin-top:4rem!important}}.content-docs :global(h3){margin-bottom:1.5rem!important;margin-top:3rem!important}@media (min-width:768px){.content-docs :global(h3){margin-bottom:2rem!important;margin-top:4rem!important}}.content-docs :global(li){margin-top:0;margin-bottom:1.5rem}@media (min-width:768px){.content-docs :global(li){margin-bottom:1rem}}</style>\\n\\n<OpenGraph\\n  data={{\\n    description: \\"New features and improvements to Gitpod.\\",\\n    title: \\"Changelog\\",\\n    type: \\"website\\",\\n  }}\\n/>\\n\\n<div class=\\"flex\\">\\n  <div class=\\"hidden w-4/12 md:block\\" />\\n  <header class=\\"w-full mb-x-large md:w-8/12 md:mb-xx-large\\">\\n    <h1 class=\\"mt-x-large mb-macro md:mt-xx-large\\">Changelog</h1>\\n    <p>Gitpod product improvements and updates</p>\\n    <p>\\n      <a\\n        href=\\"https://www.twitter.com/gitpod\\"\\n        rel=\\"noopener\\"\\n        class=\\"btn-primary\\">Follow us on Twitter</a\\n      >\\n    </p>\\n  </header>\\n</div>\\n\\n<div class=\\"flex flex-col space-y-x-large md:space-y-xx-large\\">\\n  {#each changelogEntries as entry}\\n    <div class=\\"flex flex-col md:flex-row\\">\\n      <div class=\\"w-full md:w-4/12\\">\\n        <h2 class=\\"mb-xx-small text-h4\\">\\n          {new Date(Date.parse(entry.date)).toLocaleDateString(undefined, {\\n            year: \\"numeric\\",\\n            month: \\"long\\",\\n            day: \\"numeric\\",\\n          })}\\n        </h2>\\n      </div>\\n      <div class=\\"w-full md:w-8/12 content-docs\\">\\n        {@html entry.content}\\n      </div>\\n    </div>\\n    <div class=\\"border-b border-gray-300\\" />\\n  {/each}\\n</div>\\n<div class=\\"flex py-large md:py-x-large\\">\\n  <div class=\\"hidden w-4/12 md:block\\" />\\n  <div class=\\"w-full md:w-8/12\\">\\n    <p>\\n      For older updates, please visit <a href=\\"/docs/changelog\\"\\n        >the previous changelog.</a\\n      >\\n    </p>\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAYO,2BAAa,CAAC,AAAQ,CAAC,AAAC,CAAC,YAAY,GAAG,CAAC,2BAAa,CAAC,AAAQ,GAAG,AAAC,CAAC,cAAc,MAAM,CAAC,2BAAa,CAAC,AAAQ,EAAE,AAAC,CAAC,cAAc,IAAI,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2BAAa,CAAC,AAAQ,EAAE,AAAC,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,2BAAa,CAAC,AAAQ,EAAE,AAAC,CAAC,cAAc,MAAM,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2BAAa,CAAC,AAAQ,EAAE,AAAC,CAAC,cAAc,IAAI,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,2BAAa,CAAC,AAAQ,EAAE,AAAC,CAAC,WAAW,CAAC,CAAC,cAAc,MAAM,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2BAAa,CAAC,AAAQ,EAAE,AAAC,CAAC,cAAc,IAAI,CAAC,CAAC"}'
};
async function load$1({session: session2}) {
  const changelogEntries = session2.changelogEntries;
  return {props: {changelogEntries}};
}
const Changelog$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {changelogEntries} = $$props;
  if ($$props.changelogEntries === void 0 && $$bindings.changelogEntries && changelogEntries !== void 0)
    $$bindings.changelogEntries(changelogEntries);
  $$result.css.add(css$q);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "New features and improvements to Gitpod.",
      title: "Changelog",
      type: "website"
    }
  }, {}, {})}

<div class="${"flex"}"><div class="${"hidden w-4/12 md:block"}"></div>
  <header class="${"w-full mb-x-large md:w-8/12 md:mb-xx-large"}"><h1 class="${"mt-x-large mb-macro md:mt-xx-large"}">Changelog</h1>
    <p>Gitpod product improvements and updates</p>
    <p><a href="${"https://www.twitter.com/gitpod"}" rel="${"noopener"}" class="${"btn-primary"}">Follow us on Twitter</a></p></header></div>

<div class="${"flex flex-col space-y-x-large md:space-y-xx-large"}">${each(changelogEntries, (entry) => `<div class="${"flex flex-col md:flex-row"}"><div class="${"w-full md:w-4/12"}"><h2 class="${"mb-xx-small text-h4"}">${escape(new Date(Date.parse(entry.date)).toLocaleDateString(void 0, {
    year: "numeric",
    month: "long",
    day: "numeric"
  }))}
        </h2></div>
      <div class="${"w-full md:w-8/12 content-docs svelte-vidsrs"}">${entry.content}
      </div></div>
    <div class="${"border-b border-gray-300"}"></div>`)}</div>
<div class="${"flex py-large md:py-x-large"}"><div class="${"hidden w-4/12 md:block"}"></div>
  <div class="${"w-full md:w-8/12"}"><p>For older updates, please visit <a href="${"/docs/changelog"}">the previous changelog.</a></p></div></div>`;
});
var index$7 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Changelog$2,
  load: load$1
});
var feature_svelte = ".card.svelte-qt0rj6{display:grid;grid-template-columns:1fr minmax(280px,80%);grid-gap:20px;gap:20px;min-height:192px;margin:1rem;align-items:self-start}";
const css$p = {
  code: ".card.svelte-qt0rj6{display:grid;grid-template-columns:1fr minmax(280px,80%);grid-gap:20px;gap:20px;min-height:192px;margin:1rem;align-items:self-start}",
  map: '{"version":3,"file":"feature.svelte","sources":["feature.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nexport let feature;\\n</script>\\n\\n<style>.card{display:grid;grid-template-columns:1fr minmax(280px,80%);grid-gap:20px;gap:20px;min-height:192px;margin:1rem;align-items:self-start}</style>\\n\\n<div class=\\"card\\">\\n  <h3 class=\\"h4\\">{feature.title}</h3>\\n  <p>{@html feature.description}</p>\\n</div>\\n"],"names":[],"mappings":"AAIO,mBAAK,CAAC,QAAQ,IAAI,CAAC,sBAAsB,GAAG,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,OAAO,IAAI,CAAC,YAAY,UAAU,CAAC"}'
};
const Feature = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {feature} = $$props;
  if ($$props.feature === void 0 && $$bindings.feature && feature !== void 0)
    $$bindings.feature(feature);
  $$result.css.add(css$p);
  return `<div class="${"card svelte-qt0rj6"}"><h3 class="${"h4"}">${escape(feature.title)}</h3>
  <p>${feature.description}</p></div>`;
});
var education_svelte = "h2.svelte-1idb7bd{text-align:center}";
const css$o = {
  code: "h2.svelte-1idb7bd{text-align:center}",
  map: '{"version":3,"file":"education.svelte","sources":["education.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script lang=\\"ts\\">;\\nimport Feature from \\"../components/education/feature.svelte\\";\\nimport OpenGraph from \\"../components/open-graph.svelte\\";\\nimport Explore from \\"../components/explore.svelte\\";\\nconst features = [\\n    {\\n        title: \\"Exams & Exercises\\",\\n        description: `<strong>Teachers</strong> can prepare fully working and readily compiled projects, put them into a certain state and take a snapshot. <strong>Students</strong> starting a workspace from that snapshot get their own clone to solve the excercise. When finished, a student takes another immutable <strong>snapshot and sends it back</strong> to the teacher.`,\\n    },\\n    {\\n        title: \\"Live Tutoring\\",\\n        description: `Gitpod <strong>helps teachers collaborate with students</strong>. Teachers can easily join a student\'s development session. There teachers can observe and help the student.`,\\n    },\\n    {\\n        title: \\"Any device\\",\\n        description: `Gitpod simplifies the onboarding process, <strong>makes coding accessible from any device</strong>, and provides a productive learning environment. With Gitpod <strong>your students don\'t need expensive hardware</strong>: Chromebooks or Raspberry Pis are enough`,\\n    },\\n    {\\n        title: \\"Easy Install\\",\\n        description: `All Gitpod needs is a <strong>Kubernetes cluster</strong>. It can integrate and authenticate users with your <strong>GitHub Enterprise, GitLab, or Bitbucket</strong> instance. Gitpod provides your institution a development environment <strong>where your exercises just work</strong>. No need to waste time providing technical support for your students.`,\\n    },\\n];\\nconst pricingFeatureLabels = {\\n    pricing: \\"Pricing\\",\\n    domain: \\"Domain\\",\\n    managedBy: \\"Managed By\\",\\n    infrastructure: \\"Infrastructure\\",\\n    sla: \\"SLA\\",\\n    support: \\"Support\\",\\n    githubcom: \\"Github.com\\",\\n    githubenterprise: \\"GitHub Enterprise\\",\\n    gitlabcom: \\"Gitlab.com\\",\\n    gitlabselfmanaged: \\"Gitlab Self-Managed\\",\\n    bitbucket: \\"Bitbucket\\",\\n    customauth: \\"Custom Authentication\\",\\n    custombranding: \\"Custom Branding\\",\\n};\\nconst pricing = [\\n    {\\n        title: \\"Gitpod.io\\",\\n        features: [\\n            {\\n                pricing: \\"\\",\\n                domain: \\"gitpod.io\\",\\n                managedBy: \\"Gitpod\\",\\n                infrastructure: \\"Globally distributed\\",\\n                sla: \\"Optional\\",\\n                support: true,\\n                githubcom: true,\\n                githubenterprise: \\"Public only\\",\\n                gitlabcom: true,\\n                gitlabselfmanaged: \\"Public only\\",\\n                bitbucket: true,\\n                customauth: false,\\n                custombranding: false,\\n            },\\n        ],\\n        btnText: \\"Try now\\",\\n        btnHref: \\"\\",\\n        btnNote: \\"Free 14 days trial included\\",\\n    },\\n    {\\n        title: \\"Managed\\",\\n        features: [\\n            {\\n                pricing: \\"Please enquire\\",\\n                domain: \\"Custom\\",\\n                managedBy: \\"Gitpod\\",\\n                infrastructure: \\"> 1 geographical regions\\",\\n                sla: \\"Optional\\",\\n                support: true,\\n                githubcom: true,\\n                githubenterprise: true,\\n                gitlabcom: true,\\n                gitlabselfmanaged: true,\\n                bitbucket: true,\\n                customauth: \\"OAuth2\\",\\n                custombranding: true,\\n            },\\n        ],\\n        btnText: \\"Contact sales\\",\\n        btnHref: \\"\\",\\n    },\\n    {\\n        title: \\"Self-Hosted\\",\\n        features: [\\n            {\\n                pricing: \\"\\",\\n                domain: \\"Custom\\",\\n                managedBy: \\"You\\",\\n                infrastructure: \\"On-prem or private cloud\\",\\n                sla: false,\\n                support: true,\\n                githubcom: true,\\n                githubenterprise: true,\\n                gitlabcom: true,\\n                gitlabselfmanaged: true,\\n                bitbucket: true,\\n                customauth: \\"OAuth2\\",\\n                custombranding: true,\\n            },\\n        ],\\n        btnText: \\"Host yourself\\",\\n        btnHref: \\"\\",\\n    },\\n];\\n</script>\\n\\n<style type=\\"scss\\">h2{text-align:center}</style>\\n\\n<OpenGraph\\n  data={{\\n    description:\\n      \\"Gitpod simplifies the onboarding process, makes coding accessible from anywhere, and provides a productive learning environment.\\",\\n    title: \\"Education\\",\\n  }}\\n/>\\n<header>\\n  <h1>Focus on teaching code, not tedious setups!</h1>\\n  <p>\\n    Gitpod simplifies the onboarding process, makes coding accessible from any\\n    device, and provides a productive learning environment.\\n  </p>\\n  <!--<p>\\n    <a href=\\"#edPricingTable\\" class=\\"btn-conversion\\">Choose an option</a\\n    >\\n  </p>-->\\n</header>\\n\\n<section class=\\"features\\">\\n  <h2>For Schools, Universities, and Coding Bootcamps</h2>\\n\\n  {#each features as feature}\\n    <Feature {feature} />\\n  {/each}\\n</section>\\n<!--\\n<section>\\n  <h2>Education pricing</h2>\\n  <p>\\n    You have the choice to either host Gitpod yourself or to use our cloud\\n    infrastructure.\\n  </p>\\n  <div id=\\"edPricingTable\\">\\n    < !-- TODO: Pricing table. What\'s the best approach to support the hover effect per row and style individual colums as cards? -- >\\n  </div>\\n</section>\\n-->\\n<Explore />\\n"],"names":[],"mappings":"AAgHmB,iBAAE,CAAC,WAAW,MAAM,CAAC"}'
};
const prerender$2B = true;
const Education = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const features2 = [
    {
      title: "Exams & Exercises",
      description: `<strong>Teachers</strong> can prepare fully working and readily compiled projects, put them into a certain state and take a snapshot. <strong>Students</strong> starting a workspace from that snapshot get their own clone to solve the excercise. When finished, a student takes another immutable <strong>snapshot and sends it back</strong> to the teacher.`
    },
    {
      title: "Live Tutoring",
      description: `Gitpod <strong>helps teachers collaborate with students</strong>. Teachers can easily join a student's development session. There teachers can observe and help the student.`
    },
    {
      title: "Any device",
      description: `Gitpod simplifies the onboarding process, <strong>makes coding accessible from any device</strong>, and provides a productive learning environment. With Gitpod <strong>your students don't need expensive hardware</strong>: Chromebooks or Raspberry Pis are enough`
    },
    {
      title: "Easy Install",
      description: `All Gitpod needs is a <strong>Kubernetes cluster</strong>. It can integrate and authenticate users with your <strong>GitHub Enterprise, GitLab, or Bitbucket</strong> instance. Gitpod provides your institution a development environment <strong>where your exercises just work</strong>. No need to waste time providing technical support for your students.`
    }
  ];
  $$result.css.add(css$o);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod simplifies the onboarding process, makes coding accessible from anywhere, and provides a productive learning environment.",
      title: "Education"
    }
  }, {}, {})}
<header><h1>Focus on teaching code, not tedious setups!</h1>
  <p>Gitpod simplifies the onboarding process, makes coding accessible from any
    device, and provides a productive learning environment.
  </p>
  </header>

<section class="${"features"}"><h2 class="${"svelte-1idb7bd"}">For Schools, Universities, and Coding Bootcamps</h2>

  ${each(features2, (feature) => `${validate_component(Feature, "Feature").$$render($$result, {feature}, {}, {})}`)}</section>

${validate_component(Explore, "Explore").$$render($$result, {}, {}, {})}`;
});
var education = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Education,
  prerender: prerender$2B
});
const Founders = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Section, "Section").$$render($$result, {className: "text-center"}, {}, {
    default: () => `<h2 class="${"mb-medium"}">The founders</h2>
  <div class="${"shadow-normal rounded-4xl bg-white p-small sm:p-x-large mb-x-large"}"><img src="${"/images/media-kit/founders.jpg"}" alt="${"Gitpod founders group"}" class="${"rounded-4xl mx-auto"}">
    <p class="${"py-xx-small"}">Download founder group picture</p>
    <a href="${"/images/media-kit/founders.jpg"}" download class="${"btn-cta"}">PNG</a></div>
  <p class="${"text-large"}">Please <a href="${"/contact"}">contact us</a> for any intended use not covered by
    these guidelines.
  </p>`
  })}`;
});
const Image_box = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {image} = $$props;
  const {src: src2, alt, text, btnText, imgClass, containerClasses} = image;
  if ($$props.image === void 0 && $$bindings.image && image !== void 0)
    $$bindings.image(image);
  return `<div${add_attribute("class", `shadow-normal rounded-4xl py-small px-micro sm:p-small ${containerClasses} bg-white mb-large`, 0)}><img${add_attribute("src", src2, 0)}${add_attribute("alt", alt, 0)}${add_attribute("class", `${imgClass} rounded m-auto w-full`, 0)}>
  <p class="${"mt-small mb-micro max-w-sm mx-auto"}">Download ${escape(text)}</p>
  <a${add_attribute("href", src2, 0)} class="${"btn-cta"}" download>${escape(btnText)}</a></div>`;
});
const Additional_images = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const images = [
    {
      src: "/images/gitpod-editor.jpg",
      alt: "Gitpod",
      text: "light theme screenshot",
      btnText: "JPG",
      imgClass: "shadow-brand",
      containerClasses: "px-huge"
    },
    {
      src: "/images/extension-activation/extension-screenshot.png",
      alt: "Gitpod Extension",
      text: "screenshot of the Gitpod browser extension within GitHub",
      btnText: "PNG",
      imgClass: "h-auto md:h-72",
      containerClasses: "max-w-xl"
    },
    {
      src: "/images/blog/gitlab-integration/gitpod-button-on-gitlab.png",
      alt: "Gitpod button on GitLab",
      text: "screenshot of the native Gitpod integration within GitLab",
      btnText: "PNG",
      imgClass: "h-auto md:h-72",
      containerClasses: "max-w-xl"
    }
  ];
  return `${validate_component(Section, "Section").$$render($$result, {className: "text-center"}, {}, {
    default: () => `<h2>Additional images</h2>
  <div class="${"flex justify-around xl:justify-between flex-wrap mt-medium"}">${each(images, (image) => `${validate_component(Image_box, "ImageBox").$$render($$result, {image}, {}, {})}`)}</div>`
  })}`;
});
const Color_box = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {colorName} = $$props;
  let {colorValue} = $$props;
  let {isDark} = $$props;
  if ($$props.colorName === void 0 && $$bindings.colorName && colorName !== void 0)
    $$bindings.colorName(colorName);
  if ($$props.colorValue === void 0 && $$bindings.colorValue && colorValue !== void 0)
    $$bindings.colorValue(colorValue);
  if ($$props.isDark === void 0 && $$bindings.isDark && isDark !== void 0)
    $$bindings.isDark(isDark);
  return `<div class="${[
    "w-64 sm:w-80 shadow-normal py-medium pl-medium rounded-4xl text-large m-micro",
    isDark ? "text-white" : ""
  ].join(" ").trim()}"${add_attribute("style", `background: ${colorValue}`, 0)}>${escape(colorName)}
  <br>
  ${escape(colorValue)}</div>`;
});
const Colors_section = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h2 class="${"text-center"}">Primary colors</h2>
  <div class="${"flex justify-around flex-wrap my-small"}">${validate_component(Color_box, "ColorBox").$$render($$result, {
      colorName: "Sand light",
      colorValue: "#f5f4f4"
    }, {}, {})}
    ${validate_component(Color_box, "ColorBox").$$render($$result, {
      colorName: "Kumquat",
      colorValue: "#FFB45B"
    }, {}, {})}
    ${validate_component(Color_box, "ColorBox").$$render($$result, {
      colorName: "Black",
      colorValue: "#12100C",
      isDark: true
    }, {}, {})}</div>
  <img src="${"/svg/media-kit/gradient.svg"}" alt="${"Gitpod Brand Gradient"}" class="${"w-72 sm:w-96 mt-large md:mt-x-large m-auto"}">`
  })}`;
});
var logoBox_svelte = ".logo-box.svelte-1s3yfe4{width:480px}@media(max-width:50px){.logo-box.svelte-1s3yfe4{width:100%}}.svg-button.svelte-1s3yfe4{background-color:var(--brand-almost-ripe)}.svg-button.svelte-1s3yfe4:focus,.svg-button.svelte-1s3yfe4:hover{background:var(--brand-hover)}";
const css$n = {
  code: ".logo-box.svelte-1s3yfe4{width:480px}@media(max-width:50px){.logo-box.svelte-1s3yfe4{width:100%}}.svg-button.svelte-1s3yfe4{background-color:var(--brand-almost-ripe)}.svg-button.svelte-1s3yfe4:focus,.svg-button.svelte-1s3yfe4:hover{background:var(--brand-hover)}",
  map: '{"version":3,"file":"logo-box.svelte","sources":["logo-box.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nexport let logo;\\nconst { src, alt, text, srcPNG, isDark } = logo;\\nconst svgSrc = `/svg/media-kit/${src}`;\\n</script>\\n\\n<style lang=\\"scss\\">.logo-box{width:480px}@media (max-width:50px){.logo-box{width:100%}}.svg-button{background-color:var(--brand-almost-ripe)}.svg-button:focus,.svg-button:hover{background:var(--brand-hover)}</style>\\n\\n<div\\n  class=\\"logo-box px-small py-medium sm:p-large rounded-4xl bg-white shadow-normal mx-micro mb-small\\"\\n  class:bg-gray-900={isDark}\\n  class:text-white={isDark}\\n>\\n  <img src={svgSrc} {alt} class=\\"mx-auto\\" />\\n  <p class=\\"mt-medium mb-micro\\">Download {text}</p>\\n  <div class=\\"buttons-wrapper\\">\\n    <a href={svgSrc} download class=\\"btn-cta svg-button\\">SVG</a>\\n    <a href={`/images/media-kit/${srcPNG}`} download class=\\"btn-cta\\">PNG</a>\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAMmB,wBAAS,CAAC,MAAM,KAAK,CAAC,MAAM,AAAC,WAAW,IAAI,CAAC,CAAC,wBAAS,CAAC,MAAM,IAAI,CAAC,CAAC,0BAAW,CAAC,iBAAiB,IAAI,mBAAmB,CAAC,CAAC,0BAAW,MAAM,CAAC,0BAAW,MAAM,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC"}'
};
const Logo_box = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {logo} = $$props;
  const {src: src2, alt, text, srcPNG, isDark} = logo;
  const svgSrc = `/svg/media-kit/${src2}`;
  if ($$props.logo === void 0 && $$bindings.logo && logo !== void 0)
    $$bindings.logo(logo);
  $$result.css.add(css$n);
  return `<div class="${[
    "logo-box px-small py-medium sm:p-large rounded-4xl bg-white shadow-normal mx-micro mb-small svelte-1s3yfe4",
    (isDark ? "bg-gray-900" : "") + " " + (isDark ? "text-white" : "")
  ].join(" ").trim()}"><img${add_attribute("src", svgSrc, 0)}${add_attribute("alt", alt, 0)} class="${"mx-auto"}">
  <p class="${"mt-medium mb-micro"}">Download ${escape(text)}</p>
  <div class="${"buttons-wrapper"}"><a${add_attribute("href", svgSrc, 0)} download class="${"btn-cta svg-button svelte-1s3yfe4"}">SVG</a>
    <a${add_attribute("href", `/images/media-kit/${srcPNG}`, 0)} download class="${"btn-cta"}">PNG</a></div></div>`;
});
const Logo_section = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const logos = [
    {
      src: "logo-light-theme.svg",
      alt: "Gitpod light theme logo",
      text: "logo",
      srcPNG: "logo-light-theme.png"
    },
    {
      src: "logo-dark-theme.svg",
      alt: "Gitpod dark theme logo",
      text: "dark theme logo",
      srcPNG: "logo-dark-theme.png",
      isDark: true
    },
    {
      src: "logo-mark.svg",
      alt: "Gitpod Logo Mark",
      text: "mark",
      srcPNG: "logo-mark.png"
    }
  ];
  return `<section class="${"text-center"}"><div class="${"max-w-3xl m-auto mb-small"}"><h2>About</h2>
    <p>Please don\u2019t modify the logos or use them in any altered way.
      <br>
      For more details
      <a href="${"/assets/style-guide.pdf"}" target="${"_blank"}">see style guide</a>.
    </p></div>
  <div class="${"flex justify-around flex-wrap max-w-container-normal m-auto"}">${each(logos, (logo) => `${validate_component(Logo_box, "LogoBox").$$render($$result, {logo}, {}, {})}`)}</div></section>`;
});
const Media_kit = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "We\u2019ve put together some assets to help you using our brand.",
      title: "Media kit"
    }
  }, {}, {})}

<header><h1>Media kit</h1>
  <p>We\u2019ve put together some assets to help you using our brand.</p>
  <img src="${"/images/media-kit/media-kit.png"}" alt="${"Gitpod Illustration"}" class="${"mt-x-large rounded-4xl w-full"}"></header>

${validate_component(Logo_section, "LogoSection").$$render($$result, {}, {}, {})}
${validate_component(Colors_section, "ColorsSection").$$render($$result, {}, {}, {})}
${validate_component(Additional_images, "AdditionalImages").$$render($$result, {}, {}, {})}
${validate_component(Founders, "Founders").$$render($$result, {}, {}, {})}`;
});
var mediaKit = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Media_kit
});
const Header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<header><h1>Features</h1>
  <p>Automated workspaces that supercharge your development workflow. Squash your code-to-commit times.
  </p></header>`;
});
const Workspace_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="${"337"}" height="${"296"}" viewBox="${"0 0 337 296"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" aria-hidden="${"true"}"><rect width="${"337"}" height="${"296"}" fill="${"#F9F9F9"}"></rect><rect width="${"337"}" height="${"44"}" fill="${"#F3F1F0"}"></rect><rect y="${"252"}" width="${"337"}" height="${"44"}" fill="${"#FF8A00"}"></rect><circle cx="${"30"}" cy="${"22"}" r="${"6"}" fill="${"#ECE7E5"}"></circle><rect x="${"37"}" y="${"79"}" width="${"161"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"37"}" y="${"203"}" width="${"87"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"81"}" y="${"110"}" width="${"161"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"81"}" y="${"141"}" width="${"161"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"81"}" y="${"172"}" width="${"161"}" height="${"13"}" fill="${"#F3F1F0"}"></rect></svg>`;
});
const Workspace_2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="${"286"}" height="${"272"}" viewBox="${"0 0 286 272"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" aria-hidden="${"true"}"><rect width="${"286"}" height="${"272"}" fill="${"#585653"}"></rect><rect width="${"286"}" height="${"44"}" fill="${"#696662"}"></rect><rect y="${"228"}" width="${"286"}" height="${"44"}" fill="${"#FF8A00"}"></rect><circle cx="${"30"}" cy="${"22"}" r="${"6"}" fill="${"#807C78"}"></circle><rect x="${"41"}" y="${"67"}" width="${"161"}" height="${"13"}" fill="${"#807C78"}"></rect><rect x="${"41"}" y="${"191"}" width="${"87"}" height="${"13"}" fill="${"#807C78"}"></rect><rect x="${"85"}" y="${"98"}" width="${"161"}" height="${"13"}" fill="${"#807C78"}"></rect><rect x="${"85"}" y="${"129"}" width="${"161"}" height="${"13"}" fill="${"#807C78"}"></rect><rect x="${"85"}" y="${"160"}" width="${"161"}" height="${"13"}" fill="${"#807C78"}"></rect></svg>`;
});
const Workspace_3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="${"337"}" height="${"296"}" viewBox="${"0 0 337 296"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" aria-hidden="${"true"}"><rect width="${"337"}" height="${"296"}" fill="${"#F9F9F9"}"></rect><rect width="${"337"}" height="${"44"}" fill="${"#F3F1F0"}"></rect><rect y="${"252"}" width="${"337"}" height="${"44"}" fill="${"#FF8A00"}"></rect><circle cx="${"30"}" cy="${"22"}" r="${"6"}" fill="${"#ECE7E5"}"></circle><rect x="${"101"}" y="${"79"}" width="${"149"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"101"}" y="${"203"}" width="${"80"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"142"}" y="${"110"}" width="${"149"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"142"}" y="${"141"}" width="${"149"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"142"}" y="${"172"}" width="${"149"}" height="${"13"}" fill="${"#F3F1F0"}"></rect><rect x="${"4"}" y="${"48"}" width="${"69"}" height="${"200"}" fill="${"#F3F1F0"}"></rect></svg>`;
});
const Workspace_4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="${"372"}" height="${"296"}" viewBox="${"0 0 372 296"}" fill="${"none"}" xmlns="${"http://www.w3.org/2000/svg"}" aria-hidden="${"true"}"><g clip-path="${"url(#workspace-4-clip0)"}"><rect width="${"372"}" height="${"296"}" fill="${"#F9F9F9"}"></rect><rect width="${"432"}" height="${"44"}" fill="${"#F3F1F0"}"></rect><circle cx="${"30"}" cy="${"22"}" r="${"6"}" fill="${"#ECE7E5"}"></circle><rect x="${"103"}" y="${"220"}" width="${"50"}" height="${"10"}" rx="${"5"}" fill="${"url(#workspace-4-paint0_linear)"}"></rect><rect x="${"161"}" y="${"220"}" width="${"50"}" height="${"10"}" rx="${"5"}" fill="${"url(#workspace-4-paint1_linear)"}"></rect><rect x="${"219"}" y="${"220"}" width="${"50"}" height="${"10"}" rx="${"5"}" fill="${"#ECE7E5"}"></rect><path fill-rule="${"evenodd"}" clip-rule="${"evenodd"}" d="${"M191.647 109.386C193.429 112.608 192.345 116.712 189.227 118.553L169.836 130C169.323 130.303 169.007 130.866 169.007 131.476V149.446C169.007 150.056 169.323 150.619 169.836 150.922L185.185 159.983C185.69 160.281 186.31 160.281 186.815 159.983L202.164 150.922C202.677 150.619 202.993 150.056 202.993 149.446V138.27L189.196 146.312C186.068 148.136 182.101 146.994 180.336 143.763C178.571 140.531 179.676 136.433 182.804 134.61L202.546 123.102C208.56 119.597 216 124.086 216 131.219V150.81C216 155.399 213.62 159.636 209.763 161.912L192.141 172.315C188.336 174.562 183.664 174.562 179.859 172.315L162.237 161.912C158.38 159.636 156 155.399 156 150.81V130.112C156 125.523 158.38 121.286 162.237 119.01L182.773 106.886C185.892 105.045 189.865 106.165 191.647 109.386Z"}" fill="${"url(#workspace-4-paint2_linear)"}"></path></g><defs><linearGradient id="${"workspace-4-paint0_linear"}" x1="${"125.5"}" y1="${"207.5"}" x2="${"135"}" y2="${"237"}" gradientUnits="${"userSpaceOnUse"}"><stop stop-color="${"#7FE959"}"></stop><stop offset="${"1"}" stop-color="${"#31B602"}"></stop></linearGradient><linearGradient id="${"workspace-4-paint1_linear"}" x1="${"183.5"}" y1="${"207.5"}" x2="${"193"}" y2="${"237"}" gradientUnits="${"userSpaceOnUse"}"><stop stop-color="${"#7FE959"}"></stop><stop offset="${"1"}" stop-color="${"#31B602"}"></stop></linearGradient><linearGradient id="${"workspace-4-paint2_linear"}" x1="${"201.16"}" y1="${"116.283"}" x2="${"168.917"}" y2="${"165.351"}" gradientUnits="${"userSpaceOnUse"}"><stop stop-color="${"#FFB45B"}"></stop><stop offset="${"1"}" stop-color="${"#FF8A00"}"></stop></linearGradient><clipPath id="${"workspace-4-clip0"}"><rect width="${"372"}" height="${"296"}" fill="${"white"}"></rect></clipPath></defs></svg>`;
});
var workspaces_svelte = '.aspect.svelte-1bzlj62{position:relative}.aspect.svelte-1bzlj62:before{content:"";display:block;padding-bottom:calc(100%*var(--height)/var(--width))}.container.svelte-1bzlj62{top:0;left:0;width:100%;height:100%}.container.svelte-1bzlj62,.item.svelte-1bzlj62{position:absolute}.item.svelte-1bzlj62{transform-origin:center center;box-shadow:0 2px 5px rgba(0,0,0,.08),0 5px 20px rgba(0,0,0,.12);border-radius:20px;overflow:hidden}.item.svelte-1bzlj62>*{display:block;width:100%;height:auto}figcaption.svelte-1bzlj62{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}';
const css$m = {
  code: '.aspect.svelte-1bzlj62{position:relative}.aspect.svelte-1bzlj62:before{content:"";display:block;padding-bottom:calc(100%*var(--height)/var(--width))}.container.svelte-1bzlj62{top:0;left:0;width:100%;height:100%}.container.svelte-1bzlj62,.item.svelte-1bzlj62{position:absolute}.item.svelte-1bzlj62{transform-origin:center center;box-shadow:0 2px 5px rgba(0,0,0,.08),0 5px 20px rgba(0,0,0,.12);border-radius:20px;overflow:hidden}.item.svelte-1bzlj62>*{display:block;width:100%;height:auto}figcaption.svelte-1bzlj62{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}',
  map: '{"version":3,"file":"workspaces.svelte","sources":["workspaces.svelte"],"sourcesContent":["<script>\\n  import { onMount } from \\"svelte\\";\\n  import { fade } from \\"svelte/transition\\";\\n  import { cubicIn, cubicOut, linear } from \\"svelte/easing\\";\\n  import Workspace_1 from \\"./svgs/workspace-1.svelte\\";\\n  import Workspace_2 from \\"./svgs/workspace-2.svelte\\";\\n  import Workspace_3 from \\"./svgs/workspace-3.svelte\\";\\n  import Workspace_4 from \\"./svgs/workspace-4.svelte\\";\\n\\n  export let alt = \\"\\";\\n  export let iterations = 3;\\n\\n  let wrapper;\\n  let wrapper_width = 632;\\n  let wrapper_height = 564;\\n\\n  let available = [\\n    { id: \\"1\\", left: 34, top: 92, width: 337, Component: Workspace_1 },\\n    { id: \\"2\\", left: 110, top: 52, width: 286, Component: Workspace_2 },\\n    { id: \\"3\\", left: 166, top: 196, width: 337, Component: Workspace_3 },\\n    { id: \\"4\\", left: 260, top: 24, width: 372, Component: Workspace_4 },\\n  ];\\n\\n  let max = 2;\\n  let items = available.slice(0, max);\\n  let next = max;\\n  let remaining = iterations;\\n\\n  function zoom(node, params) {\\n    const existingTransform = getComputedStyle(node).transform.replace(\\n      \\"none\\",\\n      \\"\\"\\n    );\\n\\n    return {\\n      delay: params.delay || 0,\\n      duration: params.duration || 400,\\n      easing: params.easing || linear,\\n      css: (t, u) =>\\n        `opacity: ${t}; transform: ${existingTransform} scale(${\\n          1 + ((params.factor || 1.5) - 1) * u\\n        })`,\\n    };\\n  }\\n\\n  function shuffle() {\\n    if (remaining === 0) {\\n      items = [available[next], ...items];\\n      return;\\n    }\\n    items = [available[next], ...items.slice(0, max - 1)];\\n    next = (next + 1) % available.length;\\n    remaining--;\\n  }\\n\\n  onMount(() => {\\n    const observer = new IntersectionObserver(([entry]) => {\\n      if (entry.isIntersecting) {\\n        observer.unobserve(wrapper);\\n        shuffle();\\n      }\\n    });\\n    observer.observe(wrapper);\\n    return () => {\\n      observer.disconnect();\\n    };\\n  });\\n</script>\\n\\n<style>.aspect{position:relative}.aspect:before{content:\\"\\";display:block;padding-bottom:calc(100%*var(--height)/var(--width))}.container{top:0;left:0;width:100%;height:100%}.container,.item{position:absolute}.item{transform-origin:center center;box-shadow:0 2px 5px rgba(0,0,0,.08),0 5px 20px rgba(0,0,0,.12);border-radius:20px;overflow:hidden}.item>:global(*){display:block;width:100%;height:auto}figcaption{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}</style>\\n\\n<figure\\n  class=\\"aspect\\"\\n  style=\\"--width: {wrapper_width}; --height: {wrapper_height};\\"\\n  bind:this={wrapper}\\n>\\n  <div class=\\"container\\">\\n    {#each items as { Component, top, left, width, id } (id)}\\n      <div\\n        class=\\"item\\"\\n        style=\\"top: {100 * (top / wrapper_height)}%; left: {100 *\\n          (left / wrapper_width)}%; width: {100 * (width / wrapper_width)}%;\\"\\n        in:fade={{ duration: 1500, easing: cubicIn }}\\n        out:zoom|local={{\\n          duration: 1500,\\n          delay: 1500,\\n          factor: 1.015,\\n          easing: cubicIn,\\n        }}\\n        on:outroend={shuffle}\\n      >\\n        <svelte:component this={Component} />\\n      </div>\\n    {/each}\\n  </div>\\n  {#if alt}\\n    <figcaption>{alt}</figcaption>\\n  {/if}\\n</figure>\\n"],"names":[],"mappings":"AAqEO,sBAAO,CAAC,SAAS,QAAQ,CAAC,sBAAO,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,KAAK,CAAC,eAAe,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,yBAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,yBAAU,CAAC,oBAAK,CAAC,SAAS,QAAQ,CAAC,oBAAK,CAAC,iBAAiB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,IAAI,CAAC,SAAS,MAAM,CAAC,oBAAK,CAAC,AAAQ,CAAC,AAAC,CAAC,QAAQ,KAAK,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,yBAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,SAAS,MAAM,CAAC,SAAS,QAAQ,CAAC,YAAY,MAAM,CAAC,MAAM,GAAG,CAAC"}'
};
let wrapper_width = 632;
let wrapper_height = 564;
let max = 2;
const Workspaces$7 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {alt = ""} = $$props;
  let {iterations = 3} = $$props;
  let wrapper;
  let available = [
    {
      id: "1",
      left: 34,
      top: 92,
      width: 337,
      Component: Workspace_1
    },
    {
      id: "2",
      left: 110,
      top: 52,
      width: 286,
      Component: Workspace_2
    },
    {
      id: "3",
      left: 166,
      top: 196,
      width: 337,
      Component: Workspace_3
    },
    {
      id: "4",
      left: 260,
      top: 24,
      width: 372,
      Component: Workspace_4
    }
  ];
  let items = available.slice(0, max);
  let next = max;
  let remaining = iterations;
  function shuffle() {
    if (remaining === 0) {
      items = [available[next], ...items];
      return;
    }
    items = [available[next], ...items.slice(0, max - 1)];
    next = (next + 1) % available.length;
    remaining--;
  }
  onMount(() => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) {
        observer.unobserve(wrapper);
        shuffle();
      }
    });
    observer.observe(wrapper);
    return () => {
      observer.disconnect();
    };
  });
  if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0)
    $$bindings.alt(alt);
  if ($$props.iterations === void 0 && $$bindings.iterations && iterations !== void 0)
    $$bindings.iterations(iterations);
  $$result.css.add(css$m);
  return `<figure class="${"aspect svelte-1bzlj62"}" style="${"--width: " + escape(wrapper_width) + "; --height: " + escape(wrapper_height) + ";"}"${add_attribute("this", wrapper, 1)}><div class="${"container svelte-1bzlj62"}">${each(items, ({Component, top, left, width, id: id2}) => `<div class="${"item svelte-1bzlj62"}" style="${"top: " + escape(100 * (top / wrapper_height)) + "%; left: " + escape(100 * (left / wrapper_width)) + "%; width: " + escape(100 * (width / wrapper_width)) + "%;"}">${validate_component(Component || missing_component, "svelte:component").$$render($$result, {}, {}, {})}
      </div>`)}</div>
  ${alt ? `<figcaption class="${"svelte-1bzlj62"}">${escape(alt)}</figcaption>` : ``}</figure>`;
});
var features_svelte = ".double.svelte-133w2br.svelte-133w2br{margin-bottom:var(--x-large);flex-direction:column-reverse}@media(min-width:50em){.double.svelte-133w2br.svelte-133w2br{flex-direction:row}}.double.svelte-133w2br .card.svelte-133w2br{display:flex;flex-direction:column;justify-content:space-between}.double.svelte-133w2br .h4.svelte-133w2br{margin-top:1rem}.double.svelte-133w2br a.svelte-133w2br{display:block;margin-top:var(--micro);font-size:var(--p-large)}.double.svelte-133w2br img.svelte-133w2br{height:223px}.triple.svelte-133w2br img.svelte-133w2br{height:90px}.triple.svelte-133w2br p.svelte-133w2br{margin:var(--xx-small) 0;font-size:var(--p-small);line-height:150%}.double.svelte-133w2br a.svelte-133w2br,.triple.svelte-133w2br a.svelte-133w2br{color:var(--brand-ripe)}.double.svelte-133w2br .h4.svelte-133w2br{margin-bottom:var(--micro)}.brief.svelte-133w2br>img.svelte-133w2br{width:1100px;max-width:90vw;margin:2rem auto;box-shadow:var(--shadow-brand);border-radius:.875rem}.brief.svelte-133w2br>p.svelte-133w2br{max-width:900px;margin:auto}.screencasts-container.svelte-133w2br.svelte-133w2br{margin-top:0}";
const css$l = {
  code: ".double.svelte-133w2br.svelte-133w2br{margin-bottom:var(--x-large)}.double.svelte-133w2br.svelte-133w2br{flex-direction:column-reverse}@media(min-width:50em){.double.svelte-133w2br.svelte-133w2br{flex-direction:row}}.double.svelte-133w2br .card.svelte-133w2br{display:flex;flex-direction:column;justify-content:space-between}.double.svelte-133w2br .h4.svelte-133w2br{margin-top:1rem}.double.svelte-133w2br a.svelte-133w2br{display:block;margin-top:var(--micro);font-size:var(--p-large)}.double.svelte-133w2br img.svelte-133w2br{height:223px}.triple.svelte-133w2br img.svelte-133w2br{height:90px}.triple.svelte-133w2br p.svelte-133w2br{margin:var(--xx-small) 0;font-size:var(--p-small);line-height:150%}.double.svelte-133w2br a.svelte-133w2br,.triple.svelte-133w2br a.svelte-133w2br{color:var(--brand-ripe)}.double.svelte-133w2br .h4.svelte-133w2br{margin-bottom:var(--micro)}.brief.svelte-133w2br>img.svelte-133w2br{width:1100px;max-width:90vw;margin:2rem auto;box-shadow:var(--shadow-brand);border-radius:.875rem}.brief.svelte-133w2br>p.svelte-133w2br{max-width:900px;margin:auto}.screencasts-container.svelte-133w2br.svelte-133w2br{margin-top:0}",
  map: `{"version":3,"file":"features.svelte","sources":["features.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script>\\n  import Header from \\"../components/features/header.svelte\\";\\n  import Console from \\"../components/console.svelte\\";\\n  import OpenGraph from \\"../components/open-graph.svelte\\";\\n  import ScreencastPreview from \\"../components/screencasts/preview.svelte\\";\\n  import screencasts from \\"../contents/screencasts\\";\\n  import Workspaces from \\"../components/workspaces.svelte\\";\\n  import { linuxSource, terminalSource } from \\"../contents/terminal\\";\\n\\n  const firstThreeScreencasts = screencasts.slice(0, 3);\\n</script>\\n\\n<style lang=\\"scss\\">.double,article{margin-bottom:var(--x-large)}.double{flex-direction:column-reverse}@media (min-width:50em){.double{flex-direction:row}}.double .card{display:flex;flex-direction:column;justify-content:space-between}.double .h4{margin-top:1rem}.double a{display:block;margin-top:var(--micro);font-size:var(--p-large)}.double img{height:223px}.triple img{height:90px}.triple h3{min-height:3rem}.triple p{margin:var(--xx-small) 0;font-size:var(--p-small);line-height:150%}.double a,.triple a{color:var(--brand-ripe)}.halfimages .text-large{margin:var(--x-small) 0}.double .h4{margin-bottom:var(--micro)}section h3:first-child,section h3:first-child+p{text-align:center}.brief>img{width:1100px;max-width:90vw;margin:2rem auto;box-shadow:var(--shadow-brand);border-radius:.875rem}.brief>p{max-width:900px;margin:auto}.screencasts-container{margin-top:0}</style>\\n\\n<OpenGraph\\n  data={{\\n    description:\\n      \\"Learn about Gitpod's collaboration tools, workspace snapshots, supported programming languages, and much more.\\",\\n    title: \\"Features\\",\\n  }}\\n/>\\n\\n<Header />\\n\\n<section class=\\"\\">\\n  <div class=\\"flex md:flex-row flex-col-reverse md:space-x-32 mx-8\\">\\n    <div class=\\"lg:w-1/2 lg:pt-8 xl:pt-16\\">\\n      <h2 class=\\"h4\\">Save time with Prebuilds</h2>\\n      <p class=\\"text-large mt-8 mb-16\\">\\n        Gitpod continuously builds your Git branches like a CI server. This\\n        means no more waiting for dependencies to be downloaded and builds to\\n        finish.\\n      </p>\\n      <p>\\n        <a href=\\"/docs/prebuilds\\" class=\\"btn-primary\\">More about Prebuilds</a>\\n      </p>\\n    </div>\\n    <div class=\\"lg:w-1/2 w-full mb-16\\">\\n      <Console source={terminalSource} skipToEnd={true} />\\n    </div>\\n  </div>\\n\\n  <div class=\\"flex md:flex-row flex-col md:space-x-32 my-32 mx-8\\">\\n    <div class=\\"lg:w-1/2 w-full h-full\\">\\n      <Workspaces />\\n    </div>\\n    <div class=\\"lg:w-1/2\\">\\n      <h2 class=\\"h4\\">Start fresh with ephemeral dev environments</h2>\\n      <p class=\\"text-large mt-8 mb-16\\">\\n        Dev-environments-as-code assure you are always starting from a clean\\n        state and never get dragged into long-living stateful environments. The\\n        end of all works-on-my-machine situations.\\n      </p>\\n      <p>\\n        <a href=\\"/blog/dev-env-as-code\\" class=\\"btn-secondary\\">\\n          More about Dev-Environments-as-Code</a\\n        >\\n      </p>\\n    </div>\\n  </div>\\n</section>\\n\\n<section class=\\"cards double\\">\\n  <div class=\\"card\\">\\n    <div class=\\"h-72 pb-4\\">\\n      <!-- svelte-ignore a11y-missing-attribute -->\\n      <img\\n        src=\\"/images/features/features-3.svg\\"\\n        role=\\"presentation\\"\\n        height=\\"223\\"\\n        width=\\"382\\"\\n      />\\n    </div>\\n    <h2 class=\\"h4\\">Collaboration with workspace sharing</h2>\\n    <p class=\\"text-large\\">\\n      Collaborate with your friends, co-workers, and clients. Whenever you want\\n      to share a reproducible example of code or hunt down a bug together,\\n      simply take Snapshot.\\n    </p>\\n\\n    <a href=\\"/docs/sharing-and-collaboration\\"> More about collaboration. </a>\\n  </div>\\n  <div class=\\"card\\">\\n    <div class=\\"h-72 pb-6\\">\\n      <Console\\n        source={linuxSource}\\n        dark={true}\\n        shadow={false}\\n        narrow={true}\\n        skipToEnd={true}\\n      />\\n    </div>\\n    <h2 class=\\"h4\\">Full linux machine <span>(incl sudo/docker)</span></h2>\\n    <p class=\\"text-large\\">\\n      Instantly start a container in the cloud based on your Docker image.\\n      Leverage the power of the cloud and free yourself from the limitations of\\n      local silicon.\\n    </p>\\n\\n    <a\\n      href=\\"https://www.youtube.com/watch?v=iYLCHQgj0fE\\"\\n      rel=\\"noopener\\"\\n      target=\\"_blank\\">Learn more about sudo/Docker in Gitpod.</a\\n    >\\n  </div>\\n</section>\\n\\n<section class=\\"cards triple\\">\\n  <div class=\\"card\\">\\n    <!-- svelte-ignore a11y-missing-attribute -->\\n    <img\\n      src=\\"/images/features/features-5.svg\\"\\n      role=\\"presentation\\"\\n      height=\\"90\\"\\n      width=\\"185\\"\\n    />\\n    <h2 class=\\"h5\\">Customize your workspace</h2>\\n    <p>\\n      Tweak your environment to suit your needs. From themes to extensions you\\n      have full control over it all.\\n    </p>\\n    <a href=\\"/docs/vscode-extensions\\">More about customization.</a>\\n  </div>\\n  <div class=\\"card\\">\\n    <!-- svelte-ignore a11y-missing-attribute -->\\n    <img\\n      src=\\"/images/features/features-6.svg\\"\\n      role=\\"presentation\\"\\n      height=\\"90\\"\\n      width=\\"322\\"\\n    />\\n    <h2 class=\\"h5\\">GitLab, GitHub, and Bitbucket integration</h2>\\n    <p>\\n      Start your workflow from the Git hosting platform of your choice and let\\n      Gitpod beam you in a ready-to-code dev environment.\\n    </p>\\n    <a href=\\"/docs/integrations\\">More about integrations.</a>\\n  </div>\\n  <div class=\\"card\\">\\n    <!-- svelte-ignore a11y-missing-attribute -->\\n    <img\\n      src=\\"/images/features/features-7.svg\\"\\n      role=\\"presentation\\"\\n      height=\\"90\\"\\n      width=\\"130\\"\\n    />\\n    <h2 class=\\"h5\\">Code reviews within the IDE</h2>\\n    <p>\\n      Open pull requests in Gitpod to run, navigate, and review the code. Reply\\n      to comments and publish code reviews right within Gitpod.\\n    </p>\\n    <a href=\\"/blog/when-code-reviews-lgtm\\">More about code reviews.</a>\\n  </div>\\n</section>\\n\\n<section class=\\"brief\\">\\n  <h2>VS Code and extensions in your browser</h2>\\n  <p class=\\"text-large\\">\\n    Install any VS Code extension with one click via the integrated\\n    vendor-neutral marketplace Open VSX.\\n  </p>\\n  <!-- svelte-ignore a11y-missing-attribute -->\\n  <img\\n    src=\\"/images/features/gitpod-extensions.jpg\\"\\n    role=\\"presentation\\"\\n    height=\\"1110\\"\\n    width=\\"748\\"\\n  />\\n</section>\\n\\n<section class=\\"brief screencasts-container\\">\\n  <h2>Get started with screencasts</h2>\\n  <div class=\\"screencasts\\">\\n    {#each firstThreeScreencasts as screencast, index}\\n      <ScreencastPreview {screencast} screencastNumber={index + 1} />\\n    {/each}\\n  </div>\\n  <a href=\\"/screencasts\\" class=\\"btn-conversion\\">See all screencasts</a>\\n</section>\\n"],"names":[],"mappings":"AAgBmB,OAAO,8BAAQ,CAAC,cAAc,IAAI,SAAS,CAAC,CAAC,qCAAO,CAAC,eAAe,cAAc,CAAC,MAAM,AAAC,WAAW,IAAI,CAAC,CAAC,qCAAO,CAAC,eAAe,GAAG,CAAC,CAAC,sBAAO,CAAC,oBAAK,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,gBAAgB,aAAa,CAAC,sBAAO,CAAC,kBAAG,CAAC,WAAW,IAAI,CAAC,sBAAO,CAAC,gBAAC,CAAC,QAAQ,KAAK,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,UAAU,IAAI,SAAS,CAAC,CAAC,sBAAO,CAAC,kBAAG,CAAC,OAAO,KAAK,CAAC,sBAAO,CAAC,kBAAG,CAAC,OAAO,IAAI,CAAC,AAA2B,sBAAO,CAAC,gBAAC,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,SAAS,CAAC,CAAC,YAAY,IAAI,CAAC,sBAAO,CAAC,gBAAC,CAAC,sBAAO,CAAC,gBAAC,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,AAAgD,sBAAO,CAAC,kBAAG,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,AAAkE,qBAAM,CAAC,kBAAG,CAAC,MAAM,MAAM,CAAC,UAAU,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,cAAc,CAAC,CAAC,cAAc,OAAO,CAAC,qBAAM,CAAC,gBAAC,CAAC,UAAU,KAAK,CAAC,OAAO,IAAI,CAAC,oDAAsB,CAAC,WAAW,CAAC,CAAC"}`
};
const prerender$2A = true;
const Features = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const firstThreeScreencasts = screencasts.slice(0, 3);
  $$result.css.add(css$l);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Learn about Gitpod's collaboration tools, workspace snapshots, supported programming languages, and much more.",
      title: "Features"
    }
  }, {}, {})}

${validate_component(Header, "Header").$$render($$result, {}, {}, {})}

<section class="${""}"><div class="${"flex md:flex-row flex-col-reverse md:space-x-32 mx-8"}"><div class="${"lg:w-1/2 lg:pt-8 xl:pt-16"}"><h2 class="${"h4"}">Save time with Prebuilds</h2>
      <p class="${"text-large mt-8 mb-16"}">Gitpod continuously builds your Git branches like a CI server. This
        means no more waiting for dependencies to be downloaded and builds to
        finish.
      </p>
      <p><a href="${"/docs/prebuilds"}" class="${"btn-primary"}">More about Prebuilds</a></p></div>
    <div class="${"lg:w-1/2 w-full mb-16"}">${validate_component(Console, "Console").$$render($$result, {source: terminalSource, skipToEnd: true}, {}, {})}</div></div>

  <div class="${"flex md:flex-row flex-col md:space-x-32 my-32 mx-8"}"><div class="${"lg:w-1/2 w-full h-full"}">${validate_component(Workspaces$7, "Workspaces").$$render($$result, {}, {}, {})}</div>
    <div class="${"lg:w-1/2"}"><h2 class="${"h4"}">Start fresh with ephemeral dev environments</h2>
      <p class="${"text-large mt-8 mb-16"}">Dev-environments-as-code assure you are always starting from a clean
        state and never get dragged into long-living stateful environments. The
        end of all works-on-my-machine situations.
      </p>
      <p><a href="${"/blog/dev-env-as-code"}" class="${"btn-secondary"}">More about Dev-Environments-as-Code</a></p></div></div></section>

<section class="${"cards double svelte-133w2br"}"><div class="${"card svelte-133w2br"}"><div class="${"h-72 pb-4"}">
      <img src="${"/images/features/features-3.svg"}" role="${"presentation"}" height="${"223"}" width="${"382"}" class="${"svelte-133w2br"}"></div>
    <h2 class="${"h4 svelte-133w2br"}">Collaboration with workspace sharing</h2>
    <p class="${"text-large"}">Collaborate with your friends, co-workers, and clients. Whenever you want
      to share a reproducible example of code or hunt down a bug together,
      simply take Snapshot.
    </p>

    <a href="${"/docs/sharing-and-collaboration"}" class="${"svelte-133w2br"}">More about collaboration. </a></div>
  <div class="${"card svelte-133w2br"}"><div class="${"h-72 pb-6"}">${validate_component(Console, "Console").$$render($$result, {
    source: linuxSource,
    dark: true,
    shadow: false,
    narrow: true,
    skipToEnd: true
  }, {}, {})}</div>
    <h2 class="${"h4 svelte-133w2br"}">Full linux machine <span>(incl sudo/docker)</span></h2>
    <p class="${"text-large"}">Instantly start a container in the cloud based on your Docker image.
      Leverage the power of the cloud and free yourself from the limitations of
      local silicon.
    </p>

    <a href="${"https://www.youtube.com/watch?v=iYLCHQgj0fE"}" rel="${"noopener"}" target="${"_blank"}" class="${"svelte-133w2br"}">Learn more about sudo/Docker in Gitpod.</a></div></section>

<section class="${"cards triple svelte-133w2br"}"><div class="${"card"}">
    <img src="${"/images/features/features-5.svg"}" role="${"presentation"}" height="${"90"}" width="${"185"}" class="${"svelte-133w2br"}">
    <h2 class="${"h5"}">Customize your workspace</h2>
    <p class="${"svelte-133w2br"}">Tweak your environment to suit your needs. From themes to extensions you
      have full control over it all.
    </p>
    <a href="${"/docs/vscode-extensions"}" class="${"svelte-133w2br"}">More about customization.</a></div>
  <div class="${"card"}">
    <img src="${"/images/features/features-6.svg"}" role="${"presentation"}" height="${"90"}" width="${"322"}" class="${"svelte-133w2br"}">
    <h2 class="${"h5"}">GitLab, GitHub, and Bitbucket integration</h2>
    <p class="${"svelte-133w2br"}">Start your workflow from the Git hosting platform of your choice and let
      Gitpod beam you in a ready-to-code dev environment.
    </p>
    <a href="${"/docs/integrations"}" class="${"svelte-133w2br"}">More about integrations.</a></div>
  <div class="${"card"}">
    <img src="${"/images/features/features-7.svg"}" role="${"presentation"}" height="${"90"}" width="${"130"}" class="${"svelte-133w2br"}">
    <h2 class="${"h5"}">Code reviews within the IDE</h2>
    <p class="${"svelte-133w2br"}">Open pull requests in Gitpod to run, navigate, and review the code. Reply
      to comments and publish code reviews right within Gitpod.
    </p>
    <a href="${"/blog/when-code-reviews-lgtm"}" class="${"svelte-133w2br"}">More about code reviews.</a></div></section>

<section class="${"brief svelte-133w2br"}"><h2>VS Code and extensions in your browser</h2>
  <p class="${"text-large svelte-133w2br"}">Install any VS Code extension with one click via the integrated
    vendor-neutral marketplace Open VSX.
  </p>
  
  <img src="${"/images/features/gitpod-extensions.jpg"}" role="${"presentation"}" height="${"1110"}" width="${"748"}" class="${"svelte-133w2br"}"></section>

<section class="${"brief screencasts-container svelte-133w2br"}"><h2>Get started with screencasts</h2>
  <div class="${"screencasts"}">${each(firstThreeScreencasts, (screencast, index2) => `${validate_component(Preview, "ScreencastPreview").$$render($$result, {screencast, screencastNumber: index2 + 1}, {}, {})}`)}</div>
  <a href="${"/screencasts"}" class="${"btn-conversion"}">See all screencasts</a></section>`;
});
var features = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Features,
  prerender: prerender$2A
});
var patterns_svelte = ".colors.svelte-1b7xocu .black.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--black)}.colors.svelte-1b7xocu .dark-grey.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--dark-grey)}.colors.svelte-1b7xocu .light-grey.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--light-grey)}.colors.svelte-1b7xocu .brand-almost-ripe.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--brand-almost-ripe)}.colors.svelte-1b7xocu .brand-ripe.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--brand-ripe)}.colors.svelte-1b7xocu .brand-gradient.svelte-1b7xocu.svelte-1b7xocu{background:var(--brand-gradient)}.colors.svelte-1b7xocu .brand-light.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--brand-light)}.colors.svelte-1b7xocu .salmon.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--salmon)}.colors.svelte-1b7xocu .divider.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--divider)}.colors.svelte-1b7xocu .sand-dark.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--sand-dark)}.colors.svelte-1b7xocu .sand-light.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--sand-light)}.colors.svelte-1b7xocu .off-white.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--off-white)}.colors.svelte-1b7xocu .white.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--white)}.colors.svelte-1b7xocu li.svelte-1b7xocu.svelte-1b7xocu{display:flex;grid-gap:1rem;gap:1rem}.colors.svelte-1b7xocu li.svelte-1b7xocu p.svelte-1b7xocu{align-self:center}.colors.svelte-1b7xocu li .swatch.svelte-1b7xocu.svelte-1b7xocu{width:100px;height:100px;border-radius:50%;border:1px solid var(--divider);flex:0 0 100px}.patterns.svelte-1b7xocu.svelte-1b7xocu.svelte-1b7xocu{display:grid;grid-template-columns:repeat(auto-fill,250px);grid-auto-rows:minmax(100px,auto);grid-gap:1rem;gap:1rem;white-space:nowrap}";
const css$k = {
  code: ".colors.svelte-1b7xocu .black.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--black)}.colors.svelte-1b7xocu .dark-grey.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--dark-grey)}.colors.svelte-1b7xocu .light-grey.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--light-grey)}.colors.svelte-1b7xocu .brand-almost-ripe.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--brand-almost-ripe)}.colors.svelte-1b7xocu .brand-ripe.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--brand-ripe)}.colors.svelte-1b7xocu .brand-gradient.svelte-1b7xocu.svelte-1b7xocu{background:var(--brand-gradient)}.colors.svelte-1b7xocu .brand-light.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--brand-light)}.colors.svelte-1b7xocu .salmon.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--salmon)}.colors.svelte-1b7xocu .divider.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--divider)}.colors.svelte-1b7xocu .sand-dark.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--sand-dark)}.colors.svelte-1b7xocu .sand-light.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--sand-light)}.colors.svelte-1b7xocu .off-white.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--off-white)}.colors.svelte-1b7xocu .white.svelte-1b7xocu.svelte-1b7xocu{background-color:var(--white)}.colors.svelte-1b7xocu li.svelte-1b7xocu.svelte-1b7xocu{display:flex;grid-gap:1rem;gap:1rem}.colors.svelte-1b7xocu li.svelte-1b7xocu p.svelte-1b7xocu{align-self:center}.colors.svelte-1b7xocu li .swatch.svelte-1b7xocu.svelte-1b7xocu{width:100px;height:100px;border-radius:50%;border:1px solid var(--divider);flex:0 0 100px}.patterns.svelte-1b7xocu.svelte-1b7xocu.svelte-1b7xocu{display:grid;grid-template-columns:repeat(auto-fill,250px);grid-auto-rows:minmax(100px,auto);grid-gap:1rem;gap:1rem;white-space:nowrap}",
  map: `{"version":3,"file":"patterns.svelte","sources":["patterns.svelte"],"sourcesContent":["<style lang=\\"scss\\">.colors .black{background-color:var(--black)}.colors .dark-grey{background-color:var(--dark-grey)}.colors .light-grey{background-color:var(--light-grey)}.colors .brand-almost-ripe{background-color:var(--brand-almost-ripe)}.colors .brand-ripe{background-color:var(--brand-ripe)}.colors .brand-gradient{background:var(--brand-gradient)}.colors .brand-light{background-color:var(--brand-light)}.colors .salmon{background-color:var(--salmon)}.colors .divider{background-color:var(--divider)}.colors .sand-dark{background-color:var(--sand-dark)}.colors .sand-light{background-color:var(--sand-light)}.colors .off-white{background-color:var(--off-white)}.colors .white{background-color:var(--white)}.colors li{display:flex;grid-gap:1rem;gap:1rem}.colors li p{align-self:center}.colors li .swatch{width:100px;height:100px;border-radius:50%;border:1px solid var(--divider);flex:0 0 100px}.patterns{display:grid;grid-template-columns:repeat(auto-fill,250px);grid-auto-rows:minmax(100px,auto);grid-gap:1rem;gap:1rem;white-space:nowrap}</style>\\n\\n<article>\\n  <h1>Pattern Library</h1>\\n  <section>\\n    <h2>Color Pallette</h2>\\n    <ul class=\\"colors patterns\\">\\n      <li>\\n        <div class=\\"swatch brand-ripe\\" />\\n        <p>brand-ripe</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch brand-almost-ripe\\" />\\n        <p>brand-almost-ripe</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch brand-light\\" />\\n        <p>brand-light</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch salmon\\" />\\n        <p>salmon</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch black\\" />\\n        <p>black</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch dark-grey\\" />\\n        <p>dark-grey</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch light-grey\\" />\\n        <p>light-grey</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch divider\\" />\\n        <p>divider</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch sand-dark\\" />\\n        <p>sand-dark</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch sand-light\\" />\\n        <p>sand-light</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch off-white\\" />\\n        <p>off-white</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch white\\" />\\n        <p>white</p>\\n      </li>\\n      <li>\\n        <div class=\\"swatch brand-gradient\\" />\\n        <p>brand-gradient (image)</p>\\n      </li>\\n    </ul>\\n  </section>\\n  <section>\\n    <h2>Header sizes</h2>\\n    <h3>Default Headings</h3>\\n    <ul>\\n      <li><h1>H1 Heading</h1></li>\\n      <li><h2>H2 Heading</h2></li>\\n      <li><h3>H3 Heading</h3></li>\\n      <li><h4>H4 Heading</h4></li>\\n      <li><h5>H5 Heading</h5></li>\\n      <li><h6>H6 Heading</h6></li>\\n    </ul>\\n    <h3>class Headings</h3>\\n    <ul>\\n      <li><p class=\\"homeh1\\">.homeh1 class</p></li>\\n      <li><p class=\\"h1\\">.h1 class</p></li>\\n      <li><p class=\\"h2\\">.h2 class</p></li>\\n      <li><p class=\\"h3\\">.h3 class</p></li>\\n      <li><p class=\\"h4\\">.h4 class</p></li>\\n      <li><p class=\\"h5\\">.h5 class</p></li>\\n      <li><p class=\\"h6\\">.h6 class</p></li>\\n    </ul>\\n  </section>\\n  <section>\\n    <h2>Buttons</h2>\\n    <ul class=\\"patterns\\">\\n      <li>\\n        <button class=\\"btn\\">class: btn</button>\\n      </li>\\n      <li>\\n        <button class=\\"btn-conversion\\">btn-conversion</button>\\n      </li>\\n      <li>\\n        <button disabled class=\\"btn-conversion\\">disabled btn-conversion</button>\\n      </li>\\n      <li>\\n        <button class=\\"btn-primary\\">btn-primary</button>\\n      </li>\\n      <li>\\n        <button class=\\"btn-secondary\\">btn-secondary</button>\\n      </li>\\n      <li>\\n        <button class=\\"btn-tertiary\\">btn-tertiary</button>\\n      </li>\\n      <li>\\n        <button class=\\"btn-quaternary\\">btn-quaternary</button>\\n      </li>\\n    </ul>\\n    <h2>One off buttons (don't use)</h2>\\n    <ul class=\\"patterns\\">\\n      <li><button class=\\"btn-green\\">Non-standard: btn-green</button></li>\\n    </ul>\\n  </section>\\n</article>\\n<hr />\\n<header>\\n  <h1>Testing display of HTML elements</h1>\\n  <p>\\n    This is the document <code>header</code> withing the content of the page (not\\n    a direct child of body)\\n  </p>\\n</header>\\n\\n<main>\\n  <article aria-label=\\"headings\\">\\n    <h1>This is 1st level heading</h1>\\n    <p>This is a test paragraph.</p>\\n    <h2>This is 2nd level heading</h2>\\n    <p>This is a test paragraph.</p>\\n    <h3>This is 3rd level heading</h3>\\n    <p>This is a test paragraph.</p>\\n    <h4>This is 4th level heading</h4>\\n    <p>This is a test paragraph.</p>\\n    <h5>This is 5th level heading</h5>\\n    <p>This is a test paragraph.</p>\\n    <h6>This is 6th level heading</h6>\\n    <p>This is a test paragraph.</p>\\n  </article>\\n\\n  <article>\\n    <h2>Basic block level elements</h2>\\n\\n    <p>\\n      This is a normal paragraph (<code>p</code> element). To add some length to\\n      it, let us mention that this page was primarily written for testing the\\n      effect of <strong>user style sheets</strong>. You can use it for various\\n      other purposes as well, like just checking how your browser displays\\n      various HTML elements by default. It can also be useful when testing\\n      conversions from HTML format to other formats, since some elements can go\\n      wrong then.\\n    </p>\\n\\n    <p>\\n      This is another paragraph. I think it needs to be added that the set of\\n      elements tested is not exhaustive in any sense. I have selected those\\n      elements for which it can make sense to write user style sheet rules, in\\n      my opionion.\\n    </p>\\n\\n    <div>\\n      This is a <code>div</code> element. Authors may use such elements instead\\n      of paragraph markup for various reasons. (End of <code>div</code>.)\\n    </div>\\n\\n    <blockquote>\\n      <p>\\n        This is a block quotation containing a single paragraph. Well, not\\n        quite, since this is not <em>really</em>\\n        quoted text, but I hope you understand the point. After all, this page does\\n        not use HTML markup very normally anyway.\\n      </p>\\n    </blockquote>\\n    <p>\\n      The following contains address information about the author, in an <code\\n        >address</code\\n      >\\n      element.\\n    </p>\\n    <address>\\n      <a href=\\"../somelink.html\\" lang=\\"fr\\" hreflang=\\"en\\">Mon nom en francais</a\\n      >,\\n      <a href=\\"mailto:example@example.com\\">example@example.com</a><br />\\n      3 Rue Jules Ferry, Neuilly Sur Seine, France 94000\\n    </address>\\n  </article>\\n\\n  <article>\\n    <h2>Lists</h2>\\n\\n    <p>\\n      This is a paragraph before an <strong>unnumbered</strong> list (<code\\n        >ul</code\\n      >). Note that the spacing between a paragraph and a list before or after\\n      that is hard to tune in a user style sheet. You can't guess which\\n      paragraphs are logically related to a list, e.g. as a \\"list header\\".\\n    </p>\\n    <ul>\\n      <li>One.</li>\\n      <li>Two.</li>\\n      <li>\\n        Three. Well, probably this list item should be longer. Note that for\\n        short items lists look better if they are compactly presented, whereas\\n        for long items, it would be better to have more vertical spacing between\\n        items.\\n      </li>\\n      <li>\\n        Four. This is the last item in this list. Let us terminate the list now\\n        without making any more fuss about it.\\n      </li>\\n    </ul>\\n    <p>The following is a <code>menu</code> list:</p>\\n    <menu>\\n      <li>One.</li>\\n      <li>Two.</li>\\n      <li>\\n        Three. Well, probably this list item should be longer so that it will\\n        probably wrap to the next line in rendering.\\n      </li>\\n    </menu>\\n    <p>The following is a <code>dir</code> list:</p>\\n    <dir>\\n      <li>One.</li>\\n      <li>Two.</li>\\n      <li>\\n        Three. Well, probably this list item should be longer so that it will\\n        probably wrap to the next line in rendering.\\n      </li>\\n    </dir>\\n\\n    <p>\\n      This is a paragraph before a <strong>numbered</strong> list (<code\\n        >ol</code\\n      >). Note that the spacing between a paragraph and a list before or after\\n      that is hard to tune in a user style sheet. You can't guess which\\n      paragraphs are logically related to a list, e.g. as a \\"list header\\".\\n    </p>\\n    <ol>\\n      <li>One.</li>\\n      <li>Two.</li>\\n      <li>\\n        Three. Well, probably this list item should be longer. Note that if\\n        items are short, lists look better if they are compactly presented,\\n        whereas for long items, it would be better to have more vertical spacing\\n        between items.\\n      </li>\\n      <li>\\n        Four. This is the last item in this list. Let us terminate the list now\\n        without making any more fuss about it.\\n      </li>\\n    </ol>\\n\\n    <p>\\n      This is a paragraph before a <strong>definition</strong> list (<code\\n        >dl</code\\n      >). In principle, such a list should consist of <em>terms</em> and\\n      associated definitions. But many authors use <code>dl</code> elements for\\n      fancy \\"layout\\" things. Usually the effect is not <em>too</em> bad, if you\\n      design user style sheet rules for <code>dl</code>\\n      which are suitable for real definition lists.\\n    </p>\\n    <dl>\\n      <dt>recursion</dt>\\n      <dd>see recursion</dd>\\n      <dt>recursion, indirect</dt>\\n      <dd>see indirect recursion</dd>\\n      <dt>indirect recursion</dt>\\n      <dd>see recursion, indirect</dd>\\n      <dt>term</dt>\\n      <dd>\\n        a word or other expression taken into specific use in a well-defined\\n        meaning, which is often defined rather rigorously, even formally, and\\n        may differ quite a lot from an everyday meaning\\n      </dd>\\n    </dl>\\n  </article>\\n\\n  <article>\\n    <h2>Text-level markup, in alphabetical order</h2>\\n\\n    <ul>\\n      <li>\\n        <abbr title=\\"Cascading Style Sheets\\">CSS</abbr> (an abbreviation;\\n        <code>abbr</code> markup used)\\n      </li>\\n      <li>\\n        <acronym title=\\"radio detecting and ranging\\">radar</acronym> (an\\n        acronym; <code>acronym</code> markup used)\\n      </li>\\n      <li>\\n        <b>bolded</b> (<code>b</code> markup used - just bolding with unspecified\\n        semantics)\\n      </li>\\n      <li>\\n        <cite>Origin of Species</cite> (a book title;\\n        <code>cite</code> markup used)\\n      </li>\\n      <li>\\n        <code>a[i] = b[i] + c[i);</code> (computer code; <code>code</code> markup\\n        used)\\n      </li>\\n      <li>\\n        here we have some <del>deleted</del> text (<code>del</code> markup used)\\n      </li>\\n      <li>\\n        an <dfn>octet</dfn> is an entity consisting of eight bits (<code\\n          >dfn</code\\n        > markup used for the term being defined)\\n      </li>\\n      <li>\\n        this is <em>very</em> simple (<code>em</code> markup used for emphasizing\\n        a word)\\n      </li>\\n      <li>\\n        <i lang=\\"la\\">Homo sapiens</i> (should appear in italics; <code>i</code> markup\\n        used)\\n      </li>\\n      <li>\\n        here we have some <ins>inserted</ins> text (<code>ins</code> markup used)\\n      </li>\\n      <li>\\n        type <kbd>yes</kbd> when prompted for an answer (<code>kbd</code> markup\\n        used for text indicating keyboard input)\\n      </li>\\n      <li><q>Hello!</q> (<code>q</code> markup used for quotation)</li>\\n      <li>\\n        He said: <q>She said <q>Hello!</q></q> (a quotation inside a quotation)\\n      </li>\\n      <li>\\n        you may get the message <samp>Core dumped</samp> at times (<code\\n          >samp</code\\n        > markup used for sample output)\\n      </li>\\n      <li>\\n        <small>this is not that important</small> (<code>small</code> markup used)\\n      </li>\\n      <li>\\n        <strike>overstruck</strike> (<code>strike</code> markup used; note:\\n        <code>s</code> is a nonstandard synonym for <code>strike</code>)\\n      </li>\\n      <li>\\n        <strong>this is highlighted text</strong> (<code>strong</code>\\n        markup used)\\n      </li>\\n      <li>\\n        In order to test how subscripts and superscripts (<code>sub</code> and\\n        <code>sup</code> markup) work inside running text, we need some dummy\\n        text around constructs like x<sub>1</sub> and H<sub>2</sub>O (where\\n        subscripts occur). So here is some fill so that you will (hopefully) see\\n        whether and how badly the subscripts and superscripts mess up vertical\\n        spacing between lines. Now superscripts: M<sup>lle</sup>, 1<sup>st</sup\\n        >, and then some mathematical notations: e<sup>x</sup>, sin<sup>2</sup>\\n        <i>x</i>, and some nested superscripts (exponents) too: e<sup\\n          >x<sup>2</sup></sup\\n        >\\n        and f(x)<sup>g(x)<sup>a+b+c</sup></sup>\\n        (where 2 and a+b+c should appear as exponents of exponents).\\n      </li>\\n      <li><tt>text in monospace font</tt> (<code>tt</code> markup used)</li>\\n      <li><u>underlined</u> text (<code>u</code> markup used)</li>\\n      <li>\\n        the command <code>cat</code> <var>filename</var> displays the file\\n        specified by the <var>filename</var> (<code>var</code> markup used to indicate\\n        a word as a variable).\\n      </li>\\n    </ul>\\n\\n    <p>\\n      Some of the elements tested above are typically displayed in a monospace\\n      font, often using the <em>same</em> presentation for all of them. This tests\\n      whether that is the case on your browser:\\n    </p>\\n\\n    <ul>\\n      <li><code>This is sample text inside code markup</code></li>\\n      <li><kbd>This is sample text inside kbd markup</kbd></li>\\n      <li><samp>This is sample text inside samp markup</samp></li>\\n      <li><tt>This is sample text inside tt markup</tt></li>\\n    </ul>\\n    <h2>Links</h2>\\n    <ul>\\n      <li><a href=\\"../index.html\\">main page</a></li>\\n      <li>\\n        <a\\n          href=\\"http://www.unicode.org/versions/Unicode4.0.0/ch06.pdf\\"\\n          title=\\"Writing Systems and Punctuation\\"\\n          type=\\"application/pdf\\">Unicode Standard, chapter&nbsp;6</a\\n        >\\n      </li>\\n    </ul>\\n\\n    <p>\\n      This is a text paragraph that contains some inline links. Generally,\\n      inline links (as opposite to e.g. links lists) are problematic from the\\n      <a href=\\"http://www.useit.com\\">usability</a> perspective, but they may\\n      have use as &#8220;incidental&#8221;, less relevant links. See the\\n      document\\n      <cite><a href=\\"links.html\\">Links Want To Be Links</a></cite>.\\n    </p>\\n  </article>\\n\\n  <article>\\n    <h2>Forms</h2>\\n\\n    <form action=\\"somewhere.cgi\\">\\n      <div>\\n        <input type=\\"hidden\\" name=\\"hidden field\\" value=\\"42\\" />\\n        This is a form containing various fields (with some initial values (defaults)\\n        set, so that you can see how input text looks like without actually typing\\n        it):\\n      </div>\\n      <ul>\\n        <li>\\n          <label for=\\"zname\\">Name</label><input\\n            type=\\"text\\"\\n            class=\\"classed\\"\\n            required=\\"\\"\\n            placeholder=\\" Name\\"\\n            id=\\"zname\\"\\n          />\\n        </li>\\n        <li>\\n          <label for=\\"zemail\\">Email</label><input\\n            type=\\"email\\"\\n            class=\\"classed\\"\\n            multiple=\\"\\"\\n            placeholder=\\"email addresses\\"\\n            required=\\"\\"\\n            id=\\"zemail\\"\\n          />\\n        </li>\\n        <li>\\n          <label for=\\"zdob\\">Birthday</label><input\\n            type=\\"date\\"\\n            class=\\"classed\\"\\n            required=\\"\\"\\n            placeholder=\\"01/01/84\\"\\n            id=\\"zdob\\"\\n          />\\n        </li>\\n        <li>\\n          <label for=\\"zage\\">Age</label><input\\n            type=\\"number\\"\\n            class=\\"classed\\"\\n            required=\\"\\"\\n            min=\\"21\\"\\n            max=\\"105\\"\\n            id=\\"zage\\"\\n          />\\n        </li>\\n        <li>\\n          <label for=\\"zphone\\">Phone</label><input\\n            type=\\"tel\\"\\n            class=\\"classed\\"\\n            pattern=\\"\\\\d{3}-\\\\d{3}-\\\\d{4}\\"\\n            placeholder=\\"XXX-XXX-XXXX\\"\\n            id=\\"zphone\\"\\n          />\\n        </li>\\n        <li>\\n          <label for=\\"zrange\\">Satisfaction</label><input\\n            type=\\"range\\"\\n            id=\\"zrange\\"\\n            min=\\"0\\"\\n            max=\\"10\\"\\n            step=\\"1\\"\\n            list=\\"zrangelist\\"\\n          />\\n\\n          <datalist id=\\"zrangelist\\">\\n            <option value=\\"7\\">7</option>\\n            <option value=\\"8\\">8</option>\\n            <option value=\\"9\\">9</option>\\n            <option value=\\"10\\">10</option>\\n          </datalist>\\n        </li>\\n        <li>\\n          <label for=\\"ztweet\\">Twitter</label><input\\n            type=\\"text\\"\\n            class=\\"classed\\"\\n            pattern=\\"@\\\\w*\\"\\n            placeholder=\\"@twitter\\"\\n            required=\\"\\"\\n            id=\\"ztweet\\"\\n          />\\n        </li>\\n        <li>\\n          <input type=\\"submit\\" value=\\"submit\\" />\\n        </li>\\n      </ul>\\n\\n      <div>\\n        <label for=\\"but\\"\\n          >Button:\\n          <button id=\\"but\\" type=\\"submit\\" name=\\"foo\\" value=\\"bar\\"\\n            >A cool<br />button</button\\n          ></label\\n        >\\n      </div>\\n\\n      <div>\\n        <label for=\\"f0\\"\\n          >Reset button:\\n          <input id=\\"f0\\" type=\\"reset\\" name=\\"reset\\" value=\\"Reset\\" /></label\\n        >\\n      </div>\\n\\n      <div>\\n        <label for=\\"f1\\"\\n          >Single-line text input field: <input\\n            id=\\"f1\\"\\n            name=\\"text\\"\\n            size=\\"20\\"\\n            value=\\"Default text.\\"\\n          /></label\\n        >\\n      </div>\\n\\n      <div>\\n        <label for=\\"f2\\">Multi-line text input field (textarea):</label><br />\\n        <textarea id=\\"f2\\" name=\\"textarea\\" rows=\\"2\\" cols=\\"20\\">\\n          Default text.\\n        </textarea>\\n      </div>\\n\\n      <div>\\n        The following two radio buttons are inside a <code>fieldset</code>\\n        element with a <code>legend</code>:\\n      </div>\\n\\n      <fieldset>\\n        <legend>Legend</legend>\\n        <div>\\n          <label for=\\"f3\\"\\n            ><input id=\\"f3\\" type=\\"radio\\" name=\\"radio\\" value=\\"1\\" /> Radio button 1</label\\n          >\\n        </div>\\n        <div>\\n          <label for=\\"f4\\"\\n            ><input id=\\"f4\\" type=\\"radio\\" name=\\"radio\\" value=\\"2\\" checked /> Radio\\n            button 2 (initially checked)</label\\n          >\\n        </div>\\n      </fieldset>\\n\\n      <fieldset>\\n        <legend>Check those that apply</legend>\\n        <div>\\n          <label for=\\"f5\\"\\n            ><input id=\\"f5\\" type=\\"checkbox\\" name=\\"checkbox\\" /> Checkbox 1</label\\n          >\\n        </div>\\n        <div>\\n          <label for=\\"f6\\"\\n            ><input id=\\"f6\\" type=\\"checkbox\\" name=\\"checkbox2\\" checked /> Checkbox\\n            2 (initially checked)</label\\n          >\\n        </div>\\n      </fieldset>\\n\\n      <div>\\n        <label for=\\"f10\\"\\n          >A <code>select</code> element with <code>size=\\"1\\"</code>\\n          (dropdown box):\\n          <select id=\\"f10\\" name=\\"select1\\" size=\\"1\\">\\n            <option>one</option>\\n            <option selected>two (default)</option>\\n            <option>three</option>\\n          </select></label\\n        >\\n      </div>\\n\\n      <div>\\n        <label for=\\"f11\\"\\n          >A <code>select</code> element with <code>size=\\"3\\"</code>\\n          (listbox):</label\\n        ><br />\\n        <select id=\\"f11\\" name=\\"select2\\" size=\\"3\\">\\n          <option>one</option>\\n          <option selected>two (default)</option>\\n          <option>three</option>\\n        </select>\\n      </div>\\n      <div>\\n        <label for=\\"f99\\"\\n          >Submit button:\\n          <input\\n            id=\\"f99\\"\\n            type=\\"submit\\"\\n            name=\\"submit\\"\\n            value=\\"Just a test\\"\\n          /></label\\n        >\\n      </div>\\n    </form>\\n  </article>\\n\\n  <article>\\n    <h2>Tables</h2>\\n\\n    <p>\\n      The following table has a caption. The first row is in a thead, the second\\n      row is the tfoot, and the rest is in a tbody. The first column contain\\n      table header cells (<code>th</code> elements) only; other cells are data\\n      cells (<code>td</code> elements):\\n    </p>\\n\\n    <table\\n      summary=\\"Each row names a Nordic country and specifies its total area and land area, in square kilometers\\"\\n    >\\n      <caption>Sample table: Areas of the Nordic countries, in sq km</caption>\\n      <thead\\n        ><tr\\n          ><th scope=\\"col\\">Country</th> <th scope=\\"col\\">Total area</th>\\n          <th scope=\\"col\\">Land area</th></tr\\n        ></thead\\n      >\\n      <tbody>\\n        <tr><th scope=\\"row\\">Denmark</th> <td> 43,070 </td><td> 42,370</td></tr>\\n        <tr><th scope=\\"row\\">Finland</th> <td>337,030 </td><td>305,470</td></tr>\\n        <tr><th scope=\\"row\\">Iceland</th> <td>103,000 </td><td>100,250</td></tr>\\n        <tr><th scope=\\"row\\">Norway</th> <td>324,220 </td><td>307,860</td></tr>\\n        <tr><th scope=\\"row\\">Sweden</th> <td>449,964 </td><td>410,928</td></tr>\\n      </tbody>\\n      <tfoot\\n        ><tr\\n          ><th scope=\\"col\\">Country</th> <th scope=\\"col\\">Total area</th>\\n          <th scope=\\"col\\">Land area</th></tr\\n        ></tfoot\\n      >\\n    </table>\\n  </article>\\n\\n  <article>\\n    <h2>HTML5 Elements</h2>\\n\\n    <h3>Details and Summary</h3>\\n    <details>\\n      <summary>This is the summary of the details</summary>\\n      <p>\\n        This is a paragraph within a <code>details</code> element, outside of\\n        the <code>summary</code>\\n      </p>\\n    </details>\\n\\n    <h3>Figure and Figcaption</h3>\\n    <figure>\\n      <img src=\\"none.jpg\\" alt=\\"img with invalid src\\" />\\n      <figcaption>This is the figcaption</figcaption>\\n    </figure>\\n\\n    <dialog>This is a dialog</dialog>\\n\\n    <p>This paragraph has a <mark>mark</mark></p>\\n\\n    <h3>Meter</h3>\\n    <ul>\\n      <li><meter>Meter</meter></li>\\n      <li><meter value=\\"1\\" min=\\"0\\" max=\\"4\\" low=\\"2\\" high=\\"3\\">1 of 4</meter></li>\\n      <li><meter value=\\"2\\" min=\\"0\\" max=\\"4\\" low=\\"1\\" high=\\"3\\">2 of 4</meter></li>\\n      <li>\\n        <meter value=\\"61\\" min=\\"0\\" max=\\"100\\" low=\\"73\\" high=\\"87\\" optimum=\\"100\\"\\n          >61</meter\\n        >\\n      </li>\\n    </ul>\\n    <h3>Progress</h3>\\n    <ul>\\n      <li><progress>Empty</progress></li>\\n      <li><progress min=\\"0\\" max=\\"100\\" value=\\"17\\">17% complete</progress></li>\\n      <li><progress value=\\"75\\" max=\\"100\\">75% complete</progress></li>\\n    </ul>\\n  </article>\\n\\n  <aside>\\n    <h1>This is an aside</h1>\\n    <h2>Character test</h2>\\n    <p>\\n      The following table has some sample characters with annotations. If the\\n      browser&#8217;s default font does not contain all of them, they may get\\n      displayed using backup fonts. This may cause stylistic differences, but it\\n      should not prevent the characters from being displayed at all.\\n    </p>\\n\\n    <table>\\n      <thead><tr><th>Char.</th> <th>Explanation </th> <th>Notes</th></tr></thead\\n      >\\n      <tbody\\n        ><tr\\n          ><td>\xEA </td><td>e with circumflex </td><td\\n            >Latin 1 character, should be ok</td\\n          ></tr\\n        >\\n        <tr\\n          ><td>&#8212;</td> <td>em dash </td><td\\n            >Windows Latin 1 character, should be ok, too</td\\n          ></tr\\n        >\\n        <tr\\n          ><td>&#x100;</td> <td>A with macron (line above) </td><td\\n            >Latin Extended-A character, not present in all fonts</td\\n          ></tr\\n        >\\n        <tr><td>&Omega;</td> <td>capital omega </td><td>A Greek letter</td></tr>\\n        <tr><td>&#x2212;</td> <td>minus sign </td><td>Unicode minus</td></tr>\\n        <tr\\n          ><td>&#x2300;</td> <td>diameter sign </td><td\\n            >relatively rare in fonts</td\\n          ></tr\\n        >\\n      </tbody>\\n    </table>\\n  </aside>\\n</main>\\n\\n<footer>\\n  <hr title=\\"Information about this document\\" />\\n  <p>\\n    This <code>footer</code> starts with an <code>hr</code>, followed by two\\n    <code>p</code>s. It is not the main footer, but rather a footer within the\\n    main area of the document.\\n  </p>\\n  <p>Last update: <time>2021-03-29</time>.</p>\\n</footer>\\n"],"names":[],"mappings":"AAAmB,sBAAO,CAAC,oCAAM,CAAC,iBAAiB,IAAI,OAAO,CAAC,CAAC,sBAAO,CAAC,wCAAU,CAAC,iBAAiB,IAAI,WAAW,CAAC,CAAC,sBAAO,CAAC,yCAAW,CAAC,iBAAiB,IAAI,YAAY,CAAC,CAAC,sBAAO,CAAC,gDAAkB,CAAC,iBAAiB,IAAI,mBAAmB,CAAC,CAAC,sBAAO,CAAC,yCAAW,CAAC,iBAAiB,IAAI,YAAY,CAAC,CAAC,sBAAO,CAAC,6CAAe,CAAC,WAAW,IAAI,gBAAgB,CAAC,CAAC,sBAAO,CAAC,0CAAY,CAAC,iBAAiB,IAAI,aAAa,CAAC,CAAC,sBAAO,CAAC,qCAAO,CAAC,iBAAiB,IAAI,QAAQ,CAAC,CAAC,sBAAO,CAAC,sCAAQ,CAAC,iBAAiB,IAAI,SAAS,CAAC,CAAC,sBAAO,CAAC,wCAAU,CAAC,iBAAiB,IAAI,WAAW,CAAC,CAAC,sBAAO,CAAC,yCAAW,CAAC,iBAAiB,IAAI,YAAY,CAAC,CAAC,sBAAO,CAAC,wCAAU,CAAC,iBAAiB,IAAI,WAAW,CAAC,CAAC,sBAAO,CAAC,oCAAM,CAAC,iBAAiB,IAAI,OAAO,CAAC,CAAC,sBAAO,CAAC,gCAAE,CAAC,QAAQ,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,sBAAO,CAAC,iBAAE,CAAC,gBAAC,CAAC,WAAW,MAAM,CAAC,sBAAO,CAAC,EAAE,CAAC,qCAAO,CAAC,MAAM,KAAK,CAAC,OAAO,KAAK,CAAC,cAAc,GAAG,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,sDAAS,CAAC,QAAQ,IAAI,CAAC,sBAAsB,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,eAAe,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,MAAM,CAAC"}`
};
const Patterns = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$k);
  return `<article><h1>Pattern Library</h1>
  <section><h2>Color Pallette</h2>
    <ul class="${"colors patterns svelte-1b7xocu"}"><li class="${"svelte-1b7xocu"}"><div class="${"swatch brand-ripe svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">brand-ripe</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch brand-almost-ripe svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">brand-almost-ripe</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch brand-light svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">brand-light</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch salmon svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">salmon</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch black svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">black</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch dark-grey svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">dark-grey</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch light-grey svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">light-grey</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch divider svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">divider</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch sand-dark svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">sand-dark</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch sand-light svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">sand-light</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch off-white svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">off-white</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch white svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">white</p></li>
      <li class="${"svelte-1b7xocu"}"><div class="${"swatch brand-gradient svelte-1b7xocu"}"></div>
        <p class="${"svelte-1b7xocu"}">brand-gradient (image)</p></li></ul></section>
  <section><h2>Header sizes</h2>
    <h3>Default Headings</h3>
    <ul><li><h1>H1 Heading</h1></li>
      <li><h2>H2 Heading</h2></li>
      <li><h3>H3 Heading</h3></li>
      <li><h4>H4 Heading</h4></li>
      <li><h5>H5 Heading</h5></li>
      <li><h6>H6 Heading</h6></li></ul>
    <h3>class Headings</h3>
    <ul><li class="${"svelte-1b7xocu"}"><p class="${"homeh1 svelte-1b7xocu"}">.homeh1 class</p></li>
      <li class="${"svelte-1b7xocu"}"><p class="${"h1 svelte-1b7xocu"}">.h1 class</p></li>
      <li class="${"svelte-1b7xocu"}"><p class="${"h2 svelte-1b7xocu"}">.h2 class</p></li>
      <li class="${"svelte-1b7xocu"}"><p class="${"h3 svelte-1b7xocu"}">.h3 class</p></li>
      <li class="${"svelte-1b7xocu"}"><p class="${"h4 svelte-1b7xocu"}">.h4 class</p></li>
      <li class="${"svelte-1b7xocu"}"><p class="${"h5 svelte-1b7xocu"}">.h5 class</p></li>
      <li class="${"svelte-1b7xocu"}"><p class="${"h6 svelte-1b7xocu"}">.h6 class</p></li></ul></section>
  <section><h2>Buttons</h2>
    <ul class="${"patterns svelte-1b7xocu"}"><li><button class="${"btn"}">class: btn</button></li>
      <li><button class="${"btn-conversion"}">btn-conversion</button></li>
      <li><button disabled class="${"btn-conversion"}">disabled btn-conversion</button></li>
      <li><button class="${"btn-primary"}">btn-primary</button></li>
      <li><button class="${"btn-secondary"}">btn-secondary</button></li>
      <li><button class="${"btn-tertiary"}">btn-tertiary</button></li>
      <li><button class="${"btn-quaternary"}">btn-quaternary</button></li></ul>
    <h2>One off buttons (don&#39;t use)</h2>
    <ul class="${"patterns svelte-1b7xocu"}"><li><button class="${"btn-green"}">Non-standard: btn-green</button></li></ul></section></article>
<hr>
<header><h1>Testing display of HTML elements</h1>
  <p>This is the document <code>header</code> withing the content of the page (not
    a direct child of body)
  </p></header>

<main><article aria-label="${"headings"}"><h1>This is 1st level heading</h1>
    <p>This is a test paragraph.</p>
    <h2>This is 2nd level heading</h2>
    <p>This is a test paragraph.</p>
    <h3>This is 3rd level heading</h3>
    <p>This is a test paragraph.</p>
    <h4>This is 4th level heading</h4>
    <p>This is a test paragraph.</p>
    <h5>This is 5th level heading</h5>
    <p>This is a test paragraph.</p>
    <h6>This is 6th level heading</h6>
    <p>This is a test paragraph.</p></article>

  <article><h2>Basic block level elements</h2>

    <p>This is a normal paragraph (<code>p</code> element). To add some length to
      it, let us mention that this page was primarily written for testing the
      effect of <strong>user style sheets</strong>. You can use it for various
      other purposes as well, like just checking how your browser displays
      various HTML elements by default. It can also be useful when testing
      conversions from HTML format to other formats, since some elements can go
      wrong then.
    </p>

    <p>This is another paragraph. I think it needs to be added that the set of
      elements tested is not exhaustive in any sense. I have selected those
      elements for which it can make sense to write user style sheet rules, in
      my opionion.
    </p>

    <div>This is a <code>div</code> element. Authors may use such elements instead
      of paragraph markup for various reasons. (End of <code>div</code>.)
    </div>

    <blockquote><p>This is a block quotation containing a single paragraph. Well, not
        quite, since this is not <em>really</em>
        quoted text, but I hope you understand the point. After all, this page does
        not use HTML markup very normally anyway.
      </p></blockquote>
    <p>The following contains address information about the author, in an <code>address</code>
      element.
    </p>
    <address><a href="${"../somelink.html"}" lang="${"fr"}" hreflang="${"en"}">Mon nom en francais</a>,
      <a href="${"mailto:example@example.com"}">example@example.com</a><br>
      3 Rue Jules Ferry, Neuilly Sur Seine, France 94000
    </address></article>

  <article><h2>Lists</h2>

    <p>This is a paragraph before an <strong>unnumbered</strong> list (<code>ul</code>). Note that the spacing between a paragraph and a list before or after
      that is hard to tune in a user style sheet. You can&#39;t guess which
      paragraphs are logically related to a list, e.g. as a &quot;list header&quot;.
    </p>
    <ul><li>One.</li>
      <li>Two.</li>
      <li>Three. Well, probably this list item should be longer. Note that for
        short items lists look better if they are compactly presented, whereas
        for long items, it would be better to have more vertical spacing between
        items.
      </li>
      <li>Four. This is the last item in this list. Let us terminate the list now
        without making any more fuss about it.
      </li></ul>
    <p>The following is a <code>menu</code> list:</p>
    <menu><li>One.</li>
      <li>Two.</li>
      <li>Three. Well, probably this list item should be longer so that it will
        probably wrap to the next line in rendering.
      </li></menu>
    <p>The following is a <code>dir</code> list:</p>
    <dir><li>One.</li>
      <li>Two.</li>
      <li>Three. Well, probably this list item should be longer so that it will
        probably wrap to the next line in rendering.
      </li></dir>

    <p>This is a paragraph before a <strong>numbered</strong> list (<code>ol</code>). Note that the spacing between a paragraph and a list before or after
      that is hard to tune in a user style sheet. You can&#39;t guess which
      paragraphs are logically related to a list, e.g. as a &quot;list header&quot;.
    </p>
    <ol><li>One.</li>
      <li>Two.</li>
      <li>Three. Well, probably this list item should be longer. Note that if
        items are short, lists look better if they are compactly presented,
        whereas for long items, it would be better to have more vertical spacing
        between items.
      </li>
      <li>Four. This is the last item in this list. Let us terminate the list now
        without making any more fuss about it.
      </li></ol>

    <p>This is a paragraph before a <strong>definition</strong> list (<code>dl</code>). In principle, such a list should consist of <em>terms</em> and
      associated definitions. But many authors use <code>dl</code> elements for
      fancy &quot;layout&quot; things. Usually the effect is not <em>too</em> bad, if you
      design user style sheet rules for <code>dl</code>
      which are suitable for real definition lists.
    </p>
    <dl><dt>recursion</dt><dd>see recursion</dd><dt>recursion, indirect</dt><dd>see indirect recursion</dd><dt>indirect recursion</dt><dd>see recursion, indirect</dd><dt>term</dt><dd>a word or other expression taken into specific use in a well-defined
        meaning, which is often defined rather rigorously, even formally, and
        may differ quite a lot from an everyday meaning
      </dd></dl></article>

  <article><h2>Text-level markup, in alphabetical order</h2>

    <ul><li><abbr title="${"Cascading Style Sheets"}">CSS</abbr> (an abbreviation;
        <code>abbr</code> markup used)
      </li>
      <li><acronym title="${"radio detecting and ranging"}">radar</acronym> (an
        acronym; <code>acronym</code> markup used)
      </li>
      <li><b>bolded</b> (<code>b</code> markup used - just bolding with unspecified
        semantics)
      </li>
      <li><cite>Origin of Species</cite> (a book title;
        <code>cite</code> markup used)
      </li>
      <li><code>a[i] = b[i] + c[i);</code> (computer code; <code>code</code> markup
        used)
      </li>
      <li>here we have some <del>deleted</del> text (<code>del</code> markup used)
      </li>
      <li>an <dfn>octet</dfn> is an entity consisting of eight bits (<code>dfn</code> markup used for the term being defined)
      </li>
      <li>this is <em>very</em> simple (<code>em</code> markup used for emphasizing
        a word)
      </li>
      <li><i lang="${"la"}">Homo sapiens</i> (should appear in italics; <code>i</code> markup
        used)
      </li>
      <li>here we have some <ins>inserted</ins> text (<code>ins</code> markup used)
      </li>
      <li>type <kbd>yes</kbd> when prompted for an answer (<code>kbd</code> markup
        used for text indicating keyboard input)
      </li>
      <li><q>Hello!</q> (<code>q</code> markup used for quotation)</li>
      <li>He said: <q>She said <q>Hello!</q></q> (a quotation inside a quotation)
      </li>
      <li>you may get the message <samp>Core dumped</samp> at times (<code>samp</code> markup used for sample output)
      </li>
      <li><small>this is not that important</small> (<code>small</code> markup used)
      </li>
      <li><strike>overstruck</strike> (<code>strike</code> markup used; note:
        <code>s</code> is a nonstandard synonym for <code>strike</code>)
      </li>
      <li><strong>this is highlighted text</strong> (<code>strong</code>
        markup used)
      </li>
      <li>In order to test how subscripts and superscripts (<code>sub</code> and
        <code>sup</code> markup) work inside running text, we need some dummy
        text around constructs like x<sub>1</sub> and H<sub>2</sub>O (where
        subscripts occur). So here is some fill so that you will (hopefully) see
        whether and how badly the subscripts and superscripts mess up vertical
        spacing between lines. Now superscripts: M<sup>lle</sup>, 1<sup>st</sup>, and then some mathematical notations: e<sup>x</sup>, sin<sup>2</sup>
        <i>x</i>, and some nested superscripts (exponents) too: e<sup>x<sup>2</sup></sup>
        and f(x)<sup>g(x)<sup>a+b+c</sup></sup>
        (where 2 and a+b+c should appear as exponents of exponents).
      </li>
      <li><tt>text in monospace font</tt> (<code>tt</code> markup used)</li>
      <li><u>underlined</u> text (<code>u</code> markup used)</li>
      <li>the command <code>cat</code> <var>filename</var> displays the file
        specified by the <var>filename</var> (<code>var</code> markup used to indicate
        a word as a variable).
      </li></ul>

    <p>Some of the elements tested above are typically displayed in a monospace
      font, often using the <em>same</em> presentation for all of them. This tests
      whether that is the case on your browser:
    </p>

    <ul><li><code>This is sample text inside code markup</code></li>
      <li><kbd>This is sample text inside kbd markup</kbd></li>
      <li><samp>This is sample text inside samp markup</samp></li>
      <li><tt>This is sample text inside tt markup</tt></li></ul>
    <h2>Links</h2>
    <ul><li><a href="${"../index.html"}">main page</a></li>
      <li><a href="${"http://www.unicode.org/versions/Unicode4.0.0/ch06.pdf"}" title="${"Writing Systems and Punctuation"}" type="${"application/pdf"}">Unicode Standard, chapter\xA06</a></li></ul>

    <p>This is a text paragraph that contains some inline links. Generally,
      inline links (as opposite to e.g. links lists) are problematic from the
      <a href="${"http://www.useit.com"}">usability</a> perspective, but they may
      have use as \u201Cincidental\u201D, less relevant links. See the
      document
      <cite><a href="${"links.html"}">Links Want To Be Links</a></cite>.
    </p></article>

  <article><h2>Forms</h2>

    <form action="${"somewhere.cgi"}"><div><input type="${"hidden"}" name="${"hidden field"}" value="${"42"}">
        This is a form containing various fields (with some initial values (defaults)
        set, so that you can see how input text looks like without actually typing
        it):
      </div>
      <ul><li><label for="${"zname"}">Name</label><input type="${"text"}" class="${"classed"}" required="${""}" placeholder="${" Name"}" id="${"zname"}"></li>
        <li><label for="${"zemail"}">Email</label><input type="${"email"}" class="${"classed"}" multiple="${""}" placeholder="${"email addresses"}" required="${""}" id="${"zemail"}"></li>
        <li><label for="${"zdob"}">Birthday</label><input type="${"date"}" class="${"classed"}" required="${""}" placeholder="${"01/01/84"}" id="${"zdob"}"></li>
        <li><label for="${"zage"}">Age</label><input type="${"number"}" class="${"classed"}" required="${""}" min="${"21"}" max="${"105"}" id="${"zage"}"></li>
        <li><label for="${"zphone"}">Phone</label><input type="${"tel"}" class="${"classed"}" pattern="${"\\d" + escape(3) + "-\\d" + escape(3) + "-\\d" + escape(4)}" placeholder="${"XXX-XXX-XXXX"}" id="${"zphone"}"></li>
        <li><label for="${"zrange"}">Satisfaction</label><input type="${"range"}" id="${"zrange"}" min="${"0"}" max="${"10"}" step="${"1"}" list="${"zrangelist"}">

          <datalist id="${"zrangelist"}"><option value="${"7"}">7</option><option value="${"8"}">8</option><option value="${"9"}">9</option><option value="${"10"}">10</option></datalist></li>
        <li><label for="${"ztweet"}">Twitter</label><input type="${"text"}" class="${"classed"}" pattern="${"@\\w*"}" placeholder="${"@twitter"}" required="${""}" id="${"ztweet"}"></li>
        <li><input type="${"submit"}" value="${"submit"}"></li></ul>

      <div><label for="${"but"}">Button:
          <button id="${"but"}" type="${"submit"}" name="${"foo"}" value="${"bar"}">A cool<br>button</button></label></div>

      <div><label for="${"f0"}">Reset button:
          <input id="${"f0"}" type="${"reset"}" name="${"reset"}" value="${"Reset"}"></label></div>

      <div><label for="${"f1"}">Single-line text input field: <input id="${"f1"}" name="${"text"}" size="${"20"}" value="${"Default text."}"></label></div>

      <div><label for="${"f2"}">Multi-line text input field (textarea):</label><br>
        <textarea id="${"f2"}" name="${"textarea"}" rows="${"2"}" cols="${"20"}">${"\n          Default text.\n        "}</textarea></div>

      <div>The following two radio buttons are inside a <code>fieldset</code>
        element with a <code>legend</code>:
      </div>

      <fieldset><legend>Legend</legend>
        <div><label for="${"f3"}"><input id="${"f3"}" type="${"radio"}" name="${"radio"}" value="${"1"}"> Radio button 1</label></div>
        <div><label for="${"f4"}"><input id="${"f4"}" type="${"radio"}" name="${"radio"}" value="${"2"}" checked> Radio
            button 2 (initially checked)</label></div></fieldset>

      <fieldset><legend>Check those that apply</legend>
        <div><label for="${"f5"}"><input id="${"f5"}" type="${"checkbox"}" name="${"checkbox"}"> Checkbox 1</label></div>
        <div><label for="${"f6"}"><input id="${"f6"}" type="${"checkbox"}" name="${"checkbox2"}" checked> Checkbox
            2 (initially checked)</label></div></fieldset>

      <div><label for="${"f10"}">A <code>select</code> element with <code>size=&quot;1&quot;</code>
          (dropdown box):
          <select id="${"f10"}" name="${"select1"}" size="${"1"}"><option value="${"one"}">one</option><option selected value="${"two (default)"}">two (default)</option><option value="${"three"}">three</option></select></label></div>

      <div><label for="${"f11"}">A <code>select</code> element with <code>size=&quot;3&quot;</code>
          (listbox):</label><br>
        <select id="${"f11"}" name="${"select2"}" size="${"3"}"><option value="${"one"}">one</option><option selected value="${"two (default)"}">two (default)</option><option value="${"three"}">three</option></select></div>
      <div><label for="${"f99"}">Submit button:
          <input id="${"f99"}" type="${"submit"}" name="${"submit"}" value="${"Just a test"}"></label></div></form></article>

  <article><h2>Tables</h2>

    <p>The following table has a caption. The first row is in a thead, the second
      row is the tfoot, and the rest is in a tbody. The first column contain
      table header cells (<code>th</code> elements) only; other cells are data
      cells (<code>td</code> elements):
    </p>

    <table summary="${"Each row names a Nordic country and specifies its total area and land area, in square kilometers"}"><caption>Sample table: Areas of the Nordic countries, in sq km</caption>
      <thead><tr><th scope="${"col"}">Country</th> <th scope="${"col"}">Total area</th>
          <th scope="${"col"}">Land area</th></tr></thead>
      <tbody><tr><th scope="${"row"}">Denmark</th> <td>43,070 </td><td>42,370</td></tr>
        <tr><th scope="${"row"}">Finland</th> <td>337,030 </td><td>305,470</td></tr>
        <tr><th scope="${"row"}">Iceland</th> <td>103,000 </td><td>100,250</td></tr>
        <tr><th scope="${"row"}">Norway</th> <td>324,220 </td><td>307,860</td></tr>
        <tr><th scope="${"row"}">Sweden</th> <td>449,964 </td><td>410,928</td></tr></tbody>
      <tfoot><tr><th scope="${"col"}">Country</th> <th scope="${"col"}">Total area</th>
          <th scope="${"col"}">Land area</th></tr></tfoot></table></article>

  <article><h2>HTML5 Elements</h2>

    <h3>Details and Summary</h3>
    <details><summary>This is the summary of the details</summary>
      <p>This is a paragraph within a <code>details</code> element, outside of
        the <code>summary</code></p></details>

    <h3>Figure and Figcaption</h3>
    <figure><img src="${"none.jpg"}" alt="${"img with invalid src"}">
      <figcaption>This is the figcaption</figcaption></figure>

    <dialog>This is a dialog</dialog>

    <p>This paragraph has a <mark>mark</mark></p>

    <h3>Meter</h3>
    <ul><li><meter>Meter</meter></li>
      <li><meter value="${"1"}" min="${"0"}" max="${"4"}" low="${"2"}" high="${"3"}">1 of 4</meter></li>
      <li><meter value="${"2"}" min="${"0"}" max="${"4"}" low="${"1"}" high="${"3"}">2 of 4</meter></li>
      <li><meter value="${"61"}" min="${"0"}" max="${"100"}" low="${"73"}" high="${"87"}" optimum="${"100"}">61</meter></li></ul>
    <h3>Progress</h3>
    <ul><li><progress>Empty</progress></li>
      <li><progress min="${"0"}" max="${"100"}" value="${"17"}">17% complete</progress></li>
      <li><progress value="${"75"}" max="${"100"}">75% complete</progress></li></ul></article>

  <aside><h1>This is an aside</h1>
    <h2>Character test</h2>
    <p>The following table has some sample characters with annotations. If the
      browser\u2019s default font does not contain all of them, they may get
      displayed using backup fonts. This may cause stylistic differences, but it
      should not prevent the characters from being displayed at all.
    </p>

    <table><thead><tr><th>Char.</th> <th>Explanation </th> <th>Notes</th></tr></thead>
      <tbody><tr><td>\xEA </td><td>e with circumflex </td><td>Latin 1 character, should be ok</td></tr>
        <tr><td>\u2014</td> <td>em dash </td><td>Windows Latin 1 character, should be ok, too</td></tr>
        <tr><td>\u0100</td> <td>A with macron (line above) </td><td>Latin Extended-A character, not present in all fonts</td></tr>
        <tr><td>\u03A9</td> <td>capital omega </td><td>A Greek letter</td></tr>
        <tr><td>\u2212</td> <td>minus sign </td><td>Unicode minus</td></tr>
        <tr><td>\u2300</td> <td>diameter sign </td><td>relatively rare in fonts</td></tr></tbody></table></aside></main>

<footer><hr title="${"Information about this document"}">
  <p>This <code>footer</code> starts with an <code>hr</code>, followed by two
    <code>p</code>s. It is not the main footer, but rather a footer within the
    main area of the document.
  </p>
  <p>Last update: <time>2021-03-29</time>.</p></footer>`;
});
var patterns = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Patterns
});
const Modal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {isOpen = false} = $$props;
  createEventDispatcher();
  if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0)
    $$bindings.isOpen(isOpen);
  return `

${isOpen ? `<div class="${"modal"}"><div class="${"content text-blob"}"><button aria-label="${"close this popup"}"><img alt="${"Close"}" role="${"presentation"}" src="${"/x.svg"}"></button>
      ${slots.default ? slots.default({}) : ``}</div></div>` : ``}`;
});
var modal_svelte = ".my-7rem.svelte-8nz0eu{margin-top:7rem;margin-bottom:7rem}";
const css$j = {
  code: ".my-7rem.svelte-8nz0eu{margin-top:7rem;margin-bottom:7rem}",
  map: '{"version":3,"file":"modal.svelte","sources":["modal.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nimport Modal from \\"../modal.svelte\\";\\nexport let career;\\n</script>\\n\\n<style>.my-7rem{margin-top:7rem;margin-bottom:7rem}</style>\\n\\n<Modal isOpen={!!career} on:close>\\n  <h2 class=\\"jobTitle\\">{career.title}</h2>\\n  <p>{@html career.intro}</p>\\n  <p>{@html career.paragraphs}</p>\\n\\n  {#each career.lists as list}\\n    <h3>{@html list.title}</h3>\\n    <ul>\\n      {#each list.items as item}\\n        <li>\\n          <p>\\n            <strong>{@html item.split(\\". \\")[0]}</strong><br />\\n            {@html item\\n              .split(\\". \\")\\n              .slice(1, item.split(\\". \\").length)\\n              .join(\\". \\")}\\n          </p>\\n        </li>\\n      {/each}\\n    </ul>\\n  {/each}\\n  <p class=\\"my-7rem\\">\\n    <a\\n      class=\\"btn-conversion\\"\\n      href=\\"mailto:career@gitpod.io?subject=Application as {career.title}\\"\\n      >Apply now</a\\n    >\\n  </p>\\n</Modal>\\n"],"names":[],"mappings":"AAKO,sBAAQ,CAAC,WAAW,IAAI,CAAC,cAAc,IAAI,CAAC"}'
};
const Modal_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {career} = $$props;
  if ($$props.career === void 0 && $$bindings.career && career !== void 0)
    $$bindings.career(career);
  $$result.css.add(css$j);
  return `${validate_component(Modal, "Modal").$$render($$result, {isOpen: !!career}, {}, {
    default: () => `<h2 class="${"jobTitle"}">${escape(career.title)}</h2>
  <p>${career.intro}</p>
  <p>${career.paragraphs}</p>

  ${each(career.lists, (list) => `<h3>${list.title}</h3>
    <ul>${each(list.items, (item) => `<li><p><strong>${item.split(". ")[0]}</strong><br>
            ${item.split(". ").slice(1, item.split(". ").length).join(". ")}</p>
        </li>`)}
    </ul>`)}
  <p class="${"my-7rem svelte-8nz0eu"}"><a class="${"btn-conversion"}" href="${"mailto:career@gitpod.io?subject=Application as " + escape(career.title)}">Apply now</a></p>`
  })}`;
});
const perks = [
  {
    title: "\u{1F60E} 6 weeks paid time off"
  },
  {
    title: "\u{1F3D5} Fully remote & flexible"
  },
  {
    title: "\u{1F4B8} Competitive salary"
  },
  {
    title: "\u{1F60A} Mental health stipend"
  },
  {
    title: "\u{1F4DA} Educational budget"
  },
  {
    title: "\u{1F4BB} Premium equipment"
  },
  {
    title: "\u{1F4AA} Monthly health stipend"
  }
];
const careers$1 = [
  {
    title: "Product Manager",
    intro: `You are a creative, empathic and visionary product person who loves Gitpod\u2019s direction and wants to be part of the journey. We are looking for someone experienced with product discovery who is a developer at heart.`,
    paragraphs: `

    As a product manager at Gitpod you will work on product discovery and product design (not visually) making sure we are always focussed on the most important features at a time. You will be describing new features in design docs which are based on input from users and team members as well as data and \u201Cgood taste\u201D\u2122. You\u2019ll be supporting the engineering team in understanding the purpose and answering unanswered questions of new product features. You will be always on the lookout for new possibilities and sweet spots that will make our beloved product more useful for our target audience. You are conscious about the limited engineering time and therefore know what to do and what not to do. You are a nice person who wants to work with an open and collaborative remote team of highly motivated engineers.
  `,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks with a lot of freedom. As a member of the team you're encouraged to advocate for or implement the changes you know that need to be done to resolve customer pain-points.",
          "Work with the entire team and our community.  You will constantly listen to the input of users and team members to identify the most important product changes at any given time.",
          "Evaluate and document the requirements for new product features. You are responsible for analyzing, documenting and articulating the requirements for new product features, answer questions and make scope trade off decisions as needed.",
          "Author technical design docs and PoCs. Discovering potential product features means investing into prototypes mostly in using sketches and docs but sometimes small technical spikes are needed as well.",
          "You care about growth. You understand our product-led go to market notion, track down and find solutions for problems in our self-serve funnel that can change the trajectory of the business.",
          "Ensure we do the right thing. Constantly evaluate if our solutions solve the customer problem & delivered on the business opportunity through quantitative and qualitative measures, with customer testing, betas & A/B experimentation.",
          "Help building out our product department in close collaboration with the CEO"
        ]
      },
      {
        title: "What we need",
        items: [
          "You are a fantastic product manager. We are looking for someone who has experience in product development through the complete product discovery to delivery life cycle and is knowledgeable about the techniques this role requires.",
          "You are a good engineer. We are building a product for professional software engineers. While empathy is important, having experience in how software engineers work is very valuable.",
          "You are a startup person. You have worked in an entrepreneurial environment and helped scale teams. You feel comfortable working in a fast-paced environment and you are willing to take risks.",
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don't dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers. Ready-to-code, cloud-based development environments streamline how software is written today.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is a distributed application running on Kubernetes. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-05-11T14:00:00.000Z"
  },
  {
    title: "Software Engineer",
    intro: `You are just starting out as a software engineer, and are super motivated and curious. This might be for you.`,
    paragraphs: `We are a highly motivated, fully-remote team, organized in a flat hierarchy, and led by technical founders. We love open-source, have started and lead many popular open-source projects, and contribute to many others. In this fashion, we present at international conferences and collaborate openly around the globe.
  We celebrate diversity and strive for an equal, inclusive, empathetic and welcoming environment. Bringing diversity to the team is a big plus. If you are part of a marginalised community, and are not sure if you should apply, please get in touch.`,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Directly impact users. Gitpod has little fat to trim and changes directly affect users. We always have our users in mind and focus on making Gitpod work for them, not some abstract potential future requirement.",
          'Be a "jack of all trades, master of some". As a small team we favour generalists. You might work on React code, or dive into the backend. There is loads of room to find your passion and see everything that makes the platform tick.',
          "Solve technical problems. Be it on the backend where we live right on the edge of what Kubernetes, containers and Linux can do; or on the frontend where we deeply care about performance and quality across browsers and platforms. Gitpod is not your typical Kubernetes web app and provides very unique problems you`d be unlikely to come across elsewhere.",
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks in iterations with a lot of freedom.",
          "Work with the community and in the open. Our DNA is deeply rooted in open source and we are building Gitpod in public. We expect the same from you."
        ]
      },
      {
        title: "What we need",
        items: [
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don`t dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers.  Ready-to-code, cloud-based development environments streamline how software is written today.",
          'You enjoy working across the front- and backend. We hardly ever have a task that is clear cut along fontend/backend lines. If React is your thing, you should feel comfortable enough to have a look at the server. If Kubernetes is your thing, you should still feel comfortable enough to make that change on the dashboard. You do not think "not my department", but welcome the opportunity to venture out of your comfort zone.',
          'You have experience shipping code in production. Your code is mostly ready for prime time, and you know how to test it. You understand the difference between "making something work" and "making something work reliably". You have read other people`s code, know how to make yourself at home and understand that code is read way more often than it`s written. You understand that every new dependency comes at a cost, as do lines of code.',
          "You are product minded. You enjoy using what you`ve helped build, and still pay attention to things that feel off. You can empathize with other users and understand how they might see things differently, or that messaging that`s completely clear to you might be unintelligible to others. You are eager to understand why things are not working for others and quickly act when unexpected things happen.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is a distributed application running on Kubernetes. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-01-26T14:00:00.000Z"
  },
  {
    title: "Senior Software Engineer (Frontend)",
    intro: `When it comes to code, we\u2019re looking to work with experienced people who can pick a problem and solve it. For us, it\u2019s both how it works and how it looks.`,
    paragraphs: `We are a highly motivated, fully-remote team, organized in a flat hierarchy, and led by technical founders. We love open-source, have started and led many popular open-source projects, and contribute to many others. In this fashion, we present at international conferences and collaborate openly around the globe.
  We celebrate diversity and strive for an equal, inclusive, empathetic and welcoming environment. Bringing diversity to the team is a big plus. If you are part of a marginalised community, and are not sure if you should apply, please get in touch.`,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Directly impact users. Gitpod has little fat to trim and changes directly affect users. We always have our users in mind and focus on making Gitpod work for them, not some abstract potential future requirement.",
          "Be a 'jack of all trades, master of some'. We don't expect you to have a background in everything we use. However, there is loads of room to grow and see everything that makes the platform tick.",
          "Solve hard technical problems. On the frontend, we deeply care about performance and quality across browsers and platforms. Gitpod is not your typical Kubernetes web app and provides very unique problems you`d be unlikely to come across elsewhere.",
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks in iterations with a lot of freedom.",
          "Work with the community and in the open. Our DNA is deeply rooted in open source and we are building Gitpod in public. We expect the same from you."
        ]
      },
      {
        title: "What we need",
        items: [
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don`t dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers.  Ready-to-code, cloud-based development environments streamline how software is written today.",
          "You have strong JavaScript fundamentals. Besides knowing Array methods and how to format numbers and dates with localization in mind, you also write semantic HTML5. You have in-depth knowledge of a modern web framework (React and/or Svelte preferred, but Vue, Angular, etc. are ok too). You care about or are interested in a11y and performance. You know what happens from the time you hit Enter in a browser's URL bar until you see the website rendered on the screen.",
          "You care about design. You have experience building and advocating for reusable and accessible components as well as passion for beautiful user interfaces and great user experiences. We use Tailwind CSS and if you are already familiar with it, do let us know.",
          'You have experience shipping code to production. Your code is ready for prime time, and you don`t expect others to test it thoroughly for you. You understand the difference between "making something work" and "making something work reliably". You have read other people`s code, know how to make yourself at home and understand that code is read way more often than it`s written. You understand that every new dependency comes at a cost, as do lines of code.',
          "You are product minded. You enjoy using what you`ve helped build, and still pay attention to things that feel off. You can empathize with other users and understand how they might see things differently, or that messaging that`s completely clear to you might be unintelligible to others. You are eager to understand why things are not working for others and quickly act when unexpected things happen.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is a distributed application running on Kubernetes. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-01-26T14:00:00.000Z"
  },
  {
    title: "Senior Software Engineer (Full-Stack)",
    intro: `We at Gitpod build tools that require a view across the stack.`,
    paragraphs: `We are a highly motivated, fully-remote team, organized in a flat hierarchy, and led by technical founders. We love open-source, have started and lead many popular open-source projects, and contribute to many others. In this fashion, we present at international conferences and collaborate openly around the globe.
  We celebrate diversity and strive for an equal, inclusive, empathetic and welcoming environment. Bringing diversity to the team is a big plus. If you are part of a marginalised community, and are not sure if you should apply, please get in touch.`,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Directly impact users. Gitpod has little fat to trim and changes directly affect users. We always have our users in mind and focus on making Gitpod work for them, not some abstract potential future requirement.",
          'Be a "jack of all trades, master of some". As a small team we favour generalists. You might work on React code, dive deeply into Kubernetes or read the Linux sources. There is loads of room to find your passion and see everything that makes the platform tick.',
          "Solve hard technical problems. Be it on the backend where we live right on the edge of what Kubernetes, containers and Linux can do; or on the frontend where we deeply care about performance and quality across browsers and platforms. Gitpod is not your typical Kubernetes web app and provides very unique problems you`d be unlikely to come across elsewhere.",
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks in iterations with a lot of freedom.",
          "Work with the community and in the open. Our DNA is deeply rooted in open source and we are building Gitpod in public. We expect the same from you."
        ]
      },
      {
        title: "What we need",
        items: [
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don`t dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers.  Ready-to-code, cloud-based development environments streamline how software is written today.",
          'You enjoy working across the front- and backend. We hardly ever have a task that is clear cut along fontend/backend lines. If React is your thing, you should feel comfortable enough to have a look at the server. If Kubernetes is your thing, you should still feel comfortable enough to make that change on the dashboard. You do not think "not my department", but welcome the opportunity to venture out of your comfort zone.',
          "You enjoy building distributed systems. That means understanding their idiosyncrasies, and wallowing in the fact that anyone elses computer can break yours. You don`t blindly follow trends, but have a keen eye for stable and pragmatic solutions. You have developed and interacted with distributed systems in the real world, have seen them fail and fixed them.",
          'You have experience shipping code in production. Your code is ready for prime time, and you don`t expect others to test it thoroughly for you. You understand the difference between "making something work" and "making something work reliably". You have read other people`s code, know how to make yourself at home and understand that code is read way more often than it`s written. You understand that every new dependency comes at a cost, as do lines of code.',
          "You are product minded. You enjoy using what you`ve helped build, and still pay attention to things that feel off. You can empathize with other users and understand how they might see things differently, or that messaging that`s completely clear to you might be unintelligible to others. You are eager to understand why things are not working for others and quickly act when unexpected things happen.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is a distributed application running on Kubernetes. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-01-26T14:00:00.000Z"
  },
  {
    title: "Senior Software Engineer (Observability)",
    intro: `The infrastructure behind gitpod.io runs services and workspaces on a global scale. Want your help to get the best insights via metrics, traces, logs, and more.`,
    paragraphs: `We are a highly-motivated, fully-remote team, organized in a flat hierarchy, and led by technical founders. We love open-source, have started and lead many popular open-source projects, and contribute to many others. We celebrate diversity and strive for an equal, inclusive, empathetic and welcoming environment. Bringing diversity to the team is a big plus. If you are part of a marginalised community, and are not sure if you should apply, please get in touch.`,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Create observability for our global infrastructure. We run dev environments (Kubernetes Pods) in Kubernetes clusters around the globe. You will improve and enhance our systems for collecting, storing and visualizing observability data, such as logs, metrics, alerts, traces and profiling data. We heavily build on pre-existing solutions, such as Grafana, Prometheus, and the cloud platforms native solutions.",
          "Make Gitpod more observable. You will identify the best metrics endpoints Gitpod should expose and implement them or help colleagues to implement them. Same goes for proper tracing and logging.  ",
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks in iterations with a lot of freedom.",
          "Work with the community and in the open. Our DNA is deeply rooted in open source and we are building Gitpod in public. We expect the same from you."
        ]
      },
      {
        title: "What we need",
        items: [
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don't dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers.  Ready-to-code, cloud-based development environments streamline how software is written today.",
          "You embrace Open Source. You follow relevant open-source projects, maybe you contributed, maybe you know the maintainers. Gitpod itself is open-source and built on open-source projects, such as Kubernetes, Helm, Terraform, Grafana, Prometheus and many more. Knowledge about such projects will help you work on Gitpod and knowledge about Open Source will help you make Gitpod a better Open Source project.",
          "You are pragmatic. You understand that doing the right thing gives you momentum while doing a thing perfectly can cost a lot of time.",
          "You are a curious deep diver. You know that humans and documentation often do not have an answer. That is when you dive. You read code, issues, explore metrics, traces, logs or conduct experiments. When you surface, you know the answer and the team will love you.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is an open source Kubernetes application. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others.",
          "We run gitpod.io on Google Cloud Platform. There we use GKE, Buckets, BigQuery and more. We may expand to other cloud providers. We make Gitpod self-hosted available for vanilla Kubernetes, AWS, and more platforms in the future.",
          "We describe infrastructure using Helm and Terraform. We maintain a single helm chart to install Gitpod on Kubernetes. To create the cluster and other infrastructure around it, we use Terraform scripts."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-01-26T14:00:00.000Z"
  },
  {
    title: "Senior Kubernetes Engineer",
    intro: `We want to run Gitpod workspaces in self-managed Kubernetes clusters to benefit from the latest and greatest advancements from the open source community. We want your help to create, automate and operate such clusters.`,
    paragraphs: `We are a highly-motivated, fully-remote team, organized in a flat hierarchy, and led by technical founders. We love open-source, have started and lead many popular open-source projects, and contribute to many others.
  We celebrate diversity and strive for an equal, inclusive, empathetic and welcoming environment. Bringing diversity to the team is a big plus. If you are part of a marginalised community, and are not sure if you should apply, please get in touch.`,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Create Kubernetes Clusters. You will use the latest and greatest Linux kernels, containerd and K8s versions. You will automate the process of creating the cluster and ensure that it is perfectly suited to run Gitpod`s dev environments. The clusters will run on a public cloud.",
          "Help Gitpod being a good K8s app. You know the best practices for running an app in Kubernetes and you will help to implement these best practices in Gitpod or help the team to follow the best practices. Resilience during incidents and deployment as well as security are of particular interest.",
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks in iterations with a lot of freedom.",
          "Work with the community and in the open. Our DNA is deeply rooted in open source and we are building Gitpod in public. We expect the same from you."
        ]
      },
      {
        title: "What we need",
        items: [
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don't dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers.  Ready-to-code, cloud-based development environments streamline how software is written today.",
          "You embrace Open Source. You follow relevant open-source projects, maybe you contributed, maybe you know the maintainers. Gitpod itself is open-source and built on open-source projects, such as Kubernetes, Helm, Terraform, Grafana, Prometheus and many more. Knowledge about such projects will help you work on Gitpod and knowledge about Open Source will help you make Gitpod a better Open Source project.",
          "You are pragmatic. You understand that doing the right thing gives you momentum while doing a thing perfectly can cost a lot of time.",
          "You are a curious deep diver. You know that humans and documentation often do not have an answer. That is when you dive. You read code, issues, explore metrics, traces, logs or conduct experiments. When you surface, you know the answer and the team will love you.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is an open source Kubernetes application. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others.",
          "We run gitpod.io on Google Cloud Platform. There we use GKE, Buckets, BigQuery and more. We may expand to other cloud providers. We make Gitpod self-hosted available for vanilla Kubernetes, AWS, and more platforms in the future.",
          "We describe infrastructure using Helm and Terraform. We maintain a single helm chart to install Gitpod on Kubernetes. To create the cluster and other infrastructure around it, we use Terraform scripts."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-01-26T14:00:00.000Z"
  },
  {
    title: "Senior Site Reliability Engineer (SRE)",
    intro: `The infrastructure behind gitpod.io runs services and workspaces on a global scale and many professionals depend on it. We want your help to achieve the required reliability.`,
    paragraphs: `We are a highly-motivated, fully-remote team, organized in a flat hierarchy, and led by technical founders. We love open-source, have started and lead many popular open-source projects, and contribute to many others. We celebrate diversity and strive for an equal, inclusive, empathetic and welcoming environment. Bringing diversity to the team is a big plus. If you are part of a marginalised community, and are not sure if you should apply, please get in touch.`,
    lists: [
      {
        title: "As part of the team you will ...",
        items: [
          "Make gitpod more reliable. You apply best practices and lessons-learned from incidents to prevent future incidents. you implement the changes or work with colleagues and other teams to get the needed changes implemented.",
          "Conduct Root-Cause analysis of incidents. Post-Incident, you dive deep to understand what caused the incident and apply your knowledge to make gitpod.io more reliable.",
          "Mitigate incidents. If there is an incident, you know which switches to flip to quickly re-establish reliable service of Gitpod. You participate in on-call rotation.",
          "Drive application health. You help to establish SLIs and SLOs, so that we, as a company, can find a healthy balance between rolling out new features and fixing bugs.",
          "Co-own the product and work self-directed. We work with a very flat hierarchy, organizing our tasks in iterations with a lot of freedom.",
          "Work with the community and in the open. Our DNA is deeply rooted in open source and we are building Gitpod in public. We expect the same from you."
        ]
      },
      {
        title: "What we need",
        items: [
          "You share our values. We are developer-led and aim for a frictionless experience when interacting with our product, our company and our brand: no hurdles, no BS, no unnecessary extra steps. We are open minded, inclusive, transparent and curious. We always remain students of the game, not masters of the game. We have opinions, but are not opinionated. We integrate, don't dictate.",
          "You care for our mission. Developers architect our future. Gitpod democratises software development by making it more accessible to all developers.  Ready-to-code, cloud-based development environments streamline how software is written today.",
          "You embrace Open Source. You follow relevant open-source projects, maybe you contributed, maybe you know the maintainers. Gitpod itself is open-source and built on open-source projects, such as Kubernetes, Helm, Terraform, Grafana, Prometheus and many more. Knowledge about such projects will help you work on Gitpod and knowledge about Open Source will help you make Gitpod a better Open Source project.",
          "You are pragmatic. You understand that doing the right thing gives you momentum while doing a thing perfectly can cost a lot of time.",
          "You are a curious deep diver. You know that humans and documentation often do not have an answer. That is when you dive. You read code, issues, explore metrics, traces, logs or conduct experiments. When you surface, you know the answer and the team will love you.",
          "You are a good communicator. We work remote, our users are remote too. You value writing and express yourself concisely. You may hold strong opinions, but you are not ideological. You communicate thoughtfully, always assume others speak in good faith, aim to understand opposing perspectives and compromise when needed."
        ]
      },
      {
        title: "Our stack:",
        items: [
          "Gitpod is an open source Kubernetes application. Services are written in Go and TypeScript (Node.JS), while all things frontend are React and TypeScript. We communicate using gRPC, RabbitMQ and JSON-RPC. We develop Gitpod in Gitpod, build using leeway and werft and automatically deploy preview environments for every branch.",
          "Browser-based productivity tools for the rest. Gitpod for development, GitHub for issue tracking and as git hoster, Slack for comms, Figma for design, Notion as our virtual HQ, Pitch for slides, Loom for screencasts and a few others.",
          "We run gitpod.io on Google Cloud Platform. There we use GKE, Buckets, BigQuery and more. We may expand to other cloud providers. We make Gitpod self-hosted available for vanilla Kubernetes, AWS, and more platforms in the future.",
          "We describe infrastructure using Helm and Terraform. We maintain a single helm chart to install Gitpod on Kubernetes. To create the cluster and other infrastructure around it, we use Terraform scripts."
        ]
      },
      {
        title: "We're about balance",
        items: perks.map((perk) => perk.title)
      }
    ],
    textAfterTheLists: "",
    rendered: false,
    date: "2021-01-26T14:00:00.000Z"
  }
];
var careers_svelte = ".heroImage.svelte-1mypwlo.svelte-1mypwlo{margin:0 auto 2rem;border-radius:1rem}section.svelte-1mypwlo.svelte-1mypwlo{width:50rem;max-width:96vw;margin:auto}section.svelte-1mypwlo h2.svelte-1mypwlo{margin-top:3rem;margin-bottom:1.5rem;font-size:2rem;line-height:2.5rem}section.svelte-1mypwlo h2.svelte-1mypwlo,section.svelte-1mypwlo p.svelte-1mypwlo{padding-left:2rem}.perks.svelte-1mypwlo.svelte-1mypwlo{color:#12100c;font-weight:700;font-size:1.25rem}.mt-5rem.svelte-1mypwlo.svelte-1mypwlo{margin-top:5rem}.mb-10rem.svelte-1mypwlo.svelte-1mypwlo{margin-bottom:10rem}.text-2xl.svelte-1mypwlo.svelte-1mypwlo{font-size:1.5rem;line-height:2rem}.font-bold.svelte-1mypwlo.svelte-1mypwlo{font-weight:700}";
const css$i = {
  code: ".heroImage.svelte-1mypwlo.svelte-1mypwlo{margin:0 auto 2rem;border-radius:1rem}section.svelte-1mypwlo.svelte-1mypwlo{width:50rem;max-width:96vw;margin:auto}section.svelte-1mypwlo h2.svelte-1mypwlo{margin-top:3rem;margin-bottom:1.5rem;font-size:2rem;line-height:2.5rem}section.svelte-1mypwlo h2.svelte-1mypwlo,section.svelte-1mypwlo p.svelte-1mypwlo{padding-left:2rem}.perks.svelte-1mypwlo.svelte-1mypwlo{color:#12100c;font-weight:700;font-size:1.25rem}.mt-5rem.svelte-1mypwlo.svelte-1mypwlo{margin-top:5rem}.mb-10rem.svelte-1mypwlo.svelte-1mypwlo{margin-bottom:10rem}.text-2xl.svelte-1mypwlo.svelte-1mypwlo{font-size:1.5rem;line-height:2rem}.font-bold.svelte-1mypwlo.svelte-1mypwlo{font-weight:700}",
  map: '{"version":3,"file":"careers.svelte","sources":["careers.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script lang=\\"ts\\">import { hyphenate } from \\"../utils/helper\\";\\nimport CareerModal from \\"../components/careers/modal.svelte\\";\\nimport OpenGraph from \\"../components/open-graph.svelte\\";\\nimport { careers, perks } from \\"../contents/careers\\";\\nimport { onMount } from \\"svelte\\";\\nlet selectedCareer;\\n$: if (selectedCareer) {\\n    window.location.hash = `#${hyphenate(selectedCareer.title)}`;\\n}\\nonMount(() => {\\n    const hash = window.location.hash.substring(1);\\n    const career = careers.find((career) => hyphenate(career.title) === hash);\\n    selectedCareer = career;\\n});\\n</script>\\n\\n<style>.heroImage{margin:0 auto 2rem;border-radius:1rem}section{width:50rem;max-width:96vw;margin:auto}section h2{margin-top:3rem;margin-bottom:1.5rem;font-size:2rem;line-height:2.5rem}section h2,section p{padding-left:2rem}.perks{color:#12100c;font-weight:700;font-size:1.25rem}.mt-5rem{margin-top:5rem}.mb-10rem{margin-bottom:10rem}.text-2xl{font-size:1.5rem;line-height:2rem}.font-bold{font-weight:700}</style>\\n\\n<OpenGraph\\n  data={{\\n    description: \\"Come join our fast-growing, venture-backed team.\\",\\n    title: \\"Careers at Gitpod\\",\\n  }}\\n/>\\n<header class=\\"tight\\">\\n  <h1>To remove all friction from the developer experience.</h1>\\n  <p>Bring back joy and speed to dev workflows.</p>\\n  <p>\\n    <a href=\\"#jobs\\" class=\\"btn-conversion\\">View {careers.length} openings</a>\\n  </p>\\n</header>\\n\\n<!-- svelte-ignore a11y-missing-attribute -->\\n<img\\n  src=\\"/images/illustration-zoom.jpg\\"\\n  role=\\"presentation\\"\\n  width=\\"1136\\"\\n  height=\\"631\\"\\n  class=\\"heroImage\\"\\n/>\\n\\n<section>\\n  <article class=\\"hilited\\">\\n    <h2 class=\\"h4\\">\\n      Make software engineering collaborative and joyful again.\\n    </h2>\\n    <p class=\\"text-2xl\\">\\n      Developers write software within languages/frameworks, build tools, glue\\n      them together to (tool) chains, develop against APIs and communicate and\\n      collaborate with our colleagues. All of that should be efficient, joyful\\n      and secure.\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      Yet it is not. Devs constantly struggle with larger codebases, cluttered\\n      dependencies, security policies and unnecessary friction in their\\n      workflows.\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      We want to make developers feel again that everything is at their\\n      fingertips.\\n    </p>\\n    <h2 class=\\"h4 mt-5rem\\">\\n      Gitpod was founded because we were frustrated by manually setting up and\\n      maintaining dev environments.\\n    </h2>\\n    <p class=\\"text-2xl\\">\\n      We are building Gitpod in the open to easily spin-up fresh dev\\n      environments for any task. Those ephemeral environments are fast &\\n      powerful, fully automated & initialized. They empower developers to\\n      immediately start coding, debugging, and testing their code.\\n    </p>\\n    <p class=\\"text-2xl\\">Only then developers are always ready-to-code.</p>\\n    <h2 class=\\"h4 mt-5rem\\">\\n      The company was established in 2020 and today over 350,000 devs\\n      gitpodified their workflows.\\n    </h2>\\n    <p class=\\"text-2xl\\">\\n      We are greateful to be backed by some of the best venture firms and\\n      advisors of the world. We recently announced a 13m funding round.\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      Come join a quickly growing venture-backed team and work together with\\n      incredible humans from four continents \u{1F30D}\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      We are open minded, transparent and curious. We remain students of the\\n      game, not masters of the game.\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      We aim for a frictionless experience when interacting with our product,\\n      our company and our brand: no hurdles, no BS, no unnecessary extra steps.\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      We are fully-distributed.\xA0You can work from anywhere and schedule your\\n      working hours the way it fits best for you. We make sure you are all set\\n      and will treat you well.\\n    </p>\\n    <p class=\\"text-2xl font-bold\\">\\n      We are not as diverse as we would like to be.\\n    </p>\\n    <p class=\\"text-2xl\\">\\n      Help us to change that and shape Gitpod\u2019s future from anywhere in the\\n      world! \u{1F308} \u{1F30D}\\n    </p>\\n  </article>\\n\\n  <h2 class=\\"h4 mt-5rem\\">What we offer</h2>\\n  <ul class=\\"perks\\">\\n    {#each perks as { title }}\\n      <li>{title}</li>\\n    {/each}\\n  </ul>\\n\\n  <h2 id=\\"jobs\\" class=\\"h4 mt-5rem\\">Open positions</h2>\\n  <p class=\\"text-2xl\\">\\n    If there isn\'t an open position for you but you\'d still want to work at\\n    Gitpod let us know via <a href=\\"mailto:career@gitpod.io\\">career@gitpod.io</a\\n    >\\n  </p>\\n\\n  <div class=\\"mb-10rem\\">\\n    <ul class=\\"jobs\\">\\n      {#each careers as career}\\n        <li id={hyphenate(career.title)}>\\n          <button\\n            on:click={() => {\\n              selectedCareer = career;\\n            }}\\n          >\\n            <div class=\\"group flex justify-center items-center text-gray-900\\">\\n              {career.title}\\n              <svg\\n                xmlns=\\"http://www.w3.org/2000/svg\\"\\n                class=\\"permalink-icon ml-micro text-white group-hover:text-gray-900 transition-all duration-100\\"\\n                viewBox=\\"0 0 512 512\\"\\n                height=\\"22\\"\\n                ><path\\n                  d=\\"M208 352h-64a96 96 0 010-192h64m96 0h64a96 96 0 010 192h-64m-140.71-96h187.42\\"\\n                  fill=\\"none\\"\\n                  stroke=\\"currentColor\\"\\n                  stroke-linecap=\\"round\\"\\n                  stroke-linejoin=\\"round\\"\\n                  stroke-width=\\"36\\"\\n                /></svg\\n              >\\n            </div>\\n          </button>\\n        </li>\\n      {/each}\\n    </ul>\\n  </div>\\n\\n  <CareerModal\\n    career={selectedCareer}\\n    on:close={() => (selectedCareer = null)}\\n  />\\n</section>\\n"],"names":[],"mappings":"AAoBO,wCAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,qCAAO,CAAC,MAAM,KAAK,CAAC,UAAU,IAAI,CAAC,OAAO,IAAI,CAAC,sBAAO,CAAC,iBAAE,CAAC,WAAW,IAAI,CAAC,cAAc,MAAM,CAAC,UAAU,IAAI,CAAC,YAAY,MAAM,CAAC,sBAAO,CAAC,iBAAE,CAAC,sBAAO,CAAC,gBAAC,CAAC,aAAa,IAAI,CAAC,oCAAM,CAAC,MAAM,OAAO,CAAC,YAAY,GAAG,CAAC,UAAU,OAAO,CAAC,sCAAQ,CAAC,WAAW,IAAI,CAAC,uCAAS,CAAC,cAAc,KAAK,CAAC,uCAAS,CAAC,UAAU,MAAM,CAAC,YAAY,IAAI,CAAC,wCAAU,CAAC,YAAY,GAAG,CAAC"}'
};
const prerender$2z = true;
const Careers = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let selectedCareer;
  onMount(() => {
    const hash = window.location.hash.substring(1);
    const career = careers$1.find((career2) => hyphenate(career2.title) === hash);
    selectedCareer = career;
  });
  $$result.css.add(css$i);
  {
    if (selectedCareer) {
      window.location.hash = `#${hyphenate(selectedCareer.title)}`;
    }
  }
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Come join our fast-growing, venture-backed team.",
      title: "Careers at Gitpod"
    }
  }, {}, {})}
<header class="${"tight"}"><h1>To remove all friction from the developer experience.</h1>
  <p>Bring back joy and speed to dev workflows.</p>
  <p><a href="${"#jobs"}" class="${"btn-conversion"}">View ${escape(careers$1.length)} openings</a></p></header>


<img src="${"/images/illustration-zoom.jpg"}" role="${"presentation"}" width="${"1136"}" height="${"631"}" class="${"heroImage svelte-1mypwlo"}">

<section class="${"svelte-1mypwlo"}"><article class="${"hilited"}"><h2 class="${"h4 svelte-1mypwlo"}">Make software engineering collaborative and joyful again.
    </h2>
    <p class="${"text-2xl svelte-1mypwlo"}">Developers write software within languages/frameworks, build tools, glue
      them together to (tool) chains, develop against APIs and communicate and
      collaborate with our colleagues. All of that should be efficient, joyful
      and secure.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">Yet it is not. Devs constantly struggle with larger codebases, cluttered
      dependencies, security policies and unnecessary friction in their
      workflows.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">We want to make developers feel again that everything is at their
      fingertips.
    </p>
    <h2 class="${"h4 mt-5rem svelte-1mypwlo"}">Gitpod was founded because we were frustrated by manually setting up and
      maintaining dev environments.
    </h2>
    <p class="${"text-2xl svelte-1mypwlo"}">We are building Gitpod in the open to easily spin-up fresh dev
      environments for any task. Those ephemeral environments are fast &amp;
      powerful, fully automated &amp; initialized. They empower developers to
      immediately start coding, debugging, and testing their code.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">Only then developers are always ready-to-code.</p>
    <h2 class="${"h4 mt-5rem svelte-1mypwlo"}">The company was established in 2020 and today over 350,000 devs
      gitpodified their workflows.
    </h2>
    <p class="${"text-2xl svelte-1mypwlo"}">We are greateful to be backed by some of the best venture firms and
      advisors of the world. We recently announced a 13m funding round.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">Come join a quickly growing venture-backed team and work together with
      incredible humans from four continents \u{1F30D}
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">We are open minded, transparent and curious. We remain students of the
      game, not masters of the game.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">We aim for a frictionless experience when interacting with our product,
      our company and our brand: no hurdles, no BS, no unnecessary extra steps.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">We are fully-distributed.\xA0You can work from anywhere and schedule your
      working hours the way it fits best for you. We make sure you are all set
      and will treat you well.
    </p>
    <p class="${"text-2xl font-bold svelte-1mypwlo"}">We are not as diverse as we would like to be.
    </p>
    <p class="${"text-2xl svelte-1mypwlo"}">Help us to change that and shape Gitpod\u2019s future from anywhere in the
      world! \u{1F308} \u{1F30D}
    </p></article>

  <h2 class="${"h4 mt-5rem svelte-1mypwlo"}">What we offer</h2>
  <ul class="${"perks svelte-1mypwlo"}">${each(perks, ({title}) => `<li>${escape(title)}</li>`)}</ul>

  <h2 id="${"jobs"}" class="${"h4 mt-5rem svelte-1mypwlo"}">Open positions</h2>
  <p class="${"text-2xl svelte-1mypwlo"}">If there isn&#39;t an open position for you but you&#39;d still want to work at
    Gitpod let us know via <a href="${"mailto:career@gitpod.io"}">career@gitpod.io</a></p>

  <div class="${"mb-10rem svelte-1mypwlo"}"><ul class="${"jobs"}">${each(careers$1, (career) => `<li${add_attribute("id", hyphenate(career.title), 0)}><button><div class="${"group flex justify-center items-center text-gray-900"}">${escape(career.title)}
              <svg xmlns="${"http://www.w3.org/2000/svg"}" class="${"permalink-icon ml-micro text-white group-hover:text-gray-900 transition-all duration-100"}" viewBox="${"0 0 512 512"}" height="${"22"}"><path d="${"M208 352h-64a96 96 0 010-192h64m96 0h64a96 96 0 010 192h-64m-140.71-96h187.42"}" fill="${"none"}" stroke="${"currentColor"}" stroke-linecap="${"round"}" stroke-linejoin="${"round"}" stroke-width="${"36"}"></path></svg>
            </div></button>
        </li>`)}</ul></div>

  ${validate_component(Modal_1, "CareerModal").$$render($$result, {career: selectedCareer}, {}, {})}</section>`;
});
var careers = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Careers,
  prerender: prerender$2z
});
var card_svelte = "@media(max-width:375px){.card.svelte-wpb11x{padding-left:var(--micro);padding-right:var(--micro)}}p.svelte-wpb11x{color:var(--dark-grey)}";
const css$h = {
  code: "@media(max-width:375px){.card.svelte-wpb11x{padding-left:var(--micro);padding-right:var(--micro)}}p.svelte-wpb11x{color:var(--dark-grey)}",
  map: '{"version":3,"file":"card.svelte","sources":["card.svelte"],"sourcesContent":["<script lang=\\"ts\\">;\\nexport let contactCard;\\n</script>\\n\\n<style lang=\\"scss\\">@media (max-width:375px){.card{padding-left:var(--micro);padding-right:var(--micro)}}p{color:var(--dark-grey)}</style>\\n\\n<div class=\\"card text-center shadow-xl\\">\\n  <!-- svelte-ignore a11y-missing-attribute -->\\n  <img\\n    src=\\"/images/contact/{contactCard.image}\\"\\n    height={contactCard.imgHeight}\\n    width={contactCard.imgWidth}\\n    role=\\"presentation\\"\\n  />\\n  <h2 class=\\"h3\\">{contactCard.title}</h2>\\n  <p>{contactCard.description}</p>\\n  <a href={contactCard.btnHref} class=\\"btn btn-conversion m-8\\"\\n    >{contactCard.btnText}</a\\n  >\\n</div>\\n"],"names":[],"mappings":"AAImB,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,mBAAK,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,CAAC,eAAC,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC"}'
};
const Card = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {contactCard} = $$props;
  if ($$props.contactCard === void 0 && $$bindings.contactCard && contactCard !== void 0)
    $$bindings.contactCard(contactCard);
  $$result.css.add(css$h);
  return `<div class="${"card text-center shadow-xl svelte-wpb11x"}">
  <img src="${"/images/contact/" + escape(contactCard.image)}"${add_attribute("height", contactCard.imgHeight, 0)}${add_attribute("width", contactCard.imgWidth, 0)} role="${"presentation"}">
  <h2 class="${"h3"}">${escape(contactCard.title)}</h2>
  <p class="${"svelte-wpb11x"}">${escape(contactCard.description)}</p>
  <a${add_attribute("href", contactCard.btnHref, 0)} class="${"btn btn-conversion m-8"}">${escape(contactCard.btnText)}</a></div>`;
});
var contact_svelte = "p.svelte-1oyg19t.svelte-1oyg19t{color:var(--dark-grey)}form.svelte-1oyg19t.svelte-1oyg19t{max-width:45rem;margin:auto}fieldset.svelte-1oyg19t ul.svelte-1oyg19t{display:flex;flex-flow:wrap}fieldset.svelte-1oyg19t li.svelte-1oyg19t{margin:0 1rem 0 0}";
const css$g = {
  code: "p.svelte-1oyg19t.svelte-1oyg19t{color:var(--dark-grey)}form.svelte-1oyg19t.svelte-1oyg19t{max-width:45rem;margin:auto}fieldset.svelte-1oyg19t ul.svelte-1oyg19t{display:flex;flex-flow:wrap}fieldset.svelte-1oyg19t li.svelte-1oyg19t{margin:0 1rem 0 0}",
  map: `{"version":3,"file":"contact.svelte","sources":["contact.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script lang=\\"ts\\">;\\n;\\n;\\nimport Card from \\"../components/contact/card.svelte\\";\\nimport OpenGraph from \\"../components/open-graph.svelte\\";\\nimport SubmissionSuccess from \\"../components/submission-success.svelte\\";\\nconst contactCards = [\\n    {\\n        btnHref: \\"https://community.gitpod.io\\",\\n        btnText: \\"Open community\\",\\n        description: \\"If you are looking for help for common requests pease visit our community.\\",\\n        title: \\"Ask the community\\",\\n        image: \\"icon-enter.svg\\",\\n        imgHeight: \\"154\\",\\n        imgWidth: \\"147\\",\\n    },\\n    {\\n        btnHref: \\"/docs/professional-open-source#who-is-eligible\\",\\n        btnText: \\"Open documentation\\",\\n        description: \\"If you want to find out if you are elegible for our professional open source programm you can check out our docs.\\",\\n        title: \\"Professional Open Source\\",\\n        image: \\"icon-cube.svg\\",\\n        imgHeight: \\"154\\",\\n        imgWidth: \\"147\\",\\n    },\\n];\\nconst studentUnlimitedSubject = \\"Student Unlimited: Get Verified as a Student\\";\\nconst subjects = [\\n    \\"Question about Gitpod Self-Hosted\\",\\n    \\"Question about Gitpod's Paid Plans\\",\\n    \\"Applying for Professional Open Source\\",\\n    \\"Applying for the Custom IDE Beta\\",\\n    studentUnlimitedSubject,\\n    \\"Other\\",\\n];\\nlet isStudentEmailNoteShown = false;\\nlet sectionStart;\\n$: if (formData.selectedSubject.value === studentUnlimitedSubject) {\\n    isStudentEmailNoteShown = true;\\n}\\nelse {\\n    isStudentEmailNoteShown = false;\\n}\\nconst formData = {\\n    consent: {\\n        el: null,\\n        valid: false,\\n        checked: false,\\n    },\\n    email: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    message: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    name: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n    selectedSubject: {\\n        el: null,\\n        valid: false,\\n        value: \\"\\",\\n    },\\n};\\nlet isFormDirty = false;\\nlet isEmailSent = false;\\n$: isFormValid = Object.values(formData).every((field) => field.valid);\\nconst handleSubmit = async () => {\\n    isFormDirty = true;\\n    if (!isFormValid) {\\n        return;\\n    }\\n    const email = {\\n        from: {\\n            email: formData.email.value,\\n            name: formData.name.value,\\n        },\\n        subject: formData.selectedSubject.value +\\n            \\"  (from \\" +\\n            formData.email.value +\\n            \\")\\",\\n        message: formData.message.value,\\n    };\\n    try {\\n        const response = await fetch(\\"/.netlify/functions/submit-form\\", {\\n            method: \\"POST\\",\\n            body: JSON.stringify(email),\\n        });\\n        if (response.ok) {\\n            isEmailSent = true;\\n            setTimeout(() => {\\n                sectionStart.scrollIntoView();\\n            });\\n        }\\n        else {\\n            console.error(response.statusText);\\n        }\\n    }\\n    catch (error) {\\n        console.error(error);\\n    }\\n};\\n</script>\\n\\n<style>p{color:var(--dark-grey)}form{max-width:45rem;margin:auto}fieldset ul{display:flex;flex-flow:wrap}fieldset li{margin:0 1rem 0 0}</style>\\n\\n<OpenGraph\\n  data={{\\n    description: \\"Reach out if you have any questions regarding Gitpod.\\",\\n    title: \\"Contact us\\",\\n  }}\\n/>\\n<header class=\\"tight\\">\\n  <h1>Contact us</h1>\\n  <p>Please reach out if you have any questions regarding Gitpod.</p>\\n</header>\\n\\n<div class=\\"cards double sm:mx-8\\">\\n  {#each contactCards as contactCard}\\n    <Card {contactCard} />\\n  {/each}\\n</div>\\n\\n<section class=\\"card shadow-xl mb-32 sm:mx-8\\" bind:this={sectionStart}>\\n  {#if isEmailSent}\\n    <SubmissionSuccess\\n      title=\\"Thank you for your message\\"\\n      text=\\"We received your message. Our team will take a look and get back to you as\\n      soon as possible.\\"\\n    />\\n  {:else}\\n    <form on:submit|preventDefault={handleSubmit} novalidate>\\n      <h2 class=\\"h3 text-center mb-8\\">Send us a message</h2>\\n      <ul>\\n        <li class:error={isFormDirty && !formData.name.valid}>\\n          <label for=\\"name\\">Name*</label>\\n          <input\\n            id=\\"name\\"\\n            bind:value={formData.name.value}\\n            bind:this={formData.name.el}\\n            on:change={() => {\\n              formData.name.valid =\\n                formData.name.value && formData.name.el.checkValidity();\\n            }}\\n            type=\\"text\\"\\n            autocomplete=\\"name\\"\\n          />\\n        </li>\\n        <li class:error={isFormDirty && !formData.email.valid}>\\n          <label for=\\"email\\"\\n            >E-Mail*\\n            {#if isStudentEmailNoteShown}\\n              (Please use your student email)\\n            {/if}\\n          </label>\\n          <input\\n            id=\\"email\\"\\n            bind:value={formData.email.value}\\n            bind:this={formData.email.el}\\n            on:change={() => {\\n              formData.email.valid =\\n                formData.email.value && formData.email.el.checkValidity();\\n            }}\\n            type=\\"email\\"\\n            autocomplete=\\"email\\"\\n          />\\n        </li>\\n        <li class:error={isFormDirty && !formData.selectedSubject.valid}>\\n          <fieldset>\\n            <legend>Please choose a subject</legend>\\n            <ul>\\n              {#each subjects as subject, index}\\n                <li>\\n                  <input\\n                    id=\\"subject-{index}\\"\\n                    type=\\"radio\\"\\n                    bind:group={formData.selectedSubject.value}\\n                    bind:this={formData.selectedSubject.el}\\n                    on:change={() => {\\n                      formData.selectedSubject.valid =\\n                        formData.selectedSubject.value &&\\n                        formData.selectedSubject.el.validity.valid;\\n                    }}\\n                    value={subject}\\n                    name=\\"subject\\"\\n                  />\\n                  <label for=\\"subject-{index}\\" class=\\"font-medium\\"\\n                    >{subject}</label\\n                  >\\n                </li>\\n              {/each}\\n            </ul>\\n          </fieldset>\\n        </li>\\n        <li class:error={isFormDirty && !formData.message.valid}>\\n          <label for=\\"message\\">Your message*</label>\\n          <textarea\\n            id=\\"message\\"\\n            bind:value={formData.message.value}\\n            bind:this={formData.message.el}\\n            on:change={() => {\\n              formData.message.valid =\\n                formData.message.value && formData.message.el.validity.valid;\\n            }}\\n            cols=\\"30\\"\\n            rows=\\"10\\"\\n          />\\n        </li>\\n        <li class:error={isFormDirty && !formData.consent.valid}>\\n          <input\\n            id=\\"consent\\"\\n            bind:checked={formData.consent.checked}\\n            bind:this={formData.consent.el}\\n            on:change={() => {\\n              formData.consent.valid =\\n                formData.consent.checked && formData.consent.el.validity.valid;\\n            }}\\n            type=\\"checkbox\\"\\n          />\\n          <label for=\\"consent\\"\\n            >I consent to having this website store my submitted information so\\n            that a support staff can respond to my inquiry.</label\\n          >\\n        </li>\\n        <li>\\n          <button\\n            type=\\"submit\\"\\n            class=\\"btn\\"\\n            disabled={isFormDirty && !isFormValid}>Send message</button\\n          >\\n        </li>\\n      </ul>\\n      {#if isEmailSent}\\n        <p>Thank you! We'll get back to you soon.</p>\\n      {/if}\\n    </form>\\n  {/if}\\n</section>\\n"],"names":[],"mappings":"AAkHO,+BAAC,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,kCAAI,CAAC,UAAU,KAAK,CAAC,OAAO,IAAI,CAAC,uBAAQ,CAAC,iBAAE,CAAC,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC,uBAAQ,CAAC,iBAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC"}`
};
const prerender$2y = true;
const studentUnlimitedSubject = "Student Unlimited: Get Verified as a Student";
const Contact = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contactCards = [
    {
      btnHref: "https://community.gitpod.io",
      btnText: "Open community",
      description: "If you are looking for help for common requests pease visit our community.",
      title: "Ask the community",
      image: "icon-enter.svg",
      imgHeight: "154",
      imgWidth: "147"
    },
    {
      btnHref: "/docs/professional-open-source#who-is-eligible",
      btnText: "Open documentation",
      description: "If you want to find out if you are elegible for our professional open source programm you can check out our docs.",
      title: "Professional Open Source",
      image: "icon-cube.svg",
      imgHeight: "154",
      imgWidth: "147"
    }
  ];
  const subjects = [
    "Question about Gitpod Self-Hosted",
    "Question about Gitpod's Paid Plans",
    "Applying for Professional Open Source",
    "Applying for the Custom IDE Beta",
    studentUnlimitedSubject,
    "Other"
  ];
  let isStudentEmailNoteShown = false;
  let sectionStart;
  const formData = {
    consent: {el: null, valid: false, checked: false},
    email: {el: null, valid: false, value: ""},
    message: {el: null, valid: false, value: ""},
    name: {el: null, valid: false, value: ""},
    selectedSubject: {el: null, valid: false, value: ""}
  };
  $$result.css.add(css$g);
  {
    if (formData.selectedSubject.value === studentUnlimitedSubject) {
      isStudentEmailNoteShown = true;
    } else {
      isStudentEmailNoteShown = false;
    }
  }
  Object.values(formData).every((field) => field.valid);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Reach out if you have any questions regarding Gitpod.",
      title: "Contact us"
    }
  }, {}, {})}
<header class="${"tight"}"><h1>Contact us</h1>
  <p class="${"svelte-1oyg19t"}">Please reach out if you have any questions regarding Gitpod.</p></header>

<div class="${"cards double sm:mx-8"}">${each(contactCards, (contactCard) => `${validate_component(Card, "Card").$$render($$result, {contactCard}, {}, {})}`)}</div>

<section class="${"card shadow-xl mb-32 sm:mx-8"}"${add_attribute("this", sectionStart, 1)}>${`<form novalidate class="${"svelte-1oyg19t"}"><h2 class="${"h3 text-center mb-8"}">Send us a message</h2>
      <ul><li${add_classes([""].join(" ").trim())}><label for="${"name"}">Name*</label>
          <input id="${"name"}" type="${"text"}" autocomplete="${"name"}"${add_attribute("value", formData.name.value, 1)}${add_attribute("this", formData.name.el, 1)}></li>
        <li${add_classes([""].join(" ").trim())}><label for="${"email"}">E-Mail*
            ${isStudentEmailNoteShown ? `(Please use your student email)` : ``}</label>
          <input id="${"email"}" type="${"email"}" autocomplete="${"email"}"${add_attribute("value", formData.email.value, 1)}${add_attribute("this", formData.email.el, 1)}></li>
        <li${add_classes([
    ""
  ].join(" ").trim())}><fieldset class="${"svelte-1oyg19t"}"><legend>Please choose a subject</legend>
            <ul class="${"svelte-1oyg19t"}">${each(subjects, (subject, index2) => `<li class="${"svelte-1oyg19t"}"><input id="${"subject-" + escape(index2)}" type="${"radio"}"${add_attribute("value", subject, 0)} name="${"subject"}"${add_attribute("this", formData.selectedSubject.el, 1)}>
                  <label for="${"subject-" + escape(index2)}" class="${"font-medium"}">${escape(subject)}</label>
                </li>`)}</ul></fieldset></li>
        <li${add_classes([""].join(" ").trim())}><label for="${"message"}">Your message*</label>
          <textarea id="${"message"}" cols="${"30"}" rows="${"10"}"${add_attribute("this", formData.message.el, 1)}>${formData.message.value || ""}</textarea></li>
        <li${add_classes([""].join(" ").trim())}><input id="${"consent"}" type="${"checkbox"}"${add_attribute("checked", formData.consent.checked, 1)}${add_attribute("this", formData.consent.el, 1)}>
          <label for="${"consent"}">I consent to having this website store my submitted information so
            that a support staff can respond to my inquiry.</label></li>
        <li><button type="${"submit"}" class="${"btn"}" ${""}>Send message</button></li></ul>
      ${``}</form>`}</section>`;
});
var contact = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Contact,
  prerender: prerender$2y
});
const prerender$2x = true;
const Imprint = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod's imprint.",
      title: "Imprint"
    }
  }, {}, {})}
<article class="${"text-blob"}"><h1>Imprint</h1>
  <p>Gitpod\xA0GmbH
    <br> Managing Directors: Sven Efftinge, Moritz Eysholdt, Dr. Jan K\xF6hnlein
    <br> Am Germaniahafen 1
    <br> 24143 Kiel
    <br> Germany
  </p>
  <p>HRB 22228, Amtsgericht Kiel</p>
  <p>VAT-ID :\xA0
    <span>DE335127327</span></p>
  <p>Email: contact@gitpod.io</p>
  <p>Responsible for all content according to
    <b>\xA7 55 Rundfunkstaatsvertrag (RSTV)</b>:
  </p>
  <p>Sven Efftinge,\xA0Hofteichstr.7,\xA024113 Kiel</p>
  <h2>Disclaimer</h2>
  <h3>Liability for content</h3>
  <p>As a service provider we are responsible according to \xA7 7 paragraph 1 of TMG
    for own contents on these pages under the general laws. According to \xA7 \xA7 8
    to 10 TMG we are not obliged as a service provider to monitor transmitted or
    stored foreign information or to investigate circumstances that indicate
    illegal activity. Obligations to remove or block the use of information
    under the general laws remain unaffected. However, a relevant liability is
    only possible from the date of knowledge of a specific infringement. Upon
    notification of such violations, we will remove the content immediately.
  </p>
  <h3>Liability for links</h3>
  <p>Our site contains links to external websites over which we have no control.
    Therefore we can not accept any responsibility for their content. The
    respective provider or operator of the pages is always responsible for the
    contents of any Linked Site. The linked sites were checked at the time of
    linking for possible violations of law. Illegal contents were at the time of
    linking. A permanent control of the linked pages is unreasonable without
    concrete evidence of a violation. Upon notification of violations, we will
    remove such links immediately.
  </p>
  <h3>Copyright</h3>
  <p>The contents and works on these pages created by the site operator are
    subject to German copyright law. Duplication, processing, distribution and
    any kind of exploitation outside the limits of copyright require the written
    consent of its respective author or creator. Downloads and copies of these
    pages are only permitted for private, non-commercial use. As far as the
    content is not created by the website operator, the copyrights of third
    parties. Especially content of third parties will be marked as such. If you
    still get aware of copyright infringement, we ask for a hint. Upon
    notification of violations, we will remove such content immediately.
  </p>
  <h3>Settlements of Disputes</h3>
  <p>The European Commission provides a platform for an online settlement of
    disputes which can be accessed under <a href="${"https://ec.europa.eu/consumers/odr/"}" target="${"_blank"}">https://ec.europa.eu/consumers/odr/</a>. Gitpod is neither obliged to take part in alternative dispute resolutions
    before a consumer dispute settlement commission or will do so voluntarily.
  </p></article>`;
});
var imprint = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Imprint,
  prerender: prerender$2x
});
var faqs_svelte = "h2.svelte-11diu2x.svelte-11diu2x{text-align:center}.images.svelte-11diu2x.svelte-11diu2x{display:flex;margin-top:var(--xx-small)}.images.svelte-11diu2x>.svelte-11diu2x:not(:last-child){margin-right:var(--xx-small)}";
const css$f = {
  code: "h2.svelte-11diu2x.svelte-11diu2x{text-align:center}.images.svelte-11diu2x.svelte-11diu2x{display:flex;margin-top:var(--xx-small)}.images.svelte-11diu2x>.svelte-11diu2x:not(:last-child){margin-right:var(--xx-small)}",
  map: '{"version":3,"file":"faqs.svelte","sources":["faqs.svelte"],"sourcesContent":["<script>\\n  import { isEurope } from \\"../../utils/helper\\";\\n  import Section from \\"../section.svelte\\";\\n  import Faq from \\"./faq.svelte\\";\\n</script>\\n\\n<style lang=\\"scss\\">h2{text-align:center}.images{display:flex;margin-top:var(--xx-small)}.images>:not(:last-child){margin-right:var(--xx-small)}</style>\\n\\n<Section>\\n  <h2 class=\\"h1\\">FAQs</h2>\\n  <Faq title=\\"Can I always use Gitpod for free?\\">\\n    <p>\\n      Yes! Gitpod is always for free for public repositories for up to 50h per\\n      month. If you need more hours or would like to unlock more features, you\\n      can upgrade your subscription at any time. If you\u2019re a professional\\n      open-source developer and need more hours, you can apply to our free <a\\n        href=\\"/docs/professional-open-source\\">Professional Open Source plan</a\\n      >.\\n    </p>\\n  </Faq>\\n  <Faq\\n    title=\\"Do you offer discounts for students and educational institutions?\\"\\n  >\\n    <p>\\n      Yes, qualified educational institutions may receive a special discount.\\n      Please\\n      <a href=\\"/contact\\">Contact us</a>. If you are a student, you may use the\\n      Student Unlimited Plan for {isEurope() ? \\"\u20AC8\\" : \\"$9\\"} per month (usually{\\" \\"}\\n\\n      {isEurope() ? \\"\u20AC35\\" : \\"$39\\"}). See\\n      <a href=\\"#plans\\">Gitpod for Students</a> for more information.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"How can I pay?\\">\\n    <p>All our plans can only be paid via credit card.</p>\\n    <div class=\\"images\\">\\n      <img\\n        src=\\"/svg/brands/mastercard.svg\\"\\n        alt=\\"Mastercard\\"\\n        width=\\"52\\"\\n        height=\\"40\\"\\n      />\\n      <img src=\\"/svg/brands/visa.svg\\" alt=\\"Visa\\" width=\\"72\\" height=\\"40\\" />\\n    </div>\\n  </Faq>\\n  <Faq title=\\"Can I create a team account?\\">\\n    <p>\\n      Sure, if you would like to mange subscriptions for a whole team on a\\n      single invoice, you can create a{\\" \\"}\\n      <a href=\\"https://gitpod.io/teams/\\">team subscription.</a>\\n    </p>\\n    <p>\\n      In case you need more information on how to setup a team subscription,\\n      visit{\\" \\"}\\n      <a href=\\"/docs/teams\\">gitpod.io/docs/teams.</a>\\n    </p>\\n  </Faq>\\n  <Faq title=\\"Can I change my subscription at any time?\\">\\n    <p>\\n      Yes, you can upgrade or downgrade whenever you want on <a\\n        href=\\"https://gitpod.io/subscription/\\">gitpod.io/subscription</a\\n      >. Your billing cycle starts with the creation date of your subscription.\\n      After 30 days it will automatically renew itself.\\n    </p>\\n    <p>\\n      If you choose to upgrade, the pricing difference will be added to your\\n      next month\u2019s invoice. If you choose to downgrade, you\u2019ll be credited on\\n      your next month\u2019s invoice.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"What if I decide to cancel?\\">\\n    <p>\\n      If you wish to stop using Gitpod, you may cancel your subscription at any\\n      time. Your cancellation will take into effect after that month\u2019s billing\\n      cycle.\\n    </p>\\n  </Faq>\\n  <Faq title=\\"Still have more questions?\\">\\n    <p>\\n      We are happy to answer them, please <a href=\\"/contact\\">Get in Touch</a>.\\n    </p>\\n  </Faq>\\n</Section>\\n"],"names":[],"mappings":"AAMmB,gCAAE,CAAC,WAAW,MAAM,CAAC,qCAAO,CAAC,QAAQ,IAAI,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,sBAAO,gBAAC,KAAK,WAAW,CAAC,CAAC,aAAa,IAAI,UAAU,CAAC,CAAC"}'
};
const Faqs = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$f);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h2 class="${"h1 svelte-11diu2x"}">FAQs</h2>
  ${validate_component(Faq, "Faq").$$render($$result, {
      title: "Can I always use Gitpod for free?"
    }, {}, {
      default: () => `<p>Yes! Gitpod is always for free for public repositories for up to 50h per
      month. If you need more hours or would like to unlock more features, you
      can upgrade your subscription at any time. If you\u2019re a professional
      open-source developer and need more hours, you can apply to our free <a href="${"/docs/professional-open-source"}">Professional Open Source plan</a>.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {
      title: "Do you offer discounts for students and educational institutions?"
    }, {}, {
      default: () => `<p>Yes, qualified educational institutions may receive a special discount.
      Please
      <a href="${"/contact"}">Contact us</a>. If you are a student, you may use the
      Student Unlimited Plan for ${escape(isEurope() ? "\u20AC8" : "$9")} per month (usually${escape(" ")}

      ${escape(isEurope() ? "\u20AC35" : "$39")}). See
      <a href="${"#plans"}">Gitpod for Students</a> for more information.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "How can I pay?"}, {}, {
      default: () => `<p>All our plans can only be paid via credit card.</p>
    <div class="${"images svelte-11diu2x"}"><img src="${"/svg/brands/mastercard.svg"}" alt="${"Mastercard"}" width="${"52"}" height="${"40"}" class="${"svelte-11diu2x"}">
      <img src="${"/svg/brands/visa.svg"}" alt="${"Visa"}" width="${"72"}" height="${"40"}" class="${"svelte-11diu2x"}"></div>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "Can I create a team account?"}, {}, {
      default: () => `<p>Sure, if you would like to mange subscriptions for a whole team on a
      single invoice, you can create a${escape(" ")}
      <a href="${"https://gitpod.io/teams/"}">team subscription.</a></p>
    <p>In case you need more information on how to setup a team subscription,
      visit${escape(" ")}
      <a href="${"/docs/teams"}">gitpod.io/docs/teams.</a></p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {
      title: "Can I change my subscription at any time?"
    }, {}, {
      default: () => `<p>Yes, you can upgrade or downgrade whenever you want on <a href="${"https://gitpod.io/subscription/"}">gitpod.io/subscription</a>. Your billing cycle starts with the creation date of your subscription.
      After 30 days it will automatically renew itself.
    </p>
    <p>If you choose to upgrade, the pricing difference will be added to your
      next month\u2019s invoice. If you choose to downgrade, you\u2019ll be credited on
      your next month\u2019s invoice.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "What if I decide to cancel?"}, {}, {
      default: () => `<p>If you wish to stop using Gitpod, you may cancel your subscription at any
      time. Your cancellation will take into effect after that month\u2019s billing
      cycle.
    </p>`
    })}
  ${validate_component(Faq, "Faq").$$render($$result, {title: "Still have more questions?"}, {}, {
      default: () => `<p>We are happy to answer them, please <a href="${"/contact"}">Get in Touch</a>.
    </p>`
    })}`
  })}`;
});
var otherPlans_svelte = "h2.svelte-1oj6x7j{text-align:center;text-transform:capitalize}.plan.svelte-1oj6x7j{display:flex;padding:var(--small) var(--xx-small) var(--small);border-bottom:1px solid var(--divider)}@media(max-width:768px){.plan.svelte-1oj6x7j{flex-direction:column}}.plan__header.svelte-1oj6x7j{flex:0 0 35%}.plan__body.svelte-1oj6x7j{flex:1}.plan__body.svelte-1oj6x7j strong{color:var(--black)}p.svelte-1oj6x7j:not(:last-of-type){margin-bottom:var(--xx-small)}.btn-cta.svelte-1oj6x7j{margin-top:var(--small)}";
const css$e = {
  code: "h2.svelte-1oj6x7j{text-align:center;text-transform:capitalize}.plan.svelte-1oj6x7j{display:flex;padding:var(--small) var(--xx-small) var(--small);border-bottom:1px solid var(--divider)}@media(max-width:768px){.plan.svelte-1oj6x7j{flex-direction:column}}.plan__header.svelte-1oj6x7j{flex:0 0 35%}.plan__body.svelte-1oj6x7j{flex:1}.plan__body.svelte-1oj6x7j strong{color:var(--black)}p.svelte-1oj6x7j:not(:last-of-type){margin-bottom:var(--xx-small)}.btn-cta.svelte-1oj6x7j{margin-top:var(--small)}",
  map: '{"version":3,"file":"other-plans.svelte","sources":["other-plans.svelte"],"sourcesContent":["<script>\\n  import Section from \\"../section.svelte\\";\\n\\n  export let otherPlans;\\n</script>\\n\\n<style lang=\\"scss\\">h2{text-align:center;text-transform:capitalize}.plan{display:flex;padding:var(--small) var(--xx-small) var(--small);border-bottom:1px solid var(--divider)}@media (max-width:768px){.plan{flex-direction:column}}.plan__header{flex:0 0 35%}.plan__body{flex:1}.plan__body :global(strong){color:var(--black)}p:not(:last-of-type){margin-bottom:var(--xx-small)}.btn-cta{margin-top:var(--small)}</style>\\n\\n<Section>\\n  <h2 class=\\"h1\\">Open source, self hosting, and students</h2>\\n  <div class=\\"plans\\">\\n    {#each otherPlans as p}\\n      <div class=\\"plan divider\\">\\n        <div class=\\"plan__header\\">\\n          <h3 class=\\"h4\\">{p.title}</h3>\\n        </div>\\n        <div class=\\"plan__body\\">\\n          {#each p.paragraphs as para}\\n            <p>{@html para}</p>\\n          {/each}\\n          <a href={p.btnHref} class=\\"btn-cta\\">{p.btnText}</a>\\n        </div>\\n      </div>\\n    {/each}\\n  </div>\\n</Section>\\n"],"names":[],"mappings":"AAMmB,iBAAE,CAAC,WAAW,MAAM,CAAC,eAAe,UAAU,CAAC,oBAAK,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,cAAc,GAAG,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,oBAAK,CAAC,eAAe,MAAM,CAAC,CAAC,4BAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,0BAAW,CAAC,KAAK,CAAC,CAAC,0BAAW,CAAC,AAAQ,MAAM,AAAC,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,gBAAC,KAAK,aAAa,CAAC,CAAC,cAAc,IAAI,UAAU,CAAC,CAAC,uBAAQ,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC"}'
};
const Other_plans = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {otherPlans: otherPlans2} = $$props;
  if ($$props.otherPlans === void 0 && $$bindings.otherPlans && otherPlans2 !== void 0)
    $$bindings.otherPlans(otherPlans2);
  $$result.css.add(css$e);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h2 class="${"h1 svelte-1oj6x7j"}">Open source, self hosting, and students</h2>
  <div class="${"plans"}">${each(otherPlans2, (p) => `<div class="${"plan divider svelte-1oj6x7j"}"><div class="${"plan__header svelte-1oj6x7j"}"><h3 class="${"h4"}">${escape(p.title)}</h3></div>
        <div class="${"plan__body svelte-1oj6x7j"}">${each(p.paragraphs, (para) => `<p class="${"svelte-1oj6x7j"}">${para}</p>`)}
          <a${add_attribute("href", p.btnHref, 0)} class="${"btn-cta svelte-1oj6x7j"}">${escape(p.btnText)}</a></div>
      </div>`)}</div>`
  })}`;
});
const pricingPlans = [
  {
    title: "Open Source",
    price: "Free",
    features: ["50 hours/month", "Public Repos", "Private Repos 30d Trial"],
    btnText: "Try Now",
    btnHref: "/#get-started"
  },
  {
    title: "Personal",
    price: isEurope() ? "\u20AC8" : "$9",
    duration: "Per User/Month",
    features: [
      "100 hours/month",
      "Private & Public Repos",
      "4 Parallel Workspaces",
      "30min Timeout"
    ],
    btnText: "Buy Now",
    btnHref: "https://gitpod.io/plans"
  },
  {
    title: "Professional",
    price: isEurope() ? "\u20AC23" : "$25",
    duration: "Per User/Month",
    features: [
      "All in Personal",
      "8 Parallel Workspaces",
      "Unlimited Hours",
      "Teams"
    ],
    btnText: "Buy Now",
    btnHref: "https://gitpod.io/plans",
    spiced: true
  },
  {
    title: "Unleashed",
    price: isEurope() ? "\u20AC35" : "$39",
    duration: "Per User/Month",
    features: [
      "All in Professional",
      "16 Parallel Workspaces",
      "1hr Timeout",
      "3hr Timeout boost"
    ],
    btnText: "Buy Now",
    btnHref: "https://gitpod.io/plans"
  }
];
const otherPlans = [
  {
    title: "Pro Open Source",
    paragraphs: [
      "If you're a professional open-source developer and need more hours, you can apply to our free Professional Open Source plan.",
      "Get free, <strong>unlimited hours</strong> on any <strong>public repository</strong> when you meet the <a href='/docs/professional-open-source#who-is-eligible'>requirements.</a>"
    ],
    btnText: "Apply now",
    btnHref: "/contact"
  },
  {
    title: "Self Hosted",
    paragraphs: [
      "Gitpod self-hosted is the best solution for teams who want to keep full data control or use Gitpod in private networks.",
      "Install Gitpod Self-Hosted on <strong>Google Cloud Platform</strong> and <strong>K3s</strong>."
    ],
    btnText: "Learn more",
    btnHref: "/self-hosted"
  },
  {
    title: "Student",
    paragraphs: [
      `For those still learning the ropes, you can get our student plan for <strong>${isEurope() ? "\u20AC8" : "$9"} per month.</strong>`,
      `
      To get it, just follow these steps:
      <ul class="list-disc list-inside">
      <li>Log-in with a free Gitpod account.</li>
      <li>Make sure that the primary email address of the GitHub/GitLab/Bitbucket account you use in Gitpod is from a domain of your educational institution.</li>
      <li>Go to the <a href="https://gitpod.io/plans">Plans</a> page and select the <em>Student Unlimited Plan</em>.</li>
      <li>If it doesn't appear, please <a href="/contact">contact us</a> to register your educational email domain.</li>
      </ul>`
    ],
    btnText: "Check now",
    btnHref: "https://gitpod.io/plans"
  }
];
var plansAndPricing_svelte = "h1.svelte-1idb770{text-align:center}";
const css$d = {
  code: "h1.svelte-1idb770{text-align:center}",
  map: '{"version":3,"file":"plans-and-pricing.svelte","sources":["plans-and-pricing.svelte"],"sourcesContent":["<script>\\n  import { pricingPlans } from \\"../../contents/pricing\\";\\n  import Section from \\"../section.svelte\\";\\n  import PricingBoxes from \\"./pricing-boxes.svelte\\";\\n</script>\\n\\n<style>h1{text-align:center}</style>\\n\\n<Section>\\n  <h1>Plans and pricing</h1>\\n  <PricingBoxes {pricingPlans} />\\n</Section>\\n"],"names":[],"mappings":"AAMO,iBAAE,CAAC,WAAW,MAAM,CAAC"}'
};
const Plans_and_pricing = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$d);
  return `${validate_component(Section, "Section").$$render($$result, {}, {}, {
    default: () => `<h1 class="${"svelte-1idb770"}">Plans and pricing</h1>
  ${validate_component(Pricing_boxes, "PricingBoxes").$$render($$result, {pricingPlans}, {}, {})}`
  })}`;
});
const prerender$2w = true;
const Pricing = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod is free for Open Source, and offers productive features for you, your team and your business at reasonable prices.",
      title: "Pricing"
    }
  }, {}, {})}
${validate_component(Plans_and_pricing, "PlansAndPricing").$$render($$result, {}, {}, {})}
${validate_component(Other_plans, "OtherPlans").$$render($$result, {otherPlans}, {}, {})}
${validate_component(Faqs, "Faqs").$$render($$result, {}, {}, {})}
${validate_component(Explore, "Explore").$$render($$result, {}, {}, {})}`;
});
var pricing = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Pricing,
  prerender: prerender$2w
});
const prerender$2v = true;
const Privacy = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod's privacy policy.",
      title: "Privacy"
    }
  }, {}, {})}
<article class="${"text-blob"}"><h1>Privacy Policy</h1>

  <p>Below we provide you with an overview of what data we collect for what
    purpose and how we ensure the protection of the data <a href="${"#short"}">in short</a>
    and
    <a href="${"#detailed"}">in a more detailed form</a></p>

  <p>The controller is Gitpod GmbH, Am Germaniahafen 1, 24143 Kiel/Germany,
    registered with the commercial register of the local court (Amtsgericht)
    Kiel under HRB 22228, represented by the managing directors Sven Efftinge,
    Moritz Eysholdt, Dr. Jan K\xF6hnlein (<strong>&quot;we/us/our&quot;</strong> or
    <strong>&quot;Gitpod&quot;</strong>). We offer services to our users and visitors (the
    <strong>&quot;User/you/your&quot;</strong>) on our website
    <a href="${"/"}">https://gitpod.io</a>
    (<strong>&quot;Website&quot;</strong>) as well as related services including the use
    of our service according to our <a href="${"/terms"}">terms of service</a>
    (jointly the <strong>&quot;Service&quot;</strong>).
  </p>
  <p>For any questions about data protection you may contact us via <a href="${"mailto:data@gitpod.io"}">data@gitpod.io</a></p>
  <h2 id="${"short"}">In Short</h2>

  <ul><li><h3>Controller</h3>
      <p>Gitpod GmbH<br> Am Germaniahafen 1, 24143 Kiel/Germany<br>
        registered with the commercial register of the local court
        <em>(Amtsgericht)</em>
        Kiel under HRB 22228<br> represented by the managing directors Sven
        Efftinge, Moritz Eysholdt, Dr. Jan K\xF6hnlein <br> Email: contact@gitpod.io
      </p>
      <p>We have appointed a data protection officer who may be contacted via <a href="${"mailto:data@gitpod.io"}">data@gitpod.io</a></p>
      <p>This privacy policy also contains further data controllers.</p></li>
    <li><h3>Purpose and Legal Basis of Processing Data; Provision and Recipients of
        Data
      </h3>
      <p>Your data will be used for the following purposes:</p>
      <ul><li>to provide the functioning Website,</li>
        <li>to implement this privacy policy and carrying out the contractual
          relationship and our Service,
        </li>
        <li>to analyze your use of our Service and improve our Service with our
          legitimate interests of marketing and fraud prevention,
        </li>
        <li>to provide and analyze our pages on Social Media,</li>
        <li>to act according to our legal obligations, or</li>
        <li>as otherwise explained in this privacy policy or by any communication
          by us.
        </li></ul>
      <p>Furthermore, your data will be processed by us with your explicit
        consent.
      </p>
      <p>Applicable legal provisions are in particular those of the regulation
        (EU) 2016/679 of the European Parliament and Council of 27 April 2016,
        repealing the directive 95/46/EC, on the protection of individuals with
        regard to the processing of personal data, on the free movement of such
        data (&quot;General Data Protection Regulation&quot;, GDPR) as well as in the
        Federal Data Protection Act <em>(Bundesdatenschutzgesetz, BDSG)</em> and
        the German Telemedia Act <em>(Telemediengesetz, TMG) </em>.
      </p>
      <p>We as well as our external service partners receive your data for
        processing those for the purpose of providing our Service. You provide
        data if this is necessary for the aforementioned purposes. In the event
        you refrain from providing such data you may face legal disadvantages,
        for example, limited or no possibility of using our Service.
      </p></li>
    <li><h3>Transfer of Data outside of the EU</h3>
      <p>In course of data processing by us data may be transferred to third
        countries, i.e. countries outside the EU. This may happen via
        implementation of third party providers such as cloud services and
        external service partners which process data on our behalf.
      </p></li>
    <li><h3>Your Rights</h3>
      <p>You have the right to withdraw your consent relating to the use of data
        any time with effect for the future when such data processing is based
        in your consent.
      </p>
      <p>You are entitled to access the data stored by us and are also entitled
        to amend or rectify your data if such data are incorrect.
      </p>
      <p>You have the right to object to the processing of your personal data,
        for example if your personal data are processed for direct marketing
        purposes.
      </p>
      <p>You are entitled to request the erasure of your data.</p>
      <p>You are entitled to receive information about the stored data (in a
        structured, current and machine-readable format) at any time and to
        request the correction or deletion of the data in case of incorrect data
        storage.
      </p>
      <p>You have also the right to lodge a complaint with a supervisory
        authority at your choice. An overview of the European National Data
        Protection Authorities may be found here:
        http://ec.europa.eu/newsroom/article29/item-detail.cfm?item_id=612080<br></p></li>
    <li><h3>Period for Storing Data; Deletion</h3>
      <p>The data are deleted if such data are no longer necessary for the
        purpose of processing.
      </p></li>
    <li><h3>Data Security</h3>
      <p>We have implemented measures to ensure data and IT security. The Website
        is operated through a safe SSL-connection. If an SSL-connection is
        activated third parties are prevented from reading any data that are
        transferred by you to us.
      </p></li></ul>

  <h2 id="${"detailed"}">More Detailed Information</h2>

  <ol type="${"I"}"><li><a href="${"#details-I"}">What are Personal Data?</a></li>
    <li><a href="${"#details-II"}">How are my Data processed when visiting the Website and contacting us?</a></li>
    <li><a href="${"#details-III"}">What Third Party Services, Cookies, Analytics and Social Plugins does
        the Website use?</a></li>
    <li><a href="${"#details-IV"}">IV: How are my data processed when using the Gitpod Service (with User
        Account)?</a></li>
    <li><a href="${"#details-V"}">V: How are Data processed when visiting our Social Media pages?</a></li>
    <li><a href="${"#details-VI"}">Are my Data transferred to Third Parties? Does automated decision
        making including profiling take place?</a></li>
    <li><a href="${"#details-VII"}">Are my Data transferred outside the EU?</a></li>
    <li><a href="${"#details-VIII"}">Your Rights</a></li>
    <li><a href="${"#details-IX"}">Duration of Storing your Data; Data Security; Access and Changes to
        this Privacy Policy; Contact Details</a></li></ol>
  <ol type="${"I"}" class="${"toc"}"><li><h2 id="${"details-I"}">What are Personal Data?</h2>
      <p>Personal data are any information relating to an identified or
        identifiable natural person. Personal data includes e.g. name, email
        address or telephone number. Personal data also includes information
        about hobbies, memberships or websites viewed. We will only collect, use
        and/or pass on personal data if this is permitted by law or if the User
        consents to the data processing.
      </p></li>
    <li><h2 id="${"details-II"}">How are my Data processed when visiting the Website and contacting us?
      </h2>
      <h3>Visiting the Website</h3>
      <p>If you browse our Website the provider of the website collects and
        stores information automatically in so-called &quot;server-log-files&quot; that
        your browser transfers to us. These are:
        <em>type/version of the browser, system software used, referrer URL,
          hostname of the device, time of the server request, IP-address or
          other unique device identifier.
        </em></p>

      <p>If you are using a mobile device the following data may also be
        processed additionally through the Website:
        <em>country code, language, hostname of the device, name and version of
          the operational system.
        </em></p>

      <p>We use these data only for statistical analysis for the purpose of
        operation, security and optimization of our Website. This data
        processing is based on Art. 6 (1) c. for providing a secure and stable
        Website and Service. The data processing may also be based on Art. 6 (1)
        f. GDPR or TMG and we wish to achieve the legitimate interests of
        stabilizing and improving our Website, quality insurance and fraud
        prevention.
      </p>

      <h3>Contacting us</h3>
      <p>When contacting us via email, the User\u2019s details are stored for the
        purpose of processing the enquiry and, if applicable, follow-up
        questions based on your consent based on the legal basis of Art. 6 (1)
        a. GDPR or fulfilling your request based on Art. 6 (1) b. GDPR.
      </p>

      <h3>Emails and Newsletters</h3>
      <p>With the newsletter we inform the user about the Website, our Service
        and us.
      </p>

      <p>When registering for the newsletter via the Website, you have to provide
        an email address. This email address will be transmitted to and stored
        by us (or a provider as specified below). After registration, you will
        receive an email to confirm the registration (&quot;double opt-in&quot;). Via
        clicking the registration link you have given your consent to the
        processing of your personal data for receiving our newsletter and
        analyzing such newsletters according to Art. 6 (1) a. GDPR and we may
        process such data accordingly. In case of registration for the
        newsletter we (or our provider as specified below) also store the IP
        address, the device name, the mail provider as well as the user&#39;s first
        and last name and the date of registration.
      </p>

      <p>We may also send you newsletters referring to similar services and
        products if you have an existing contractual relationship with us and
        you did not object receiving such emails. The legal basis for such
        processing of data for sending and analyzing such newsletters is your
        consent (Art. 6 (1) a. GDPR) or an existing contractual relationship
        (Art. 6 (1) b. GDPR).
      </p>

      <p id="${"mailchimp"}"><strong>Use of Mailchimp: </strong>
        The mail provider <strong>&quot;Mailchimp&quot;</strong> by Rocket Science Group LLC,
        675 Ponce De Leon Ave NE, Suite 5000, Atlanta, GA 30308, USA receives and
        processes on our behalf the data necessary for the emails and newsletters,
        in particular email address, IP address, device name. These data are processed
        on servers in the USA. Mailchimp is certified according to &quot;privacy shield&quot;.
        The &quot;privacy shield&quot; is an agreement between the European Union (EU) and
        the USA to ensure compliance with European data protection standards in the
        USA. Mailchimp is a service with which the dispatch of newsletters can be
        organized and analyzed. With the help of Mailchimp we can analyze our newsletter
        campaigns. When you open an e-mail sent with Mailchimp, a file contained
        in the e-mail (so-called web beacon) connects to the Mailchimp servers in
        the USA. This allows you to determine whether a newsletter message has been
        opened and which links have been clicked on. In addition, technical information
        is recorded (e.g. time of registration, IP address, browser type and operating
        system). This information cannot be assigned to the respective newsletter
        recipient. They are used exclusively for statistical analysis of newsletter
        campaigns. The results of these analyses can be used to better adapt future
        newsletters to the interests of the recipients. Details on Mailchimp and
        its privacy policy can be found here: https://mailchimp.com/legal/privacy/
      </p>

      <p>The data are stored for the purpose of newsletter subscription will be
        stored by us until you unsubscribe from the newsletter and will be
        deleted from our servers as well as from the servers of Mailchimp after
        you unsubscribe from the newsletter. Data stored by us for other
        purposes (e.g. email address for the use of our Service) remain
        unaffected.
      </p>

      <p><strong>You can withdraw your consent or object to the processing of data
          (email address) and their respective use for sending the newsletter
          and analyzing your data at any time.</strong> This can be done free of charge (except for the transmission costs) and
        via a link in the newsletter itself or notification to us or, if applicable,
        to Mailchimp.
      </p></li>
    <li><h2 id="${"details-III"}">What Third Party Services, Cookies, Analytics and Social Plugins does
        the Website use?
      </h2>

      <h3>Cookies</h3>
      <p>In order to offer you a convenient online service featuring numerous
        functions, our Website uses text files (<strong>&quot;Cookies&quot;</strong>)
        containing information to identify returning visitors for the time of
        their visit to our Website. Cookies are usually saved on your device and
        do not cause any harm. Cookies facilitate the transfer of specific
        content, such as entering data, which has already been supplied, and
        help us identify popular sections of our Website.
      </p>

      <p>The processing of data when using Cookies is based on our legitimate
        interests of a statistical analysis of the User relationship for
        marketing and quality assurance purposes according to Art. 6 (1) f. GDPR
        or TMG.
      </p>

      <p><strong>OPT-OUT:</strong> You can deactivate the use of Cookies in the settings
        of your browser at any time. To find out how to change the settings, please
        consult the help function of your browser. Users may also manage a lot of
        online Cookies by different businesses on the US-website http://www.aboutads.info/choices/
        or the EU-website http://www.youronlinechoices.com/uk/your-ad-choices/. However,
        we want to point out that without Cookies the use and comfort of use of our
        services may be restricted.
      </p>

      <h3>Google Analytics</h3>
      <p>We use Google Analytics a web analytics tool offered by Google (inter
        alia Google Ireland Limited, Gordon House, Barrow Street, Dublin 4,
        Ireland and Google LLC, Mountain View, CA, USA (<strong>&quot;Google&quot;</strong>). This analysis service uses so-called &quot;cookies&quot;. For analysis, text
        files will be stored on your device. The information stored in the
        corresponding files about the use of this website are generally
        transmitted and stored in Google server in the USA. As the IP
        anonymization is active on this Website, your IP address will be
        shortened by Google within the member states of the European Union (EU).
        This information will be used to evaluate your use of the services
        offered here and enable the operator of this website to analyze your
        website activity and provide other services associated with the website
        service. The IP address transmitted from your browser, as part of Google
        Analytics will not be merged with other data from Google.
      </p>

      <p>When the IP address is processed this is based on our legitimate
        interests of a statistical analysis of the relationship for marketing
        and quality assurance purposes according to Art. 6 (1) f. GDPR or TMG.
      </p>

      <p>Adjusting the settings of your browser can prevent the use of cookies.
        In this case, it may be possible that the functions of the service
        offered here cannot be used in its entirety. Furthermore, it is possible
        to prevent the acquisition and processing of data generated by the
        &quot;cookies&quot; in relation to the use of this website, by downloading and
        installing the browser plugin available at the following link: <a href="${"https://tools.google.com/dlpage/gaoptout?hl=de"}">https://tools.google.com/dlpage/gaoptout?hl=de</a></p>

      <p>We point out that an <a href="${"#details-VI"}">automated decision making or profiling</a> can take place when integrating Google or an existing Google account.
      </p>
      <p>For Users who have their usual residence in the European Economic Area
        or Switzerland, Google Ireland Limited is the data controller for your
        data, unless otherwise stated in the privacy notices of a particular
        service. Google Ireland Limited is therefore the company affiliated with
        Google which is responsible for processing your data and complying with
        applicable data protection laws.
      </p>
      <p>You can also find more information in Google&#39;s privacy policy <a href="${"https://policies.google.com/privacy"}">https://policies.google.com/privacy</a></p>

      <h3>Google Fonts</h3>
      <p>Our Website uses the <strong>&quot;Google Fonts&quot;</strong> service of Google (inter
        alia Google Ireland Limited, Gordon House, Barrow Street, Dublin 4, Ireland
        and Google LLC, Mountain View, CA, USA to integrate and display text on the
        website. For this purpose Google may process your data (including the IP
        address) on servers in the USA.
      </p>

      <p>When the IP address is processed this is based on our legitimate
        interests of technical functionality of the Website based on Art. 6 (1)
        f. GDPR or TMG.
      </p>
      <p>For Users who have their usual residence in the European Economic Area
        or Switzerland, Google Ireland Limited is the data controller for your
        data, unless otherwise stated in the privacy notices of a particular
        service. Google Ireland Limited is therefore the company affiliated with
        Google which is responsible for processing your data and complying with
        applicable data protection laws.
      </p>
      <p>You can also find more information in Google&#39;s privacy policy: <a href="${"https://policies.google.com/privacy"}">https://policies.google.com/privacy</a></p>

      <h3>Mailchimp</h3>
      <p>We use the services by Mailchimp for sending newsletters and emails. For
        details on Mailchimp please refer to the
        <a href="${"#mailchimp"}">respective section above</a></p>

      <h3 id="${"youtube"}">Youtube</h3>
      <p>We use the YouTube.com platform to [post our own videos and] make them
        publicly available. YouTube is operated by Google (inter alia Youtube
        LLC, USA and Google Ireland Limited, Gordon House, Barrow Street, Dublin
        4, Ireland).
      </p>

      <p>Some of our Website contain links to the YouTube platform. In general,
        we are not responsible for the content of websites to which links are
        provided. In the event that you click a link on YouTube, we would like
        to point out that YouTube stores the data of its users (e.g. personal
        information, IP address) in accordance with its own privacy guidelines
        and uses them for business purposes.
      </p>
      <p>On our Website we also integrate videos stored on YouTube directly. In
        this integration, content from the YouTube website is displayed in
        sub-areas of a browser window. However, YouTube videos are only accessed
        by clicking on them separately. This technique is also called \u2018framing\u2019.
        If you click on a (sub-)page of our Website where YouTube videos are
        included, a connection is established to the YouTube servers and the
        content is displayed on the Website by notifying your browser.
      </p>
      <p>YouTube content is only integrated in the \u2018extended data protection
        mode\u2019. YouTube provides this by itself, thereby ensuring that YouTube
        does not initially store any cookies on your device. However, when you
        access the relevant pages, the IP address and the other data are
        processed by Youtube. However, this information cannot be assigned to
        you unless you log in your YouTube or another Google service (e.g.
        Gmail) account or are permanently registered before accessing the site.
      </p>
      <p>As soon as you click on an integrated video, YouTube only stores cookies
        on your device that do not contain any personally identifiable data,
        unless you are currently logged in to a Google service. These cookies
        can be prevented by appropriate browser settings and extensions (see
        above [add link to opt-out in the \u201CCookies\u201D section above].
      </p>
      <p>For Users who have their usual residence in the European Economic Area
        or Switzerland, Google Ireland Limited is the data controller for your
        data, unless otherwise stated in the privacy notices of a particular
        service. Google Ireland Limited is therefore the company affiliated with
        Google which is responsible for processing your data and complying with
        applicable data protection laws.
      </p>
      <p>Further information about data processing and privacy practices of
        YouTube and Google can be found at
        www.google.de/intl/de/policies/privacy/ and
        https://support.google.com/youtube/answer/171780?hl=e
      </p></li>
    <li><h2 id="${"details-IV"}">How are my Data processed when using the Gitpod Service (with User
        Account)?
      </h2>

      <h3>Registration and Access to Existing Account</h3>
      <p>In order to fully use our full online Service, you will need to
        register. You may only register if you have an existing user account at
        the third party services set forth on the Website, for example the
        service offered on the website https://github.com operated by GitHub
        Inc., 88 Colin P Kelly Jr St, San Francisco, CA 94107, USA, (<strong>&quot;Existing Account&quot;</strong>).
      </p>

      <p>When you sign up for using the Gitpod Service via your Existing Account,
        data at such Existing Account with be accessible by us with your
        explicit consent only. Such data include:
        <em>user profile data (name, username and email address), list of
          repositories you have access to.</em></p>

      <p>You can manage these data at any time via using your Existing Account
        linked to the Gitpod Service.
      </p>

      <p>The data entered or transferred via the Existing Account as part of the
        registration process and any further data entered, will only be used via
        the Website and with our support to the extent that this processing is
        necessary for the fulfillment of a contract with us or for the
        implementation of pre-contractual measures, i.e. use of the Gitpod
        Service, as well as for the execution and processing of inquiries by
        you.
      </p>

      <p>The processing of data when using our Service is generally based on your
        explicit consent when signing up (based on Art. 6 (1) a. GDPR) as well
        as the legal basis of Art. 6 (1) b. GDPR or TMG, i.e. the data will be
        processed, when this is necessary for the fulfillment of the contract
        between you and us or for executing any measures that take place on your
        request prior to the contract.
      </p>

      <h3>Use of the Gitpod Service</h3>
      <p>For the further use of the Gitpod Service on the Website you submit more
        data depending on the way of use of our services according to our <a href="${"/terms"}">terms of service</a></p>

      <p>We use the information and data collected in the Service, including your
        personal data, in order to fulfill our contractual obligations for
        you/our customers based on the legal basis of Art. 6 (1) b. GDPR or TMG
        and as further set forth in this privacy policy or our <a href="${"/terms"}">terms of service</a>This also includes sending you emails and notifications necessary for
        the Service.
      </p>

      <p>In the event we process personal data controlled by the customer as data
        processor we will offer and enter into a respective separate data
        processing agreement with such customer whereas such data processing
        agreement may be requested via email to
        <a href="${"mailto:data@gitpod.io"}">data@gitpod.io</a>.
      </p>

      <p>We do not store or receive any kind of payment or credit card data but
        use external payment providers as set forth on the Website.
      </p>

      <p>We may also analyze your personal data when using the Gitpod Service for
        the purpose of improving our Service. We may also store your data to
        assure fair use of our Service. The legal basis for analyzing and
        storing such data is Art. 6 (1) f. GDPR with our legitimate interest of
        marketing, quality assurance and fraud prevention.
      </p>
      <p>We also process your data if this is necessary to comply with our legal
        obligations (legal basis: Art. 6 (1) c. GDPR), for example legal
        retention periods.
      </p>
      <p>For the abovementioned purposes your data may also be shared with our
        shareholders or affiliated companies.
      </p>
      <h3>Integration of Third Party Services</h3>
      <p>When using the Gitpod Service your data may also be processed by third
        party providers as set forth in this privacy policy, for example <a href="${"#freshchat"}">FreshChat</a>For details please refer to <a href="${"#details-III"}">III</a> above as
        well as
        <a href="${"#details-VI"}">VI</a>
        and <a href="${"#details-VII"}">VIII</a> below.
      </p>

      <p>When using our paid Service your data will be processed by external
        payment providers. Currently we use the payment services by Stripe (for
        EU/EEA: Stripe Payments Europe, Ltd., 1 Grand Canal Street Lower, Grand
        Canal Dock, Dublin, Irland; more information:
        https://stripe.com/de/privacy ; contact: https://stripe.com/contact) and
        Chargebee (by Chargebee Inc. 340 S Lemon Avenue, 1537 Walnut, CA 91789,
        USA; more information: https://www.chargebee.com/privacy/ ). When using
        such services your data may be processed outside the EU. The US
        companies of Stripe and Chargebee are each certified according to
        \u2018Privacy Shield\u2019 to comply with data protection standards applicable in
        the EU (for more information please refer to:
        https://www.privacyshield.gov/ ).
      </p>
      <p>Our service may also include links to pages on Twitter, Medium, Spectrum
        Chat/Github). For details please refer to V. below [add link to V.].
      </p></li>
    <li><h2 id="${"details-V"}">How are Data processed when visiting our Social Media pages?
      </h2>
      <p>We operate pages on</p>
      <ul><li>Twitter (twitter.com or applications) by Twitter Inc., 1355 Market
          Street, Suite 900, San Francisco, CA 94103, USA, please also refer to:
          https://twitter.com/de/privacy / https://twitter.com/personalization;
        </li>
        <li>Medium (medium.com or applications) by A Medium Corporation, 799
          Market Street, 5th Floor, San Francisco, CA 94103, USA, please also
          refer to: https://medium.com/policy/medium-privacy-policy-f03bf92035c
          / https://medium.com/me/settings /
          https://medium.com/me/following/suggestions
        </li>
        <li>Spectrum Chat (spectrum.chat or applications) by GitHub Inc., 88 Colin
          P Kelly Jr St, San Francisco, CA 94107, USA, please also refer to:
          https://spectrum.chat/privacy.html
        </li></ul>
      <p>When you visit our Social Media pages, data is processed both by us and
        by the responsible social media provider.
      </p>
      <p>The respective provider of Social Media assumes the data protection
        obligations towards you as the user, such as information on data
        processing, and is the contact person for your rights. This results from
        the fact that such provider has direct access to the relevant
        information on the Social Media page and the processing of your data.
        However, you are also welcome to contact us if this should become
        necessary and we will then forward the request to the respective
        provider if necessary.
      </p>
      <p>When using the Social Media providers set forth above data may also be
        processed outside the EU. The US companies of Github and Twitter are
        certified in accordance with the EU-US Privacy Shield agreement, which
        guarantees compliance with data protection regulations in the EU. For
        more information please refer to their respective privacy policies or
        https://www.privacyshield.gov . By using Medium Services, you authorize
        Medium to transfer, store, and use your information in the United States
        and any other country where Medium operates. Where your data is
        disclosed to Medium\u2019s processors, it is subject by contract to at least
        the same level of data protection as that set forth under
        https://medium.com/policy/medium-privacy-policy-f03bf92035c9.
      </p>
      <p>With our Social Media pages, we can communicate with you and provide you
        with interesting information. We may receive further data from you
        through your comments, shared images, messages and reactions, which are
        then processed to answer or communicate with you. If you use Social
        Media on several end devices, a cross-device analysis of the data can
        take place. Furthermore, the providers of the Social Media pages may
        also use cookies and tracking technologies to analyze and improve their
        services.
      </p>
      <p>Data processing takes place with your consent or for the purpose of
        answering your enquiry (Art. 6 (1) a, b GDPR) or on the basis of
        legitimate interests in improving the services, advertising and
        marketing activities and presentation to the outside world (Art. 6 (1) f
        GDPR).
      </p>
      <p>As Twitter user, you can at any time influence how your user behavior is
        recorded when you visit Twitter pages. To do this, you can manage the
        settings for advertising preferences in your Twitter account or under
        https://twitter.com/personalization or
        https://twitter.com/de/privacy#overlay-chapter2.10.1 or without an
        account under https://pscp.tv/account/settings. Twitter also provides
        opportunities to contact or exercise rights at
        https://help.twitter.com/forms/privacy.
      </p>
      <p>As Medium user, you can at any time influence how your user behavior is
        recorded when you visit Medium pages. To do this, you can manage the
        settings for advertising preferences in your Medium account or under
        https://medium.com/me/settings or
        https://medium.com/me/following/suggestions. Medium also provides
        opportunities to contact or exercise rights in their privacy policy
        under https://medium.com/policy/medium-privacy- policy-f03bf92035c9.
      </p>
      <p>As a user of Spectrum Chat / Github you can find more information on how
        to influence the processing of your data in their privacy policy
        https://spectrum.chat/privacy.html or contact them via
        help@spectrum.chat.
      </p></li>
    <li><h2 id="${"details-VI"}">Are my Data transferred to Third Parties? Does Profiling or automated
        decision making take place?
      </h2>

      <h3>Transfer of Data to Third Parties</h3>
      <p>We will transfer your personal data to a third party only (i) within the
        scope of legal provisions, i.e. if we are obliged to transfer the data
        due to a government or court order, or, (ii) if applicable, legal
        provisions authorize the transfer, e.g. if the transfer is required to
        pursue our legitimate interests or to fulfil a contract, for example in
        case of mergers and acquisitions, (iii) or if you give your explicit
        consent.
      </p>

      <p>For more information please refer to this privacy policy or contact us
        via <a href="${"mailto:data@gitpod.io"}">data@gitpod.io</a>.
      </p>

      <h3>Automated Decision Making including Profiling</h3>
      <p>In general we do not process any personal data via automated decision
        making including profiling via the Website or Service. However, such
        profiling or automated decision making may happen by third party
        providers through the Website or Service. We will inform you about such
        fact if possible.
      </p>

      <p>Profiling means any automated processing of personal data consisting in
        the use of such personal data to evaluate certain personal aspects
        relating to a natural person, in particular to analyse or predict
        aspects relating to the performance of work, economic situation, health,
        personal preferences, interests, reliability, behaviour, location or
        relocation of that natural person. Examples of such profiling include
        the analysis of data (e.g. based on statistical methods) with the aim of
        displaying personalized advertising to the user or giving shopping tips.
        The data subject shall not be subject to a decision based exclusively on
        automated processing, including profiling, which has legal effect
        against him or significantly affects him or her in a similar manner.
      </p></li>
    <li><h2 id="${"details-VII"}">Are my Data transferred outside the EU?</h2>
      <p>When visiting the Website and using our Service data may be transferred
        to countries outside the EU whereas the services by <a href="${"#google"}">Google/Youtube</a>, <a href="${"#mailchimp"}">Mailchimp</a>, <a href="${"#github"}">GitHub</a>,
        <a href="${"#chargebee"}">Chargebee</a>
        and , <a href="${"#stripe"}">Stripe</a> are affected.
      </p>

      <p>When using our Service your data may also be processed by our cloud
        service provider (namely: Google Cloud) on servers outside the EU.
      </p>

      <p>The US companies providing the services of Google, Mailchimp, GitHub,
        Stripe and Chargebee are each certified under EU-US-Privacy-Shield and
        comply with data protection standards applicable in the EU. For more
        information on EU-US-Privacy-Shield and details about the certificates
        please refer to: https://www.privacyshield.gov
      </p>
      <p>Your data may also be processed outside the EU when visiting our Social
        Media pages. For further information please refer to <a href="${"#details-V"}">section V.</a></p></li>
    <li><h2 id="${"details-VIII"}">Your Rights</h2>

      <p><strong>As a data subject you have the right:</strong></p>
      <ul><li>to withdraw your consent to us at any time. As a result, we are no
          longer allowed to continue the processing of data based on this
          consent in the future;
        </li>
        <li>to object to the processing of your personal data, if your personal
          data are processed on the basis of legitimate interests pursuant to
          Art. 6 (1) f. GDPR insofar as there are reasons for this arising from
          your particular situation;
        </li>
        <li>to obtain from us access to your personal data;</li>
        <li>to obtain from us without undue delay the rectification of inaccurate
          personal data concerning you;
        </li>
        <li>to obtain the erasure of your personal data stored with us, unless the
          processing is necessary to exercise the right to free expression of
          opinion and information, to fulfill a legal obligation, for reasons of
          public interest or to assert, exercise or defend legal claims;
        </li>
        <li>to demand the restriction of the processing of your personal data, if
          the accuracy of the data is disputed by you, the processing is
          unlawful, but you refuse its deletion and we no longer need the data,
          but you need it to assert, exercise or defend legal claims or you have
          filed an objection against the processing; and
        </li>
        <li>to receive your personal data, which you have provided to us, in a
          structured, current and machine-readable format or to request the
          transmission to another controller.
        </li></ul>

      <p>If you wish to make use of your rights mentioned above please send an
        email to <a href="${"mailto:data@gitpod.io"}">data@gitpod.io</a>.
      </p>

      <p>If you obtain access to your personal data you may, in particular,
        request access to the following information: the purposes of the
        processing, the categories of personal data concerned, the recipients or
        categories of recipients to whom the personal data have been or will be
        disclosed. We also will, if possible, give information about the
        envisaged period of time for which the personal data will be stored, the
        existence of the right to request from the controller rectification or
        erasure of personal data or restriction of processing of personal data
        concerning the data subject or to object to such processing, the right
        to lodge a complaint with a supervisory authority and where the personal
        data are not collected from the data subject, any available information
        as to their source and the existence of automated decision-making,
        including profiling and meaningful information about this event.
      </p>

      <p><strong>You have the right to lodge a complaint vis-\xE0-vis a
          supervisory authority of your choice.
        </strong>
        For example for Berlin/Germany: https://www.datenschutz-berlin.de/kontakt.html.
        An overview of the European National Data Protection Authorities may be found
        here: http://ec.europa.eu/newsroom/article29/item-detail.cfm?item_id=612080
      </p></li>
    <li><h2 id="${"details-IX"}">Duration of Storing your Data; Data Security; Access and Changes to this
        Privacy Policy; Contact Details
      </h2>

      <h3>Duration of Storing your Data</h3>
      <p>As a rule, we only store your personal data for as long as it is
        necessary for the execution of the contract or the respective purpose
        and limit the storage period to an absolutely necessary minimum. Your
        IP-address and server-log-files (as set forth above) are stored for
        seven (7) days for security and technical reasons.
      </p>

      <p>In the case of long-term contractual relationships, such as the use of
        our Service, these storage periods may vary, but are generally limited
        to the duration of the contractual relationship or, with regard to the
        inventory data, to the maximum legal retention periods, e.g. in
        accordance with the German Commercial Code <em>(Handelsgesetzbuch, HGB)</em>
        and the Tax Code
        <em>(Abgabenordnung, AO)</em></p>

      <p>Criteria for the storage period include whether the data are still
        up-to-date, whether the contractual relationship with us still exists,
        whether an inquiry has already been processed, whether a process has
        been completed or not, and whether legal retention periods for the
        personal data concerned are relevant or not.
      </p>

      <h3>Data Security</h3>
      <p>We have installed technical and organizational measures in order to
        safeguard our Website and/or Service against loss, destruction, access,
        changes or the distribution of your data by unauthorized persons.
      </p>

      <p>The Website and Service is operated through a safe SSL-connection. If an
        SSL-connection is activated third parties are prevented from reading any
        data that are transferred by you to us.
      </p>

      <h3>Access and Changes to this Privacy Policy</h3>
      <p>This privacy policy is accessible via our Website under <a href="${"/privacy"}">https://gitpod.io/privacy</a>
        and may be downloaded and printed anytime.
      </p>

      <p>We reserve the right to change the regulations of this privacy policy at
        any time, taking into account currently applicable data protection
        provisions. In case of any changes, you will be notified.
      </p>

      <h3>Contact Details</h3>
      <p>For any inquiries and additional questions about processing personal
        data please contact <a href="${"mailto:data@gitpod.io"}">data@gitpod.io</a>Further details may be found here:
        <a href="${"/imprint"}">https://gitpod.io/imprint</a>.
      </p></li></ol></article>`;
});
var privacy = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Privacy,
  prerender: prerender$2v
});
var logoAnimated_svelte = "@-webkit-keyframes svelte-6fjq9f-draw{0%{stroke-dashoffset:191.8}to{stroke-dashoffset:0}}@keyframes svelte-6fjq9f-draw{0%{stroke-dashoffset:191.8}to{stroke-dashoffset:0}}svg.svelte-6fjq9f{width:100px;height:auto;margin-bottom:var(--medium)}svg.center.svelte-6fjq9f{margin-left:auto;margin-right:auto}path.svelte-6fjq9f{stroke-dasharray:191.8 191.8;-webkit-animation-delay:0s;animation-delay:0s;-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-iteration-count:1;-webkit-animation-iteration-count:var(--iterations,1);animation-iteration-count:1;animation-iteration-count:var(--iterations,1);-webkit-animation-name:svelte-6fjq9f-draw;animation-name:svelte-6fjq9f-draw;-webkit-animation-direction:alternate;animation-direction:alternate;-webkit-animation-play-state:running;animation-play-state:running;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}";
const css$c = {
  code: "@-webkit-keyframes svelte-6fjq9f-draw{0%{stroke-dashoffset:191.8}to{stroke-dashoffset:0}}@keyframes svelte-6fjq9f-draw{0%{stroke-dashoffset:191.8}to{stroke-dashoffset:0}}svg.svelte-6fjq9f{width:100px;height:auto;margin-bottom:var(--medium)}svg.center.svelte-6fjq9f{margin-left:auto;margin-right:auto}path.svelte-6fjq9f{stroke-dasharray:191.8 191.8;-webkit-animation-delay:0s;animation-delay:0s;-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-animation-iteration-count:var(--iterations,1);animation-iteration-count:var(--iterations,1);-webkit-animation-name:svelte-6fjq9f-draw;animation-name:svelte-6fjq9f-draw;-webkit-animation-direction:alternate;animation-direction:alternate;-webkit-animation-play-state:running;animation-play-state:running;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}",
  map: '{"version":3,"file":"logo-animated.svelte","sources":["logo-animated.svelte"],"sourcesContent":["<script lang=\\"ts\\">export let iterations = 1;\\nexport let center = false;\\n</script>\\n\\n<style>@-webkit-keyframes draw{0%{stroke-dashoffset:191.8}to{stroke-dashoffset:0}}@keyframes draw{0%{stroke-dashoffset:191.8}to{stroke-dashoffset:0}}svg{width:100px;height:auto;margin-bottom:var(--medium)}svg.center{margin-left:auto;margin-right:auto}path{stroke-dasharray:191.8 191.8;-webkit-animation-delay:0s;animation-delay:0s;-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-animation-iteration-count:var(--iterations,1);animation-iteration-count:var(--iterations,1);-webkit-animation-name:draw;animation-name:draw;-webkit-animation-direction:alternate;animation-direction:alternate;-webkit-animation-play-state:running;animation-play-state:running;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}</style>\\n\\n<svg\\n  class:center\\n  style=\\"--iterations: {iterations};\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  width=\\"75.78\\"\\n  height=\\"82.55\\"\\n  viewBox=\\"0 0 75.78 82.55\\"\\n>\\n  <defs>\\n    <linearGradient\\n      id=\\"gitpod-logo-animation-paint\\"\\n      x1=\\"17\\"\\n      y1=\\"76\\"\\n      x2=\\"32\\"\\n      y2=\\"36\\"\\n      gradientUnits=\\"userSpaceOnUse\\"\\n    >\\n      <stop stop-color=\\"#FB8700\\" />\\n      <stop offset=\\"1\\" stop-color=\\"#FBB000\\" />\\n    </linearGradient>\\n  </defs>\\n  <path\\n    d=\\"M 37.89 42.29 L 62.39 28.51 A 3 3 0 0 1 65.39 28.51 A 3.05 3.05 0 0 1 66.89 31.12 L 66.89 53.56 A 9 9 0 0 1 62.339999999999996 61.38 C 62.339999999999996 61.38 46.97 70.09 42.339999999999996 72.76 A 9.09 9.09 0 0 1 33.44 72.76 L 13.440000000000001 61.38 A 8.86 8.86 0 0 1 8.89 53.56 L 8.89 31 A 9.07 9.07 0 0 1 13.44 23.2 L 38.33 9 L 38.33 9\\"\\n    fill=\\"none\\"\\n    stroke=\\"url(#gitpod-logo-animation-paint)\\"\\n    stroke-miterlimit=\\"10\\"\\n    stroke-width=\\"15.5\\"\\n    stroke-linejoin=\\"round\\"\\n    stroke-linecap=\\"round\\"\\n  />\\n</svg>\\n"],"names":[],"mappings":"AAIO,mBAAmB,kBAAI,CAAC,EAAE,CAAC,kBAAkB,KAAK,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,WAAW,kBAAI,CAAC,EAAE,CAAC,kBAAkB,KAAK,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAG,CAAC,MAAM,KAAK,CAAC,OAAO,IAAI,CAAC,cAAc,IAAI,QAAQ,CAAC,CAAC,GAAG,qBAAO,CAAC,YAAY,IAAI,CAAC,aAAa,IAAI,CAAC,kBAAI,CAAC,iBAAiB,KAAK,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,gBAAgB,EAAE,CAAC,2BAA2B,IAAI,CAAC,mBAAmB,IAAI,CAAC,kCAAkC,CAAC,CAAC,0BAA0B,CAAC,CAAC,kCAAkC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,0BAA0B,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,uBAAuB,kBAAI,CAAC,eAAe,kBAAI,CAAC,4BAA4B,SAAS,CAAC,oBAAoB,SAAS,CAAC,6BAA6B,OAAO,CAAC,qBAAqB,OAAO,CAAC,kCAAkC,WAAW,CAAC,0BAA0B,WAAW,CAAC"}'
};
const Logo_animated = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {iterations = 1} = $$props;
  let {center = false} = $$props;
  if ($$props.iterations === void 0 && $$bindings.iterations && iterations !== void 0)
    $$bindings.iterations(iterations);
  if ($$props.center === void 0 && $$bindings.center && center !== void 0)
    $$bindings.center(center);
  $$result.css.add(css$c);
  return `<svg style="${"--iterations: " + escape(iterations) + ";"}" xmlns="${"http://www.w3.org/2000/svg"}" width="${"75.78"}" height="${"82.55"}" viewBox="${"0 0 75.78 82.55"}" class="${["svelte-6fjq9f", center ? "center" : ""].join(" ").trim()}"><defs><linearGradient id="${"gitpod-logo-animation-paint"}" x1="${"17"}" y1="${"76"}" x2="${"32"}" y2="${"36"}" gradientUnits="${"userSpaceOnUse"}"><stop stop-color="${"#FB8700"}"></stop><stop offset="${"1"}" stop-color="${"#FBB000"}"></stop></linearGradient></defs><path d="${"M 37.89 42.29 L 62.39 28.51 A 3 3 0 0 1 65.39 28.51 A 3.05 3.05 0 0 1 66.89 31.12 L 66.89 53.56 A 9 9 0 0 1 62.339999999999996 61.38 C 62.339999999999996 61.38 46.97 70.09 42.339999999999996 72.76 A 9.09 9.09 0 0 1 33.44 72.76 L 13.440000000000001 61.38 A 8.86 8.86 0 0 1 8.89 53.56 L 8.89 31 A 9.07 9.07 0 0 1 13.44 23.2 L 38.33 9 L 38.33 9"}" fill="${"none"}" stroke="${"url(#gitpod-logo-animation-paint)"}" stroke-miterlimit="${"10"}" stroke-width="${"15.5"}" stroke-linejoin="${"round"}" stroke-linecap="${"round"}" class="${"svelte-6fjq9f"}"></path></svg>`;
});
var about_svelte = ".cardlike.svelte-a43r6o a.svelte-a43r6o{padding:1.5rem}.visually-hidden.svelte-a43r6o.svelte-a43r6o{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}";
const css$b = {
  code: ".cardlike.svelte-a43r6o a.svelte-a43r6o{padding:1.5rem}.visually-hidden.svelte-a43r6o.svelte-a43r6o{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}",
  map: '{"version":3,"file":"about.svelte","sources":["about.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export const prerender = true;\\n</script>\\n\\n<script lang=\\"ts\\">import Explore from \\"../components/explore.svelte\\";\\nimport LogoAnimated from \\"../components/logo-animated.svelte\\";\\nimport OpenGraph from \\"../components/open-graph.svelte\\";\\nimport { careers } from \\"../contents/careers\\";\\nconst investors = [\\n    {\\n        logo: \\"\\",\\n        imgHeight: \\"\\",\\n        imgWidth: \\"\\",\\n        name: \\"Vertex US\\",\\n        description: \\"Vertex Ventures US partners with enterprising founders who seek to disrupt large markets.\\",\\n    },\\n    {\\n        logo: \\"\\",\\n        imgHeight: \\"\\",\\n        imgWidth: \\"\\",\\n        name: \\"Crane Ventures\\",\\n        description: \\"Speedinvest is one of Europe\u2019s most active early-stage investors.\\",\\n    },\\n    {\\n        logo: \\"\\",\\n        imgHeight: \\"\\",\\n        imgWidth: \\"\\",\\n        name: \\"Ameet Patel\\",\\n        description: \\"Start your workflow from your Git hosting platform and let Gitpod beam you in a ready-to-code dev environment.\\",\\n    },\\n    {\\n        logo: \\"\\",\\n        imgHeight: \\"\\",\\n        imgWidth: \\"\\",\\n        name: \\"SpeedInvest\\",\\n        description: \\"Install any VS Code extension with one click via the integrated vendor-neutral marketplace Open VSX.\\",\\n    },\\n    {\\n        logo: \\"\\",\\n        imgHeight: \\"\\",\\n        imgWidth: \\"\\",\\n        name: \\"Hanno Renner\\",\\n        description: \\"Start your workflow from your Git hosting platform and let Gitpod beam you in a ready-to-code dev environment. \\",\\n    },\\n];\\n</script>\\n\\n<style>.cardlike a{padding:1.5rem}.visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}</style>\\n\\n<OpenGraph\\n  data={{\\n    description: \\"On a mission to make developers\' lives easier!\\",\\n    title: \\"About Gitpod\\",\\n  }}\\n/>\\n<header class=\\"tight\\">\\n  <h1 class=\\"visually-hidden\\">Gitpod</h1>\\n  <LogoAnimated center={true} iterations={1} />\\n  <p>\\n    Open source developer platform. Originally from Kiel now fully-remote from\\n    all around the globe.\\n  </p>\\n</header>\\n\\n<div class=\\"hilited redirector\\">\\n  <h2 class=\\"h4\\">\\n    Remove all friction from the developer experience to be always ready-to-code\\n    and make software engineering more collaborative, joyful, and secure.\\n  </h2>\\n</div>\\n\\n<ul class=\\"imageCarousel\\">\\n  <li>\\n    <img\\n      src=\\"/images/about/team-2.jpg\\"\\n      alt=\\"A female Gitpod team member\\"\\n      height=\\"310\\"\\n      width=\\"310\\"\\n    />\\n  </li>\\n  <li>\\n    <img\\n      src=\\"/images/about/team-3.jpg\\"\\n      alt=\\"A laptop and office chair in a tent\\"\\n      height=\\"310\\"\\n      width=\\"310\\"\\n      role=\\"presentation\\"\\n    />\\n  </li>\\n  <li>\\n    <img\\n      src=\\"/images/about/about-6.png\\"\\n      alt=\\"Gitpod team members on the beach\\"\\n      height=\\"310\\"\\n      width=\\"310\\"\\n      role=\\"presentation\\"\\n    />\\n  </li>\\n  <li>\\n    <img\\n      src=\\"/images/about/about-5.png\\"\\n      alt=\\"4 kumquats on a table\\"\\n      height=\\"310\\"\\n      width=\\"310\\"\\n    />\\n  </li>\\n</ul>\\n\\n<div class=\\"redirector\\">\\n  <h2>Obsessed with developer experience</h2>\\n  <p>\\n    We have built developer tools, created programming languages and\\n    successfully grew open source communities over the last 10 years. We are\\n    developers ourselves - with Gitpod we want to capitalize on our learnings\\n    and build a company that simplifies the lives of all developers. Experienced\\n    international investors support us on our journey. We are a fully\\n    distributed team with humans from all over the world.\\n  </p>\\n  <p>\\n    <a\\n      class=\\"btn-otherbrand\\"\\n      href=\\"https://www.gitpod.io/direction\\"\\n      target=\\"_blank\\"\\n      ><span class=\\"icon\\">\u{1F5FA}\uFE0F</span>\\n      <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\" />Gitpod\'s\\n      Direction</a\\n    >\\n    <a\\n      class=\\"btn-otherbrand\\"\\n      href=\\"https://www.gitpod.io/roadmap\\"\\n      target=\\"_blank\\"\\n      ><span class=\\"icon\\">\u{1F6E3}</span>\\n      <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\" /> Gitpod\'s Roadmap</a\\n    >\\n  </p>\\n</div>\\n\\n<div class=\\"redirector\\">\\n  <h2>Built on shared principles</h2>\\n  <p>\\n    Values are important to us. We are developer-led and aim for a frictionless\\n    experience when interacting with our product, our company and our brand: no\\n    hurdles, no BS, no unnecessary extra steps. We believe in the benefits of an\\n    open culture. We are open minded, inclusive, transparent and curious. We\\n    always remain students of the game, not masters of the game. We have\\n    opinions, but are not opinionated. We integrate, don\'t dictate.\\n  </p>\\n  <p>\\n    <a\\n      class=\\"btn-otherbrand\\"\\n      href=\\"https://www.notion.so/gitpod/Brand-Values-2ed4c2f93c84499b98e3b5389980992e\\"\\n      target=\\"_blank\\"\\n      ><span class=\\"icon\\">\u2728</span>\\n      <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\" /> Brand &amp; Values</a\\n    >\\n  </p>\\n</div>\\n\\n<div class=\\"redirector\\">\\n  <h2>Backed by great investors</h2>\\n  <p>\\n    Gitpod Inc. was founded in 2020\xA0and in early 2021 we raised $13m from\\n    General Catalyst and our early backers Speedinvest, Crane and Vertex. We are\\n    proud to work with experienced, international investors and great\\n    individuals who have been early backers of <span class=\\"othercompanies\\"\\n      ><span>SignalFX</span>, <span>Cloudera</span>, <span>Couchbase</span>,\\n      <span>Snyk</span>, <span>Render</span>, <span>BuildKite</span>,\\n      <span>LaunchDarkly</span>, <span>H20</span>, <span>Hasura</span>,\\n      <span>Instana</span></span\\n    >, and several other exciting companies in the world of developer tools and\\n    open source software.\\n    <!--\\n    {#each investors as investor}\\n      <div>\\n        <img\\n          src={investor.logo}\\n          alt=\\"{investor.name} logo\\"\\n          height={investor.imgHeight}\\n          width={investor.imgWidth}\\n        />\\n        <p><strong>{investor.name}</strong></p>\\n        <p>{investor.description}</p>\\n      </div>\\n    {/each} -->\\n  </p>\\n</div>\\n\\n<div class=\\"redirector\\">\\n  <h2>Find out more. We are open</h2>\\n  <p>\\n    We have always built in the open. If you want to learn skim through some of\\n    our public Notion pages.\\n  </p>\\n  <p>\\n    <a\\n      class=\\"btn-otherbrand\\"\\n      href=\\"https://www.notion.so/gitpod/How-we-work-0f9159f282d24f9d9776372e0c7dbab4\\"\\n      target=\\"_blank\\"\\n      ><span class=\\"icon\\">\u{1F4BB}</span>\\n      <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\" />How we work</a\\n    >\\n    <a\\n      class=\\"btn-otherbrand\\"\\n      href=\\"https://www.notion.so/gitpod/Development-Process-080f1e439e0440f9b063a000ee213692\\"\\n      target=\\"_blank\\"\\n      ><span class=\\"icon\\">\u{1F528}</span>\\n      <img class=\\"arrow\\" src=\\"/svg/external.svg\\" alt=\\"External\\" /> How we develop</a\\n    >\\n  </p>\\n</div>\\n\\n<Explore\\n  contents={{\\n    title: `We have ${careers.length} open position${\\n      careers.length == 1 ? \\"\\" : \\"s\\"\\n    }`,\\n    description: \\"Come join us.\\",\\n    link: {\\n      text: \\"See openings\\",\\n      href: \\"/careers\\",\\n    },\\n  }}\\n/>\\n\\n<div class=\\"redirector header\\">\\n  <h2>Gitpod in the news</h2>\\n  <ul class=\\"cardlike flex flex-row flex-wrap justify-center mt-x-small\\">\\n    <li>\\n      <a\\n        href=\\"https://www.theregister.com/2020/08/25/gitpod_open_sources_cloud_development_platform/\\"\\n        target=\\"_blank\\"\\n      >\\n        <img\\n          src=\\"/images/about/TheRegister.svg\\"\\n          alt=\\"The Register\\"\\n          height=\\"40\\"\\n          width=\\"\\"\\n        />\\n      </a>\\n    </li>\\n    <li>\\n      <a\\n        href=\\"https://www.infoq.com/articles/cloud-based-development/\\"\\n        target=\\"_blank\\"\\n      >\\n        <img src=\\"/images/about/InfoQ.svg\\" alt=\\"Info Q\\" height=\\"40\\" width=\\"\\" />\\n      </a>\\n    </li>\\n    <li>\\n      <a\\n        href=\\"https://devops.com/gitpod-open-sources-automated-local-development-environment/\\"\\n        target=\\"_blank\\"\\n      >\\n        <img\\n          src=\\"/images/about/DevOpsDotCom.svg\\"\\n          alt=\\"DevOps.com\\"\\n          height=\\"40\\"\\n          width=\\"\\"\\n        />\\n      </a>\\n    </li>\\n    <li>\\n      <a\\n        href=\\"https://thenewstack.io/gitpod-open-sources-a-holistic-ide/\\"\\n        target=\\"_blank\\"\\n      >\\n        <img\\n          src=\\"/images/about/TheNewStack.svg\\"\\n          alt=\\"The New Stack\\"\\n          height=\\"40\\"\\n          width=\\"\\"\\n        />\\n      </a>\\n    </li>\\n  </ul>\\n</div>\\n"],"names":[],"mappings":"AA+CO,uBAAS,CAAC,eAAC,CAAC,QAAQ,MAAM,CAAC,4CAAgB,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,SAAS,MAAM,CAAC,SAAS,QAAQ,CAAC,YAAY,MAAM,CAAC,MAAM,GAAG,CAAC"}'
};
const prerender$2u = true;
const About = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$b);
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "On a mission to make developers' lives easier!",
      title: "About Gitpod"
    }
  }, {}, {})}
<header class="${"tight"}"><h1 class="${"visually-hidden svelte-a43r6o"}">Gitpod</h1>
  ${validate_component(Logo_animated, "LogoAnimated").$$render($$result, {center: true, iterations: 1}, {}, {})}
  <p>Open source developer platform. Originally from Kiel now fully-remote from
    all around the globe.
  </p></header>

<div class="${"hilited redirector"}"><h2 class="${"h4"}">Remove all friction from the developer experience to be always ready-to-code
    and make software engineering more collaborative, joyful, and secure.
  </h2></div>

<ul class="${"imageCarousel"}"><li><img src="${"/images/about/team-2.jpg"}" alt="${"A female Gitpod team member"}" height="${"310"}" width="${"310"}"></li>
  <li><img src="${"/images/about/team-3.jpg"}" alt="${"A laptop and office chair in a tent"}" height="${"310"}" width="${"310"}" role="${"presentation"}"></li>
  <li><img src="${"/images/about/about-6.png"}" alt="${"Gitpod team members on the beach"}" height="${"310"}" width="${"310"}" role="${"presentation"}"></li>
  <li><img src="${"/images/about/about-5.png"}" alt="${"4 kumquats on a table"}" height="${"310"}" width="${"310"}"></li></ul>

<div class="${"redirector"}"><h2>Obsessed with developer experience</h2>
  <p>We have built developer tools, created programming languages and
    successfully grew open source communities over the last 10 years. We are
    developers ourselves - with Gitpod we want to capitalize on our learnings
    and build a company that simplifies the lives of all developers. Experienced
    international investors support us on our journey. We are a fully
    distributed team with humans from all over the world.
  </p>
  <p><a class="${"btn-otherbrand"}" href="${"https://www.gitpod.io/direction"}" target="${"_blank"}"><span class="${"icon"}">\u{1F5FA}\uFE0F</span>
      <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}">Gitpod&#39;s
      Direction</a>
    <a class="${"btn-otherbrand"}" href="${"https://www.gitpod.io/roadmap"}" target="${"_blank"}"><span class="${"icon"}">\u{1F6E3}</span>
      <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}"> Gitpod&#39;s Roadmap</a></p></div>

<div class="${"redirector"}"><h2>Built on shared principles</h2>
  <p>Values are important to us. We are developer-led and aim for a frictionless
    experience when interacting with our product, our company and our brand: no
    hurdles, no BS, no unnecessary extra steps. We believe in the benefits of an
    open culture. We are open minded, inclusive, transparent and curious. We
    always remain students of the game, not masters of the game. We have
    opinions, but are not opinionated. We integrate, don&#39;t dictate.
  </p>
  <p><a class="${"btn-otherbrand"}" href="${"https://www.notion.so/gitpod/Brand-Values-2ed4c2f93c84499b98e3b5389980992e"}" target="${"_blank"}"><span class="${"icon"}">\u2728</span>
      <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}"> Brand &amp; Values</a></p></div>

<div class="${"redirector"}"><h2>Backed by great investors</h2>
  <p>Gitpod Inc. was founded in 2020\xA0and in early 2021 we raised $13m from
    General Catalyst and our early backers Speedinvest, Crane and Vertex. We are
    proud to work with experienced, international investors and great
    individuals who have been early backers of <span class="${"othercompanies"}"><span>SignalFX</span>, <span>Cloudera</span>, <span>Couchbase</span>,
      <span>Snyk</span>, <span>Render</span>, <span>BuildKite</span>,
      <span>LaunchDarkly</span>, <span>H20</span>, <span>Hasura</span>,
      <span>Instana</span></span>, and several other exciting companies in the world of developer tools and
    open source software.
    </p></div>

<div class="${"redirector"}"><h2>Find out more. We are open</h2>
  <p>We have always built in the open. If you want to learn skim through some of
    our public Notion pages.
  </p>
  <p><a class="${"btn-otherbrand"}" href="${"https://www.notion.so/gitpod/How-we-work-0f9159f282d24f9d9776372e0c7dbab4"}" target="${"_blank"}"><span class="${"icon"}">\u{1F4BB}</span>
      <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}">How we work</a>
    <a class="${"btn-otherbrand"}" href="${"https://www.notion.so/gitpod/Development-Process-080f1e439e0440f9b063a000ee213692"}" target="${"_blank"}"><span class="${"icon"}">\u{1F528}</span>
      <img class="${"arrow"}" src="${"/svg/external.svg"}" alt="${"External"}"> How we develop</a></p></div>

${validate_component(Explore, "Explore").$$render($$result, {
    contents: {
      title: `We have ${careers$1.length} open position${careers$1.length == 1 ? "" : "s"}`,
      description: "Come join us.",
      link: {text: "See openings", href: "/careers"}
    }
  }, {}, {})}

<div class="${"redirector header"}"><h2>Gitpod in the news</h2>
  <ul class="${"cardlike flex flex-row flex-wrap justify-center mt-x-small svelte-a43r6o"}"><li><a href="${"https://www.theregister.com/2020/08/25/gitpod_open_sources_cloud_development_platform/"}" target="${"_blank"}" class="${"svelte-a43r6o"}"><img src="${"/images/about/TheRegister.svg"}" alt="${"The Register"}" height="${"40"}" width="${""}"></a></li>
    <li><a href="${"https://www.infoq.com/articles/cloud-based-development/"}" target="${"_blank"}" class="${"svelte-a43r6o"}"><img src="${"/images/about/InfoQ.svg"}" alt="${"Info Q"}" height="${"40"}" width="${""}"></a></li>
    <li><a href="${"https://devops.com/gitpod-open-sources-automated-local-development-environment/"}" target="${"_blank"}" class="${"svelte-a43r6o"}"><img src="${"/images/about/DevOpsDotCom.svg"}" alt="${"DevOps.com"}" height="${"40"}" width="${""}"></a></li>
    <li><a href="${"https://thenewstack.io/gitpod-open-sources-a-holistic-ide/"}" target="${"_blank"}" class="${"svelte-a43r6o"}"><img src="${"/images/about/TheNewStack.svg"}" alt="${"The New Stack"}" height="${"40"}" width="${""}"></a></li></ul></div>`;
});
var about = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: About,
  prerender: prerender$2u
});
const prerender$2t = true;
const Terms = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Gitpod's terms of service.",
      title: "Terms"
    }
  }, {}, {})}
<article class="${"text-blob"}"><h1>Gitpod Terms of Service</h1>

  <p>The provider of the internet services and other products supplied or
    provided available at gitpod.io (the <strong>&quot;Website&quot;</strong>
    and together with the internet services and other products, the
    <strong>&quot;Service&quot;</strong>) is Gitpod GmbH, Am Germaniahafen 1, 24143 Kiel,
    Germany, registered at the commercial registry of the district court of Kiel
    under HRB 22228, represented by the managing directors Sven Efftinge, Moritz
    Eysholdt, Dr. Jan K\xF6hnlein (<strong>&quot;Gitpod&quot;</strong> or
    <strong>&quot;we/our&quot;</strong>).
  </p>
  <p>The use of the scope of Services provided by us and used by our registered
    customers in form of individuals and businesses (each a <strong>&quot;Customer&quot;</strong>
    or <strong>&quot;you/your&quot;</strong>) is determined by the following general terms
    of service (<strong>&quot;Terms of Service&quot;</strong> or
    <strong>&quot;Agreement&quot;</strong>).
  </p>
  <p>These Terms of Service shall apply to all Customers including consumers
    according to Section 13 of the German Civil Code (BGB) and entrepreneurs
    according to Section 14 of the German Civil Code (BGB). A consumer is a
    natural person who places the order for a purpose which cannot be attributed
    to their commercial or self-employed professional activity (each a
    <strong>&quot;Consumer&quot;</strong>). An Entrepreneur is a natural or legal person
    or a partnership with legal capacity who, when concluding a legal
    transaction, acts in the exercise of his commercial or self-employed
    professional activity (each an <strong>&quot;Entrepreneur&quot;</strong>).
  </p>
  <p>Any provisions, which are contrary to these Terms of Service, are not part
    of the contract, unless we explicitly and in writing agree that these
    provisions shall be valid.
  </p>
  <ol type="${"A"}" class="${"toc"}"><li><h2>Creating an Account and Conclusion of the Agreement</h2>
      <p>It is a prerequisite to use the Service of Gitpod having an existing
        account of Customer at https://github.com operated by GitHub Inc., 88
        Colin P Kelly Jr St, San Francisco, CA 94107, USA or any other third
        party service as set forth on the Website (<strong>&quot;Existing Account&quot;</strong>).
      </p>
      <p>You offer to conclude this Agreement when you (i) accept these Terms of
        Service by checking the box at the Website, (ii) provide the data, which
        is managed in accordance with our <a href="${"/privacy"}">privacy policy</a>,
        required for opening a Gitpod account in our Existing Account page as
        described throughout this Agreement; and (iii) declare your intention to
        create, and create, an account by clicking on the respective button in
        the Existing Account page. By clicking on the button
        <strong>&quot;Create my free account&quot;</strong> the Customer submits an offer on
        the conclusion of the contract about the usage of the Service and agrees
        to the Agreement and the privacy policy of Gitpod which are valid at the
        time of registration.
      </p>
      <p>Notwithstanding anything in the contrary in this Agreement, upon your
        offer to enter into this Agreement, we may, at our discretion, decide to
        accept or reject such offer. Unless an explicit declaration of the
        acceptance is given, our acceptance can be deemed given when Gitpod
        grants the Service offered under this Agreement.
      </p>
      <p>There is no legal entitlement for using the services provided by Gitpod.
        Gitpod has the right to stop or deny any registration without giving any
        reasons.
      </p>
      <p>By the time of sign-up the Customer must be at least 18 years old and
        fully contractually capable. In case of doubt Gitpod is entitled to ask
        the individual Customer to submit a documentary evidence of age or
        contractual capability.
      </p>
      <p>In order to access or amend the data relating to the Gitpod account the
        Customer shall access or amend such data within the Existing Account.
      </p>
      <p>During our Services, you remain in control of your Existing Account.
        Cancelation or termination of our Services has no effect on your
        Existing Account.
      </p>
      <p>After successful registration the Customer shall be able to log in for
        using our Service. A login is only possible via the access data assigned
        to the Customer by Gitpod (user name and password).
      </p></li>
    <li><h2>Support and Consulting</h2>
      <p>Usually Gitpod does not offer any integration, support and consulting
        services as part of the Service. Within its sole discretion Gitpod may
        offer support via email or in-Service communications as set forth in
        detail on the Website.
      </p>
      <p>The Customer\u2019s rights in case of defects of the Service remain
        unaffected.
      </p></li>
    <li><h2>Rights of Use and Licenses; Open Source</h2>
      <p>We retain ownership of all intellectual property rights of any kind
        related to the Website and Service unless explicitly granted to you
        pursuant to this Agreement.
      </p>
      <p>Upon successful registration for the Service and payment of Fees (as
        applicable) Gitpod hereby grants to Customer the worldwide,
        non-exclusive, non-sublicensable, non-transferable right to use the
        Service for the term and subject to the provisions of this Agreement.
        Customer accepts such grant of rights.
      </p>
      <p>The Customer is aware that the Service contains open source components
        and such components are governed by the respective open source licenses.
      </p></li>
    <li><h2>Fees and Payment</h2>
      <p>Depending on the time of using the Service and subscription plan
        available on the Website chosen by Customer Gitpod demands from the
        Customer a fee for using its Service based on <strong>&quot;Gitpod-Hours (GPh)&quot;</strong>
        which is our internal unit to express amounts, credits and debits of Service
        use (the
        <strong>&quot;Fee&quot;</strong>). The description, options and total amount of
        such Fee shall be based on the current list shown on the Website or as
        provided to Customer in text form.
      </p>
      <p>All prices for Customers that are Consumers (Section 13 BGB) do include
        the statutory VAT. All prices for Customers that are Entrepreneurs
        (Section 14 BGB) do not include statutory VAT and such Customer as
        Entrepreneur shall be solely responsible for any applicable taxes and
        related costs.
      </p>
      <p>The Customer shall pay the Fee by using the payment methods set forth on
        the Website without any extra charge if Customer is a consumer (Section
        13 BGB). The currently valid prices are displayed before the respective
        purchase is finalized within the Service. No further costs or fees shall
        arise for the Customer as Consumer when making a payment.
      </p></li>
    <li><h2>Availability</h2>
      <p>Our Services are generally available on the Website. Exceptions are:
        Back-up processes, system maintenance, system or database repair work,
        unavailability of the third party service for the Existing Account. We
        try to keep these disruptions on a low level. Customers\u2019 rights in case
        of defects remain unaffected.
      </p></li>
    <li><h2>Liability</h2>
      <p>We are liable without limitation for</p>
      <ol type="${"A"}"><li>damages caused deliberately or due to gross negligence by Gitpod;
        </li>
        <li>damages arising out of death, injury to body or health;</li>
        <li>damages due to a neglect of duty by Gitpod concerning essential
          contractual rights and obligations, which are absolutely necessary for
          a proper execution of the contract, and which might endanger the
          fulfilment of the contractual purpose (material contractual
          obligations). In that case, however, liability shall be limited to
          typical and foreseeable damages;
        </li>
        <li>liability according to the Product Liability Act;</li>
        <li>liability in case of a guarantee (without hereby giving such
          guarantee).
        </li></ol>
      <p>Any exemption from liability as well as limitations of liability of
        Gitpod shall also apply to the legal representatives and assistants of
        Gitpod.
      </p>
      <p>No further liability for Gitpod exists. In particular, Gitpod is not
        liable for a failure or delay in rendering Service to the extent caused
        by circumstances beyond its reasonable control.
      </p>
      <p>If Customer is an Entrepreneur the statutory provision shall apply and
        such Customer shall also be held responsible for all its legal
        representatives, assistants and any assigned users of the Service
        according to Section 278 BGB.
      </p></li>
    <li><h2>Warranty for Material Defects and Guarantees</h2>
      <p>We are liable for material defects according to the valid legal
        regulations if the Customer is a Consumer. The limitation period begins
        with access to the Service. In such case the statutory warranty rules
        apply without restriction.
      </p>
      <p>If the Customer is an Entrepreneur the following shall apply: The
        Customer shall check the contractual Service immediately upon receipt
        for obvious defects and inform us immediately if they are present,
        otherwise a warranty for these defects is excluded. The same applies if
        such a defect becomes apparent later. Section 377 of the German
        Commercial Code (HGB) applies as far as legally permissible. The period
        for warranty claims is restricted to 12 calendar months from the first
        appearance of the defect as far as permitted by law. The limitation
        period begins with access to the Service.
      </p>
      <p>We are not accountable for defects of Service or defects concerning the
        rights of Service in case the Service was supplied or provided without
        payment and the defects have not been left intentionally undisclosed.
      </p>
      <p>We do not offer any guarantees for our Service without an expressly
        given confirmation.
      </p></li>
    <li><h2>Customer&#39;s General Obligations</h2>
      <ol type="${"1"}"><li><strong>True Data and Fair use:</strong> You must fill in all required
          fields in the sign-up sheet truthfully and completely. You must respect
          and abide these Terms of Service, especially the obligations for Fair and
          Acceptable Use set forth in Section I. You are responsible for the content
          you create, post, upload or otherwise store, make available, or communicate
          in use of the Service.
        </li>
        <li><strong>Password and Security:</strong> You shall chose a safe password
          (we recommend at least 8 signs, including a letter, cypher and special
          character) for your account and change such password on a regular basis.
          You shall only pass such password information to authorized persons.
        </li>
        <li><strong>Defects and Bug reporting:</strong> You agree to support Gitpod
          in removing possible software defects by means such as bugs reporting or
          providing any information that can help us finding source of errors, if
          you have any available.
        </li>
        <li><strong>Backups:</strong> We do a regular backup of your data in the
          Service due to our legal obligations. However, you shall conduct
          regular backups of your data integrated in the Service via copying of
          all your data outside of your Gitpod account. Upon termination of the
          Service, we will delete your data according to these Terms of Service
          and our
          <a href="${"/privacy"}">privacy policy</a>.
        </li></ol></li>
    <li><h2 id="${"fair-use"}">Fair and Acceptable Use; Indemnification</h2>
      <p>Gitpod Services are to be used for lawful software development, demoing,
        showcasing or debugging the resulting software and/or teaching software
        development. Your use of the Services must comply with general fair
        practices and you must, in particular, not nor allow others through your
        Gitpod account to:
      </p>
      <ol type="${"1"}"><li>breach any applicable laws, not limited to a specific jurisdiction;
        </li>
        <li>post, host, upload, communicate or transmit content that is unlawful,
          sexually obscene, discriminatory, abusive, libelous, defamatory,
          fraudulent, harassing, threatening or infringes proprietary rights of
          any third party or us;
        </li>
        <li>distribute any malware or other deceitful or destructive content,
          including, but not limited to viruses, worms, Trojan horses, exploits,
          or corrupted files, distribution of unsolicited mass communications,
          advertising or solicitation;
        </li>
        <li>conduct illegal activities or their promotion;</li>
        <li>interfere or tamper with, violate, disable, impede or circumvent any
          part of the Service of GitPod and the equipment and services used by
          GitPod to provide them;
        </li>
        <li>attack or break into computer systems;</li>
        <li>abuse, scan other computer systems or networks, or place immoderate
          burden on any computing resources or systems;
        </li>
        <li>conduct or participate in any manner in peer-to-peer file sharing
          activity;
        </li>
        <li>engage in number crunching, data mining, cryptocurrency mining or
          similar schemes;
        </li>
        <li>make any use or failure thereof which could lead to, create, increase
          risk of, death, physical injury or health or environmental damage;
        </li>
        <li>any other activity which can reasonably be deemed an unfair use of the
          Services.
        </li></ol>
      <p>Gitpod workspaces allow you to interact online with other people,
        computer networks and computer systems. You are solely responsible for
        this interaction and especially any problems, material or immaterial
        damage this interaction might cause.
        <strong>Third party claims addressed to us which result from your
          interactions online or violation to these Terms of Service shall be
          redirected to you and you shall hold us harmless and indemnify us for
          any damages, claims, liabilities and expenses, including attorneys\u2019
          fees that your interaction causes to others and us provided you are
          held responsible for such breach.</strong></p></li>
    <li><h2>Customer Data; Indemnification</h2>
      <p>The Customer has the possibility within his account to upload content
        and code, including but not limited to programs, technical data,
        personal data (<strong>&quot;Customer Data&quot;</strong>). The Customer is solely
        responsible for this Customer Data and undertakes not to upload or
        otherwise use any prohibited content within his customer profile in
        accordance with these Terms of Service. Insofar as the Customer leaves
        these Customer Data to Gitpod and its Service, Customer grants Gitpod
        all rights necessary for the execution of the contractual agreement with
        Gitpod. This includes, in particular, the right to make the
        corresponding data accessible on the Website displaying them in the
        Customer\u2019s account. Gitpod hereby accepts this granting of rights.
      </p>
      <p>In the event that Customer Data is removed from an account or that an
        account is/was deleted by the Customer or by us for whatever reason, the
        rights to such Customer Data shall expire, except for legal retention
        periods and the Customer\u2019s statutory rights for a backup of such
        Customer Data.
      </p>
      <p>Customer is solely responsible for such Customer Data, especially any
        copyrights, data protection requirements, problems, material or
        immaterial damage these Customer Data might cause. <strong>Third party claims addressed to us which result from violations due
          to these Customer Data and to these Terms of Service shall be
          redirected to you and you shall hold us harmless and indemnify us for
          any damages, claims, liabilities and expenses, including attorneys\u2019
          fees that your interaction causes to others and us provided you are
          held responsible for such breach.</strong></p></li>
    <li><h2>Blocking Rights</h2>
      <p>In addition to our termination rights, we have the right to the
        following blocking measures:
      </p>
      <ol type="${"1"}"><li>In case a Customer is in breach of Section I. or a reasonable
          suspicion thereon considering the reasonable interests of the Customer
          temporarily suspend providing the entire or any part of the Service to
          the Customer; and/or
        </li>
        <li>In case the Customer Data (i) violate applicable laws or are subject
          to illegal activities each to the knowledge of Gitpod, or (ii) harm or
          affect the provision of the Service, related services and networks or
          the security and integrity of related networks, we may without
          previous notification block from access and/or execution or delete
          software or other Customer Data.
        </li></ol>
      <p>We will inform the Customer of such blocking measures set forth above
        without hesitation.
      </p>
      <p>We may also disclose your personal data vis-\xE0-vis authorities as
        set forth in the <a href="${"/privacy"}">privacy policy </a>.
      </p></li>
    <li><h2>L. Right of Withdrawal and Dispute Resolution</h2>
      <p>The following provisions of this Section L. shall only apply to
        Consumers.
      </p>
      <h3>Right of Withdrawal</h3>
      <p>If you are a Consumer, you have the right of withdrawal in accordance
        with the statutory provisions. In all respects the regulations, which
        are given in detail in the following instruction on withdrawal, apply to
        the right of withdrawal.
      </p>

      <div><div>-- begin instruction on withdrawal --</div>
        <h4>Right of Withdrawal</h4>
        <p>You have the right to withdraw from this contract within 14 days
          without giving any reason. The withdrawal period will expire 14 days
          from the day of the conclusion of the contract. To exercise the right
          of withdrawal, you must inform us to:
        </p>
        <p>Gitpod GmbH<br> represented by: Sven Efftinge, Moritz Eysholdt, Dr.
          Jan K\xF6hnlein<br> Am Germaniahafen 1<br> 24143 Kiel/Germany<br> Email: contact@gitpod.io
        </p>
        <p>of your decision to withdraw from this contract by an unequivocal
          statement (e.g. a letter sent by post, fax or e-mail). You may use the
          attached <a href="${"#withdrawal-form"}">model withdrawal form</a>, but it
          is not obligatory.
        </p>
        <p>To meet the withdrawal deadline, it is sufficient for you to send your
          communication concerning your exercise of the right of withdrawal
          before the withdrawal period has expired.
        </p>
        <h4>Effects of Withdrawal</h4>
        <p>If you withdraw from this contract, we shall reimburse to you all
          payments received from you, including the costs of delivery (with the
          exception of the supplementary costs resulting from your choice of a
          type of delivery other than the least expensive type of standard
          delivery offered by us), without undue delay and in any event not
          later than 14 days from the day on which we are informed about your
          decision to withdraw from this contract. We will carry out such
          reimbursement using the same means of payment as you used for the
          initial transaction, unless you have expressly agreed otherwise; in
          any event, you will not incur any fees as a result of such
          reimbursement.
        </p>
        <p>If you requested to begin the performance of services during the
          withdrawal period, you shall pay us an amount which is in proportion
          to what has been provided until you have communicated us your
          withdrawal from this contract, in comparison with the full coverage of
          the contract.
        </p>
        <p>Your right to withdraw from this Agreement expires prematurely if the
          Services were initiated by us to you only after you as Consumer have
          expressly agreed that we shall commence with the execution of the
          contract before expiry of the withdrawal period, and at the same time
          have confirmed your knowledge of the fact that you lose your right to
          withdraw from the contract with the beginning of the execution of the
          contract.
        </p>
        <div>-- end instruction on withdrawal --</div></div>

      <h3>Alternative Settlements of Disputes</h3>
      <p>The European Commission provides a platform for an online settlement of
        disputes which can be accessed under http://ec.europa.eu/consumers/odr/.
        Gitpod is neither obliged to take part in alternative dispute
        resolutions before a consumer dispute settlement commission or will do
        so voluntarily.
      </p></li>
    <li><h2>Term and Termination</h2>
      <p>This Agreement is effective as of your creation of the Gitpod account
        and remains effective until terminated. You as Customer or Gitpod may
        each terminate this Agreement without reason by giving a 15-day notice
        using the termination option in the Gitpod account or as for Gitpod via
        email to Customer.
      </p>
      <p>In addition, you as Customer or Gitpod can terminate this Agreement with
        immediate effect for good cause (wichtiger Grund). Good cause <em>(wichtiger Grund)</em> on part of Gitpod shall include, among others, when (i) you are in breach
        or your obligations under this Agreement; or (ii) fall behind in payment
        for more than six (6) weeks; or (iii) breach the terms of Fair and Acceptable
        Use in Section I; or (iv) a major change in cooperation between Gitpod and
        other companies that is central for Gitpod to supply its Service occur, including
        but not limited to the end or material change of the workings of a software
        or service, a cancellation of the co-operation, or materially changed pricing;
        or (v) a major change of resources availability that are central for Gitpod
        to supply its Service occur; or (vi) Gitpod Service is terminated due to
        reasons beyond Gitpod\u2019s control or as a whole.
      </p>
      <p>Upon termination, regulations concerning Liability (Section F.),
        Warranty of Material Defects and Guarantee (Section G.), Term (Section
        M.), Confidentiality (Section O.) and Miscellaneous (Section Q.) shall
        survive.
      </p></li>
    <li><h2>Privacy and Data</h2>
      <p>We will process your data according to the German and European data
        protection laws. For details please refer to our <a href="${"/privacy"}">privacy policy
        </a>.
      </p></li>
    <li><h2>Confidentiality</h2>
      <p>Both Customer and Gitpod agree not to, and shall ensure that their
        employees, agents and advisors do not, disclose to third parties, nor
        use for any purpose other than as contemplated in these Terms of Service
        and additional agreements, any confidential or proprietary information
        arising or disclosed pursuant to the agreement (including but not
        limited to the Terms of Service, the parties&#39; trade secrets and
        information not generally known to the public such as business plans,
        strategies, practices, products, personnel and finances), except: (i)
        with the prior written permission of the party to whom such information
        belongs; (ii) where the information is already known to, or obtained by
        independent means, or independently developed without reference to the
        other party\u2019s confidential information, by the recipient; (iii) is
        already in the public domain through no fault of the recipient; (iv) the
        recipient receives from a third person free to make such disclosure
        without breach of any legal obligation; or (v) the disclosure by both
        parties to an affiliated company (in the meaning of sections 15 et seqq
        AktG) of either party. This Section O. shall survive the termination of
        this Agreement for three (3) years after such termination.
        Notwithstanding the foregoing, a recipient may disclose confidential
        information of the other party if required to do so by law, court order
        or request by any government or regulatory authority. In any of those
        events, the recipient will in advance and promptly inform the other
        party about the requirement or respectively the request for disclosure.
      </p></li>
    <li><h2>Terms of Service Changes</h2>
      <p>We may change these Terms of Service as well as related documentation at
        any time at our sole discretion. We will inform you at least in text
        form that the Terms of Service as well as related documentation have
        been modified and give information when such changes become effective.
        The respective change will take effect when you do not object the new
        terms and conditions within four (4) weeks after sending the email. In
        case you object to the modification within the four-week period, we
        shall be entitled to cancel the contract with immediate effect, without
        you having any claims against us. If the contractual relationship after
        the effective objection by you continues, the previous terms and
        conditions shall remain in force.
      </p></li>
    <li><h2>Miscellaneous</h2>
      <p>You are not allowed to assign, transfer or delegate these Terms of
        Service to any person or entity at any time given, except for certain
        rights as explicitly set forth in these Terms of Service.
      </p>
      <p>This Agreement is governed by the laws of the Federal Republic of
        Germany, to the exclusion of the Convention of the United Nations on
        Contracts for the International Sale of Goods. Any statutory provisions
        on the limitation of the choice of law as well as the applicability of
        mandatory laws especially by the state, in which the Customer who is a
        Consumer has his usual place of residence, shall not be deemed affected.
        Provided the Customer is a merchant, a legal entity under public law or
        a special fund under public law and to the extent permitted by and
        compatible with the law the exclusive jurisdiction and venue shall be
        the seat of Gitpod.
      </p>
      <p>These Terms of Service and the documents referred hereto jointly
        constitute the whole Agreement between the Gitpod and Customer and
        precede any other agreement, arrangement, proposal or communication.
        Gitpod does not waive any rights under this Agreement by not exercising
        or delaying to exercise these rights.
      </p>
      <p>In case individual provisions in these terms and conditions including
        this provision are or become invalid, or in case of gaps arising in
        these terms and conditions, the validity of all other provisions will
        not be deemed affected thereby. Instead of the ineffective provision or
        for replenishment of gaps an adequate provision will apply. If the
        Customer is a Consumer and in case this may constitute an unreasonable
        hardship for one of the contracting parties the contract shall become
        ineffective as a whole.
      </p>

      <h2>Transfer of the Agreement to Another Party</h2>
      <p>You agree that we may transfer this Agreement to:</p>
      <ol type="${"1"}"><li><strong>Gitpod, Inc.</strong>, a corporation incorporated and validly
          existing under the laws of the State of Delaware, United States,
          registered with the Division of Corporations of the State of Delaware
          under file number 3353320 and with business address at: 1390 Market
          Street, Suite 200, San Francisco. CA 94102, United States (&quot;<strong>Gitpod, Inc.</strong>&quot;); or
        </li>
        <li>another third-party designated in our discretion (&quot;<strong>Third-Party</strong>&quot;)
        </li></ol>
      <p>by way of a transfer of contract with discharging effect
        (Vertrags\xFCbernahme mit schuldbefreiender Wirkung) with the effect that
        Gitpod, Inc. or the Third-Party becomes your new contractual partner in
        our stead and assumes all our rights and obligations under this
        Agreement.
      </p>
      <p>We will notify you of a contemplated transfer of this Agreement and
        provide you with the identity of your new contractual partner in text
        form with at least four three weeks&#39; notice prior to the contemplated
        transfer of this Agreement becoming effective (&quot;<strong>Transfer Notice</strong>&quot;).
      </p>
      <p>In case of a contemplated transfer of this Agreement to a Third-Party
        you shall be entitled to terminate this Agreement without notice and
        without any additional cause being required. This termination right must
        be exercised within six weeks following receipt of the Transfer Notice
        and must be exercised in text form.
      </p>
      <p>The above termination right shall not exist in case of a transfer of
        this Agreement to Gitpod, Inc. Other rights you may have to terminate
        the Agreement with or without cause shall remain unaffected.
      </p></li></ol>
  <h2 id="${"withdrawal-form"}">Appendix: Model Withdrawal Form</h2>
  <p>Complete and return this form only if you wish to withdraw from the
    contract.
  </p>

  <div class="${"card"}"><div>-- begin model withdrawal form --</div>
    <p>To<br> Gitpod GmbH represented by: Sven Efftinge, Moritz Eysholdt, Dr.
      Jan K\xF6hnlein<br> Am Germaniahafen 1<br> 24143 Kiel/Germany
      <br> Phone: +49-431-99026870<br> Email: contact@gitpod.io<br></p>
    <p></p>
    <p>I/We (*) hereby give notice that I/We (*) withdraw from my/our (*) for the
      provision of the following service (*),
    </p>
    <p>Ordered on (*)/received on (*),</p>
    <p>Name of consumer(s),</p>
    <p>Address of consumer(s),</p>
    <p>Signature of consumer(s) (only if this form is notified on paper),</p>
    <p>Date</p>
    <p>_______________</p>
    <p>(*) Delete where inapplicable.</p>
    <div>-- end model withdrawal form --</div></div></article>`;
});
var terms = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Terms,
  prerender: prerender$2t
});
var index_svelte$1 = "section.svelte-iup35x{margin-top:var(--xx-large);text-align:center}h2.svelte-iup35x{margin-bottom:var(--small)}.blog-layout.svelte-iup35x{padding-bottom:2.5rem}";
const css$a = {
  code: "section.svelte-iup35x{margin-top:var(--xx-large);text-align:center}h2.svelte-iup35x{margin-bottom:var(--small)}.blog-layout.svelte-iup35x{padding-bottom:2.5rem}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script lang=\\"ts\\" context=\\"module\\">export const prerender = true;\\nexport async function load({ session }) {\\n    const posts = session.posts;\\n    return { props: { posts } };\\n}\\n</script>\\n\\n<script lang=\\"ts\\">;\\nimport OpenGraph from \\"../../components/open-graph.svelte\\";\\nimport PostPreview from \\"../../components/blog/post-preview.svelte\\";\\nexport let posts;\\n</script>\\n\\n<style>section{margin-top:var(--xx-large);text-align:center}h2{margin-bottom:var(--small)}.blog-layout{padding-bottom:2.5rem}</style>\\n\\n<div class=\\"blog-layout\\">\\n  <OpenGraph\\n    data={{\\n      description:\\n        \\"Visit the Gitpod blog to learn about releases, tutorials, news and more.\\",\\n      title: \\"Blog\\",\\n    }}\\n  />\\n  <section>\\n    <h1>Blog</h1>\\n  </section>\\n  <div class=\\"posts-grid\\">\\n    {#each posts.slice(0, 6) as post}\\n      <div class=\\"posts-grid__item\\">\\n        <PostPreview {post} isMostRecent />\\n      </div>\\n    {/each}\\n  </div>\\n\\n  <section>\\n    <h2>Previous posts</h2>\\n  </section>\\n  <div class=\\"posts-grid previous\\">\\n    {#each posts.slice(6) as post}\\n      <div class=\\"posts-grid__item\\">\\n        <PostPreview {post} />\\n      </div>\\n    {/each}\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAaO,qBAAO,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,WAAW,MAAM,CAAC,gBAAE,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,0BAAY,CAAC,eAAe,MAAM,CAAC"}'
};
const prerender$2s = true;
async function load({session: session2}) {
  const posts = session2.posts;
  return {props: {posts}};
}
const Blog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {posts} = $$props;
  if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
    $$bindings.posts(posts);
  $$result.css.add(css$a);
  return `<div class="${"blog-layout svelte-iup35x"}">${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Visit the Gitpod blog to learn about releases, tutorials, news and more.",
      title: "Blog"
    }
  }, {}, {})}
  <section class="${"svelte-iup35x"}"><h1>Blog</h1></section>
  <div class="${"posts-grid"}">${each(posts.slice(0, 6), (post) => `<div class="${"posts-grid__item"}">${validate_component(Post_preview, "PostPreview").$$render($$result, {post, isMostRecent: true}, {}, {})}
      </div>`)}</div>

  <section class="${"svelte-iup35x"}"><h2 class="${"svelte-iup35x"}">Previous posts</h2></section>
  <div class="${"posts-grid previous"}">${each(posts.slice(6), (post) => `<div class="${"posts-grid__item"}">${validate_component(Post_preview, "PostPreview").$$render($$result, {post}, {}, {})}
      </div>`)}</div></div>`;
});
var index$6 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Blog,
  prerender: prerender$2s,
  load
});
var docsCurrentSectionStore = writable("");
var menuLink_svelte = ".active.svelte-gpq0pb{color:var(--black)}";
const css$9 = {
  code: ".active.svelte-gpq0pb{color:var(--black)}",
  map: '{"version":3,"file":"menu-link.svelte","sources":["menu-link.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { page } from \\"$app/stores\\";\\nexport let href;\\n$: normalizedPath = /self-hosted\\\\/\\\\d\\\\.\\\\d\\\\.\\\\d/.test($page.path)\\n    ? $page.path.replace(/\\\\d\\\\.\\\\d\\\\.\\\\d/, \\"latest\\")\\n    : $page.path;\\n$: active = href === normalizedPath || href === `${normalizedPath}/`;\\n</script>\\n\\n<style>.active{color:var(--black)}</style>\\n\\n<a class:active {href} sveltekit:prefetch {...$$props}><slot /></a>\\n"],"names":[],"mappings":"AAQO,qBAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC"}'
};
const Menu_link = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let normalizedPath;
  let active;
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  let {href} = $$props;
  if ($$props.href === void 0 && $$bindings.href && href !== void 0)
    $$bindings.href(href);
  $$result.css.add(css$9);
  normalizedPath = /self-hosted\/\d\.\d\.\d/.test($page.path) ? $page.path.replace(/\d\.\d\.\d/, "latest") : $page.path;
  active = href === normalizedPath || href === `${normalizedPath}/`;
  $$unsubscribe_page();
  return `<a${spread([{href: escape(href)}, {"sveltekit:prefetch": true}, $$props], (active ? "active" : "") + " svelte-gpq0pb")}>${slots.default ? slots.default({}) : ``}</a>`;
});
var menuSection_svelte = ".menu-item.svelte-kua03s{margin-bottom:0}.menu-container.svelte-kua03s{padding-left:1.5rem;padding-right:1.5rem;display:inline-block;font-size:var(--p-large);line-height:var(--x-small)}.menu-container.isActiveSection.svelte-kua03s{background-color:var(--white);padding-top:1.5rem;padding-bottom:1.5rem;border-radius:1rem;box-shadow:var(--shadow)}.submenu.svelte-kua03s{margin-top:1rem;margin-left:1rem;font-size:var(--p-medium);line-height:var(--x-small)}";
const css$8 = {
  code: ".menu-item.svelte-kua03s{margin-bottom:0}.menu-container.svelte-kua03s{padding-left:1.5rem;padding-right:1.5rem;display:inline-block;font-size:var(--p-large);line-height:var(--x-small)}.menu-container.isActiveSection.svelte-kua03s{background-color:var(--white);padding-top:1.5rem;padding-bottom:1.5rem;border-radius:1rem;box-shadow:var(--shadow)}.submenu.svelte-kua03s{margin-top:1rem;margin-left:1rem;font-size:var(--p-medium);line-height:var(--x-small)}",
  map: '{"version":3,"file":"menu-section.svelte","sources":["menu-section.svelte"],"sourcesContent":["<script>\\n  import docsCurrentSectionStore from \\"../../stores/docs-current-section\\";\\n  import MenuLink from \\"./menu-link.svelte\\";\\n\\n  export let menuItem;\\n\\n  $: isActiveSection = $docsCurrentSectionStore\\n    ? menuItem.path.indexOf(\\n        /self-hosted\\\\/\\\\d\\\\.\\\\d\\\\.\\\\d/.test($docsCurrentSectionStore)\\n          ? $docsCurrentSectionStore.replace(/\\\\d\\\\.\\\\d\\\\.\\\\d/, \\"latest\\")\\n          : $docsCurrentSectionStore\\n      ) >= 0\\n    : /\\\\/docs\\\\/$/.test(menuItem.path);\\n</script>\\n\\n<style lang=\\"scss\\">.menu-item{margin-bottom:0}.menu-container{padding-left:1.5rem;padding-right:1.5rem;display:inline-block;font-size:var(--p-large);line-height:var(--x-small)}.menu-container.isActiveSection{background-color:var(--white);padding-top:1.5rem;padding-bottom:1.5rem;border-radius:1rem;box-shadow:var(--shadow)}.submenu{margin-top:1rem;margin-left:1rem;font-size:var(--p-medium);line-height:var(--x-small)}</style>\\n\\n<li class=\\"menu-item\\">\\n  <div class:isActiveSection class=\\"menu-container\\">\\n    <MenuLink href={menuItem.path} class=\\"text-large\\">{menuItem.title}</MenuLink\\n    >\\n    {#if menuItem.subMenu && isActiveSection}\\n      <ul class=\\"submenu\\">\\n        {#each menuItem.subMenu as sub}\\n          <li class=\\"menu-item\\">\\n            <MenuLink href={sub.path}>{sub.title}</MenuLink>\\n          </li>\\n        {/each}\\n      </ul>\\n    {/if}\\n  </div>\\n</li>\\n"],"names":[],"mappings":"AAemB,wBAAU,CAAC,cAAc,CAAC,CAAC,6BAAe,CAAC,aAAa,MAAM,CAAC,cAAc,MAAM,CAAC,QAAQ,YAAY,CAAC,UAAU,IAAI,SAAS,CAAC,CAAC,YAAY,IAAI,SAAS,CAAC,CAAC,eAAe,8BAAgB,CAAC,iBAAiB,IAAI,OAAO,CAAC,CAAC,YAAY,MAAM,CAAC,eAAe,MAAM,CAAC,cAAc,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,CAAC,sBAAQ,CAAC,WAAW,IAAI,CAAC,YAAY,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC,YAAY,IAAI,SAAS,CAAC,CAAC"}'
};
const Menu_section = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isActiveSection;
  let $docsCurrentSectionStore, $$unsubscribe_docsCurrentSectionStore;
  $$unsubscribe_docsCurrentSectionStore = subscribe(docsCurrentSectionStore, (value) => $docsCurrentSectionStore = value);
  let {menuItem} = $$props;
  if ($$props.menuItem === void 0 && $$bindings.menuItem && menuItem !== void 0)
    $$bindings.menuItem(menuItem);
  $$result.css.add(css$8);
  isActiveSection = $docsCurrentSectionStore ? menuItem.path.indexOf(/self-hosted\/\d\.\d\.\d/.test($docsCurrentSectionStore) ? $docsCurrentSectionStore.replace(/\d\.\d\.\d/, "latest") : $docsCurrentSectionStore) >= 0 : /\/docs\/$/.test(menuItem.path);
  $$unsubscribe_docsCurrentSectionStore();
  return `<li class="${"menu-item svelte-kua03s"}"><div class="${["menu-container svelte-kua03s", isActiveSection ? "isActiveSection" : ""].join(" ").trim()}">${validate_component(Menu_link, "MenuLink").$$render($$result, {href: menuItem.path, class: "text-large"}, {}, {
    default: () => `${escape(menuItem.title)}`
  })}
    ${menuItem.subMenu && isActiveSection ? `<ul class="${"submenu svelte-kua03s"}">${each(menuItem.subMenu, (sub) => `<li class="${"menu-item svelte-kua03s"}">${validate_component(Menu_link, "MenuLink").$$render($$result, {href: sub.path}, {}, {default: () => `${escape(sub.title)}`})}
          </li>`)}</ul>` : ``}</div></li>`;
});
const Menu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {MENU: MENU2} = $$props;
  if ($$props.MENU === void 0 && $$bindings.MENU && MENU2 !== void 0)
    $$bindings.MENU(MENU2);
  return `<ul class="${"space-y-8"}">${each(MENU2, (menuItem) => `${validate_component(Menu_section, "MenuSection").$$render($$result, {menuItem}, {}, {})}`)}</ul>`;
});
var topicsState = writable(false);
var menuItem_svelte = ".menu-item.svelte-q983vv{margin-bottom:0}.menu-item.svelte-q983vv:not(:last-child){border-bottom:var(--border-light)}.menu-item__link.svelte-q983vv{display:flex;align-items:center;min-height:3.375rem}.menu-item__label.svelte-q983vv{flex:1 1 auto}.menu-item__icon.svelte-q983vv{margin-left:1rem;flex:0 0 auto}.menu-item__icon-arrow.svelte-q983vv{transform:rotate(-90deg)}";
const css$7 = {
  code: ".menu-item.svelte-q983vv{margin-bottom:0}.menu-item.svelte-q983vv:not(:last-child){border-bottom:var(--border-light)}.menu-item__link.svelte-q983vv{display:flex;align-items:center;min-height:3.375rem}.menu-item__label.svelte-q983vv{flex:1 1 auto}.menu-item__icon.svelte-q983vv{margin-left:1rem;flex:0 0 auto}.menu-item__icon-arrow.svelte-q983vv{transform:rotate(-90deg)}",
  map: '{"version":3,"file":"menu-item.svelte","sources":["menu-item.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { page } from \\"$app/stores\\";\\nimport topicsState from \\"../states/topics-state\\";\\nexport let href;\\nexport let onClick;\\nexport let showIcon;\\n</script>\\n\\n<style lang=\\"scss\\">.menu-item{margin-bottom:0}.menu-item:not(:last-child){border-bottom:var(--border-light)}.menu-item__link{display:flex;align-items:center;min-height:3.375rem}.menu-item__label{flex:1 1 auto}.menu-item__icon{margin-left:1rem;flex:0 0 auto}.menu-item__icon-arrow{transform:rotate(-90deg)}</style>\\n\\n<li class=\\"menu-item\\">\\n  <a {href} class=\\"menu-item__link\\" on:click={onClick}>\\n    <div class=\\"menu-item__label\\"><slot /></div>\\n    {#if showIcon}\\n      <div class=\\"menu-item__icon\\" aria-hidden=\\"true\\">\\n        <img\\n          class=\\"menu-item__icon-arrow\\"\\n          src=\\"/arrow.svg\\"\\n          alt=\\"See more\\"\\n          width=\\"12\\"\\n          height=\\"7\\"\\n        />\\n      </div>\\n    {/if}\\n  </a>\\n</li>\\n"],"names":[],"mappings":"AAOmB,wBAAU,CAAC,cAAc,CAAC,CAAC,wBAAU,KAAK,WAAW,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,CAAC,8BAAgB,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,WAAW,QAAQ,CAAC,+BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,8BAAgB,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oCAAsB,CAAC,UAAU,OAAO,MAAM,CAAC,CAAC"}'
};
const Menu_item = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {href} = $$props;
  let {onClick} = $$props;
  let {showIcon} = $$props;
  if ($$props.href === void 0 && $$bindings.href && href !== void 0)
    $$bindings.href(href);
  if ($$props.onClick === void 0 && $$bindings.onClick && onClick !== void 0)
    $$bindings.onClick(onClick);
  if ($$props.showIcon === void 0 && $$bindings.showIcon && showIcon !== void 0)
    $$bindings.showIcon(showIcon);
  $$result.css.add(css$7);
  return `<li class="${"menu-item svelte-q983vv"}"><a${add_attribute("href", href, 0)} class="${"menu-item__link svelte-q983vv"}"><div class="${"menu-item__label svelte-q983vv"}">${slots.default ? slots.default({}) : ``}</div>
    ${showIcon ? `<div class="${"menu-item__icon svelte-q983vv"}" aria-hidden="${"true"}"><img class="${"menu-item__icon-arrow svelte-q983vv"}" src="${"/arrow.svg"}" alt="${"See more"}" width="${"12"}" height="${"7"}"></div>` : ``}</a></li>`;
});
const Topics = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_topicsState;
  $$unsubscribe_topicsState = subscribe(topicsState, (value) => value);
  let {MENU: MENU2} = $$props;
  if ($$props.MENU === void 0 && $$bindings.MENU && MENU2 !== void 0)
    $$bindings.MENU(MENU2);
  $$unsubscribe_topicsState();
  return `<div role="${"navigation"}" aria-label="${"All topics"}"><ul>${each(MENU2, (menuItem) => `${validate_component(Menu_item, "MenuItem").$$render($$result, {
    href: menuItem.path,
    showIcon: true,
    onClick: () => false
  }, {}, {
    default: () => `${escape(menuItem.title)}
      `
  })}`)}</ul></div>`;
});
var subMenuState = writable(false);
var subMenu_svelte = ".back-button.svelte-1dtjh89{display:inline-flex;align-items:center;line-height:138%;color:var(--black)}.back-button__icon.svelte-1dtjh89{flex:0 0 auto;margin-right:1rem}.back-button__icon-arrow.svelte-1dtjh89{transform:rotate(90deg)}.sub-menu-container.svelte-1dtjh89{margin-top:1rem;border-radius:.75rem;box-shadow:var(--shadow)}.toggle-button.svelte-1dtjh89{display:flex;align-items:center;padding:.8125rem 1rem;line-height:138%;color:var(--black)}.toggle-button__label.svelte-1dtjh89{flex:1 1 auto;margin-right:1rem;text-align:left}.toggle-button__icon.svelte-1dtjh89{flex:0 0 auto}.toggle-button__icon-arrow.open.svelte-1dtjh89{transform:rotate(180deg)}";
const css$6 = {
  code: ".back-button.svelte-1dtjh89{display:inline-flex;align-items:center;line-height:138%;color:var(--black)}.back-button__icon.svelte-1dtjh89{flex:0 0 auto;margin-right:1rem}.back-button__icon-arrow.svelte-1dtjh89{transform:rotate(90deg)}.sub-menu-container.svelte-1dtjh89{margin-top:1rem;border-radius:.75rem;box-shadow:var(--shadow)}.toggle-button.svelte-1dtjh89{display:flex;align-items:center;padding:.8125rem 1rem;line-height:138%;color:var(--black)}.toggle-button__label.svelte-1dtjh89{flex:1 1 auto;margin-right:1rem;text-align:left}.toggle-button__icon.svelte-1dtjh89{flex:0 0 auto}.toggle-button__icon-arrow.open.svelte-1dtjh89{transform:rotate(180deg)}",
  map: '{"version":3,"file":"sub-menu.svelte","sources":["sub-menu.svelte"],"sourcesContent":["<script lang=\\"ts\\">import MenuItem from \\"./menu-item.svelte\\";\\nimport topicsState from \\"../states/topics-state\\";\\nimport subMenuState from \\"../states/sub-menu-state\\";\\nexport let currentSection = {};\\n</script>\\n\\n<style lang=\\"scss\\">.back-button{display:inline-flex;align-items:center;line-height:138%;color:var(--black)}.back-button__icon{flex:0 0 auto;margin-right:1rem}.back-button__icon-arrow{transform:rotate(90deg)}.sub-menu-container{margin-top:1rem;border-radius:.75rem;box-shadow:var(--shadow)}.toggle-button{display:flex;align-items:center;padding:.8125rem 1rem;line-height:138%;color:var(--black)}.toggle-button__label{flex:1 1 auto;margin-right:1rem;text-align:left}.toggle-button__icon{flex:0 0 auto}.toggle-button__icon-arrow.open{transform:rotate(180deg)}</style>\\n\\n<button\\n  class=\\"back-button\\"\\n  type=\\"button\\"\\n  on:click={() => {\\n    $topicsState = true;\\n    $subMenuState = false;\\n  }}\\n>\\n  <div class=\\"back-button__icon\\">\\n    <img\\n      class=\\"back-button__icon-arrow\\"\\n      src=\\"/arrow.svg\\"\\n      alt=\\"See all topics\\"\\n      width=\\"12\\"\\n      height=\\"7\\"\\n    />\\n  </div>\\n  All topics\\n</button>\\n\\n{#if currentSection.subMenu}\\n  <div class=\\"sub-menu-container bg-white\\">\\n    <button\\n      class=\\"toggle-button w-full\\"\\n      type=\\"button\\"\\n      aria-controls=\\"sub-menu\\"\\n      aria-expanded={$subMenuState}\\n      on:click={() => ($subMenuState = !$subMenuState)}\\n    >\\n      <div class=\\"toggle-button__label\\">{currentSection.title}</div>\\n      <div class=\\"toggle-button__icon\\">\\n        <img\\n          class={`toggle-button__icon-arrow ${$subMenuState ? \\"open\\" : \\"\\"}`}\\n          src=\\"/arrow.svg\\"\\n          alt=\\"Toggle sub menu\\"\\n          width=\\"12\\"\\n          height=\\"7\\"\\n        />\\n      </div>\\n    </button>\\n\\n    <div\\n      aria-label={currentSection.title}\\n      role=\\"navigation\\"\\n      class={`px-4 ${$subMenuState ? \\"block\\" : \\"hidden\\"}`}\\n      id=\\"sub-menu\\"\\n    >\\n      <ul>\\n        {#each currentSection.subMenu as sub}\\n          <MenuItem href={sub.path} onClick={() => ($subMenuState = false)}>\\n            {sub.title}\\n          </MenuItem>\\n        {/each}\\n      </ul>\\n    </div>\\n  </div>\\n{/if}\\n"],"names":[],"mappings":"AAMmB,2BAAY,CAAC,QAAQ,WAAW,CAAC,YAAY,MAAM,CAAC,YAAY,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,iCAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,uCAAwB,CAAC,UAAU,OAAO,KAAK,CAAC,CAAC,kCAAmB,CAAC,WAAW,IAAI,CAAC,cAAc,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,CAAC,6BAAc,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,QAAQ,QAAQ,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,oCAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,IAAI,CAAC,mCAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,oBAAK,CAAC,UAAU,OAAO,MAAM,CAAC,CAAC"}'
};
const Sub_menu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_topicsState;
  let $subMenuState, $$unsubscribe_subMenuState;
  $$unsubscribe_topicsState = subscribe(topicsState, (value) => value);
  $$unsubscribe_subMenuState = subscribe(subMenuState, (value) => $subMenuState = value);
  let {currentSection = {}} = $$props;
  if ($$props.currentSection === void 0 && $$bindings.currentSection && currentSection !== void 0)
    $$bindings.currentSection(currentSection);
  $$result.css.add(css$6);
  $$unsubscribe_topicsState();
  $$unsubscribe_subMenuState();
  return `<button class="${"back-button svelte-1dtjh89"}" type="${"button"}"><div class="${"back-button__icon svelte-1dtjh89"}"><img class="${"back-button__icon-arrow svelte-1dtjh89"}" src="${"/arrow.svg"}" alt="${"See all topics"}" width="${"12"}" height="${"7"}"></div>
  All topics
</button>

${currentSection.subMenu ? `<div class="${"sub-menu-container bg-white svelte-1dtjh89"}"><button class="${"toggle-button w-full svelte-1dtjh89"}" type="${"button"}" aria-controls="${"sub-menu"}"${add_attribute("aria-expanded", $subMenuState, 0)}><div class="${"toggle-button__label svelte-1dtjh89"}">${escape(currentSection.title)}</div>
      <div class="${"toggle-button__icon svelte-1dtjh89"}"><img class="${escape(null_to_empty(`toggle-button__icon-arrow ${$subMenuState ? "open" : ""}`)) + " svelte-1dtjh89"}" src="${"/arrow.svg"}" alt="${"Toggle sub menu"}" width="${"12"}" height="${"7"}"></div></button>

    <div${add_attribute("aria-label", currentSection.title, 0)} role="${"navigation"}" class="${escape(null_to_empty(`px-4 ${$subMenuState ? "block" : "hidden"}`)) + " svelte-1dtjh89"}" id="${"sub-menu"}"><ul>${each(currentSection.subMenu, (sub) => `${validate_component(Menu_item, "MenuItem").$$render($$result, {
    href: sub.path,
    onClick: () => $subMenuState = false
  }, {}, {
    default: () => `${escape(sub.title)}
          `
  })}`)}</ul></div></div>` : ``}`;
});
var index_svelte = ".mobile-menu.svelte-17tjvcy{margin-bottom:2.5rem}@media(min-width:769px){.mobile-menu.svelte-17tjvcy{display:none}}";
const css$5 = {
  code: ".mobile-menu.svelte-17tjvcy{margin-bottom:2.5rem}@media(min-width:769px){.mobile-menu.svelte-17tjvcy{display:none}}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script>\\n  // Components\\n  import MobileMenuTopics from \\"./topics.svelte\\";\\n  import MobileMenuSubMenu from \\"./sub-menu.svelte\\";\\n\\n  // States\\n  import topicsState from \\"../states/topics-state\\";\\n\\n  import docsCurrentSectionStore from \\"../../../stores/docs-current-section\\";\\n  export let MENU;\\n\\n  $: currentSection = MENU.find(({ path }) =>\\n    $docsCurrentSectionStore\\n      ? path.indexOf(\\n          /self-hosted\\\\/\\\\d\\\\.\\\\d\\\\.\\\\d/.test($docsCurrentSectionStore)\\n            ? $docsCurrentSectionStore.replace(/\\\\d\\\\.\\\\d\\\\.\\\\d/, \\"latest\\")\\n            : $docsCurrentSectionStore\\n        ) >= 0\\n      : /\\\\/docs$/.test(path)\\n  );\\n</script>\\n\\n<style lang=\\"scss\\">.mobile-menu{margin-bottom:2.5rem}@media (min-width:769px){.mobile-menu{display:none}}</style>\\n\\n<div class=\\"mobile-menu\\">\\n  {#if $topicsState}\\n    <MobileMenuTopics {MENU} />\\n  {:else}\\n    <MobileMenuSubMenu {currentSection} />\\n  {/if}\\n</div>\\n"],"names":[],"mappings":"AAsBmB,2BAAY,CAAC,cAAc,MAAM,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2BAAY,CAAC,QAAQ,IAAI,CAAC,CAAC"}'
};
const Mobile_menu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let currentSection;
  let $docsCurrentSectionStore, $$unsubscribe_docsCurrentSectionStore;
  let $topicsState, $$unsubscribe_topicsState;
  $$unsubscribe_docsCurrentSectionStore = subscribe(docsCurrentSectionStore, (value) => $docsCurrentSectionStore = value);
  $$unsubscribe_topicsState = subscribe(topicsState, (value) => $topicsState = value);
  let {MENU: MENU2} = $$props;
  if ($$props.MENU === void 0 && $$bindings.MENU && MENU2 !== void 0)
    $$bindings.MENU(MENU2);
  $$result.css.add(css$5);
  currentSection = MENU2.find(({path}) => $docsCurrentSectionStore ? path.indexOf(/self-hosted\/\d\.\d\.\d/.test($docsCurrentSectionStore) ? $docsCurrentSectionStore.replace(/\d\.\d\.\d/, "latest") : $docsCurrentSectionStore) >= 0 : /\/docs$/.test(path));
  $$unsubscribe_docsCurrentSectionStore();
  $$unsubscribe_topicsState();
  return `<div class="${"mobile-menu svelte-17tjvcy"}">${$topicsState ? `${validate_component(Topics, "MobileMenuTopics").$$render($$result, {MENU: MENU2}, {}, {})}` : `${validate_component(Sub_menu, "MobileMenuSubMenu").$$render($$result, {currentSection}, {}, {})}`}</div>`;
});
var search_svelte = ".input-container.svelte-123f4xb{box-shadow:var(--shadow)}@media(max-width:768px){.input-container.svelte-123f4xb{margin-bottom:1rem}.input-container.svelte-123f4xb:not(.topics-active){display:none}}.input-icon.svelte-123f4xb{position:absolute;top:50%;left:.625rem;width:var(--xx-small);height:var(--xx-small);transform:translateY(-50%);pointer-events:none}input.svelte-123f4xb{height:var(--small);font-size:var(--p-medium)}.algolia-autocomplete{display:block!important}div .algolia-autocomplete.algolia-autocomplete-left .ds-dropdown-menu,div .algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu{left:0!important;min-width:unset;max-width:unset}";
const css$4 = {
  code: ".input-container.svelte-123f4xb{box-shadow:var(--shadow)}@media(max-width:768px){.input-container.svelte-123f4xb{margin-bottom:1rem}.input-container.svelte-123f4xb:not(.topics-active){display:none}}.input-icon.svelte-123f4xb{position:absolute;top:50%;left:.625rem;width:var(--xx-small);height:var(--xx-small);transform:translateY(-50%);pointer-events:none}input.svelte-123f4xb{height:var(--small);font-size:var(--p-medium)}.algolia-autocomplete{display:block!important}div .algolia-autocomplete.algolia-autocomplete-left .ds-dropdown-menu,div .algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu{left:0!important;min-width:unset;max-width:unset}",
  map: '{"version":3,"file":"search.svelte","sources":["search.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport topicsState from \\"./states/topics-state\\";\\nconst docSearchJSVersion = \\"2.6.3\\";\\nconst docSearchInputSelector = \\"search-doc-input\\";\\nlet docSearchInput;\\nlet docSearchScript;\\nlet docSearchScriptLoaded = false;\\nlet placeholder = \\"Quick search\\";\\n$: if (docSearchInput && (docSearchScript || docSearchScriptLoaded)) {\\n    window.docsearch &&\\n        window.docsearch({\\n            apiKey: \\"1a880f3060e9ff81ff84087fc90878fc\\",\\n            indexName: \\"gitpod\\",\\n            inputSelector: `#${docSearchInputSelector}`,\\n            // Set debug to true to inspect the dropdown\\n            debug: false,\\n        });\\n}\\nconst processDocSearchScriptLoadEvent = () => {\\n    docSearchScriptLoaded = true;\\n};\\nconst handleBodyKeyDown = (event) => {\\n    if ((event.ctrlKey || event.metaKey) && event.key === \\"k\\") {\\n        docSearchInput.focus();\\n    }\\n};\\nonMount(() => {\\n    if (!navigator.userAgent.toLowerCase().match(/mobile/i)) {\\n        const platformKey = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)\\n            ? \\"\u2318\\"\\n            : \\"Ctrl\\";\\n        placeholder += ` ${platformKey}+K`;\\n    }\\n});\\n</script>\\n\\n<style lang=\\"scss\\">.input-container{box-shadow:var(--shadow)}@media (max-width:768px){.input-container{margin-bottom:1rem}.input-container:not(.topics-active){display:none}}.input-icon{position:absolute;top:50%;left:.625rem;width:var(--xx-small);height:var(--xx-small);transform:translateY(-50%);pointer-events:none}input{height:var(--small);font-size:var(--p-medium)}:global(.algolia-autocomplete){display:block!important}:global(div .algolia-autocomplete.algolia-autocomplete-left .ds-dropdown-menu),:global(div .algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu){left:0!important;min-width:unset;max-width:unset}</style>\\n\\n<svelte:head>\\n  <link\\n    rel=\\"stylesheet\\"\\n    href=\\"https://cdn.jsdelivr.net/npm/docsearch.js@{docSearchJSVersion}/dist/cdn/docsearch.min.css\\"\\n  />\\n  <script\\n    on:load={processDocSearchScriptLoadEvent}\\n    bind:this={docSearchScript}\\n    src=\\"https://cdn.jsdelivr.net/npm/docsearch.js@{docSearchJSVersion}/dist/cdn/docsearch.min.js\\"></script>\\n</svelte:head>\\n\\n<svelte:body on:keydown={handleBodyKeyDown} />\\n\\n<div\\n  class={`input-container relative bg-white rounded-xl w-full mb-12 ${\\n    $topicsState ? \\"topics-active\\" : \\"\\"\\n  }`}\\n>\\n  <label for={docSearchInputSelector} class=\\"sr-only\\">Search</label>\\n  <img\\n    class=\\"input-icon\\"\\n    src=\\"/svg/mag-glass.svg\\"\\n    alt=\\"Search\\"\\n    aria-hidden=\\"true\\"\\n  />\\n  <input\\n    bind:this={docSearchInput}\\n    type=\\"search\\"\\n    {placeholder}\\n    id={docSearchInputSelector}\\n    class=\\"box-border block w-full pl-11 pr-3 py-2 border border-transparent leading-5 text-gray-600 placeholder-gray-500 focus:outline-none focus:bg-none focus:border-white focus:ring-white focus:text-gray-900\\"\\n  />\\n</div>\\n"],"names":[],"mappings":"AAoCmB,+BAAgB,CAAC,WAAW,IAAI,QAAQ,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,+BAAgB,CAAC,cAAc,IAAI,CAAC,+BAAgB,KAAK,cAAc,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,0BAAW,CAAC,SAAS,QAAQ,CAAC,IAAI,GAAG,CAAC,KAAK,OAAO,CAAC,MAAM,IAAI,UAAU,CAAC,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC,UAAU,WAAW,IAAI,CAAC,CAAC,eAAe,IAAI,CAAC,oBAAK,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC,AAAQ,qBAAqB,AAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,AAAQ,qEAAqE,AAAC,CAAC,AAAQ,sEAAsE,AAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,KAAK,CAAC,UAAU,KAAK,CAAC"}'
};
const docSearchJSVersion = "2.6.3";
const docSearchInputSelector = "search-doc-input";
const Search = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $topicsState, $$unsubscribe_topicsState;
  $$unsubscribe_topicsState = subscribe(topicsState, (value) => $topicsState = value);
  let docSearchInput;
  let docSearchScript;
  let placeholder = "Quick search";
  onMount(() => {
    if (!navigator.userAgent.toLowerCase().match(/mobile/i)) {
      const platformKey = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform) ? "\u2318" : "Ctrl";
      placeholder += ` ${platformKey}+K`;
    }
  });
  $$result.css.add(css$4);
  $$unsubscribe_topicsState();
  return `${$$result.head += `<link rel="${"stylesheet"}" href="${"https://cdn.jsdelivr.net/npm/docsearch.js@" + escape(docSearchJSVersion) + "/dist/cdn/docsearch.min.css"}" data-svelte="svelte-tfslqk"><script src="${"https://cdn.jsdelivr.net/npm/docsearch.js@" + escape(docSearchJSVersion) + "/dist/cdn/docsearch.min.js"}"${add_attribute("this", docSearchScript, 1)} data-svelte="svelte-tfslqk"></script>`, ""}



<div class="${escape(null_to_empty(`input-container relative bg-white rounded-xl w-full mb-12 ${$topicsState ? "topics-active" : ""}`)) + " svelte-123f4xb"}"><label${add_attribute("for", docSearchInputSelector, 0)} class="${"sr-only"}">Search</label>
  <img class="${"input-icon svelte-123f4xb"}" src="${"/svg/mag-glass.svg"}" alt="${"Search"}" aria-hidden="${"true"}">
  <input type="${"search"}"${add_attribute("placeholder", placeholder, 0)}${add_attribute("id", docSearchInputSelector, 0)} class="${"box-border block w-full pl-11 pr-3 py-2 border border-transparent leading-5 text-gray-600 placeholder-gray-500 focus:outline-none focus:bg-none focus:border-white focus:ring-white focus:text-gray-900 svelte-123f4xb"}"${add_attribute("this", docSearchInput, 1)}></div>`;
});
var $layout_svelte = ".docs-layout.svelte-ynf0i0{padding-bottom:2.5rem}@media(min-width:769px){.docs-layout.svelte-ynf0i0{display:flex;padding-top:2.5rem}}.menu.svelte-ynf0i0{padding-right:2rem;padding-top:6rem;width:40%}@media(max-width:768px){.menu.svelte-ynf0i0{display:none}}@media(min-width:769px){.doc-contents.svelte-ynf0i0{width:60%}}";
const css$3 = {
  code: ".docs-layout.svelte-ynf0i0{padding-bottom:2.5rem}@media(min-width:769px){.docs-layout.svelte-ynf0i0{display:flex;padding-top:2.5rem}}.menu.svelte-ynf0i0{padding-right:2rem;padding-top:6rem;width:40%}@media(max-width:768px){.menu.svelte-ynf0i0{display:none}}@media(min-width:769px){.doc-contents.svelte-ynf0i0{width:60%}}",
  map: '{"version":3,"file":"$layout.svelte","sources":["$layout.svelte"],"sourcesContent":["<script lang=\\"ts\\">import Menu from \\"../../components/docs/menu.svelte\\";\\nimport MobileMenu from \\"../../components/docs/mobile-menu/index.svelte\\";\\nimport Search from \\"../../components/docs/search.svelte\\";\\nimport \\"../../assets/markdown-commons.scss\\";\\nimport { MENU } from \\"./menu\\";\\n</script>\\n\\n<style>.docs-layout{padding-bottom:2.5rem}@media (min-width:769px){.docs-layout{display:flex;padding-top:2.5rem}}.menu{padding-right:2rem;padding-top:6rem;width:40%}@media (max-width:768px){.menu{display:none}}@media (min-width:769px){.doc-contents{width:60%}}</style>\\n\\n<div class=\\"docs-layout row\\">\\n  <div class=\\"menu\\">\\n    <Menu {MENU} />\\n  </div>\\n  <div class=\\"doc-contents\\">\\n    <Search />\\n    <MobileMenu {MENU} />\\n    <slot />\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAOO,0BAAY,CAAC,eAAe,MAAM,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,0BAAY,CAAC,QAAQ,IAAI,CAAC,YAAY,MAAM,CAAC,CAAC,mBAAK,CAAC,cAAc,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,mBAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,2BAAa,CAAC,MAAM,GAAG,CAAC,CAAC"}'
};
const $layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$3);
  return `<div class="${"docs-layout row svelte-ynf0i0"}"><div class="${"menu svelte-ynf0i0"}">${validate_component(Menu, "Menu").$$render($$result, {MENU}, {}, {})}</div>
  <div class="${"doc-contents svelte-ynf0i0"}">${validate_component(Search, "Search").$$render($$result, {}, {}, {})}
    ${validate_component(Mobile_menu, "MobileMenu").$$render($$result, {MENU}, {}, {})}
    ${slots.default ? slots.default({}) : ``}</div></div>`;
});
var $layout$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: $layout
});
const Beta_banner = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isBetaPage;
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  isBetaPage = $page.path.startsWith("/docs/beta");
  $$unsubscribe_page();
  return `
${isBetaPage ? `<div><blockquote>${isBetaPage ? `<p><strong>Beta Docs</strong></p>
        Welcome to the next version of the docs \u{1F389}. We are actively working on this
        page, please
        <a href="${"https://github.com/gitpod-io/website/issues/461"}" target="${"__self"}">provide feedback on GitHub</a> \u{1F64F}.` : ``}</blockquote></div>` : ``}`;
});
var feedbackWidget_svelte = ".selected.svelte-xb3wsu{--tw-scale-x:1.5;--tw-scale-y:1.5;--tw-grayscale:grayscale(0)}";
const css$2 = {
  code: ".selected.svelte-xb3wsu{--tw-scale-x:1.5;--tw-scale-y:1.5;--tw-grayscale:grayscale(0)}",
  map: '{"version":3,"file":"feedback-widget.svelte","sources":["feedback-widget.svelte"],"sourcesContent":["<script>\\n  // Credit: www.vercel.com/docs \u{1F64F}\\n  import { page } from \\"$app/stores\\";\\n\\n  let selectedEmotion;\\n  let note = \\"\\";\\n  let resultMessage;\\n\\n  const submitFeedback = async () => {\\n    const response = await fetch(\\"/.netlify/functions/feedback\\", {\\n      method: \\"post\\",\\n      body: JSON.stringify({\\n        type: \\"docs\\",\\n        emotion: selectedEmotion,\\n        note,\\n        url: `https://${$page.host + $page.path}`,\\n      }),\\n    });\\n\\n    if (response.status === 201) {\\n      resultMessage = \\"Thanks for your feedback, we appreciate it.\\";\\n    } else {\\n      resultMessage = \\"Oh no, something went wrong :(.\\";\\n    }\\n    setTimeout(() => {\\n      selectedEmotion = undefined;\\n      note = \\"\\";\\n      resultMessage = \\"\\";\\n    }, 5000);\\n  };\\n</script>\\n\\n<style>.selected{--tw-scale-x:1.5;--tw-scale-y:1.5;--tw-grayscale:grayscale(0)}</style>\\n\\n<div class=\\"my-huge\\">\\n  <div\\n    class=\\"bg-white shadow-normal rounded-2xl max-w-md py-small px-xx-small m-auto\\"\\n  >\\n    <h5 class=\\"mb-6 text-center w-full\\">Was this helpful?</h5>\\n    {#if resultMessage}\\n      <p class=\\"text-center\\">{resultMessage}</p>\\n    {:else}\\n      <form on:submit|preventDefault={submitFeedback}>\\n        <div class=\\"flex justify-center space-x-6\\">\\n          {#each new Array(4) as _, index}\\n            <button\\n              on:click|preventDefault={() => (selectedEmotion = index + 1)}\\n              class:selected={selectedEmotion === index + 1}\\n              class=\\"filter grayscale transform transition duration-150 hover:grayscale-0 hover:scale-150\\"\\n            >\\n              <img\\n                src=\\"/images/docs/feedback-widget/{index + 1}.svg\\"\\n                alt=\\"Feedback {index + 1} of 4\\"\\n                title=\\"Feedback {index + 1} of 4\\"\\n                class=\\"h-6 w-6\\"\\n              />\\n            </button>\\n          {/each}\\n        </div>\\n        {#if selectedEmotion}\\n          <div class=\\"mt-x-small\\">\\n            <label for=\\"note\\">Feedback</label>\\n            <div>\\n              <textarea\\n                bind:value={note}\\n                id=\\"note\\"\\n                width=\\"100%\\"\\n                placeholder=\\"Your feedback...\\"\\n                aria-label=\\"Feedback input\\"\\n                autocapitalize=\\"off\\"\\n                autocomplete=\\"off\\"\\n                autocorrect=\\"off\\"\\n                type=\\"text\\"\\n                class=\\"mb-0\\"\\n              />\\n            </div>\\n            <div>\\n              <span\\n                ><button\\n                  role=\\"button\\"\\n                  type=\\"submit\\"\\n                  class=\\"btn-primary mt-micro\\"><span>Send</span></button\\n                ></span\\n              >\\n            </div>\\n          </div>\\n        {/if}\\n      </form>\\n    {/if}\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAgCO,uBAAS,CAAC,aAAa,GAAG,CAAC,aAAa,GAAG,CAAC,eAAe,YAAY,CAAC"}'
};
const Feedback_widget = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => value);
  let selectedEmotion;
  $$result.css.add(css$2);
  $$unsubscribe_page();
  return `<div class="${"my-huge"}"><div class="${"bg-white shadow-normal rounded-2xl max-w-md py-small px-xx-small m-auto"}"><h5 class="${"mb-6 text-center w-full"}">Was this helpful?</h5>
    ${`<form><div class="${"flex justify-center space-x-6"}">${each(new Array(4), (_, index2) => `<button class="${[
    "filter grayscale transform transition duration-150 hover:grayscale-0 hover:scale-150 svelte-xb3wsu",
    selectedEmotion === index2 + 1 ? "selected" : ""
  ].join(" ").trim()}"><img src="${"/images/docs/feedback-widget/" + escape(index2 + 1) + ".svg"}" alt="${"Feedback " + escape(index2 + 1) + " of 4"}" title="${"Feedback " + escape(index2 + 1) + " of 4"}" class="${"h-6 w-6"}">
            </button>`)}</div>
        ${``}</form>`}</div></div>`;
});
var editInGitpod_svelte = "a.svelte-164hpj2:after{display:none!important}.btn-otherbrand.svelte-164hpj2{display:inline-flex!important;border-radius:1rem;font-size:var(--btn-small);padding-left:var(--micro);padding-right:var(--micro)}.logo.svelte-164hpj2{transform:-1px}";
const css$1 = {
  code: "a.svelte-164hpj2:after{display:none!important}.btn-otherbrand.svelte-164hpj2{display:inline-flex!important;border-radius:1rem;font-size:var(--btn-small);padding-left:var(--micro);padding-right:var(--micro)}.logo.svelte-164hpj2{transform:-1px}",
  map: '{"version":3,"file":"edit-in-gitpod.svelte","sources":["edit-in-gitpod.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { page } from \\"$app/stores\\";\\nimport LogoTextless from \\"../svgs/logo-textless.svelte\\";\\nconst BASE_PATH = \\"https://gitpod.io#https://github.com/gitpod-io/website/tree/main/src/routes\\";\\nconst currentPage = $page.path === \\"/docs\\" ? `${$page.path}/index` : $page.path;\\nconst href = `${BASE_PATH}${currentPage}.md`;\\n</script>\\n\\n<style>a:after{display:none!important}.btn-otherbrand{display:inline-flex!important;border-radius:1rem;font-size:var(--btn-small);padding-left:var(--micro);padding-right:var(--micro)}.logo{transform:-1px}</style>\\n\\n<div class=\\"flex justify-end mb-micro\\">\\n  <a {href} class=\\"btn-otherbrand\\" target=\\"_blank\\">\\n    <span class=\\"logo\\">\\n      <LogoTextless />\\n    </span> <span class=\\"ml-macro\\">Edit in Gitpod</span>\\n  </a>\\n</div>\\n"],"names":[],"mappings":"AAOO,gBAAC,MAAM,CAAC,QAAQ,IAAI,UAAU,CAAC,8BAAe,CAAC,QAAQ,WAAW,UAAU,CAAC,cAAc,IAAI,CAAC,UAAU,IAAI,WAAW,CAAC,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,CAAC,oBAAK,CAAC,UAAU,IAAI,CAAC"}'
};
const BASE_PATH = "https://gitpod.io#https://github.com/gitpod-io/website/tree/main/src/routes";
const Edit_in_gitpod = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  const currentPage = $page.path === "/docs" ? `${$page.path}/index` : $page.path;
  const href = `${BASE_PATH}${currentPage}.md`;
  $$result.css.add(css$1);
  $$unsubscribe_page();
  return `<div class="${"flex justify-end mb-micro"}"><a${add_attribute("href", href, 0)} class="${"btn-otherbrand svelte-164hpj2"}" target="${"_blank"}"><span class="${"logo svelte-164hpj2"}">${validate_component(Logo_textless, "LogoTextless").$$render($$result, {}, {}, {})}</span> <span class="${"ml-macro"}">Edit in Gitpod</span></a></div>`;
});
var prevNext_svelte = "a.svelte-1kanmwt{font-weight:100}";
const css = {
  code: "a.svelte-1kanmwt{font-weight:100}",
  map: '{"version":3,"file":"prev-next.svelte","sources":["prev-next.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { page } from \\"$app/stores\\";\\nimport { getMenuContext } from \\"../../routes/docs/menu\\";\\nconst menuCtx = getMenuContext($page.path);\\n</script>\\n\\n<style lang=\\"scss\\">a{font-weight:100}</style>\\n\\n<div\\n  class=\\"flex justify-between pt-xx-small border-t border-solid border-gray-400\\"\\n>\\n  {#if menuCtx.prev}\\n    <a href={menuCtx.prev.path} title={`Previous: ${menuCtx.prev.title}`}>\\n      Previous\\n    </a>\\n  {:else}\\n    <div />\\n  {/if}\\n  {#if menuCtx.next}\\n    <a href={menuCtx.next.path} title={`Next: ${menuCtx.next.title}`}> Next </a>\\n  {:else}\\n    <div />\\n  {/if}\\n</div>\\n"],"names":[],"mappings":"AAKmB,gBAAC,CAAC,YAAY,GAAG,CAAC"}'
};
const Prev_next = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  const menuCtx = getMenuContext($page.path);
  $$result.css.add(css);
  $$unsubscribe_page();
  return `<div class="${"flex justify-between pt-xx-small border-t border-solid border-gray-400"}">${menuCtx.prev ? `<a${add_attribute("href", menuCtx.prev.path, 0)}${add_attribute("title", `Previous: ${menuCtx.prev.title}`, 0)} class="${"svelte-1kanmwt"}">Previous
    </a>` : `<div></div>`}
  ${menuCtx.next ? `<a${add_attribute("href", menuCtx.next.path, 0)}${add_attribute("title", `Next: ${menuCtx.next.title}`, 0)} class="${"svelte-1kanmwt"}">Next </a>` : `<div></div>`}</div>`;
});
const Docs_content_layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $docsCurrentSectionStore, $$unsubscribe_docsCurrentSectionStore;
  $$unsubscribe_docsCurrentSectionStore = subscribe(docsCurrentSectionStore, (value) => $docsCurrentSectionStore = value);
  let {section} = $$props;
  let {title} = $$props;
  if ($$props.section === void 0 && $$bindings.section && section !== void 0)
    $$bindings.section(section);
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  set_store_value(docsCurrentSectionStore, $docsCurrentSectionStore = section, $docsCurrentSectionStore);
  $$unsubscribe_docsCurrentSectionStore();
  return `${validate_component(Open_graph, "OpenGraph").$$render($$result, {
    data: {
      description: "Explore the documentation to learn more about Gitpod.io and Gitpod Self-Hosted.",
      title: title ? title : "Gitpod Documentation"
    }
  }, {}, {})}
<div class="${"content-docs"}">${validate_component(Beta_banner, "BetaBanner").$$render($$result, {}, {}, {})}
  ${validate_component(Edit_in_gitpod, "EditInGitpod").$$render($$result, {}, {}, {})}
  ${slots.default ? slots.default({}) : ``}
  ${validate_component(Feedback_widget, "FeedbackWidget").$$render($$result, {}, {}, {})}
  ${validate_component(Prev_next, "PrevNext").$$render($$result, {}, {}, {})}</div>`;
});
const metadata$2o = {section: null, title: "Introduction"};
const prerender$2r = true;
const Docs = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2o), {}, {
    default: () => `<h1 id="${"introduction-to-gitpod"}">Introduction to Gitpod<a href="${"#introduction-to-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p><a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">Gitpod</a> is a container-based development platform that puts developer experience first. Gitpod provisions <strong>ready-to-code development environments</strong> in the cloud accessible through your browser and your local IDE (stay tuned for a blog post with more details on that).</p>
<p>Gitpod enables development teams to describe their dev environment as code and <strong>start configurable and fresh development environments for each new task</strong> entirely in the cloud. Think CI/CD for dev environments.</p>
<h2 id="${"always-ready-to-code"}">Always ready-to-code<a href="${"#always-ready-to-code"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Too much time is lost to a poor development experience. Setting up local dev environments that are brittle. Waiting for compilation. Downloading dependencies. Massaging them over time to make sure they work with all projects. \u201CWorks on my machine\u201D situations, configuration drift and broken tool chains are slowing down professional software teams.</p>
<p>With Gitpod this stops. Instead you treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even start switching between workspaces - one for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Only then you are <strong>always ready-to-code</strong> - immediately creative, immediately productive with the click of a button and without any friction. Allowing yourself and your team to build applications quicker and more collaboratively.</p>
<h2 id="${"your-computer-in-the-cloud"}">Your computer in the cloud<a href="${"#your-computer-in-the-cloud"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>A Gitpod workspace includes everything developers need to be productive: source code, a Linux shell with root/sudo, a file system, the full VS Code editing experience including extensions, language support and all other tools and binaries that run on Linux.</p>
<p>Workspaces are highly customizable and can be pre-configured and optimized on both a team/project as well as an individual/developer level. From themes to extensions developers have full control. Workspaces work with all major git hosting platforms including GitHub, GitLab and Bitbucket.</p>
<p>Leveraging the power of the cloud Gitpod provisions <strong>blazingly fast, ephemeral and secure development environments</strong>.</p>
<h3 id="${"-fast"}">\u26A1 Fast<a href="${"#-fast"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod <strong>launches workspaces in seconds</strong> and removes long init and build times by continuously pre-building workspaces for your project. This enables you and everybody collaborating on your project to <strong>start coding or debugging immediately</strong>, from any git context, at any time, from any device. No more waiting for NPM or Maven to download the Internet.</p>
<p>Spinning up dev environments is easily repeatable and reproducible, because Gitpod creates a single configuration file in your repository allowing you to <strong>automate, version-control and share consistent dev environments across your team</strong>. We call this <a href="${"https://www.gitpod.io/blog/dev-env-as-code"}" rel="${"nofollow"}">dev-environments-as-code</a>.</p>
<h3 id="${"\uFE0F-ephemeral"}">\u2699\uFE0F Ephemeral<a href="${"#%EF%B8%8F-ephemeral"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod continuously builds <em>all</em> your git branches like a CI server. Whenever your code changes (e.g. when new commits are pushed to your repository), Gitpod can prebuild workspaces, i.e. run the <code>init</code> commands in your <code>.gitpod.yml</code> configuration file before you even start a workspace.</p>
<p>Then, when someone from your team does create a new workspace on a branch or Pull/Merge Request a workspace will load almost instantly, because all dependencies will have been already downloaded ahead of time and your code will be already compiled.</p>
<p>As a result you can treat your dev environments as something ephemeral: you start them, you code, you push your code, and you forget about them. For your next task, you\u2019ll use a fresh one.</p>
<p>More on <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">prebuilds</a>.</p>
<h3 id="${"-secure"}">\u{1F512} Secure<a href="${"#-secure"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>We are living in a remote world, where copies of your source code stored locally on countless unsecure machines and networks is considered bad practice. With Gitpod your code stays in the cloud only accessible from a secure browser connection. Gitpod works on any machine such as your Chromebook or iPad. All you need is a browser. Gitpod natively integrates with GitHub, GitLab and Bitbucket and creates one source of truth for your intellectual property. Gitpod is built with security in mind and currently in the process of becoming SOC 2 and ISO 27001 compliant.</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"/docs/quickstart"}">Quickstart with example project</a> - understand the benefits in a learning environment</li>
<li><a href="${"/docs/getting-started"}">Getting started with your project</a> - configure one of your own existing projects</li></ul>`
  })}`;
});
var index$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docs,
  metadata: metadata$2o,
  prerender: prerender$2r
});
const metadata$2n = {
  section: "develop",
  title: "Collaboration & Sharing"
};
const prerender$2q = true;
const Sharing_and_collaboration = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2n), {}, {
    default: () => `<h1 id="${"collaboration--sharing-of-workspaces"}">Collaboration &amp; Sharing of Workspaces<a href="${"#collaboration--sharing-of-workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>There are two ways to share your workspaces:</p>
<ul><li><a href="${"#sharing-snapshots"}">Sharing Snapshots</a></li>
<li><a href="${"#sharing-running-workspaces"}">Sharing Running Workspaces</a></li></ul>
<h2 id="${"sharing-snapshots"}">Sharing Snapshots<a href="${"#sharing-snapshots"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can take snapshot URLs of your workspaces at any time and share them with others. Anyone clicking on such a snapshot link will get a complete clone of your workspace, including the</p>
<ul><li>state of the workspace</li>
<li>the VS Code layout</li></ul>
<p>Workspaces created from snapshots are treated as restarts, so you can configure them to launch differently than if you had created a fresh workspace from git. Also, this is useful if you want to create
easy-to-consume reproducible workspace states, for issues, stackoverflow answers, trainings, presentations, etc.</p>
<p>Unlike sharing running workspaces, snapshotted workspaces are full copies. This means developers can do whatever they like with the content. And of course, no access to any of your credentials is shared.</p>
<p>Read more about this feature <a href="${"/blog/workspace-snapshots"}">in this blog post</a>.</p>
<h3 id="${"how-to-take-a-snapshot-url"}">How To Take a Snapshot URL<a href="${"#how-to-take-a-snapshot-url"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Creating a snapshot is simple. You can find the action behind the hamburger menu on the top left.</p>
<p>Once you execute it, the snapshot is taken and the URL is shown in a dialog.</p>
<h2 id="${"sharing-running-workspaces"}">Sharing Running Workspaces<a href="${"#sharing-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Sharing running workspaces makes it possible to quickly look at a workspace together with a (remote) colleague. It is similar to collaborating on Google Docs, in that you can see who is online and look at the same code and processes.</p>
<p>To share your workspace, navigate to the workspaces page at <a href="${"https://gitpod.io/workspaces"}" rel="${"nofollow"}">https://gitpod.io/workspaces</a>. From there:</p>
<ol><li>Move your mouse over the workspace you want to share (change the filter to All if you don\u2019t see your workspace).</li>
<li>Click the three dots menu to the right of the highlighted workspace.</li>
<li>Click <strong>Share</strong></li></ol>
<p>This marks your workspace as shared. When you open it, you can copy &amp; share its URL.</p>
<blockquote><p><strong>Security note:</strong></p>
<p>Beware, anybody with this URL and a Gitpod account will be able to access the workspace as long as
it is shared and running.</p>
<p>Every action involving git in a shared workspace happens on behalf of the workspace owner\u2019s account without further authorization.
It is highly recommended to give workspace URLs only to trusted users and unshare workspaces as soon as sharing them is no longer necessary.</p>
<p><strong>A running Gitpod workspace really is your personal machine.</strong></p></blockquote>`
  })}`;
});
var sharingAndCollaboration = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Sharing_and_collaboration,
  metadata: metadata$2n,
  prerender: prerender$2q
});
const metadata$2m = {
  section: "languages-and-frameworks",
  title: "Languages & Frameworks"
};
const prerender$2p = true;
const Languages_and_frameworks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2m), {}, {
    default: () => `<h1 id="${"languages--frameworks"}">Languages &amp; Frameworks<a href="${"#languages--frameworks"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Below is a list of language and framework specific tips &amp; tricks.</p>
<ul><li><a href="${"/docs/languages/javascript"}">JavaScript</a></li>
<li><a href="${"/docs/languages/python"}">Python</a></li>
<li><a href="${"/docs/languages/html"}">HTML/CSS</a></li>
<li><a href="${"/docs/languages/java"}">Java</a></li>
<li><a href="${"/docs/languages/cpp"}">C++</a></li>
<li><a href="${"/docs/languages/go"}">Go</a></li>
<li><a href="${"/docs/languages/bash"}">Bash</a></li>
<li><a href="${"/docs/languages/ruby"}">Ruby</a></li>
<li><a href="${"/docs/languages/php"}">PHP</a></li>
<li><a href="${"/docs/languages/vue"}">Vue</a></li>
<li><a href="${"/docs/languages/scala"}">Scala</a></li>
<li><a href="${"/docs/languages/rust"}">Rust</a></li>
<li><a href="${"/docs/languages/dotnet"}">.NET</a></li>
<li><a href="${"/docs/languages/dart"}">Dart</a></li>
<li><a href="${"/docs/languages/julia"}">Julia</a></li>
<li><a href="${"/docs/languages/latex"}">LaTeX</a></li>
<li><a href="${"/docs/languages/r"}">R</a></li>
<li><a href="${"/docs/languages/kotlin"}">Kotlin</a></li>
<li><a href="${"/docs/languages/python#pandas"}">Pandas</a></li>
<li><a href="${"/docs/languages/deno"}">Deno</a></li></ul>`
  })}`;
});
var languagesAndFrameworks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Languages_and_frameworks,
  metadata: metadata$2m,
  prerender: prerender$2p
});
const metadata$2l = {
  section: "subscriptions",
  title: "Professional Open Source"
};
const prerender$2o = true;
const Professional_open_source = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2l), {}, {
    default: () => `<h1 id="${"professional-open-source"}">Professional Open Source<a href="${"#professional-open-source"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>It wouldn\u2019t have been possible for us to create Gitpod without all of the amazing open-source work it\u2019s built upon. And still, we\u2019re developing huge parts of Gitpod out in the open.</p>
<p>Deeply devoted to the open-source community, we are happy to provide the professional open-source community a free <strong>Professional Open Source</strong> plan.</p>
<h2 id="${"what-does-it-include"}">What does it include?<a href="${"#what-does-it-include"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>No more hour restrictions, you\u2019ll be able to use Gitpod for any number of hours, on any public GitHub or GitLab repository.</p>
<h2 id="${"who-is-eligible"}">Who is eligible?</h2>
<p>You should meet <strong>at least one</strong> of the following requirements:</p>
<ol><li>You are a maintainer, or core contributor, of a well-established open-source project</li>
<li>A significant part of your income is from open source work (e.g. via Liberapay, Open Collective, GitHub Sponsors, Patreon, etc)</li>
<li>You regularly contribute to open source in other ways (e.g. producing regular content like blog posts, videos, live streams, or organizing meet-ups, conferences, hackathons, etc)</li></ol>
<p>Does one of the above apply to your work? If so, please <a href="${"/contact"}">get in touch</a> and provide links to your projects. We\u2019d love to see what you\u2019re working on.</p>
<p>Feel free to reach out if you have questions.</p>`
  })}`;
});
var professionalOpenSource = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Professional_open_source,
  metadata: metadata$2l,
  prerender: prerender$2o
});
const metadata$2k = {
  section: "develop",
  title: "Command Line Interface"
};
const prerender$2n = true;
const Command_line_interface = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2k), {}, {
    default: () => `<h1 id="${"command-line-interface"}">Command Line Interface<a href="${"#command-line-interface"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod supports a command line interface that is available in each workspace terminal called <code>gp</code>:</p>
<pre class="${"language-text"}">${`<code class="language-text">Command line interface for Gitpod

Usage:
  gp [command]

Available Commands:
  await-port          Waits for a process to listen on a port
  env                 Controls user-defined, persistent environment variables.
  forward-port        Makes a port available on 0.0.0.0 so that it can be exposed to the internet
  help                Help about any command
  init                Create a Gitpod configuration for this project.
  open                Opens a file in Gitpod
  preview             Opens a URL in the IDE&#39;s preview
  sync-await          Awaits an event triggered using gp sync-done
  sync-done           Notifies the corresponding gp sync-await calls that this event has happened
  url                 Prints the URL of this workspace

Flags:
  -h, --help   help for gp

Use &quot;gp [command] --help&quot; for more information about a command.</code>`}</pre>
<h2 id="${"init"}">Init<a href="${"#init"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod workspaces can be configured - see <a href="${"/docs/configure"}">Configuring Workspaces</a> for more details. <code>gp init</code> generates a default <code>.gitpod.yml</code> file. You can customize it to match your requirements.</p>
<p>Alternatively, <code>gp init -i</code> is an interactive guide which helps create the <code>.gitpod.yml</code> configuration file based on a few questions you answer.</p>
<h2 id="${"open"}">Open<a href="${"#open"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Modern editors/IDE\u2019s support command line tooling to open a file (e.g. VS Code <code>code foo.txt</code>). In Gitpod, this can be done using <code>gp open &lt;filename&gt;</code>.
We also added common aliases for <code>gp open</code>: <code>code</code> and <code>open</code>.</p>
<h2 id="${"preview"}">Preview<a href="${"#preview"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>gp preview</code> is similar to <code>gp open</code>, except that it does not open a file in the editor but a URL in a preview pane on the right.</p>
<p>Make sure you provide a valid URL, i.e. including the protocol. For example, http://localhost:8080.</p>
<h2 id="${"url"}">URL<a href="${"#url"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod workspaces can expose services to the internet. <code>gp url</code> provides the URL which points to a service served from a Gitpod workspace. For example <code>gp url 8080</code> prints the URL which points to the service listening on port 8080 in this current workspace.</p>
<p>You can combine the <code>preview</code> and the <code>url</code> command to open a certain path instead of the default URL.</p>
<p>For instance:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp preview $(gp url 3000)/my/path/index.html</code>`}</pre>
<p>If you put this into the <code>.gitpod.yml</code> to open the a certain page on startup, make sure you <a href="${"/docs/config-ports"}">ignore the default action</a> when the port opens.</p>
<h2 id="${"env"}">Env<a href="${"#env"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With <code>gp env API_ENDPOINT=https://api.example.com</code> you can set an <code>API_ENDPOINT</code> environment variable that is accessible for this project, even if you stop the workspace and start a new one.</p>
<p>To delete or unset an environment variable, you use <code>gp env -u API_ENDPOINT</code>.</p>
<p>Please refer to the help output provided by <code>gp env --help</code> for more use cases of the <code>gp env</code> command.</p>
<h2 id="${"forward-port"}">Forward Port<a href="${"#forward-port"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In Gitpod, services/servers running on a port need to be <em>exposed</em> before they become accessible from the internet. This process only works with services listening on <code>0.0.0.0</code> and not just <code>localhost</code>.
Sometimes it is not possible to make a server listen on <code>0.0.0.0</code>, e.g. because it is not your code and there are simply no means of configuration.</p>
<p>In that case, <code>gp forward-port &lt;port&gt;</code> can be used to forward all traffic form a socket listing on all network interfaces to your process listening on localhost only.</p>
<h2 id="${"await-port"}">Await Port<a href="${"#await-port"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When writing tasks to be executed on workspace start, one sometimes wants to wait for an http service to be available. <code>gp await-port</code> does that.</p>
<p>Here\u2019s an example that will open a certain path once a service is a available:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp await-port 3000 &amp;&amp; gp preview $(gp url 3000)/my/path/index.html</code>`}</pre>
<h2 id="${"sync-await"}">sync-await<a href="${"#sync-await"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In situations where you work with multiple terminals and one depends on a task in another terminal to complete, <code>gp sync-await &lt;name&gt;</code> waits until you call <code>gp sync-done &lt;name&gt;</code> in another terminal.</p>
<p>See <a href="${"/docs/config-start-tasks#wait-for-commands-to-complete"}">Start Tasks</a> for a real-world example.</p>
<h2 id="${"sync-done"}">sync-done<a href="${"#sync-done"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To notify a <code>gp sync-await &lt;name&gt;</code> call (see previous chapter), you can call <code>gp sync-done &lt;name&gt;</code>.</p>
<p>A common use case is the followig where we have three terminals:</p>
<ul><li>Terminal 1: A build process takes several minutes to complete. At the end, you call <code>gp sync-done build</code>.</li>
<li>Terminal 2: You use <code>gp sync-await build &amp;&amp; npm run start-database</code> to wait for the build to complete before you start a database</li>
<li>Terminal 3: You use <code>gp sync-await build &amp;&amp; npm run dev</code> to wait for the build to complete before you start the dev server.</li></ul>
<p>See <a href="${"/docs/config-start-tasks#wait-for-commands-to-complete"}">Start Tasks</a> for a real-world example.</p>`
  })}`;
});
var commandLineInterface = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Command_line_interface,
  metadata: metadata$2k,
  prerender: prerender$2n
});
const metadata$2j = {
  section: "integrations",
  title: "Bitbucket Integration"
};
const prerender$2m = true;
const Bitbucket_integration = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2j), {}, {
    default: () => `<h1 id="${"bitbucket-integration"}">Bitbucket Integration<a href="${"#bitbucket-integration"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod works with any public or private repository on <a href="${"https://bitbucket.org/"}" rel="${"nofollow"}">Bitbucket</a>.</p>
<p>To start a workspace from a Bitbucket project, prefix the Bitbucket project URL with <code>gitpod.io/#</code> as described in <a href="${"/docs/getting-started"}">Getting Started</a> or use the <a href="${"/docs/browser-extension"}">browser extension</a> to add a convenient Gitpod button to every Bitbucket page.</p>
<h2 id="${"enable-prebuilds"}">Enable Prebuilds<a href="${"#enable-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To enable <a href="${"/docs/prebuilds"}">prebuilt workspaces</a> for your Bitbucket project, you need to grant the <code>webhook</code> permission in Gitpod\u2019s <a href="${"https://gitpod.io/integrations"}" rel="${"nofollow"}">Integration Settings</a> page. This allows Gitpod to install a webhook which creates a new prebuild for every push event.</p>
<p>The webhook will be automatically installed when you trigger the first prebuild manually. For this, prefix your Bitbucket project URL with <code>gitpod.io/#prebuild/</code> as described in the <a href="${"/docs/prebuilds#on-gitlab-and-bitbucket"}">prebuilds page</a>.</p>`
  })}`;
});
var bitbucketIntegration = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Bitbucket_integration,
  metadata: metadata$2j,
  prerender: prerender$2m
});
const metadata$2i = {
  section: "configure",
  title: "Environment Variables"
};
const prerender$2l = true;
const Environment_variables = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2i), {}, {
    default: () => `<h1 id="${"environment-variables"}">Environment Variables<a href="${"#environment-variables"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>You can pass environment variables into your workspace.</p>
<h2 id="${"default-environment-variables"}">Default Environment Variables<a href="${"#default-environment-variables"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The following environment variables are set automatically by Gitpod and are guaranteed to exist:</p>
<ul><li><code>GITPOD_WORKSPACE_ID</code>: The Universally Unique Identifier (UUID) associated with the workspace.</li>
<li><code>GITPOD_WORKSPACE_URL</code>: The unique URL of the workspace.</li></ul>
<h3 id="${"reserved-prefix"}">Reserved Prefix<a href="${"#reserved-prefix"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Environment variables beginning with the prefix <code>GITPOD_</code> are reserved for internal use by Gitpod and are overridden on every workspace startup. This means that a <em>user-defined</em> variable set with the name <code>GITPOD_FOOBAR</code> will be ignored and not accessible in the workspace.</p>
<h2 id="${"user-specific-environment-variables"}">User-Specific Environment Variables<a href="${"#user-specific-environment-variables"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod supports encrypted, user-specific environment variables.
They are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces.</p>
<h3 id="${"using-the-command-line-gp-env"}">Using the command line: <code>gp env</code><a href="${"#using-the-command-line-gp-env"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The <code>gp</code> CLI prints and modifies the persistent environment variables associated with your user for the current repository.</p>
<p>To set the persistent environment variable <code>foo</code> to the value <code>bar</code> use:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp env foo=bar</code>`}</pre>
<p>Beware that this does not modify your current terminal session, but rather persists this variable for the next workspace on this repository.
<code>gp</code> can only interact with the persistent environment variables for this repository, not the environment variables of your terminal.
If you want to set that environment variable in your terminal, you can do so using -e:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">eval $(gp env -e foo=bar)</code>`}</pre>
<p>To update the current terminal session with the latest set of persistent environment variables, use:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">eval $(gp env -e)</code>`}</pre>
<p>To delete a persistent environment variable use:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp env -u foo</code>`}</pre>
<p>Note that you can delete/unset variables if their repository pattern matches the repository of this workspace exactly. I.e. you cannot
delete environment variables with a repository pattern of <em>/foo, foo/</em> or <em>/</em>.</p>
<pre class="${"language-sh"}">${`<code class="language-sh">Usage:
  gp env [flags]

Flags:
  -e, --export   produce a script that can be eval&#39;ed in Bash
  -h, --help     help for env
  -u, --unset    deletes/unsets persisted environment variables</code>`}</pre>
<h3 id="${"using-the-account-settings"}">Using the account settings<a href="${"#using-the-account-settings"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>You can also configure and view the persistent environment variables in <a href="${"https://gitpod.io/variables"}" rel="${"nofollow"}">your account settings</a>.</p>
<p><img src="${"/images/docs/beta/configure/environment-variables/environment-variables-account-settings.png"}" alt="${"Environment Variables in Account Settings"}"></p>
<p>You can add as many environment variables as you wish.</p>
<p>The repository pattern of each variable determines in what workspace it will be available.
Repository patterns follow the <code>repo/owner</code> pattern. You can use a wildcard on either of the two, e.g. <code>gitpod-io/*</code> would make that variable available in all repositories owned by <code>gitpod-io</code>.
Conversely <code>*/vscode</code> would make that variable available on all repositories called <code>vscode</code>; this is especially useful for forks.
Subsequently <code>*/*</code> makes that variable available in every workspace.</p>
<blockquote><p><strong>Beware:</strong> while the variable values are stored encrypted, they are available as plain text inside a workspace. Be careful when sharing your live workspace or when using <code>*/*</code> as repository pattern.</p></blockquote>
<h2 class="${"h1"}">Passing In Environment Variables</h2>
<p>In addition to user-specific env variables, Gitpod also allows passing in variables through the <code>gitpod.io/#</code> URL.
The syntax for that is:</p>
<pre class="${"language-null"}">${`<code class="language-null">https://gitpod.io/#var=value,var2=value2/https://github.com/my-org/repo-to-work-on</code>`}</pre>
<p>The values are <a href="${"https://www.w3schools.com/tags/ref_urlencode.asp"}" target="${"_blank"}">URL encoded</a> to allow any non-ascii characters in values.
In case of a conflict, e.g. in the example above if the user already had a variable <code>var2</code> set, the user\u2019s value would be used.</p>`
  })}`;
});
var environmentVariables = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Environment_variables,
  metadata: metadata$2i,
  prerender: prerender$2l
});
const metadata$2h = {
  section: "configure",
  title: ".gitpod.yml"
};
const prerender$2k = true;
const Config_gitpod_file = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2h), {}, {
    default: () => `<h1 id="${"gitpodyml"}">.gitpod.yml<a href="${"#gitpodyml"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>A workspace gets configured through a <code>.gitpod.yml</code> file, located at the root of your project, written in YAML syntax. Here\u2019s an example:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token comment"># Commands to start on workspace startup</span>
<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> yarn install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> yarn build
<span class="token comment"># Ports to expose on workspace startup</span>
<span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview</code>`}</pre>
<p>To see a full reference of all available properties, please refer to the <a href="${"/docs/references/gitpod-yml"}"><code>.gitpod.yml reference</code></a> page.</p>
<h2 id="${"how-to-provide-the-gitpodyml-config-file"}">How to provide the .gitpod.yml config file<a href="${"#how-to-provide-the-gitpodyml-config-file"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In order to tell Gitpod how to prepare a dev environment for your project, you check in a <code>.gitpod.yml</code> file into the root of your repository. This way you can
version your workspace configuration together with your code. If, for example, you need to go back to
an old branch that required a different configuration, Gitpod will start with the correct configuration, since that
bit of configuration is part of your codebase.</p>
<h2 id="${"generate-your-gitpod-config-file"}">Generate Your Gitpod Config File<a href="${"#generate-your-gitpod-config-file"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The quickest way to create a <code>.gitpod.yml</code> file is with the <code>gp</code> CLI. In the terminal of a Gitpod workspace, type:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp init</code>`}</pre>
<p>This generates example content you can adjust to meet your needs.</p>
<p>Alternatively, you can use the interactive mode with <code>gp init -i</code>. It will ask you about the different configuration options, generate the <code>.gitpod.yml</code> file and open it in an editor tab so you can review and extend as neccesary.</p>
<p>Gitpod provides auto-complete, hover info and validation for the <code>.gitpod.yml</code> file so you get instant feedback and can rest assure your configuration is valid.</p>`
  })}`;
});
var configGitpodFile = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Config_gitpod_file,
  metadata: metadata$2h,
  prerender: prerender$2k
});
const metadata$2g = {
  section: "configure",
  title: "Start Tasks"
};
const prerender$2j = true;
const Config_start_tasks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2g), {}, {
    default: () => `<h1 id="${"start-tasks"}">Start Tasks<a href="${"#start-tasks"}"><span class="${"icon icon-link"}"></span></a></h1>

<p>To get the most out of ephemeral development environments, it is important to let Gitpod know how to build your project. We can achieve this by defining <code>tasks</code> in the <a href="${"/docs/references/gitpod-yml"}"><code>.gitpod.yml</code></a> configuration file.</p>
<blockquote><p><strong>Note</strong>: In your local development environment, you likely set up your project only once. If you work in a team, you probably have written instructions on how to get started. With Gitpod, you automate these manual steps so that a new environment can be set up repeatedly by Gitpod.</p></blockquote>
<p>Tasks are shell scripts that run on top of the docker image you configure (learn more about <a href="${"/docs/config-docker"}">custom docker images</a>).</p>
<h2 id="${"execution-order"}">Execution order<a href="${"#execution-order"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With Gitpod, you have the following three types of tasks:</p>
<ul><li><code>before</code></li>
<li><code>init</code></li>
<li><code>command</code></li></ul>
<p>The order in which these tasks execute depends on whether you have <a href="${"/docs/prebuilds"}">Prebuilds</a> configured for your project and which startup scenario applies. Let\u2019s look at the details.</p>
<h3 id="${"prebuild-and-new-workspaces"}">Prebuild and New Workspaces<a href="${"#prebuild-and-new-workspaces"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>In this startup scenario, you can see how Prebuilds impact the execution order of tasks:</p>
<p><img src="${"/images/docs/beta/configure/start-tasks/prebuilds-new-workspace.png"}" alt="${"Start tasks for Prebuilds & New Workspace"}"></p>
<p>The <code>init</code> task is where you want to do the heavy lifting, things like:</p>
<ul><li>Download &amp; install dependencies</li>
<li>Compile your source code</li>
<li>Run your test suite</li>
<li>Any other long-running, terminating processes necessary to prepare your project</li></ul>
<p>As displayed in the diagram above, we highly recommend you enable Prebuilds for your project. In that case, Gitpod executes the <code>before</code> and most importantly, <code>init</code> tasks automatically for each new commit to your project.</p>
<p>By the time you start a new workspace, all that\u2019s left to do is execute the <code>begin</code> (optional) and <code>command</code> tasks. The latter most often starts a database and/or development server.</p>
<blockquote><p>Let Gitpod run the time-consuming <code>init</code> tasks continously behind the scene so you and anyone who opens your project on Gitpod doesn\u2019t have to wait.</p></blockquote>
<h3 id="${"restart-a-workspace"}">Restart a Workspace<a href="${"#restart-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>When you restart a workspace, Gitpod already executed the <code>init</code> task (<a href="${"#prebuild-and-new-workspaces"}">see above</a>) either as part of a Prebuild or when you started the workspace for the first time.</p>
<p>As part of a workspace restart, Gitpod executes the <code>before</code> and <code>command</code> tasks:</p>
<p><img src="${"/images/docs/beta/configure/start-tasks/restart-workspace.png"}" alt="${"Restart a workspace"}"></p>
<h3 id="${"start-a-snapshot"}">Start a Snapshot<a href="${"#start-a-snapshot"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>When you start a snapshot, Gitpod already executed the <code>init</code> task (<a href="${"#prebuild-and-new-workspaces"}">see above</a>) either as part of a Prebuild or when you or a team member started the snapshot\u2019s initial workspace for the first time.</p>
<p>As part of starting a snapshot, Gitpod executes the <code>before</code> and <code>command</code> tasks:</p>
<p><img src="${"/images/docs/beta/configure/start-tasks/start-snapshot.png"}" alt="${"Start a snapshot"}"></p>
<h2 id="${"configure-the-terminal"}">Configure the terminal<a href="${"#configure-the-terminal"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can configure where terminals open using the <code>openMode</code> properties below.
Please note that this information is used if no previous terminals in the layout exist.
Snapshots will first try to reuse existing terminals in the layout, before opening new ones.</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Static Server
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python3 <span class="token punctuation">-</span>m http.server 8080
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DB Server
    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh ./scripts/start<span class="token punctuation">-</span>db.sh
    <span class="token key atrule">openMode</span><span class="token punctuation">:</span> split<span class="token punctuation">-</span>right</code>`}</pre>
<h3 id="${"openmode"}">openMode<a href="${"#openmode"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>You can configure how the terminal should be opened relative to the previous task.</p>
<table><thead><tr><th>openMode</th>
<th>Description</th></tr></thead>
<tbody><tr><td><code>openMode: tab-after</code></td>
<td>Opens in the same tab group right after the previous tab</td></tr>
<tr><td><code>openMode: tab-before</code></td>
<td>Opens in the same tab group left before the previous tab</td></tr>
<tr><td><code>openMode: split-right</code></td>
<td>Splits and adds the terminal to the right</td></tr>
<tr><td><code>openMode: split-left</code></td>
<td>Splits and adds the terminal to the left</td></tr>
<tr><td><code>openMode: split-top</code></td>
<td><strong>Deprecated</strong>. Splits and adds the terminal to the top</td></tr>
<tr><td><code>openMode: split-bottom</code></td>
<td><strong>Deprecated</strong>. Splits and adds the terminal to the bottom</td></tr></tbody></table>
<h2 id="${"example-tasks"}">Example Tasks<a href="${"#example-tasks"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The examples below are common use cases you can get inspired by and adjust for your project\u2019s needs.</p>
<blockquote><p><strong>Note</strong>: <code>begin</code> and <code>init</code> tasks need to terminate while <code>command</code> can run indefinitely (i.e. until cancelled with Ctrl + C). This is because <code>begin</code> and <code>init</code> may run as part of a prebuild and if these tasks do not terminate, the prebuild will eventually fail with a timeout.</p></blockquote>
<h3 id="${"one-line-tasks"}">One-line tasks<a href="${"#one-line-tasks"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Each task contains a single <code>npm</code> command. The <code>init</code> task terminates once the dependencies are installed while the <code>command</code> task starts a development server and does not terminate.</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Dev Server
    <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev</code>`}</pre>
<h3 id="${"multi-line-tasks-in-two-terminals"}">Multi-line tasks in two terminals<a href="${"#multi-line-tasks-in-two-terminals"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To run multiple commands for a given task, you can use the <code>|</code> notation where each line below (make sure you indent correctly) runs in sequence once the previous command terminates.</p>
<p>In this example, Gitpod opens two terminals (as noted by the two <code>-</code>):</p>
<ol><li>In the first terminal, the <code>init</code> task installs dependencies and configures a database. Then, the <code>command</code> task starts the database.</li>
<li>The second terminal only has a <code>command</code> task which starts the dev server. The application code connects to the database that is started in the first terminal (e.g. via localhost:3306).</li></ol>
<blockquote><p><strong>Note</strong>: In case of multiple terminals, there is no guarantee on the order in which tasks execute. The only guarantee you have is that <code>before</code>, <code>init</code> and <code>command</code> execute in that sequence <strong>per terminal</strong>.</p></blockquote>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Dependencies &amp; Database
    <span class="token key atrule">init</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
      npm install
      npm run configure-database</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run start<span class="token punctuation">-</span>database
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Dev Server
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev</code>`}</pre>
<h3 id="${"wait-for-commands-to-complete"}">Wait for commands to complete<a href="${"#wait-for-commands-to-complete"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>When working with multiple terminals, you may have a situation where terminal 1 runs build scripts and terminal 2 and 3 require that these scripts complete first. This can be achieved with <a href="${"/docs/command-line-interface#sync-await"}"><code>gp sync-await</code></a> and <a href="${"/docs/command-line-interface#sync-done"}"><code>gp sync-done</code></a>.</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Rails
    <span class="token key atrule">init</span><span class="token punctuation">:</span> <span class="token punctuation">></span><span class="token scalar string">
      bundle install &amp;&amp;
      yarn install --check-files &amp;&amp;
      rails db:setup &amp;&amp;
      gp sync-done bundle # 'bundle' is an arbitrary name I picked</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> rails server

  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Webpack
    <span class="token key atrule">init</span><span class="token punctuation">:</span> gp sync<span class="token punctuation">-</span>await bundle <span class="token comment"># wait for the above 'init' to finish</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> bin/webpack<span class="token punctuation">-</span>dev<span class="token punctuation">-</span>server

  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Redis
    <span class="token key atrule">init</span><span class="token punctuation">:</span> gp sync<span class="token punctuation">-</span>await bundle
    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server

  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Sidekiq
    <span class="token key atrule">init</span><span class="token punctuation">:</span> gp sync<span class="token punctuation">-</span>await bundle
    <span class="token key atrule">command</span><span class="token punctuation">:</span> sidekiq</code>`}</pre>
<h3 id="${"missing-examples"}">Missing examples?<a href="${"#missing-examples"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>We\u2019d love to hear from you if you have specific questions or ideas for additional examples. Please click the following link to open a pre-configured GitHub issue: <a href="${"https://github.com/gitpod-io/website/issues/new?title=%5BStart+Task+Example%5D&labels=documentation"}" rel="${"nofollow"}">Ask for a new Start Task example</a>.</p>`
  })}`;
});
var configStartTasks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Config_start_tasks,
  metadata: metadata$2g,
  prerender: prerender$2j
});
const metadata$2f = {
  section: "integrations",
  title: "GitHub Integration"
};
const prerender$2i = true;
const Github_integration = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2f), {}, {
    default: () => `<h1 id="${"github-integration"}">GitHub Integration<a href="${"#github-integration"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod works with any public or private repository on <a href="${"https://github.com/"}" rel="${"nofollow"}">GitHub</a>.</p>
<p>To start a workspace from a GitHub project, prefix the GitHub project URL with <code>gitpod.io/#</code> as described in <a href="${"/docs/getting-started"}">Getting Started</a>.</p>
<h2 id="${"enable-prebuilds"}">Enable Prebuilds<a href="${"#enable-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To enable <a href="${"/docs/prebuilds"}">prebuilt workspaces</a> for your GitHub project, you need to install the <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">Gitpod GitHub app</a> and configure it for the GitHub user or organization that the project belongs to. Install the app as described in the <a href="${"/docs/prebuilds"}">prebuilt page</a>.</p>
<h2 id="${"github-enterprise-server"}">GitHub Enterprise Server<a href="${"#github-enterprise-server"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In Gitpod, you can register your own GitHub OAuth application. This allows to use Gitpod with any GitHub instance.</p>
<p>Here\u2019s how to do that:</p>
<ol><li><p>When first starting your Gitpod installation, you\u2019ll get redirected to /first-steps where you get prompted to add a Git Provider. Click the button.</p></li>
<li><p>In the pop-up you choose GitHub as the type and type the host URL of the GitHub installation you want to use. If you want to hook up with the github.com you can use that host as well, of course.</p></li>
<li><p>The form for your GitHub integration now shows three values. The first one is the redirect URL, that you need to register on the GitHub side. Copy the redirect Url to your clipboard.</p></li>
<li><p>Go to <code>/settings/developers</code> on your GitHub installation to create an OAuth App. Type in a name (e.g. Gitpod) and paste the Redirect URL in the corresponding text area.</p></li></ol>
<img width="${"1029"}" alt="${"Screenshot 2020-08-25 at 10 09 19"}" src="${"https://user-images.githubusercontent.com/372735/91149549-7d14a800-e6bb-11ea-8721-6ef109297622.png"}">
<img width="${"794"}" alt="${"Screenshot 2020-08-25 at 10 09 53"}" src="${"https://user-images.githubusercontent.com/372735/91149546-7c7c1180-e6bb-11ea-956f-2f7190db4ca4.png"}">
<ol start="${"5"}"><li>Copy the <code>Application ID</code> and the <code>Secret</code> in the corresponding form fields (<code>Client ID</code> resp. <code>Client Secret</code>) of your Gitpod installation.</li></ol>
<img width="${"774"}" alt="${"Screenshot 2020-08-25 at 10 10 15"}" src="${"https://user-images.githubusercontent.com/372735/91149544-7be37b00-e6bb-11ea-8ad6-5fb2d5eba7d4.png"}">
<ol start="${"6"}"><li>Press <code>Connect</code> and go through the Auth flow the first time.</li></ol>
<p>Congratulations, you have setup the GitHub OAuth applicaton. \u{1F389}</p>
<p>Next up you should install the browser extension and <a href="${"/docs/browser-extension#use-with-gitpod-self-hosted"}">configure it with your Gitpod installation URL</a>.</p>`
  })}`;
});
var githubIntegration = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Github_integration,
  metadata: metadata$2f,
  prerender: prerender$2i
});
const metadata$2e = {
  section: "integrations",
  title: "GitLab Integration"
};
const prerender$2h = true;
const Gitlab_integration = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2e), {}, {
    default: () => `<h1 id="${"gitlab-integration"}">GitLab Integration<a href="${"#gitlab-integration"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod works nicely with GitLab: You can start Gitpod workspaces directly from the web pages of your GitLab repositories, and you can configure Gitpod to automatically prebuild these workspaces such that you can start coding on any branch in no time.</p>
<p>To use Gitpod on GitLab repositories, you have to link your GitLab account to Gitpod. Gitpod redirects you to GitLab\u2019s authentication workflow when needed. Alternatively, you might want to connect your <a href="${"#connecting-your-gitlab-account"}">GitLab account manually</a>.</p>
<p>All of this is already pre-configured for <code>GitLab.com</code> (the SaaS version), and can easily be set up for <a href="${"#registering-a-self-hosted-gitlab-installation"}">self-hosted GitLab installations</a>.</p>
<h2 id="${"starting-workspaces"}">Starting Workspaces<a href="${"#starting-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can start a Gitpod workspace directly from the web pages of a GitLab repository. Simply click on the dropdown arrow next to the <em>Web IDE</em> split button on the project or merge request page, and choose <em>Gitpod</em>. The Gitpod workspace will open in a new browser tab. The next time you visit a GitLab page, the last used action will be pre-selected.</p>
<p><img src="${"/images/docs/beta/integrations/gitpod-button-project-page.png"}" alt="${"GitLab Integration"}"></p>
<p>To launch new Gitpod workspaces for issues, branches, specific commits, etc. you can also prefix any GitLab URL with <code>gitpod.io/#</code> as described in the <a href="${"/docs/getting-started"}">Getting Started</a> page, or use the <a href="${"/docs/browser-extension"}">browser extension</a> to add a convenient <em>Gitpod</em> button to every GitLab page.</p>
<h2 id="${"enabling-prebuilds"}">Enabling Prebuilds<a href="${"#enabling-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To automatically create a <a href="${"/docs/prebuilds"}">prebuilt workspace</a> for each commit, Gitpod needs access to install a webhook. To allow this, go to Gitpod\u2019s <a href="${"https://gitpod.io/integrations/"}" rel="${"nofollow"}">Integrations</a> page, scroll to the \u201CGit Providers\u201D section, click on the three dot button that pops up when you hover over the \u201CGitLab\u201D entry. Then choose <em>Edit Permissions</em> from the popup menu.</p>
<p><img src="${"/images/docs/beta/integrations/gitlab-integration-actions-menu.png"}" alt="${"GitLab integration actions menu"}"></p>
<p>In the \u201CEdit Permissions\u201D dialog, make sure that <em>api</em> is checked such that Gitpod is allowed to install the webhook.</p>
<p><img src="${"/images/docs/beta/integrations/edit-permissions.png"}" alt="${"Modal Edit Permissions of GitLab in the Gitpod settings"}"></p>
<p>The webhook will be automatically installed when you trigger the first prebuild manually. For this, prefix your GitLab project URL with <code>gitpod.io/#prebuild/</code> as described in the <a href="${"/docs/prebuilds#on-gitlab-and-bitbucket"}">prebuilds page</a>.</p>
<h2 id="${"connecting-your-gitlab-account"}">Connecting Your GitLab Account<a href="${"#connecting-your-gitlab-account"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To use Gitpod on a GitLab repository, you have to connect your GitLab account with your Gitpod account. In the follwoing, we assume that you already have a valid account on the GitLab instance you want to connect to.</p>
<p>Gitpod supports the following use cases:</p>
<ul><li><a href="${"#connecting-your-gitlabcom-account"}">Connecting Your GitLab.com Account</a></li>
<li><a href="${"#connecting-your-self-hosted-gitlab-account"}">Connecting Your Self-Hosted GitLab Account</a></li></ul>
<h3 id="${"connecting-your-gitlabcom-account"}">Connecting Your GitLab.com Account<a href="${"#connecting-your-gitlabcom-account"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you have initially logged into Gitpod using <code>GitLab</code>, your Gitpod account is already connected to your <code>GitLab.com</code> account and you can skip this section.</p>
<p>If you have logged into Gitpod with a different provider, you can manually add your GitLab account as follows:</p>
<ol><li>Open <a href="${"https://gitpod.io/integrations/"}" rel="${"nofollow"}">the integrations page</a>. Scroll to the section about \u201CGit Providers\u201D and click on the three dot button that pops up when you hover over the <em>GitLab</em> item. Select <em>Connect</em> from the popup menu.</li></ol>
<p><img src="${"/images/docs/beta/integrations/gitlab-integration-connect-menu-item.png"}" alt="${"GitLab integration connect menu item"}"></p>
<ol start="${"2"}"><li><p>You will be redirected to GitLab\u2019s login page. Log in with your username and password or choose one of the OAuth providers from the list.</p></li>
<li><p>Once logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click <em>Authorize</em>.</p></li></ol>
<p><img src="${"/images/docs/beta/integrations/authorize-gitpod.png"}" alt="${"GitLab: Authorize Gitpod"}"></p>
<ol start="${"4"}"><li>You\u2019ll be directed back to Gitpod\u2019s settings page. A green bullet left to <em>GitLab</em> signals you\u2019ve successfully linked your GitLab account with Gitpod.</li></ol>
<p><img src="${"/images/docs/beta/integrations/gitlab-integration-connected.png"}" alt="${"GitLab integration connected"}"></p>
<h3 id="${"connecting-your-self-hosted-gitlab-account"}">Connecting Your Self-Hosted GitLab Account<a href="${"#connecting-your-self-hosted-gitlab-account"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A self-hosted GitLab installation has to be <a href="${"#registering-a-self-hosted-gitlab-installation"}">registered to Gitpod</a> before it can be used. Once that\u2019s done, you can link your GitLab account on that installation to GitPod using the following steps:</p>
<ol><li>Make sure you are logged into Gitpod.</li>
<li>In the same browser, open a new tab and navigate to a repository of the GitLab installation.</li>
<li><a href="${"#starting-workspaces"}">Start a new Gitpod workspace</a> on this repository.</li></ol>
<h3 id="${"disconnecting-your-gitlab-account"}">Disconnecting Your GitLab Account<a href="${"#disconnecting-your-gitlab-account"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To disconnect a GitLab account from your Gitpod account:</p>
<ol><li>Open <a href="${"https://gitpod.io/integrations/"}" rel="${"nofollow"}">the integrations page</a>. Scroll to the section about \u201CGit Providers\u201D and click on the three dot button that pops up when you hover over the item of the GitLab provider you want to disconnect. Select <em>Disconnect</em> from the popup menu.</li></ol>
<p>This will only invalidate the current access token in Gitpod. To disable access for good you have to revoke the access to Gitpod on the GitLab side.</p>
<h2 id="${"registering-a-self-hosted-gitlab-installation"}">Registering A Self-Hosted GitLab Installation<a href="${"#registering-a-self-hosted-gitlab-installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The SaaS service <code>GitLab.com</code> is already pre-configured in Gitpod. But if you are using a self-hosted GitLab installation, you have to register it in Gitpod before it can be used.</p>
<blockquote><p>Note that the registration has to be done by one Gitpod user only, and that the GitLab account of this user is automatically connected. All other users of the same GitLab installation should just <a href="${"#connecting-your-self-hosted-gitlab-account"}">link to their GitLab accounts</a>.</p></blockquote>
<p>Here is how to register your self-hosted GitLab installation:</p>
<ol><li><p>In your GitLab installation, enable the native Gitpod integration as described in the <a href="${"https://docs.gitlab.com/ce/integration/gitpod.html"}" rel="${"nofollow"}">GitLab docs</a>. This needs adminstrator privileges on the GitLab installation.</p></li>
<li><p>Head over to <a href="${"https://gitpod.io/integrations/"}" rel="${"nofollow"}">the integrations page</a> on Gitpod. Scroll to the section about <code>Git Integrations</code> and click on the \u201CNew Integration\u201D button.</p></li></ol>
<p><img src="${"/images/docs/beta/integrations/git-integrations.png"}" alt="${"Git Integrations section in the Gitpod settings"}"></p>
<ol start="${"3"}"><li>In the pop-up window, choose GitLab as the provider type and enter the URL of the GitLab installation you want to use.</li></ol>
<p><img src="${"/images/docs/beta/integrations/new-git-integration.png"}" alt="${"New Git integration dialog"}"></p>
<ol start="${"4"}"><li><p>The next field in the form is the <em>redirect URL</em> that you need to register Gitpod on the GitLab side. Copy the <em>redirect URL</em> to your clipboard using the button on the right.</p></li>
<li><p>Go to <code>/profile/applications</code> on your GitLab installation to create an OAuth app. Type in a name (e.g. \u201CGitpod\u201D) and paste the <em>redirect URL</em> in the corresponding text area. Check the scopes <em>api</em> and <em>read_user</em>. Click the button <em>Save Application</em> below.</p></li></ol>
<img alt="${"create new GitLab app"}" src="${"https://user-images.githubusercontent.com/372735/91146315-04abe800-e6b7-11ea-87ff-e61f5a87861f.png"}">
<ol start="${"6"}"><li>Copy the <em>Application ID</em> and the <em>Secret</em> in the corresponding form fields (<em>Client ID</em> resp. <em>Client Secret</em>) of your Gitpod installation.</li></ol>
<img alt="${"link new GitLab app to Gitpod"}" src="${"https://user-images.githubusercontent.com/372735/91142160-9f54f880-e6b0-11ea-8436-6a9c8bc67d9f.png"}">
<ol start="${"7"}"><li>Press <em>Connect</em> and go through the GitHub authentication flow to connect your user account.</li></ol>`
  })}`;
});
var gitlabIntegration = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitlab_integration,
  metadata: metadata$2e,
  prerender: prerender$2h
});
const metadata$2d = {
  section: "integrations",
  title: "Browser Extension"
};
const prerender$2g = true;
const Browser_extension = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2d), {}, {
    default: () => `<h1 id="${"browser-extension"}">Browser Extension<a href="${"#browser-extension"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Creating a workspace is as easy as prefixing any GitHub URL with <code>gitpod.io/#</code>.</p>
<p>For convenience, we developed a Gitpod browser extension. It adds a button to GitHub, GitLab or Bitbucket that does the
prefixing for you - as simple as that.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>We provide the extension for:</p>
<ul><li><a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chrome</a> - also works for Edge, Brave and other Chromium-based browsers.</li>
<li><a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a></li></ul>
<h2 id="${"use-with-gitpod-self-hosted"}">Use with Gitpod Self-Hosted<a href="${"#use-with-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you are using Gitpod Self-Hosted you can still use the browser extension by configuring it with your self-hosted URL.</p>
<p>After you have installed the extension go to the options panel and enter your Gitpod Self-Hosted URL.</p>
<img width="${"461"}" alt="${"Gitpod browser extension configuration"}" src="${"https://user-images.githubusercontent.com/372735/91141921-57ce6c80-e6b0-11ea-92e2-8e3a624bb87e.png"}">
<h3 id="${"accessing-the-options-on-chrome"}">Accessing the options on Chrome<a href="${"#accessing-the-options-on-chrome"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A user can view an extension\u2019s options by right-clicking the extension icon in the toolbar then selecting options or by navigating to the extension management page at chrome://extensions, locating the desired extension, clicking Details, then selection the options link.</p>
<h3 id="${"accessing-the-options-on-firefox"}">Accessing the options on Firefox<a href="${"#accessing-the-options-on-firefox"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>An Options page enables you to define preferences for your extension that your users can change. Users can access the options page for an extension from the browser\u2019s add-ons manager.</p>
<h2 id="${"source-code"}">Source Code<a href="${"#source-code"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod\u2019s browser extension is open source. You can check out its <a href="${"https://github.com/gitpod-io/browser-extension"}" rel="${"nofollow"}">source code</a>, or even open it in Gitpod:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/browser-extension"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>`
  })}`;
});
var browserExtension = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Browser_extension,
  metadata: metadata$2d,
  prerender: prerender$2g
});
const metadata$2c = {
  section: "configure",
  title: "Checkout and Workspace Location"
};
const prerender$2f = true;
const Checkout_location = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2c), {}, {
    default: () => `<h1 id="${"checkout-and-workspace-location"}">Checkout and Workspace Location<a href="${"#checkout-and-workspace-location"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Older Go projects without module support need a <a href="${"https://golang.org/doc/code.html#Organization"}" target="${"_blank"}">specific workspace layout</a>:
the source code of your repository and its dependencies must be in the directories</p>
<pre class="${"language-sh"}">${`<code class="language-sh">src/[repository-provider]/[repository-owner]/[repository-name]</code>`}</pre>
<p>in the <code>$GOPATH</code>. Using the <code>.gitpod.yml</code> file, you can bring about such a workspace layout. Here is
how we do that for the example <a href="${"https://github.com/gitpod-io/definitely-gp/blob/master/go-gin-app/.gitpod.yml"}" target="${"_blank"}">go-gin-app</a> repository:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">checkoutLocation</span><span class="token punctuation">:</span> <span class="token string">"go/src/github.com/demo-apps/go-gin-app"</span>
<span class="token key atrule">workspaceLocation</span><span class="token punctuation">:</span> <span class="token string">"."</span>
<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
      cd /workspace/go/src/github.com/demo-apps/go-gin-app
      go get -v ./...
      go build -o app
      ./app</span></code>`}</pre>
<p>In more detail:</p>
<ul><li>By default, Gitpod clones the repository into the directory <code>/workspace</code>, which becomes the
root directory for the workspace. With <code>checkoutLocation</code> and <code>workspaceLocation</code> you can
change this behavior (the paths are taken relative to <code>/workspace</code>).</li>
<li>Gitpod preconfigures the <code>$GOPATH</code> environment variable to include the directory <code>/workspace/go</code>.</li>
<li>With <code>go get -v ./...</code> we retrieve the sources of the dependencies from GitHub.</li>
<li>To build the app, we run <code>go build -o app</code>.</li>
<li>Lastly, we start the application.</li></ul>`
  })}`;
});
var checkoutLocation = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Checkout_location,
  metadata: metadata$2c,
  prerender: prerender$2f
});
const metadata$2b = {
  section: "develop",
  title: "Life of a workspace"
};
const prerender$2e = true;
const Life_of_workspace = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2b), {}, {
    default: () => `<h1 id="${"life-of-a-workspace"}">Life of a Workspace<a href="${"#life-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h1>
<ul><li><a href="${"#timeouts"}">Timeouts</a></li>
<li><a href="${"#garbage-collection"}">Garbage Collection</a></li>
<li><a href="${"#changes-are-saved"}">Changes Are Saved</a></li></ul>
<p>Gitpod makes creating fresh workspaces as easy as <a href="${"/docs/browser-extension"}">clicking a button on a repository page</a>.
Gitpod\u2019s continuous dev environments encourages you to create fresh workspaces rather than restarting older ones.
This ensures that you are starting from a clean slate with proper configuration.</p>
<h2 id="${"timeouts"}">Timeouts<a href="${"#timeouts"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Any running workspace will automatically stop after some time of inactivity. Normally, this timeout is 30 minutes but is extended to <strong>60 minutes if you have the <em>Unleashed</em> plan</strong>.
Furthermore, <em>Unleashed</em> users can manually boost the timeout of a workspace to 180 minutes. This comes in handy, e.g. in case you want to go out for a longer lunch or meeting and don\u2019t like restarting your workspace when coming back.</p>
<p>The timeout will always be reset to the full 30 minutes (or other applicable timeout depending on your subscription) by any activity\u2009\u2014\u2009mouse move or keystroke\u2009\u2014\u2009in the editor.
If the editor is still open but the corresponding workspace has stopped, a dialog will pop up that lets you start the workspace
again. Alternatively, you can just reload the browser or go to your <a href="${"https://gitpod.io/workspaces"}" rel="${"nofollow"}">workspaces</a> and restart the workspace.</p>
<p>For convenience, closing the browser window/tab containing the workspace reduces the timeout to 3 minutes.</p>
<h2 id="${"garbage-collection"}">Garbage Collection<a href="${"#garbage-collection"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Old, unused workspaces are automatically deleted. To prevent a workspace from being deleted, you can pin it in your <a href="${"https://gitpod.io/workspaces/"}" rel="${"nofollow"}">list of workspaces</a>. Pinned workspaces are kept forever. A message at the top of the workspaces list indicates after how many days unused and unpinned workspaces will get collected (the exact number of days may change in the future). Restarting a workspace resets the day counter for this particular workspace.</p>
<h2 id="${"changes-are-saved"}">Changes are Saved<a href="${"#changes-are-saved"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod backs up the state of the <code>/workspace/</code> folder between workspace starts, so that
you can revisit them later. <em>Attention: Files in other locations will not be saved!</em></p>`
  })}`;
});
var lifeOfWorkspace = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Life_of_workspace,
  metadata: metadata$2b,
  prerender: prerender$2e
});
const metadata$2a = {
  section: "configure",
  title: "VS Code Extensions"
};
const prerender$2d = true;
const Vscode_extensions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2a), {}, {
    default: () => `<h1 id="${"vs-code-extensions"}">VS Code Extensions<a href="${"#vs-code-extensions"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod already comes well equipped for most development tasks, and provides language support for the most popular programming languages such as Python, JavaScript, Go, Rust, C/C++, Java, Ruby, and many more out of the box.</p>
<p>Still, you may wish to customize Gitpod, or to extend it with new features. You can do this by installing VS Code extensions.</p>
<h2 id="${"installing-an-extension"}">Installing an Extension<a href="${"#installing-an-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install a VS Code extension in Gitpod, simply go to the left vertical menu, and open the Extensions view. There you can search for an extension and install it with one click.</p>
<p>Please note that this uses the <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX</a> registry. If you can\u2019t find an extension you use in your local VS Code, please read the \u201D<a href="${"#where-do-i-find-extensions"}">Where do I find extensions?</a>\u201D section below.</p>
<p>If the extension is helpful to anyone who works on the project, you can add it to the <code>.gitpod.yml</code> configuration file so that it gets installed for anyone who works on the project. To do that:</p>
<ol><li>Visit the extension page (where you installed it from)</li>
<li>Click the settings icon</li>
<li>Select \u201CAdd to .gitpod.yml\u201D from the menu</li></ol>
<p>Your project\u2019s <code>.gitpod.yml</code> is updated automatically and lists the given extension. You can also directly edit this file to install or remove extensions manually.</p>
<p>Here is an example of what a <code>.gitpod.yml</code> with installed extensions may look like:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> scala<span class="token punctuation">-</span>lang.scala
    <span class="token punctuation">-</span> scalameta.metals</code>`}</pre>
<p>You can share the installed extensions with your team by committing the <code>.gitpod.yml</code> change and pushing it to your Git repository.</p>
<h2 id="${"user-extensions"}">User Extensions<a href="${"#user-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You have two options to install extensions for yourself only:</p>
<ol><li>For the current workspace only</li>
<li>For all your workspaces</li></ol>
<p>The second use case can be useful for extensions that you want to have in all your projects (for example a custom theme), and this doesn\u2019t require changing every project\u2019s <code>.gitpod.yml</code> configuration.</p>
<p>To do this, open the Extensions view, search for the extension you want to install and click <strong>Install</strong>.</p>
<h2 id="${"built-in-extensions"}">Built-in Extensions<a href="${"#built-in-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod already comes with a number of commonly used VS Code extensions pre-installed by default.</p>
<p>You can view all pre-installed extensions by navigating to VS Code\u2019s Extensions section on the left-hand side. In the \u201CSearch Extensions in Marketplace\u201D input field, type <code>@builtin</code> to see the built-in extensions.</p>
<h2 id="${"where-do-i-find-extensions"}">Where do I find extensions?<a href="${"#where-do-i-find-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you cannot find an extension by searching in Gitpod, it probably means that the extension hasn\u2019t been added to the <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX</a> registry yet.</p>
<p>In that case, you can also install it by installing a <code>*.vsix</code> file. To do that:</p>
<ol><li>Drag a <code>.vsix</code> file into your editor\u2019s Explorer view where you see your project\u2019s files (you can delete that file after you installed the extension).</li>
<li>Open the VS Code Extensions view on the left-side of the editor.</li>
<li>Click the \u201D\u2026\u201D menu at the top right of the view</li>
<li>Select <strong>Install from VSIX\u2026</strong></li>
<li>Enter the path to the <code>.vsix</code> file you uploaded in step 1 above and press Enter.</li></ol>
<ul><li><p><code>.vsix</code> extension files can be found in the <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX</a> registry and <a href="${"https://github.com/prettier/prettier-vscode/releases"}" rel="${"nofollow"}">on GitHub</a> as well.</p></li>
<li><p>Please note that <code>.vsix</code> files downloaded from the <a href="${"https://marketplace.visualstudio.com/vscode"}" rel="${"nofollow"}">Visual Studio Marketplace</a> should not be installed in Gitpod, because Microsoft prohibits the direct use of their marketplace by any non-Microsoft software, even though most extensions are actually open source and not developed or maintained by Microsoft.</p></li>
<li><p>You can of course also develop and install your own extensions. Note that installing a <code>.vsix</code> file in Gitpod will not list that extension anywhere publicly except in your own <code>.gitpod.yml</code>, so you can also install private extensions that way.</p></li></ul>`
  })}`;
});
var vscodeExtensions = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Vscode_extensions,
  metadata: metadata$2a,
  prerender: prerender$2d
});
const metadata$29 = {
  section: "getting-started",
  title: "Getting Started"
};
const prerender$2c = true;
const Getting_started = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$29), {}, {
    default: () => `<h1 id="${"getting-started"}">Getting Started<a href="${"#getting-started"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod can provide fully initialized, perfectly set-up development environmments for any kind of software project. This page helps you understand how to provide such a configuration for <em>your project</em>.</p>
<h2 id="${"start-your-first-workspace"}">Start your first workspace<a href="${"#start-your-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The best way to configure Gitpod is by using Gitpod - you could perform the following steps in your local environment as well, but we may as well experience ephemeral development environments right from the beginning.</p>
<ol><li>In a browser, navigate to your project\u2019s GitHub, GitLab or Bitbucket page.</li>
<li>In the browser\u2019s address bar, prefix the entire URL with <code>gitpod.io/#</code> and press Enter.<ul><li>For example, <code>gitpod.io/#https://github.com/gitpod-io/website</code></li>
<li>We recommend you <a href="${"/docs/browser-extension"}">install the Gitpod browser extension</a> to make this a one-click operation.</li></ul></li>
<li>Sign in with one of the listed providers and let the workspace start up.</li></ol>
<p><strong>Congratulations</strong>, you have started your first of many ephemeral development environments \u{1F389}!</p>
<p>Next, let\u2019s help Gitpod understand your repository to automate the development environment and turn on prebuilds to supercharge your development workflow.</p>
<h2 id="${"help-gitpod-understand-your-repository"}">Help Gitpod understand your repository<a href="${"#help-gitpod-understand-your-repository"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When you started your first workspace above, Gitpod didn\u2019t do much. In fact, all it did was starting the workspace and <code>git clone</code> your source code.
To develop, you still would have to install dependencies, run build scripts and start the development server every time you start a workspace\u2026 We can do better, so let\u2019s automate that!</p>
<ol><li>In the workspace terminal, make sure you are in your project\u2019s root directory (<code>pwd</code> should be <code>/workspace/&lt;repo&gt;</code>).</li>
<li>Run <code>gp init</code> to generate a scaffold <code>.gitpod.yml</code> configuration file (see the <a href="${"/docs/config-gitpod-file"}">.gitpod.yml reference</a> for all configuration options).</li>
<li>Open the newly created <code>.gitpod.yml</code> file.</li></ol>
<h3 id="${"init-script"}">Init script<a href="${"#init-script"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Most projects require some sort of initialization script to download and install dependencies, compile the source code, etc. For example, a Node.js project requires <code>npm install</code>. The <code>init</code> task by default reads <code>echo &#39;init script&#39;</code>, let\u2019s replace that with your project-specific init command, for example:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> echo 'start script'</code>`}</pre>
<p>Excellent! To learn more about the difference between <code>init</code> and <code>command</code>, please have a look at <a href="${"/docs/config-start-tasks"}">Start Tasks</a>.</p>
<h3 id="${"command-script"}">Command script<a href="${"#command-script"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Next, let\u2019s adjust the <code>command</code> script. This is the script Gitpod executes when the workspace successfully started up. In most cases, this is where you start your application\u2019s development server, e.g. <code>npm run dev</code>.</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev</code>`}</pre>
<h3 id="${"configure-your-apps-ports"}">Configure your app\u2019s ports<a href="${"#configure-your-apps-ports"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If your application starts a development server that listens on a certain port, we can let Gitpod know how to deal with that. To get started, update the <code>port</code> according to what your application listens on, e.g. <code>3000</code>.</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev
<span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3000</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview</code>`}</pre>
<p>When Gitpod notices port 3000 is available, it automatically opens your application in a preview to the right of your editor - ready for you to develop and see your changes.</p>
<h3 id="${"commit-gitpodyml"}">Commit <code>.gitpod.yml</code><a href="${"#commit-gitpodyml"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Lastly, make sure to commit the <code>.gitpod.yml</code> configuration file to git and push it to your repository.</p>
<h2 id="${"start-your-second-workspace"}">Start your second workspace<a href="${"#start-your-second-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once you committed and pushed <code>.gitpod.yml</code>, <strong>open a new browser tab</strong> and navigate to your project\u2019s page on GitHub, GitLab or Bitbucket.</p>
<blockquote><p>If you pushed to a branch, please make sure you switch to that branch before you continue.</p></blockquote>
<ol><li>Open a new workspace (see <a href="${"#start-your-first-workspace"}">Start your first workspace</a> above).</li>
<li>Observe how Gitpod automatically runs the tasks you configured.</li>
<li>Wait until the development server started and your application\u2019s preview is displayed on the right side of the editor.</li></ol>
<p>If for some reason the second workspace does not start, simply close the tab and navigate back to the first workspace. Fix the errors that caused the workspace to fail based on the error output you see, commit and push your changes and start yet another workspace to test the latest changes.</p>
<p>Congratulations, again \u{1F60A}! You now have a basic Gitpod configuration and for each new workspace you start, Gitpod automatically runs the scripts you manually have to run locally.</p>
<h2 id="${"shut-down-your-workspaces"}">Shut down your workspaces<a href="${"#shut-down-your-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This is easy - close the workspace browser tabs.</p>
<p>Within three minutes, the workspaces will be stopped. You can always find them at <a href="${"https://gitpod.io/workspaces"}" rel="${"nofollow"}">https://gitpod.io/workspaces</a> - to be honest though, you can forget about them and start a new workspace the next time you work on your project.</p>
<h2 id="${"supercharge-your-experience-with-prebuilds"}">Supercharge your experience with prebuilds<a href="${"#supercharge-your-experience-with-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The automation you have experienced so far is nice, but there\u2019s more! Remember that <code>init</code> task we <a href="${"#init-script"}">configured earlier</a>?</p>
<p>You may have wondered why there are separate <code>init</code> and <code>command</code> tasks. This is because we can tell Gitpod to <strong>run the <code>init</code> script every time new code is pushed to your project</strong>. By the time you or one of your team members starts a new workspace, the <code>init</code> task already finished and you don\u2019t have to wait for that - saving you precious time. We call this <strong>prebuilds</strong>.</p>
<h3 id="${"an-intro-to-prebuilds"}">An intro to prebuilds<a href="${"#an-intro-to-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Let\u2019s first look at an example and then configure your project to take advantage of prebuilds.</p>
<p>Imagine this common workflow where Nina and Paul work on the same project:</p>
<ol><li>Nina opens a pull request where she developed a feature that requires a new dependency.</li>
<li><em>Gitpod notices the new code and kicks off a prebuild by cloning the source code and executing the <code>init</code> task. The result is saved as a prebuilt workspace.</em></li>
<li>Some time later, Paul opens the pull request to start his code review.</li>
<li>He opens a Gitpod workspace for that given pull request (learn more about <a href="${"/docs/context-urls"}">contexts</a>).</li>
<li><em>Gitpod recognizes it already ran the <code>init</code> task and loads the prebuilt workspace</em></li>
<li>By the time the workspace starts, Paul sees the development server starting up and the application\u2019s preview is ready for review.</li></ol>
<p>For each new commit to your project, Gitpod continuously creates prebuilt workspaces so that the project is always ready-to-code. If your project is open source, anyone gets to enjoy the efficiency of prebuilds regardless of whether they are part of your team or not.</p>
<h3 id="${"configure-prebuilds-for-your-projects"}">Configure prebuilds for your projects<a href="${"#configure-prebuilds-for-your-projects"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Depending on your git provider, the steps to configure prebuilds vary slightly. Please refer to the dedicated <a href="${"/docs/prebuilds"}">Prebuilds</a> page for detailed instructions on how to configure prebuilds for your project.</p>
<h2 id="${"next-steps"}">Next steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>At this point, you have a <code>.gitpod.yml</code> configuration file to automate repetitive tasks and prebuilds configured to let Gitpod execute many of these tasks continuously whenever new code is pushed to your project - freeing you from waiting to download, install &amp; build your project and its dependencies.</p>
<p>To explore more of what Gitpod has to offer, we recommend the following next topics:</p>
<ul><li><a href="${"/docs/configure"}">Configure</a> to learn more about start tasks, environment variables and how to provide your own custom Docker image as the foundation for workspaces.</li>
<li><a href="${"/docs/develop"}">Develop</a> to learn more about the productivity gains you get with ephemeral workspaces, how contexts assist you and how to collaborate with team members.</li></ul>`
  })}`;
});
var gettingStarted = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Getting_started,
  metadata: metadata$29,
  prerender: prerender$2c
});
const metadata$28 = {
  section: "configure",
  title: "Custom Docker Image"
};
const prerender$2b = true;
const Config_docker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$28), {}, {
    default: () => `<h1 id="${"custom-docker-image"}">Custom Docker Image<a href="${"#custom-docker-image"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>By default, Gitpod uses a <a href="${"https://github.com/gitpod-io/workspace-images/blob/master/full/Dockerfile"}" rel="${"nofollow"}">standard Docker image</a> as the foundation for workspaces.</p>
<p>If this image does not include the tools you need for your project, you can provide a public Docker image or your own <a href="${"#using-a-dockerfile"}">Dockerfile</a>. This provides you with the flexibility to install the tools &amp; libraries required for your project.</p>
<h2 id="${"configure-a-public-docker-image"}">Configure a public Docker image<a href="${"#configure-a-public-docker-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can define a public Docker image in your <code>.gitpod.yml</code> file with the following configuration:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span>alpine</code>`}</pre>
<p>The official Gitpod Docker images are hosted on <a href="${"https://hub.docker.com/u/gitpod/"}" target="${"_blank"}">Docker Hub</a>.</p>
<h2 id="${"configure-a-custom-dockerfile"}">Configure a custom Dockerfile<a href="${"#configure-a-custom-dockerfile"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This option provides you with the most flexibility. Start by adding the following configuration in your <code>.gitpod.yml</code> file:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile</code>`}</pre>
<p>Next, create a <code>.gitpod.Dockerfile</code> file at the root of your project. The syntax is the regular <code>Dockerfile</code> syntax as <a href="${"https://docs.docker.com/engine/reference/builder/"}" target="${"_blank"}">documented on docs.docker.com</a>.</p>
<blockquote><p>Note: Currently, Gitpod only supports Debian/Ubuntu or Alpine based images.</p></blockquote>
<p>A good starting point for creating a custom <code>.gitpod.Dockerfile</code> is the</p>
<a href="${"https://hub.docker.com/r/gitpod/workspace-full/"}" target="${"_blank"}">gitpod/workspace-full</a> image. It already contains all the tools necessary to work with all languages Gitpod supports.
You can find the source code in <a href="${"https://github.com/gitpod-io/workspace-images/"}" target="${"_blank"}">this GitHub repository</a>.
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

# Install custom tools, runtime, etc.
RUN brew install fzf</code>`}</pre>
<p>When you launch a Gitpod workspace, the local console will use the <code>gitpod</code> user, so all local settings, config file, etc. should apply to <code>/home/gitpod</code> or be run using <code>USER gitpod</code> (we no longer recommend using <code>USER root</code>).</p>
<p>You can however use <code>sudo</code> in your Dockerfile. The following example shows a typical <code>.gitpod.Dockerfile</code> inheriting from <code>gitpod/workspace-full</code>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

# Install custom tools, runtime, etc.
RUN sudo apt-get update     &amp;&amp; sudo apt-get install -y         ...     &amp;&amp; sudo rm -rf /var/lib/apt/lists/*

# Apply user-specific settings
ENV ...</code>`}</pre>
<p>Once committed and pushed, Gitpod will automatically build this Dockerfile when (or <a href="${"/docs/prebuilds"}">before</a>) new workspaces are created.</p>
<p>See also <a href="${"/blog/docker-in-gitpod"}">Gero\u2019s blog post</a> running through an example.</p>
<h2 id="${"trying-out-changes-to-your-dockerfile"}">Trying out changes to your Dockerfile<a href="${"#trying-out-changes-to-your-dockerfile"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"in-the-existing-workspace"}">In the existing workspace<a href="${"#in-the-existing-workspace"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Since the <code>.gitpod.Dockerfile</code> is a regular Dockerfile, you can build the image in your Gitpod workspace. This helps you catch syntax or build errors before you commit your changes.</p>
<p>To test your custom <code>.gitpod.Dockerfile</code>, run the following commands from the project root:</p>
<ol><li><code>docker build -f .gitpod.Dockerfile -t gitpod-dockerfile-test .</code></li>
<li><code>docker run -it gitpod-dockerfile-test bash</code></li></ol>
<p>This builds a <code>gitpod-dockerfile-test</code> image and starts a new container based on that image. At this point, you are connected to the Docker container that will be available as the foundation for your Gitpod workspace. You can inspect the container and make sure the necessary tools &amp; libraries are installed.</p>
<p>To exit the container and return back to your Gitpod workspace, type <code>exit</code>.</p>
<h3 id="${"as-a-new-workspace"}">As a new workspace<a href="${"#as-a-new-workspace"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once you validated the <code>.gitpod.Dockerfile</code> with the approach described in the previous chapter, it is time to start a new Gitpod workspace based on that custom image.</p>
<p>The easiest way to try out your changes is to push them to a branch and then start another workspace on that branch, keeping the first workspace open as your main editing workspace.</p>
<p><strong>Caution</strong>: The above is important in case your Dockerfile has bugs and prevents Gitpod from starting a workspace.</p>
<p>On start of the second workspace, the docker build will start and show the output. If your Dockerfile has issues and the build fails or the resulting workspace does not look like you expected, you can force push changes to your config using your first, still running workspace and simply start a fresh workspace again to try them out.</p>
<p>We are working on allowing docker builds directly from within workspaces, but until then this approach has been proven to be the most productive.</p>`
  })}`;
});
var configDocker = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Config_docker,
  metadata: metadata$28,
  prerender: prerender$2b
});
const prerender$2a = true;
const February_2019 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, {}, {}, {
    default: () => `<h1 id="${"february-release-2019-"}">February Release 2019 \u{1F389}<a href="${"#february-release-2019-"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>We are close to leaving the beta phase and with that are also approaching a more regular release schedule.
This means we are going to have monthly release notes. They will pop up only once and you can easily dismiss them by pressing <kbd>[ESC]</kbd>.
If you want to look up the release notes later you can open them through the command palette <kbd>[F1]</kbd>. Simply search for \u2018Release Notes\u2019.</p>
<p>So here are the new &amp; noteworthy things that we have been hard at work at this time.</p>
<h2 id="${"github-links"}">GitHub Links<a href="${"#github-links"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can now navigate to GitHub directly from the editor. The GitHub URL of any editor position or selection can be accessed with a right-click, and used for example in GitHub issues or Pull Request comments to reference interesting code locations.</p>
<p><img src="${"/images/docs/release-notes/2019-02-15/github-navi.jpg"}" alt="${"GitHub Links"}"></p>
<h2 id="${"snapshots"}">Snapshots<a href="${"#snapshots"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In addition to live sharing a running Gitpod workspace, you can now take a snapshot. Snapshots capture the current state of a workspace session including the UI layout and the file changes. Anyone who has a snapshot link can create a fresh workspace based on that.</p>
<p>This is super handy for providing reproducibles in GitHub issues and StackOverflow posts. They are also great to prepare trainigs, tutorials, or just to showcase stuff you have thrown together.</p>
<p>Please see this <a href="${"https://medium.com/gitpod/code-never-lies-creating-reproducibles-for-any-programming-language-7946021a68f2"}" rel="${"nofollow"}">blog post</a> as well as the <a href="${"https://www.gitpod.io/docs/sharing-and-collaboration/#sharing-snapshots"}" rel="${"nofollow"}">documentation</a> for more details.</p>
<p><img src="${"/images/docs/release-notes/2019-02-15/snapshots.png"}" alt="${"Snapshot"}"></p>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The possibilities to fine-tune the developer experience when using Gitpod on your repository have been improved. Here are the features you can define in your <code>.gitpod.yml</code>:</p>
<h3 id="${"tasks"}">Tasks<a href="${"#tasks"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>You can now specify multiple tasks. Each task will have its own terminal view on start. You can even specify where those terminals whould be opened.
The following config, for instance, will make sure that two terminals are opened next to each other.</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> echo 'left'
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> echo 'right'
    <span class="token key atrule">openMode</span><span class="token punctuation">:</span> split<span class="token punctuation">-</span>right</code>`}</pre>
<p><img src="${"/images/docs/release-notes/2019-02-15/terminal-split.png"}" alt="${"Split Terminals"}"></p>
<h3 id="${"lifecycles"}">Lifecycles<a href="${"#lifecycles"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>In addition we have introduced multiple lifecycle phases for the tasks, such as <a href="${"https://www.gitpod.io/docs/config-start-tasks/#init-command"}" rel="${"nofollow"}">init</a> and <a href="${"https://www.gitpod.io/docs/config-start-tasks/#before-command"}" rel="${"nofollow"}">before</a>. The main purpose is to avoid rerunning unnecessary commands such as full builds, when restarting workspaces or opening snapshots.</p>
<p>Check the table below for an overview of the different starting scenarios.</p>
<div class="${"table-container"}"><table><thead><tr><th>Start Mode</th>
<th>Execution</th></tr></thead>
<tbody><tr><td>Fresh Workspace</td>
<td><code>before &amp;&amp; init &amp;&amp; command</code></td></tr>
<tr><td>Restart Workspace</td>
<td><code>before &amp;&amp; command</code></td></tr>
<tr><td>Snapshot</td>
<td><code>before &amp;&amp; command</code></td></tr></tbody></table></div>
<h3 id="${"ports"}">Ports<a href="${"#ports"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>You can now specify the default behavior on port detection. By default users get a notification when starting a server, asking whether they want to open a web view or an external browser.</p>
<p>This behavior can now be pre-configured so users are not bothered with annoying notifications. Here is an example where we configure port <code>8080</code> to automatically open in a web preview pane:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview</code>`}</pre>
<p>Check out <a href="${"https://www.gitpod.io/docs/config-start-tasks"}" rel="${"nofollow"}">the docs</a> to learn more about pre-configuring things in Gitpod.</p>
<h2 id="${"yaml-support"}">YAML Support<a href="${"#yaml-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod now understands YAML syntax and uses json schema specifications to validate and guide developers. While this works for any YAML files it comes in especially handy when editing <code>.gitpod.yml</code>.</p>
<p><img src="${"/images/docs/release-notes/2019-02-15/yaml-support.png"}" alt="${"yaml in action"}"></p>
<h2 id="${"gitpod-cli"}">Gitpod CLI<a href="${"#gitpod-cli"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The CLI for Gitpod has learned new tricks. Check out all the cool things you can do with it by typing <code>gp help</code>.</p>
<p>Here are the new commands we added:</p>
<h3 id="${"gp-init"}">gp init<a href="${"#gp-init"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To get the best experience with Gitpod, you should configure your repository to have the right tools, run the right commands on start, etc. This information is stored in a <code>.gitpod.yml</code> file sitting in your repository.</p>
<p>The <code>gp init</code> command walks you through the basic setup and generates a <code>.gitpod.yml</code> and if desired a corresponding <code>Dockerfile</code>.</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gitpod /workspace/my-repo $ gp init
Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190
? Workspace Docker image:
  \u25B8 default
    custom image
    docker file</code>`}</pre>
<p>More information about writing <code>.gitpod.yml</code> configurations can be found in <a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">the docs</a>.</p>
<h3 id="${"gp-url"}">gp url<a href="${"#gp-url"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>One of the things you do in a <code>.gitpod.yml</code> is declaring the exposed ports. Gitpod maps them to a specific subdomain in order to make them accessible. For instance if you have a dev server running on <code>0.0.0.0:3000</code> the <code>gp url</code> command gives you the external url for that service.</p>
<p>Here is an example:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gitpod /workspace/release-notes $ gp url 3000
https://3000-b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/</code>`}</pre>
<p><code>gp url</code> can also give you the URL of the workspace itself:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gitpod /workspace/release-notes $ gp url
https://b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/</code>`}</pre>
<h3 id="${"gp-preview"}">gp preview<a href="${"#gp-preview"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><code>gp preview</code> is similar to <code>gp open</code>, except that it does not open a file in the editor but a URL in a preview pane on the right.</p>
<p>This is especially handy together with <code>gp url</code> if you want to open a specific path from a script.</p>
<p>Here\u2019s an example:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp preview $(gp url 3000)my/special/path.html</code>`}</pre>
<h2 id="${"improved-docker-performance"}">Improved Docker Performance<a href="${"#improved-docker-performance"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In addition to the <code>.gitpod.yml</code> you can provide a <code>Dockerfile</code> which is automatically picked up by Gitpod. See <a href="${"https://medium.com/gitpod/bring-your-own-docker-image-to-gitpod-52db1aa861de"}" rel="${"nofollow"}">this blog post</a> for more information on setting up a Dockerfile for your project.</p>
<p>For example, here is a Dockerfile that allows developing native UI applications in Go on Gitpod:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">FROM gitpod/workspace-full-vnc
RUN sudo apt-get update &amp;&amp;     sudo apt-get install -y libgtk-3-dev &amp;&amp;     sudo rm -rf /var/lib/apt/lists/*</code>`}</pre>
<p>Since we launched this feature, the performance and logging for docker builds have also been improved significantly.</p>
<h2 id="${"status-page"}">Status Page<a href="${"#status-page"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As we continuously improve and expand Gitpod, there are times when things inevitably don\u2019t go as planned, occasionally causing downtime. If you\u2019re ever curious about the status of <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, or you\u2019d like to follow how we resolve an incident, we made <a href="${"https://status.gitpod.io/"}" rel="${"nofollow"}">status.gitpod.io</a> just for you.</p>
<p>In fact, thanks to <a href="${"https://github.com/bazzite/statusfy"}" rel="${"nofollow"}">Statusfy</a>, it took us just a few hours to build an entire <a href="${"https://github.com/gitpod-io/gitpod-status"}" rel="${"nofollow"}">open source status page</a>. Learn more about this short adventure in <a href="${"https://medium.com/gitpod/status-update-gitpod-%EF%B8%8F-statusfy-ed8266d63a20"}" rel="${"nofollow"}">this blog post</a>.</p>
<h2 id="${"java-debugging"}">Java Debugging<a href="${"#java-debugging"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In addition to Node.js one can now also launch and debug Java applications directly from within the editor. Code lense actions on <code>main()</code> methods will automatically use the right classpath from the current project settings (based on maven, gradle or eclipse classpath information).</p>
<p>Launch configs are stored in a VS Code compatible <code>launch.json</code> file.</p>
<p><img src="${"/images/docs/release-notes/2019-02-15/debug-java.jpg"}" alt="${"Debug Java"}"></p>
<h2 id="${"xml-support"}">XML Support<a href="${"#xml-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The new improved XML support not only does syntax highlighting for XML and XSD but also uses associated schemas to provide diagnostics, content assist and hover information.</p>
<p><img src="${"/images/docs/release-notes/2019-02-15/xml-support.png"}" alt="${"XML Support"}"></p>
<h2 id="${"better-previews"}">Better Previews<a href="${"#better-previews"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Previews can now easily be opened by clicking on the top right icon (<img src="${"/images/docs/release-notes/2019-02-15/icon.jpg"}" alt="${"icon"}">) on any previewable files, such as Markdown, HTML and SVG files.</p>
<p>The inverse is supported, too. I.e. clicking the file icon on the top right of a preview will open the corresponding editor on the left. For Markdown even scrolling is synced between the two views.</p>
<h2 id="${"asciidoc-support"}">AsciiDoc Support<a href="${"#asciidoc-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In addition to Markdown, Gitpod now also supports previewing AsciiDoc as you type.</p>
<p><img src="${"/images/docs/release-notes/2019-02-15/asciidoc-support.gif"}" alt="${"asciidoc"}"></p>
<h2 id="${"many-bugfixes-small-features-and-other-improvements"}">Many Bugfixes, small features and other improvements<a href="${"#many-bugfixes-small-features-and-other-improvements"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>These are just the most noteworthy features we have been working on.
For a more detailed list of bugfixes and enhancemenst see all the issues we\u2019ve closed:</p>
<ul><li><a href="${"https://github.com/gitpod-io/gitpod/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aclosed+closed%3A%3E2018-11-01"}" rel="${"nofollow"}">Closed Issues in Gitpod</a></li>
<li><a href="${"https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=merged%3A%3E2018-11-01+merged%3A%3C2018-02-13+"}" rel="${"nofollow"}">Merged PRs in Theia</a></li></ul>`
  })}`;
});
var february2019 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: February_2019,
  prerender: prerender$2a
});
const prerender$29 = true;
const April_2019 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, {}, {}, {
    default: () => `<h1 id="${"april-2019"}">April 2019<a href="${"#april-2019"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Today we are happy to announce that we are moving out of beta.
We want to thank all the beta testers who have provided great feedback. Gitpod wouldn\u2019t be what it is without you! \u2764\uFE0F</p>
<p>You can read more about the announcement in <a href="${"https://www.gitpod.io/blog/gitpod-launch/"}" rel="${"nofollow"}">the blog post</a>.</p>
<p>Besides a complete relaunch of the website and app, we have added some very exciting new features:</p>
<h2 id="${"github-app--prebuilt-workspaces-"}">GitHub App / Prebuilt Workspaces \u{1F680}<a href="${"#github-app--prebuilt-workspaces-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We have been busy developing a <a href="${"https://github.com/apps/gitpod-io"}" target="${"_blank"}">new GitHub app</a>, that once installed on your repository will prebuild your project on every push.
On GitHub pull requests this is communicated through a status check.</p>
<p><img src="${"/images/docs/release-notes/2019-04-05/prebuilt-check.png"}" alt="${"Prebuilt Check on PR"}"></p>
<p>As a result, Gitpod is now the first IDE that builds your project, before you open it.</p>
<p>Read more about this exciting feature in <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">the docs</a> and in <a href="${"https://www.gitpod.io/blog/prebuilds"}" rel="${"nofollow"}">Chris\u2019 blog post</a>.</p>
<h2 id="${"better-localhost-handling"}">Better <code>localhost</code> Handling<a href="${"#better-localhost-handling"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When starting web servers in Gitpod, often times you need to explicitly make sure the dev server allows connections from non-localhost.
Starting today, you no longer need to worry about that. Gitpod now forwards the port locally and rewrites the host headers,
so that dev servers will be fine.</p>
<h2 id="${"better-go-support"}">Better Go Support<a href="${"#better-go-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod now directly uses Microsoft\u2019s great Go support for VS Code.</p>
<p><img src="${"/images/docs/release-notes/2019-04-05/vscode-go.png"}" alt="${"VS Code Go Extension"}"></p>
<h2 id="${"unlimited-hours"}">Unlimited Hours<a href="${"#unlimited-hours"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you don\u2019t feel comfortable with a time-based limit, you can now purchase the \u2018Unlimited\u2019 plan to use Gitpod as much as you like on public and private repositories.</p>
<p>We also offer <a href="${"https://gitpod.io/teams/"}" rel="${"nofollow"}">unlimited plans for teams</a>, and <a href="${"https://www.gitpod.io/pricing"}" rel="${"nofollow"}">for students</a> the price for an unlimited plan is only 9$ or 8\u20AC.</p>
<blockquote><p>If you have created your account during the beta, i.e. before April 5th, you will be able to work on private repositories for free for another month, on us.</p></blockquote>
<p>You can check out the various <a href="${"https://www.gitpod.io/pricing"}" rel="${"nofollow"}">pricing options on the website</a>.</p>
<h2 id="${"new-design-"}">New Design \u{1F484}<a href="${"#new-design-"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As part of the launch, we have refreshed the design of Gitpod. The website and dashboard now use a new dark theme that we hope you\u2019ll like, and the UI of the
IDE is more closely matching the look of VS Code.</p>
<p><img src="${"/images/docs/release-notes/2019-04-05/dashboard-design.png"}" alt="${"New Dashboard"}"></p>
<h2 id="${"delete-workspace"}">Delete Workspace<a href="${"#delete-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can now delete workspaces in the dashboard. Please note that deletion can not be reversed as we are really
deleting all the contents of your workspace.</p>
<p>You can also delete your entire account (hopefully the least used feature).</p>
<h2 id="${"many-small-improvements"}">Many Small Improvements<a href="${"#many-small-improvements"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Besides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.
We have merged 146 PRs in Gitpod and <a href="${"https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-02-05+"}" target="${"_blank"}">206 in Theia</a>.</p>
<h2 id="${"whats-next"}">What\u2019s next?<a href="${"#whats-next"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With this release we have already added some VS Code extensions. Going forward we will double down on the integration.
We are looking at one programming language after the other, making sure the experience is excellent and the VS Code extensions
work as expected. Once we\u2019ve reached a state where we are confident VS Code extensions work reliably in general, we will allow users to install them.
Furthermore, we are focusing on start-up time improvements and, of course, bug-fixing and offering you a great development experience.</p>`
  })}`;
});
var april2019 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: April_2019,
  prerender: prerender$29
});
const prerender$28 = true;
const June_2019 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, {}, {}, {
    default: () => `<h1 id="${"june-2019"}">June 2019<a href="${"#june-2019"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>After the public launch of Gitpod.io in April, we have spent most of our time on changing our internal architecture to better scale and improve the cloud density as well
as supporting VS Code extension. Although this work is not yet finished, we have added a bunch of new features on the way, which are listed below.</p>
<h2 id="${"toggle-maximize"}">Toggle Maximize<a href="${"#toggle-maximize"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Simple but useful: Double-clicking a tab will maximize the corresponding panel.</p>
<p><img src="${"/images/docs/release-notes/2019-06-17/maximize.gif"}" alt="${"Maximize"}"></p>
<h2 id="${"links-in-terminals"}">Links in terminals<a href="${"#links-in-terminals"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can now follow links and open files from the terminal by clicking on the respective links.</p>
<p><img src="${"/images/docs/release-notes/2019-06-17/terminal-link.png"}" alt="${"Terminal Links"}"></p>
<h2 id="${"environment-variables"}">Environment Variables<a href="${"#environment-variables"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod allows users to inject environment variables into workspaces. Based on a simple pattern against the repository name
one can filter which env vars are actually injected. Also please note that all environment variable values are encrpyted before stored in the database.</p>
<p>In addition to user-based environment variables, you can pass environment variables through the context link on start.
See the <a href="${"/docs/environment-variables"}">docs</a> for more information.</p>
<h2 id="${"bi-directional-scroll-sync"}">Bi-directional Scroll Sync<a href="${"#bi-directional-scroll-sync"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When editing markdown files it is very convenient to see the preview next to the editor. You can open a preview by click the icon on the top right of the editor.
Now you can scroll both the editor or the preview and see how the other part is scrolling with it, showing the corresponding sections.</p>
<p><img src="${"/images/docs/release-notes/2019-06-17/scroll-sync.gif"}" alt="${"scroll sync"}"></p>
<p>Contributed through <a href="${"https://github.com/theia-ide/theia/pull/5442"}" rel="${"nofollow"}">PR #5442</a>.</p>
<h2 id="${"better-rust-support"}">Better Rust support<a href="${"#better-rust-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In addition to the Go VS Code extension, Gitpod now also runs the official <a href="${"https://github.com/rust-lang/rls-vscode"}" rel="${"nofollow"}">Rust VS Code extensions</a>.
So expect faster and more reliable support for Rust.</p>
<h2 id="${"emmet-support"}">Emmet support<a href="${"#emmet-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod comes with support for emmet, a web-developer\u2019s toolkit that can greatly improve your HTML &amp; CSS workflow.
Among other things it allows to quickly generate html boilerplate using shortcuts.</p>
<p><img src="${"/images/docs/release-notes/2019-06-17/emmet.png"}" alt="${"Emmet"}">
See the <a href="${"https://docs.emmet.io/cheat-sheet/"}" rel="${"nofollow"}">cheat-sheet</a> for a quick overview of what\u2019s supported.</p>
<h2 id="${"debugging-in-java"}">Debugging in Java<a href="${"#debugging-in-java"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The debugging of Java applications had a problem in that it the process would pick a wrong java executable when launching processes.
This is now fixed.</p>
<h2 id="${"better-upload"}">Better Upload<a href="${"#better-upload"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can now upload large files through drag and drop and see proper progress information on the top of the window.</p>
<p><img src="${"/images/docs/release-notes/2019-06-17/upload.gif"}" alt="${"upload"}"></p>
<h2 id="${"improved-c-language-support"}">Improved C++ Language Support<a href="${"#improved-c-language-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We have upgrade the language services to use the latest clangd version.</p>
<h2 id="${"better-git-amend"}">Better Git Amend<a href="${"#better-git-amend"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The git amend UI has been improved so that you can amend / squash multiple commits but also
undo that.</p>
<p><img src="${"/images/docs/release-notes/2019-06-17/git-amend.gif"}" alt="${"Git amend"}"></p>
<p>Also the entire SCM widget has been rewritten to match VS Code\u2019s UX.</p>
<h2 id="${"config-port-ranges"}">Config: Port ranges<a href="${"#config-port-ranges"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In your <code>.gitpod.yml</code> one can now specify <a href="${"/docs/config-ports#port-ranges"}">port ranges</a>, so you can manage antire ranges addition
and tell Gitpod what to do when a service opens on one of those ports.</p>
<h2 id="${"cli-gp-await-port"}">CLI: <em>gp await-port</em><a href="${"#cli-gp-await-port"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The cli learned a new thing, that let\u2019s you wait for a certain port to open.
This is useful if you want to wait for a certain path and then take a specific action.</p>
<p>Here\u2019s an example that will open a certain path in the preview once a service is a available port 3000:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">gp await-port 3000 &amp;&amp; gp preview $(gp url 3000)my/path/index.html</code>`}</pre>
<h2 id="${"many-small-improvements"}">Many Small Improvements<a href="${"#many-small-improvements"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Besides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.
We have merged 146 PRs in Gitpod and <a href="${"https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-04-01+"}" rel="${"nofollow"}">220 in Theia</a>.</p>
<h2 id="${"whats-next"}">What\u2019s next?<a href="${"#whats-next"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With this release we have added some additional VS Code extensions.
The upcoming release will allow you to install arbitrary VS Code extensions and add that as configuration to your <code>.gitpod.yml</code> files.
The GitLab integration as well as a easy-to-install, self-hosted version of Gitpod is in the works.
Finally, we are looking into optimizing start-up time improvements and, of course, bug-fixing and offering you a great development experience.</p>`
  })}`;
});
var june2019 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: June_2019,
  prerender: prerender$28
});
const metadata$27 = {
  section: "subscriptions",
  title: "Subscriptions"
};
const prerender$27 = true;
const Subscriptions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$27), {}, {
    default: () => `<h1 id="${"subscriptions"}">Subscriptions<a href="${"#subscriptions"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>In order to use Gitpod, a user has to have a valid subscription. If you are not aware of that, you
are likely using the free subscription. See our <a href="${"https://www.gitpod.io"}" rel="${"nofollow"}">homepage</a> for possible
subscription plans.</p>
<p>Our internal calculation unit is <em>Gitpod hours</em>. One Gitpod hour allows you to use one workspace for
one hour on a default server. If you use multiple workspaces in parallel you will be charged for
each of these individually, e.g. for running three workspaces in parallel for half an hour we will
charge you 1.5 Gitpod hours. For non-default resources, we apply a factor that reflects the
additional costs we have for the special hardware. The granularity is Gitpod seconds.</p>
<p>Depending on the type of subscription, you get a certain amount of Gitpod hours per subscription
month. Subscription months, unlike calendar months, start directly with at the moment of the
subscription. At the end of a subscription month, your remaining Gitpod hours for that months
expire, and you will start with the subscription amount again.</p>
<p>You can upgrade to a higher subscription plan at any point in time. The new subscription month
starts immediately. Downgrading is possible as well, but the new subscription month will start with
the end of the prior subscription.</p>
<p>We may introduce other types of additional Gitpod hours (expiring or not) in the future. When you
have different kinds of credits, the one with the earliest expiry date will be used first.</p>
<p>You can see your current amount of Gitpod hours in the <a href="${"https://gitpod.io/usage"}" rel="${"nofollow"}">usage page</a>
or in the IDE by clicking your avatar and choosing <em>Account</em>. You will be warned multiple times when you are getting
close to running out of Gitpod hours. As soon as your credits are used up, your workspaces will be
closed automatically. You can still manage your account, but you will not be able to start any
workspaces until you have Gitpod hours again.</p>`
  })}`;
});
var subscriptions = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Subscriptions,
  metadata: metadata$27,
  prerender: prerender$27
});
const metadata$26 = {
  section: "configure",
  title: "Exposing Ports"
};
const prerender$26 = true;
const Config_ports = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$26), {}, {
    default: () => `<h1 id="${"exposing-ports"}">Exposing Ports<a href="${"#exposing-ports"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>If you want to access services running in your workspace, e.g. a development HTTP server on port <code>8080</code>,
you need to expose that port first. Gitpod has two means of doing that:</p>
<ol><li>On-the-fly: when you start a process which listens on a port in your workspace, Gitpod will ask you
if you want to expose that port to the internet.</li>
<li>In your configuration: if you already know that you want a particular port exposed, you can configure
it in the <code>.gitpod.yml</code> file and skip the extra click later on. For example:</li></ol>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></code>`}</pre>
<p>Ports are mapped to their own URLs. In a workspace you can get the URL mapped to a port using <code>gp url &lt;port&gt;</code>. At the moment you can only expose
HTTP servers.</p>
<h2 id="${"port-ranges"}">Port Ranges<a href="${"#port-ranges"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can configure entire ranges and tell Gitpod how it should behave when a service in such a range is opened.</p>
<p>For instance, the following configs will stop notifying the user when a service opens on a port between 3000 and 8999:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> 3000<span class="token punctuation">-</span><span class="token number">8999</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore</code>`}</pre>
<h2 id="${"configure-the-opening-behavior"}">Configure the Opening Behavior<a href="${"#configure-the-opening-behavior"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When a newly started service gets detected, you usually get a notification telling you about it.
If it is not yet exposed, because it is not listed in the <code>.gitpod.yml</code>, the notification will allow you to expose the port.
If it is already exposed, either through the <code>.gitpod.yml</code> or by manually exposing it, the notification asks
whether and how to open it.</p>
<p>To change this behavior you can provide the property <code>onOpen</code>.
It has four possible values:</p>
<ul><li><code>notify</code> (default) - Show the notification.</li>
<li><code>open-preview</code> - Open in the preview on the right.</li>
<li><code>open-browser</code> - Open in a browser tab.</li>
<li><code>ignore</code> - Don\u2019t do anything.</li></ul>
<p>Any changes to the <code>.gitpod.yml</code> will have effect immediately.</p>
<p><img src="${"/images/docs/ports-onOpen.png"}" alt="${".gitpod.yml containing ports configuration"}"></p>
<h2 id="${"configure-port-visibility"}">Configure port visibility<a href="${"#configure-port-visibility"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By default, all ports are in public visibiltiy state.</p>
<p>To change this behavior you can provide the property <code>visibility</code>.
It has two possible values:</p>
<ul><li><code>public</code> (default) - Allows everyone with the port URL to access the port.</li>
<li><code>private</code> - Only allow users with workspace access to access the port.</li></ul>`
  })}`;
});
var configPorts = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Config_ports,
  metadata: metadata$26,
  prerender: prerender$26
});
const metadata$25 = {
  section: "develop",
  title: "Gitpod Contexts"
};
const prerender$25 = true;
const Context_urls = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$25), {}, {
    default: () => `<h1 id="${"contexts"}">Contexts<a href="${"#contexts"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod understands a variety of common situations you experience as part of your development workflow and automates repetitive tasks, giving you time to focus on more impactful work.</p>
<p>The context is determined by a Gitpod URL\u2019s <a href="${"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL"}" rel="${"nofollow"}"><em>anchor</em></a>, i.e. the link provided at the end of the <code>#</code> character in the <code>gitpod.io/#</code> URL.</p>
<p>Regardless of the context, Gitpod performs the tasks configured in <code>.gitpod.yml</code> if this configuration file is available for a given repository.</p>
<p>Gitpod is aware of the following contexts:</p>
<ul><li><a href="${"#repository-context"}">Repository Context</a></li>
<li><a href="${"#branch-and-commit-contexts"}">Branch and Commit Contexts</a></li>
<li><a href="${"#issue-context"}">Issue Context</a></li>
<li><a href="${"#pullmerge-request-context"}">Pull/Merge Request Context</a></li></ul>
<h2 id="${"repository-context"}">Repository Context<a href="${"#repository-context"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To start a new workspace, you prefix your repository URL with <code>gitpod.io/#</code>. E.g. <a href="${"https://gitpod.io/#https://github.com/gitpod-io/website"}" rel="${"nofollow"}">gitpod.io/#https://github.com/gitpod-io/website</a>.</p>
<p>This is the most basic context and Gitpod simply checks out the default branch and opens the Welcome screen once the workspace is ready.</p>
<p>An example URL for the repository context is:</p>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#https://github.com/gitpod-io/website</code>`}</pre>
<h2 id="${"branch-and-commit-contexts"}">Branch and Commit Contexts<a href="${"#branch-and-commit-contexts"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The branch and commit contexts are very similar to the repository context described above. When you open a new workspace for a given branch or commit, Gitpod automatically checks out that branch or commit, allowing you to browse the repository on that branch or at the time of the given commit.</p>
<p>An example URL for the branch context is:</p>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#https://github.com/gitpod-io/website/tree/my-branch</code>`}</pre>
<p>An example URL for the commit SHA context is:</p>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#https://github.com/gitpod-io/website/commit/f5d4eb4cd3859a760ac613598e840b94e8094649</code>`}</pre>
<h2 id="${"issue-context"}">Issue Context<a href="${"#issue-context"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The fastest way to work on an issue is to start a Gitpod workspace with an issue context. Gitpod automatically creates a local branch based on the following pattern:</p>
<pre class="${"language-null"}">${`<code class="language-null">&lt;your-username&gt;/&lt;issue-title&gt;-&lt;issue-number&gt;</code>`}</pre>
<p>This branch is based on the most recent commit in your project\u2019s default branch.</p>
<p>You can commit your changes with the <code>git</code> command line interface or use the <em>Source Control</em> panel on the left side of the editor. From there, you can also create a new pull/merge request without leaving Gitpod.</p>
<p>An example URL for the issue context is:</p>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#https://github.com/gitpod-io/website/issues/470</code>`}</pre>
<h2 id="${"pullmerge-request-context"}">Pull/Merge Request Context<a href="${"#pullmerge-request-context"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>When Gitpod recognizes a pull or merge request context, it knows you most likely have one of two intentions:</p>
<ul><li>As a reviewer, provide PR/MR feedback</li>
<li>As an author, process feedback and update the code</li></ul>
<p>In either case, Gitpod automatically performs the following tasks for you:</p>
<ol><li>Starts a workspace with the correct branch checked out</li>
<li>Opens the PR/MR review panel where you can see and contribute to existing conversations</li>
<li>Displays a list of files changed as part of that PR/MR</li>
<li>Enables you to leave comments right within individual files (yep, no need to switch between the code and the PR/MR in your browser)</li></ol>
<p>In addition, Gitpod lets you merge a PR/MR. Once merged, you close the browser tab and move on to your next task - in a new, ephemeral development environment \u{1F389}.</p>
<p>An example URL for the pull/merge request context is:</p>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#https://github.com/gitpod-io/website/pull/494</code>`}</pre>`
  })}`;
});
var contextUrls = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Context_urls,
  metadata: metadata$25,
  prerender: prerender$25
});
const metadata$24 = {
  section: "integrations",
  title: "Integrations"
};
const prerender$24 = true;
const Integrations = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$24), {}, {
    default: () => `<h1 id="${"integrations"}">Integrations<a href="${"#integrations"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod comes with integrations for <a href="${"/docs/gitlab-integration"}">GitLab</a>, <a href="${"/docs/github-integration"}">GitHub</a>, and <a href="${"/docs/bitbucket-integration"}">Bitbucket</a> projects. It also provides a <a href="${"/docs/browser-extension"}">browser extension</a> for Chromium-based browsers (Chrome, Edge, Brave, \u2026) and Firefox.</p>`
  })}`;
});
var index$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Integrations,
  metadata: metadata$24,
  prerender: prerender$24
});
const metadata$23 = {
  section: "self-hosted/latest/self-hosted",
  title: "Gitpod Self-Hosted"
};
const prerender$23 = true;
const Self_hosted$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$23), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted"}">Gitpod Self-Hosted<a href="${"#gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod, just as you know it from <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can find all configuration templates and installation scripts in the Gitpod repository:</p>
<blockquote><p><a class="${"no-nowrap"}" href="${"https://github.com/gitpod-io/gitpod"}">https://github.com/gitpod-io/gitpod</a></p></blockquote>
<h3 id="${"install-on-google-cloud-platform"}">Install on Google Cloud Platform<a href="${"#install-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The easiest way to install Gitpod Self-Hosted is currently on Google Cloud Platform (that\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed). GCP is the recommended platform for most users:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-gcp-script"}">Install Gitpod on Google Cloud Platform</a></li></ul>
<h3 id="${"install-on-any-kubernetes-cluster"}">Install on any Kubernetes cluster<a href="${"#install-on-any-kubernetes-cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you already have a Kubernetes cluster, or don\u2019t want/cannot use GCP, please follow the generic guide:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-kubernetes"}">Install Gitpod on Kubernetes</a></li></ul>
<p>Note: Dedicated installation steps for Azure and OpenShift are on our roadmap.</p>`
  })}`;
});
var selfHosted$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted$5,
  metadata: metadata$23,
  prerender: prerender$23
});
const metadata$22 = {
  section: "self-hosted/latest/self-hosted",
  title: "Getting started with Gitpod on AWS"
};
const prerender$22 = true;
const Install_on_aws_script$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$22), {}, {
    default: () => `<blockquote><p>Since the <code>0.6.0</code> release (December 2020) the installers have been deprecated and have been removed with the <code>0.9.0</code> release (April 2021).</p></blockquote>
<p>We currently <a href="${"https://www.notion.so/gitpod/1b9eac5cb33d42e391f86a87f0e37836?v=4f2ec7c943514ee19203b9d4fe096094"}" rel="${"nofollow"}">do not support AWS as platform</a> for running Gitpod.</p>
<p>You still might get Gitpod to run on AWS (especially with the help of our <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">awesome community</a>) but there will be no support from Gitpod for those efforts.</p>`
  })}`;
});
var installOnAwsScript$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_aws_script$3,
  metadata: metadata$22,
  prerender: prerender$22
});
const metadata$21 = {
  section: "self-hosted/latest/self-hosted",
  title: "Getting started with Gitpod on GCP"
};
const prerender$21 = true;
const Install_on_gcp_script$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$21), {}, {
    default: () => `<blockquote><p>Since the <code>0.6.0</code> release (December 2020) the installers have been deprecated and have been removed with the <code>0.9.0</code> release (April 2021).</p></blockquote>
<p>If you are looking for a guide on how to deploy Gitpod Self-Hosted on GCP there is one <a href="${"./install-on-gcp"}">here</a>.</p>`
  })}`;
});
var installOnGcpScript$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_script$5,
  metadata: metadata$21,
  prerender: prerender$21
});
const metadata$20 = {
  section: "self-hosted/latest/self-hosted",
  title: "Install Gitpod Self-Hosted on Kubernetes"
};
const prerender$20 = true;
const Install_on_kubernetes$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$20), {}, {
    default: () => `<h1 id="${"install-gitpod-self-hosted-on-kubernetes"}">Install Gitpod Self-Hosted on Kubernetes<a href="${"#install-gitpod-self-hosted-on-kubernetes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section describes how to install Gitpod on any Kubernetes cluster using <a href="${"https://helm.sh"}" rel="${"nofollow"}">Helm</a>. This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository <a href="${"https://charts.gitpod.io"}" rel="${"nofollow"}">charts.gitpod.io</a>, charts for branch-builds can be found <a href="${"#install-branch-build"}">here</a>, and the source of the charts is in our <a href="${"https://github.com/gitpod-io/gitpod/blob/master/chart/"}" rel="${"nofollow"}">public git repository</a>.</p>
<p>For some platforms we offer <a href="${"https://www.terraform.io/"}" rel="${"nofollow"}">Terraform</a> scripts that ease the infrastructure setup. Once the script has created the necessary infrastructure it will output a <code>values.terraform.yaml</code> that contains infrastructure-specific configuration for the <code>helm</code> deployment.</p>
<ul><li><a href="${"./install-on-gcp"}">Terraform for Google Cloud Platform (GCP)</a>.</li></ul>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As we at Gitpod follow a <a href="${"https://www.notion.so/gitpod/Gitpod-s-Direction-be35d064c0704fbda61c542b84e07ef6#57d3e4659c50449280411ac1f7dd1906"}" rel="${"nofollow"}">\u201CSaas First\u201D strategy</a> we have a <a class="${"no-nowrap"}" href="${"https://www.notion.so/gitpod/1b9eac5cb33d42e391f86a87f0e37836?v=4f2ec7c943514ee19203b9d4fe096094"}">very limited set of platforms that we support</a>.</p>
<p>You still might get Gitpod to run on other platforms (especially with the help of our <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">awesome community</a>) but there will be no support from Gitpod for those efforts.</p>
<p>Requirements regarding the Kubernetes the cluster:</p>
<ul><li><p>Workspace nodes require Ubuntu <code>= 18.04</code> as Host OS at the moment</p></li>
<li><p>Gitpod should work on small Kubernetes nodes out of the box (2vCPUs, 8GB RAM). For a better experience we recommend at least 4vCPUs and 16GB RAM for workspaces nodes. For cost efficiency, we recommend to enable cluster-autoscaling.</p></li></ul>
<p>You need the following \u201Clocal\u201D tools to follow this guide:</p>
<ul><li><p><code>kubectl</code> with connection to your cluster</p></li>
<li><p><code>helm</code> in version <code>&gt;= 3</code>.</p></li></ul>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install Gitpod in your Kubernetes cluster, follow these steps:</p>
<ol><li><p>Create a file <code>values.custom.yaml</code> with the following content:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
  <span class="token key atrule">auth</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>rabbitmq<span class="token punctuation">-</span>user
    <span class="token key atrule">password</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>rabbitmq<span class="token punctuation">-</span>password
<span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>random<span class="token punctuation">-</span>access<span class="token punctuation">-</span>key
  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>random<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>key</code>`}</pre>
<p>You should replace the keys with 2 different random strings unique for your installation.</p></li>
<li><p>Run the following commands in your local terminal:</p>
<pre class="${"language-console"}">${`<code class="language-console">helm repo add gitpod.io https://charts.gitpod.io

helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code>`}</pre></li>
<li><p>Configure <a href="${"./configure-ingress"}">domain and https</a>.</p></li>
<li><p>Run <code>kubectl get pods</code> and verify that all pods are in state <code>RUNNING</code>. If some are not, please see the <a href="${"./troubleshooting"}">Troubleshooting Guide</a>.</p></li>
<li><p>Go to <a href="${"https://%3Cyour-domain.com%3E"}" rel="${"nofollow"}">https://\\<your-domain.com></your-domain.com></a> and follow the steps to complete the installation.</p></li></ol>
<h2 id="${"upgrade"}">Upgrade<a href="${"#upgrade"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li><p>Check the <a href="${"./upgrade"}">Upgrade Guide</a> and follow the steps outlined there.</p></li>
<li><p>Run the update</p>
<pre class="${"language-console"}">${`<code class="language-console">helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code>`}</pre></li>
<li><p>Run <code>kubectl get pods</code> and verify that all pods are in state <code>RUNNING</code>. If some are not, please see the <a href="${"./troubleshooting"}">Troubleshooting Guide</a>.</p></li></ol>
<h2 id="${"recommended-configuration"}">Recommended Configuration<a href="${"#recommended-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use and/or a bigger audience:</p>
<ul><li><a href="${"./database"}"><strong>Database</strong></a>: Configure where Gitpod stores all internal runtime data.</li>
<li><a href="${"./storage"}"><strong>Storage</strong></a>: Configure where Gitpod persists workspace content.</li>
<li><a href="${"./docker-registry"}"><strong>Docker Registry</strong></a>: Configure where Gitpod stores workspace images.</li></ul>
<h2 id="${"customization"}">Customization<a href="${"#customization"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Further customizations:</p>
<ul><li><a href="${"./nodes"}"><strong>Kubernetes Nodes</strong></a>: Configure file system layout and the workspace\u2019s node associativity.</li>
<li><a href="${"./workspaces"}"><strong>Workspaces</strong></a>: Configure workspace sizing.</li></ul>
<h2 id="${"install-branch-build"}">Install Branch Build<a href="${"#install-branch-build"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To try the latest version of Gitpod, freshly build form the <code>master</code> branch of our git repository or any other branch, follow these steps:</p>
<ol><li><p>Obtain the version name from <a href="${"https://werft.gitpod-dev.com/"}" rel="${"nofollow"}">werft.gitpod-dev.com</a>. The version has the format <code>&lt;branchname&gt;.&lt;buildnumber&gt;</code> (e.g <code>master.354</code>).</p></li>
<li><p>The Helm chart ships as part of our <code>installer</code> docker image. You can extract it by running:</p>
<pre class="${"language-console"}">${`<code class="language-console">docker run --entrypoint cp -v $PWD:/workspace gcr.io/gitpod-io/self-hosted/installer:&lt;version&gt; -R /dist/helm/ /workspace</code>`}</pre></li></ol>`
  })}`;
});
var installOnKubernetes$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_kubernetes$5,
  metadata: metadata$20,
  prerender: prerender$20
});
const metadata$1$ = {
  section: "self-hosted/latest/self-hosted",
  title: "Configure Ingress to your Gitpod installation"
};
const prerender$1$ = true;
const Configure_ingress$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1$), {}, {
    default: () => `<h1 id="${"configure-ingress-to-your-gitpod-installation"}">Configure Ingress to your Gitpod installation<a href="${"#configure-ingress-to-your-gitpod-installation"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configuring ingress into your Gitpod installation requires two things:</p>
<ul><li>three DNS entries pointing at the IP of Gitpod\u2019s proxy service, and</li>
<li>HTTPS certificates.</li></ul>
<h2 id="${"1-dns-entries"}">1. DNS Entries<a href="${"#1-dns-entries"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. <code>your-domain.com</code>).
As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.
For example:</p>
<p>your-domain.com
<em>.your-domain.com
</em>.ws.your-domain.com</p>
<p>Installing Gitpod on a subdomain works as well. For example:</p>
<p>gitpod.your-domain.com
<em>.gitpod.your-domain.com
</em>.ws.gitpod.your-domain.com</p>
<ol><li><p>Setup <code>A</code> records for all three (sub)domains. To learn your installation\u2019s IP run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl describe svc proxy | grep -i ingress</code>`}</pre></li>
<li><p>Merge the following into your <code>values.custom.yaml</code> file:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">hostname</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>domain.com
<span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>
    <span class="token key atrule">loadBalancerIP</span><span class="token punctuation">:</span> &lt;your<span class="token punctuation">-</span>IP<span class="token punctuation">></span></code>`}</pre>
<p>Specifying the <code>loadBalancerIP</code> make sure it stays the same across all redeploys.</p></li></ol>
<h2 id="${"2-https"}">2. HTTPS<a href="${"#2-https"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires HTTPS certificates to function properly. We recommend using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> for retrieving certificates as we do for <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>.</p>
<blockquote><p>Important: The HTTPS certificates for your domain must include <code>your-domain.com</code>, <code>*.your-domain.com</code> and <code>*.ws.your-domain.com</code>. Beware that wildcard certificates are valid for one level only (i.e. <code>*.a.com</code> is not valid for <code>c.b.a.com</code>).</p></blockquote>
<p>To configure the HTTPS certificates for your domain</p>
<ol><li><a href="${"#using-lets-encrypt-to-generate-https-certificates"}">Generate certificates</a> and put your certificate files under <code>secrets/https-certificates/</code>:<pre class="${"language-null"}">${`<code class="language-null">secrets/https-certificates:
  |- cert.pem
  |- chain.pem
  |- fullchain.pem
  |- privkey.pem</code>`}</pre></li>
<li>Generate the <a href="${"https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"}" rel="${"nofollow"}">dhparams.pem</a> file using:<pre class="${"language-bash"}">${`<code class="language-bash">openssl dhparam -out secrets/https-certificates/dhparams.pem <span class="token number">2048</span></code>`}</pre></li>
<li>Create a kubernetes secret using:<pre class="${"language-bash"}">${`<code class="language-bash">kubectl create secret generic https-certificates --from-file<span class="token operator">=</span>secrets/https-certificates</code>`}</pre></li>
<li>Afterwards, do an <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes.</li></ol>
<h3 id="${"using-lets-encrypt-to-generate-https-certificates"}">Using Let\u2019s Encrypt to generate HTTPS certificates<a href="${"#using-lets-encrypt-to-generate-https-certificates"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The most accessible means of obtaining HTTPS certificates is using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a>. It provides free certificates to anybody who can prove ownership of a domain.
Let\u2019s Encrypt offers a program called <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> to make acquiring certificates as striaght forward as possible.</p>
<p>Assuming you have <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> installed, the following script will generate and configure the required certificates (notice the placeholders):</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOMAIN</span><span class="token operator">=</span>your-domain.com
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EMAIL</span><span class="token operator">=</span>your@email.here
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKDIR</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/letsencrypt

certbot certonly <span class="token punctuation"></span>
    --config-dir <span class="token variable">$WORKDIR</span>/config <span class="token punctuation"></span>
    --work-dir <span class="token variable">$WORKDIR</span>/work <span class="token punctuation"></span>
    --logs-dir <span class="token variable">$WORKDIR</span>/logs <span class="token punctuation"></span>
    --manual <span class="token punctuation"></span>
    --preferred-challenges<span class="token operator">=</span>dns <span class="token punctuation"></span>
    --email <span class="token variable">$EMAIL</span> <span class="token punctuation"></span>
    --server https://acme-v02.api.letsencrypt.org/directory <span class="token punctuation"></span>
    --agree-tos <span class="token punctuation"></span>
    -d *.ws.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d *.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d <span class="token variable">$DOMAIN</span>

<span class="token comment"># move them into place</span>
<span class="token function">mkdir</span> -p secrets/https-certificates
<span class="token function">find</span> <span class="token variable">$WORKDIR</span>/config/live -name <span class="token string">"*.pem"</span> -exec <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> secrets/https-certificates <span class="token punctuation"></span><span class="token punctuation">;</span></code>`}</pre>
<blockquote><p>Note: Do not refrain if <code>certbot</code> fails on first execution: Depending on the challenge used you might have to restart it <em>once</em>.</p></blockquote>`
  })}`;
});
var configureIngress$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Configure_ingress$2,
  metadata: metadata$1$,
  prerender: prerender$1$
});
const metadata$1_ = {
  section: "self-hosted/latest/self-hosted",
  title: "Docker Registry"
};
const prerender$1_ = true;
const Docker_registry$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1_), {}, {
    default: () => `<h1 id="${"docker-registry"}">Docker Registry<a href="${"#docker-registry"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.
To this end, Gitpod requires a container registry where it can push the images it builds.</p>
<p>By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li>Integrated docker registry: If not disabled, this docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.
The docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.</li>
<li>Own docker registry: Gitpod can connect to your own docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.</li></ul>
<p>This helm chart can either deploy its own registry (default but requires <a href="${"./configure-ingress"}">HTTPS certs</a>) or use an existing one.</p>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To connect to an existing Docker registry, perform the following steps:</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">components:
  imageBuilder:
    registryCerts: []
    registry:
      # name must not end with a &quot;/&quot;
      name: your.registry.com/gitpod
      secretName: image-builder-registry-secret
      path: secrets/registry-auth.json

  workspace:
    pullSecret:
      secretName: image-builder-registry-secret

docker-registry:
  enabled: false</code>`}</pre>
<p>Replace <code>your.registry.com/gitpod</code> with the domain your registry is available at.</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li>
<li><p>Login to the registry and safe the authentication</p>
<pre class="${"language-null"}">${`<code class="language-null">mkdir -p secrets
docker login your.registry.com/gitpod &amp;&amp; cp ~/.docker/config.json secrets/registry-auth.json</code>`}</pre>
<blockquote><p>This does not work for Google Cloud Registries because their login tokens are short-lived. See the <a href="${"#example-google-cloud-registry-credentials"}">example</a> below on how to configure it.</p></blockquote></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes.</p></li></ol>
<p>Make sure the resulting JSON file contains the credentials (there should be an <code>auths</code> section containing them as base64 encoded string).</p>
<p>If that\u2019s not the case you might have a credential store/helper set up (e.g. on macOS the <em>Securely store Docker logins in macOS keychain</em> setting).</p>
<h3 id="${"example-google-cloud-registry-credentials"}">Example Google Cloud Registry Credentials<a href="${"#example-google-cloud-registry-credentials"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Prerequisites:</p>
<ul><li><code>gcloud</code> <a href="${"https://cloud.google.com/sdk/docs/quickstart"}" rel="${"nofollow"}">installed</a> and <a href="${"https://cloud.google.com/sdk/gcloud/reference/auth/login"}" rel="${"nofollow"}">authenticated</a></li></ul>
<p>How to use Google Cloud Registry as Docker registry for Gitpod:</p>
<ol><li><p>Go to <a class="${"no-nowrap"}" href="${"https://console.cloud.google.com/gcr/images/%3Cyour-project-id%3E?project=%3Cyour-project-id%3E"}">https://console.cloud.google.com/gcr/images/\\<your-project-id>?project=\\<your-project-id></your-project-id></your-project-id></a> and hit \u201CEnable Registry API\u201D (if not already enabled).</p></li>
<li><p>Execute the following commands:</p>
<pre class="${"language-null"}">${`<code class="language-null">export PROJECT_ID=&quot;&lt;your-project-id&gt;&quot;

gcloud iam service-accounts create gitpod-registry-full --project=$PROJECT_ID
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com

echo &quot;&#123;&quot;auths&quot;:&#123;&quot;gcr.io&quot;: &#123;&quot;auth&quot;: &quot;$(echo -n &quot;$(echo -n &quot;_json_key:&quot;; cat gitpod-registry-full-key.json)&quot; | base64 -w 0)&quot;&#125;&#125;&#125;&quot; &gt; secrets/registry-auth.json</code>`}</pre>
<p>This should result in a <code>secrets/registry-auth.json</code> like this:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"auths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"gcr.io"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"&lt;long-base64-string>"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<blockquote><p>If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.</p></blockquote></li></ol>`
  })}`;
});
var dockerRegistry$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_registry$5,
  metadata: metadata$1_,
  prerender: prerender$1_
});
const metadata$1Z = {
  section: "self-hosted/latest/self-hosted",
  title: "Troubleshooting"
};
const prerender$1Z = true;
const Troubleshooting$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1Z), {}, {
    default: () => `<h1 id="${"troubleshooting"}">Troubleshooting<a href="${"#troubleshooting"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section should solve all errors that might come up during installation of Gitpod.</p>
<h2 id="${"1-ws-daemon-is-stuck-in-init-01"}">1. <code>ws-daemon</code> is stuck in <code>Init: 0/1</code><a href="${"#1-ws-daemon-is-stuck-in-init-01"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl describe pod ws-daemon-...</code> gives:
<code>MountVolume.SetUp failed for volume &quot;node-fs1&quot; : hostPath type check failed: /run/containerd/io.containerd.runtime.v1.linux/k8s.io is not a directory</code></p>
<h3 id="${"solution"}">Solution<a href="${"#solution"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li><p><code>ssh</code> onto the node, <code>mount | grep rootfs</code> and find the directory where your containers are stored. Common paths are:</p>
<ul><li><code>/run/containerd/io.containerd.runtime.v1.linux/k8s.io</code></li>
<li><code>/run/containerd/io.containerd.runtime.v1.linux/moby</code></li>
<li><code>/run/containerd/io.containerd.runtime.v2.task/k8s.io</code></li></ul></li>
<li><p><em>Merge</em> the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">components:
  wsDaemon:
    containerRuntime:
      nodeRoots:
      - &lt;your path here&gt;</code>`}</pre></li>
<li><p>Do an <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes.</p></li></ol>
<h2 id="${"2-helm-install-fails-with-minio-access-key-is-required-please-add-a-value-to-your-valuesyaml"}">2. <code>helm install</code> fails with: \u201Cminio access key is required, please add a value to your values.yaml\u201D<a href="${"#2-helm-install-fails-with-minio-access-key-is-required-please-add-a-value-to-your-valuesyaml"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Since <code>0.7.0</code> minio requires custom credentials to be configured.</p>
<h3 id="${"solution-1"}">Solution<a href="${"#solution-1"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li>Follow the <a href="${"./upgrade"}">Upgrade Guide</a>.</li></ol>
<h2 id="${"3-after-upgrade-the-minio-pod-is-stuck-in-containercreating"}">3. After upgrade, the <code>minio</code> Pod is stuck in <code>ContainerCreating</code><a href="${"#3-after-upgrade-the-minio-pod-is-stuck-in-containercreating"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This is caused by a bug in the minio Helm chart which blocks itself on updates.</p>
<h3 id="${"solution-2"}">Solution<a href="${"#solution-2"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li><p><code>kubectl scale deployments/minio --replicas=0</code></p></li>
<li><p><code>kubectl scale deployments/minio --replicas=1</code></p></li>
<li><p>Wait until the pod comes up.</p></li></ol>`
  })}`;
});
var troubleshooting$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Troubleshooting$3,
  metadata: metadata$1Z,
  prerender: prerender$1Z
});
const metadata$1Y = {
  section: "self-hosted/latest/self-hosted",
  title: "Getting started with Gitpod on GCP"
};
const prerender$1Y = true;
const Install_on_gcp = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1Y), {}, {
    default: () => `<h1 id="${"getting-started-with-gitpod-on-gcp"}">Getting started with Gitpod on GCP<a href="${"#getting-started-with-gitpod-on-gcp"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod runs best on Google Cloud Platform. That\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed and operated at scale.
This guide explains how to install an instance of Gitpod with the following steps:</p>
<h1 id="${"terraform-script-coming-soon"}">Terraform script coming soon<a href="${"#terraform-script-coming-soon"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>We are working on improving this and making it production ready. Work in progress scripts can be found at this url
<a href="${"https://github.com/gitpod-io/gitpod/tree/main/install/gcp-terraform"}" rel="${"nofollow"}">code</a></p>`
  })}`;
});
var installOnGcp = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp,
  metadata: metadata$1Y,
  prerender: prerender$1Y
});
const metadata$1X = {
  section: "self-hosted/latest/self-hosted",
  title: "Workspaces"
};
const prerender$1X = true;
const Workspaces$6 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1X), {}, {
    default: () => `<h1 id="${"workspaces"}">Workspaces<a href="${"#workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"sizing"}">Sizing<a href="${"#sizing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.
If you want to change the default sizing (~ 8GiB per workspace) you should</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token comment"># workspaceSizing configures the resources available to each workspace. These settings directly impact how</span>
<span class="token comment"># desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.</span>
<span class="token comment">#</span>
<span class="token comment"># Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which</span>
<span class="token comment"># results in a broken user experience.</span>
<span class="token key atrule">workspaceSizing</span><span class="token punctuation">:</span>
  <span class="token key atrule">requests</span><span class="token punctuation">:</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"1m"</span>
    <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"2.25Gi"</span>
    <span class="token key atrule">storage</span><span class="token punctuation">:</span> <span class="token string">"5Gi"</span>
  <span class="token key atrule">limits</span><span class="token punctuation">:</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"5"</span>
    <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"12Gi"</span>
  <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>
    <span class="token comment"># Gitpod supports dynamic CPU limiting. We express those limits in "buckets of CPU time" (jiffies where 1 jiffie is 1% of a vCPU).</span>
    <span class="token comment"># Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).</span>
    <span class="token comment">#</span>
    <span class="token comment"># For example:</span>
    <span class="token comment">#   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000</span>
    <span class="token comment">#   - budget: 90000</span>
    <span class="token comment">#     limit: 500</span>
    <span class="token comment">#   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000</span>
    <span class="token comment">#   - budget: 120000</span>
    <span class="token comment">#     limit: 400</span>
    <span class="token comment">#   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:</span>
    <span class="token comment">#   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000</span>
    <span class="token comment">#   - budget: 54000</span>
    <span class="token comment">#     limit: 200</span>
    <span class="token comment">#</span>
    <span class="token comment"># if there are no buckets configured, the dynamic CPU limiting is disabled.</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span>
      <span class="token key atrule">buckets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token key atrule">samplingPeriod</span><span class="token punctuation">:</span> <span class="token string">"10s"</span>
      <span class="token key atrule">controlPeriod</span><span class="token punctuation">:</span> <span class="token string">"15m"</span></code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes.</p></li></ol>`
  })}`;
});
var workspaces$6 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces$6,
  metadata: metadata$1X,
  prerender: prerender$1X
});
const metadata$1W = {
  section: "self-hosted/latest/self-hosted",
  title: "Database"
};
const prerender$1W = true;
const Database$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1W), {}, {
    default: () => `<h1 id="${"database"}">Database<a href="${"#database"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li><p>Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.
The database uses a Kubernetes PersistentVolume. We do not recommend using this option for a production setting.</p></li>
<li><p>Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.</p></li></ul>
<p>This chart installs a MySQL database that gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a proper MySQL installation:</p>
<ol><li><p>Copy the DB init scripts into your local folder:</p>
<pre class="${"language-null"}">${`<code class="language-null">mkdir -p gpinstall
echo exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash
mkdir -p ./db-init
cp gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/
rm -Rf gpinstall</code>`}</pre></li>
<li><p>Initialize your MySQL database using the SQL files in <code>config/db/init/</code>. E.g. in a mysql session connected to your database server run:</p>
<pre class="${"language-null"}">${`<code class="language-null">SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, &#39;your-password-goes-here&#39;);
source db-init/00-testdb-user.sql;
source db-init/01-create-user.sql;
source db-init/02-create-and-init-sessions-db.sql;
source db-init/03-recreate-gitpod-db.sql;</code>`}</pre></li>
<li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">db</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> db
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>password<span class="token punctuation">-</span>goes<span class="token punctuation">-</span>here

<span class="token comment"># Disable built-in MySQL instance</span>
<span class="token key atrule">mysql</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes.</p></li></ol>`
  })}`;
});
var database$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Database$5,
  metadata: metadata$1W,
  prerender: prerender$1W
});
const metadata$1V = {
  section: "self-hosted/latest/self-hosted",
  title: "Workspace Storage"
};
const prerender$1V = true;
const Storage$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1V), {}, {
    default: () => `<h1 id="${"workspace-storage"}">Workspace Storage<a href="${"#workspace-storage"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to a separate bucket.</p>
<p>By default Gitpod installs <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> as built-in bucket storage which uses a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"}" rel="${"nofollow"}">persistent volume</a> to store workspace content.</p>
<p>For more complex use case we recommend configuring more permanent means of persistence by either:</p>
<ul><li>Configure the contained MinIO-instance to serve as a <a href="${"https://github.com/minio/minio/tree/master/docs/gateway"}" rel="${"nofollow"}">gateway</a> OR configure one of a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes"}" rel="${"nofollow"}">wide range of storage backends</a>.</li>
<li>Bring your own storage bucket: Configure Gitpod to either connect to:<ul><li>your own installation of MinIO</li>
<li>a Google Cloud Storage compatible storage solution</li></ul></li></ul>
<h2 id="${"a-configure-custom-minio-instance"}">a) Configure custom MinIO instance<a href="${"#a-configure-custom-minio-instance"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li><p>Create a file <code>values.custom.yaml</code> with this content:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">contentService</span><span class="token punctuation">:</span>
    <span class="token key atrule">remoteStorage</span><span class="token punctuation">:</span>
      <span class="token key atrule">kind</span><span class="token punctuation">:</span> minio
      <span class="token key atrule">minio</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>minio<span class="token punctuation">-</span>installation.somewhere<span class="token punctuation">-</span>else.com<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> enterKeyHere
        <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> superSecretKeyGoesHere
        <span class="token key atrule">tmpdir</span><span class="token punctuation">:</span> /tmp

<span class="token comment"># Disable built-in minio instance</span>
<span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre></li>
<li><p>Redeploy Gitpod using <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li></ol>
<h2 id="${"b-configure-the-built-in-minio-instance"}">b) Configure the built-in MinIO instance<a href="${"#b-configure-the-built-in-minio-instance"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li>Consult the chart\u2019s documentation at <a href="${"https://helm.min.io/"}" rel="${"nofollow"}">https://helm.min.io/</a></li>
<li>Create a file <code>values.custom.yaml</code> with this content:<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> add<span class="token punctuation">-</span>a<span class="token punctuation">-</span>radom<span class="token punctuation">-</span>access<span class="token punctuation">-</span>key<span class="token punctuation">-</span>here
  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> add<span class="token punctuation">-</span>a<span class="token punctuation">-</span>radom<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>key<span class="token punctuation">-</span>here
  <span class="token comment"># insert custom config here</span></code>`}</pre></li>
<li>Redeploy Gitpod using <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes</li></ol>`
  })}`;
});
var storage$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Storage$5,
  metadata: metadata$1V,
  prerender: prerender$1V
});
const metadata$1U = {
  section: "self-hosted/latest/self-hosted",
  title: "Gitpod Self-Hosted Upgrade Notes"
};
const prerender$1U = true;
const Upgrade$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1U), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted-upgrade-notes"}">Gitpod Self-Hosted Upgrade Notes<a href="${"#gitpod-self-hosted-upgrade-notes"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"upgrading-gitpod-from-v080-to-v090"}">Upgrading Gitpod from v0.8.0 to v0.9.0<a href="${"#upgrading-gitpod-from-v080-to-v090"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With version 0.9.0 there is one change that requires user action regarding the rabbitmq messagebus:</p>
<h3 id="${"rabbitmq-now-requires-dexplicitly-set-password-and-username"}">rabbitmq now requires dexplicitly set password and username<a href="${"#rabbitmq-now-requires-dexplicitly-set-password-and-username"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod uses a rabbitmq installation for distributing messages between components. So far that has been using default credentials if not configured otherwise. With v0.9.0 this is now explicitly required.
To do so add the following to your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">rabbitmq:
  auth:
    username: your-rabbitmq-user
    password: your-secret-rabbitmq-password</code>`}</pre>
<p>If this is not present, <code>helm</code> will fail with the following message:</p>
<blockquote><p>rabbitmq username is required, please add a value to your values.yaml or with the helm flag \u2014set rabbitmq.auth.username=xxxxx</p></blockquote>
<h2 id="${"upgrading-gitpod-from-v060-to-v070"}">Upgrading Gitpod from v0.6.0 to v0.7.0<a href="${"#upgrading-gitpod-from-v060-to-v070"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With version 0.7.0 there are two major changes that require a user action. Both relate to the remote storage.</p>
<h3 id="${"built-in-minio-is-now-accessable-at-minioyour-gitpod-domaincom"}">Built-in MinIO is now accessable at minio.your-gitpod-domain.com<a href="${"#built-in-minio-is-now-accessable-at-minioyour-gitpod-domaincom"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>When you install Gitpod on your own Kubernetes installation, it brings a built-in MinIO object storage (unless disabled). As of v0.7.0, the built-in MinIO instance is accessable at <a href="${"https://minio.your-gitpod-domain.com."}" rel="${"nofollow"}">https://minio.your-gitpod-domain.com.</a> That\u2019s the reason that (for security reasons) we do not set a default access and secret key for the built-in MinIO installation anymore. That means, you need to add your own random keys in your values files like this:</p>
<pre class="${"language-null"}">${`<code class="language-null">minio:
  accessKey: add-a-radom-access-key-here
  secretKey: add-a-radom-secret-key-here</code>`}</pre>
<p>If you don\u2019t do this, <code>helm</code> will fail with the following message:</p>
<blockquote><p>minio access key is required, please add a value to your values.yaml</p></blockquote>
<h3 id="${"remote-storage-config-has-been-moved-to-a-new-component"}">Remote storage config has been moved to a new component<a href="${"#remote-storage-config-has-been-moved-to-a-new-component"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component <code>wsDaemon</code> to the new component <code>contentService</code>. See the <a href="${"./storage"}">Storage Guide</a> for an example.</p>`
  })}`;
});
var upgrade$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Upgrade$2,
  metadata: metadata$1U,
  prerender: prerender$1U
});
const metadata$1T = {
  section: "self-hosted/latest/self-hosted",
  title: "Kubernetes Nodes"
};
const prerender$1T = true;
const Nodes$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1T), {}, {
    default: () => `<h1 id="${"kubernetes-nodes"}">Kubernetes Nodes<a href="${"#kubernetes-nodes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configure the nodes (computers or virtual machines) that Kubernetes runs Gitpod\u2019s workspace pods on.</p>
<h2 id="${"assign-workload-to-nodes"}">Assign workload to Nodes<a href="${"#assign-workload-to-nodes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as <em>meta</em>) and the workspaces. Ideally both types of workloads run on seperate nodes to make makes scaling easier.
Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:</p>
<ul><li><code>gitpod.io/workload_meta=true</code> which marks the \u201Cmeta\u201D nodes and</li>
<li><code>gitpod.io/workload_workspace=true </code> which marks the workspace nodes.</li></ul>
<p>If you want to \u201Cmix \u2018n match\u201D, i.e., don\u2019t separate the nodes, you can simply run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true</code>`}</pre>
<h2 id="${"node-filesystem-layout"}">Node Filesystem Layout<a href="${"#node-filesystem-layout"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod relies on the node\u2019s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in <code>/data</code> and Theia is copied to <code>/theia</code>. Depending on your node setup the root filesystem maybe <strong>read-only</strong> or <strong>slow</strong>.
We recommend you change those two paths so that they\u2019re located on an SSD or some other form of fast local storage.</p>
<p>To do this:</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">imageBuilder</span><span class="token punctuation">:</span>
    <span class="token comment"># The image builder deploys a Docker-in-Docker-daemon. By default that Docker daemon works in an empty-dir on the node.</span>
    <span class="token comment"># Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon</span>
    <span class="token comment"># fast storage on the node, e.g. an SSD.</span>
    <span class="token key atrule">hostDindData</span><span class="token punctuation">:</span> /mnt/disks/ssd0/docker
  <span class="token key atrule">wsDaemon</span><span class="token punctuation">:</span>
    <span class="token comment"># Workspace data is stored on the nodes. This setting configures where on the ndoe the workspace data lives.</span>
    <span class="token comment"># The faster this location is (in terms of IO) the faster workspaces will initialize.</span>
    <span class="token key atrule">hostWorkspaceArea</span><span class="token punctuation">:</span> /mnt/disks/ssd0/workspaces</code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.9.0</code> to apply the changes.</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li></ol>`
  })}`;
});
var nodes$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Nodes$5,
  metadata: metadata$1T,
  prerender: prerender$1T
});
const metadata$1S = {
  section: "self-hosted/latest/self-hosted",
  title: "Administrate Gitpod Self-Hosted"
};
const prerender$1S = true;
const Admin$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1S), {}, {
    default: () => `<h1 id="${"administrate-gitpod-self-hosted"}">Administrate Gitpod Self-Hosted<a href="${"#administrate-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we are working on the administration experience, there is already a lot you can do if you know where to look.</p>
<h2 id="${"download-a-backup-of-a-workspace"}">Download a backup of a workspace<a href="${"#download-a-backup-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Workpaces are stored as tar files in Minio or Google Storage buckets (depending on your configuration).
The tar files can be downloaded from there and unpacked locally.</p>
<h2 id="${"list-all-running-workspaces"}">List all running workspaces<a href="${"#list-all-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>SELECT</code>\u2026</p>
<p><code>kubectl get pods</code></p>
<h2 id="${"stop-a-running-workspace"}">Stop a running workspace<a href="${"#stop-a-running-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl delete pod</code></p>
<h2 id="${"connect-to-built-in-registry"}">Connect to built-in Registry<a href="${"#connect-to-built-in-registry"}"><span class="${"icon icon-link"}"></span></a></h2>`
  })}`;
});
var admin$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Admin$5,
  metadata: metadata$1S,
  prerender: prerender$1S
});
const metadata$1R = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Gitpod Self-Hosted"
};
const prerender$1R = true;
const Self_hosted$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1R), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted"}">Gitpod Self-Hosted<a href="${"#gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod, just as you know it from <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, can be installed and operated on your own infrastructure.
This infrastructure may be a cloud provider or self-managed Kubernetes. It may be on the public internet, behind a corporate firewall, or on a network without internet access.</p>
<blockquote><p>Gitpod self-hosted is free for up to three users.
For more users, please obtain a <a href="${"https://gitpod.io/selfhosted-trial"}" rel="${"nofollow"}">free trial license</a>.</p></blockquote>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Regardless of your target environment, you will need to ensure that the <a href="${"./install/prepare-installation"}">installation prerequisites</a> are available.
Gitpod can be installed in the following environments:</p>
<ul><li><a href="${"/docs/self-hosted/0.3.0/install/install-on-kubernetes"}">Vanilla Kubernetes</a>: All you need is a domain and a Kubernetes cluster.</li>
<li><a href="${"/docs/self-hosted/0.3.0/install/install-on-gcp-script"}">Google Cloud Platform</a>: Install Gitpod optimised for Google Cloud Platform.</li></ul>`
  })}`;
});
var selfHosted$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted$4,
  metadata: metadata$1R,
  prerender: prerender$1R
});
const metadata$1Q = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Manually Install Gitpod on Google Cloud Platform"
};
const prerender$1Q = true;
const Install_on_gcp_manual$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1Q), {}, {
    default: () => `<h1 id="${"manually-install-gitpod-on-google-cloud-platform"}">Manually Install Gitpod on Google Cloud Platform<a href="${"#manually-install-gitpod-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h1>
<blockquote><p><strong>TODO</strong> This document is a stub only.</p></blockquote>
<h2 id="${"before-you-begin"}">Before you begin<a href="${"#before-you-begin"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>install <a href="${"https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version"}" rel="${"nofollow"}">gcloud cli</a><ul><li><code>gcloud components install beta</code></li></ul></li>
<li>setup Google cloud project</li>
<li>choose a <a href="${"https://cloud.google.com/compute/docs/regions-zones/#available"}" rel="${"nofollow"}">zone and region</a> to install your Gitpod cluster</li>
<li><a href="${"https://cloud.google.com/endpoints/docs/openapi/enable-api#enabling_an_api"}" rel="${"nofollow"}">Enable APIs</a>:<ul><li>Identity and Access Management (IAM)</li>
<li>Cloud SQL Admin API</li></ul></li></ul>
<pre class="${"language-null"}">${`<code class="language-null">gcloud auth login
gcloud config set core/project &lt;gcloud-project&gt;
gcloud config set compute/region &lt;gcloud-region&gt;
gcloud config set compute/zone &lt;gcloud-zone&gt;

PROJECT_ID=&lt;gcloud-project-id&gt;
REGION=&lt;gcloud-region&gt;</code>`}</pre>
<h3 id="${"ip"}">IP<a href="${"#ip"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud compute addresses create gitpod-inbound-ip --region=$REGION
IP_ADDRESS=$(gcloud compute addresses describe gitpod-inbound-ip --region $REGION | grep &quot;address:&quot; | cut -d&#39; &#39; -f2)</code>`}</pre>
<p>Now that you have a reserved IP address, you will have to set up the following DNS A records resolving to that IP address:</p>
<ul><li><code>your-base-domain</code></li>
<li><code>*.your-base-domain</code></li>
<li><code>*.ws.your-base-domain</code></li></ul>
<h3 id="${"vpc-network"}">VPC Network<a href="${"#vpc-network"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud compute networks create gitpod-vpc --bgp-routing-mode=regional --subnet-mode=auto</code>`}</pre>
<h3 id="${"cluster"}">Cluster<a href="${"#cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-nodes-meta
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/clouddebugger.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudtrace.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/errorreporting.writer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.viewer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.logWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.metricWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.viewer

gcloud iam service-accounts create gitpod-nodes-workspace
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/clouddebugger.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudtrace.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/errorreporting.writer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.viewer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.logWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.metricWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.viewer</code>`}</pre>
<p>Choose one (or more) zones to install your cluster to</p>
<pre class="${"language-null"}">${`<code class="language-null">ZONES=us-west1-a,us-west1-b
gcloud beta container clusters create gitpod-cluster         --region=$REGION            --node-locations=$ZONES         --cluster-version=&quot;1.13.7-gke.24&quot;         --addons=NetworkPolicy                  --no-enable-basic-auth         --no-issue-client-certificate                 --enable-ip-alias         --cluster-ipv4-cidr=&quot;10.8.0.0/14&quot;         --services-ipv4-cidr=&quot;10.0.0.0/20&quot;         --network=gitpod-vpc                 --enable-network-policy         --enable-pod-security-policy                 --metadata disable-legacy-endpoints=true         --num-nodes=1         --enable-autoscaling --min-nodes=1 --max-nodes=3         --service-account=gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com         --node-labels=&quot;gitpod.io/workload_meta=true&quot;         --machine-type=n1-standard-4         --image-type=cos         --disk-size=100         --disk-type=pd-ssd         --enable-autorepair         --local-ssd-count=0         --workload-metadata-from-node=SECURE

gcloud beta container node-pools create workspace-pool-1         --region=$REGION            --cluster=gitpod-cluster                 --metadata disable-legacy-endpoints=true         --num-nodes=0         --enable-autoscaling --min-nodes=0 --max-nodes=10         --service-account=gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com         --node-labels=&quot;gitpod.io/workload_workspace=true&quot;         --machine-type=n1-standard-16         --image-type=ubuntu         --disk-size=200         --disk-type=pd-ssd         --enable-autorepair         --local-ssd-count=1</code>`}</pre>
<h2 id="${"optional"}">Optional<a href="${"#optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"gcp-managed-db"}">GCP Managed DB<a href="${"#gcp-managed-db"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">DB_PW=$(openssl rand -base64 20)
DB_NAME=gitpod-db
BACKUP_TIME=&quot;04:00&quot;
gcloud sql instances create $DB_NAME     --database-version MYSQL_5_7     --storage-size=100     --storage-auto-increase     --tier=db-n1-standard-4     --region=$REGION     --backup-start-time=$BACKUP_TIME     --failover-replica-name=$DB_NAME-failover     --replica-type=FAILOVER     --enable-bin-log

gcloud sql users set-password root --host % --instance $DB_NAME --password $DB_PW
echo &quot;Database root password: $DB_PW&quot;</code>`}</pre>
<p>Note: Store password securely for later use!</p>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-cloudsql-client
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-cloudsql-client@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudsql.client
gcloud iam service-accounts keys create gitpod-cloudsql-client-key.json --iam-account=gitpod-cloudsql-client@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h4 id="${"initialize-db"}">Initialize DB<a href="${"#initialize-db"}"><span class="${"icon icon-link"}"></span></a></h4>
<ol><li><p><a href="${"https://cloud.google.com/sql/docs/mysql/sql-proxy#install"}" rel="${"nofollow"}">Get <code>cloud_sql_proxy</code> binary</a></p>
<pre class="${"language-null"}">${`<code class="language-null">wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
chmod +x cloud_sql_proxy</code>`}</pre></li>
<li><p>Connect to DB</p>
<pre class="${"language-null"}">${`<code class="language-null">./cloud_sql_proxy -instances=$PROJECT_ID:$REGION:$DB_NAME=tcp:0.0.0.0:3306 -credential_file=./gitpod-cloudsql-client-key.json</code>`}</pre>
<p>2nd terminal: login with root password</p>
<pre class="${"language-null"}">${`<code class="language-null">mysql -u root -P 3306 -h 127.0.0.1 -p</code>`}</pre></li>
<li><p>Execute init scripts
Generate password for gitpod user:</p>
<pre class="${"language-null"}">${`<code class="language-null">GITPOD_DB_PW=$(openssl rand -base64 20)</code>`}</pre>
<pre class="${"language-null"}">${`<code class="language-null">set @gitpodDbPassword = &lt;GITPOD_DB_PW&gt;;

source config/db/init/00-create-user.sql
source config/db/init/01-recreate-gitpod-db.sql
source config/db/init/02-create-and-init-sessions-db.sql</code>`}</pre></li></ol>
<h3 id="${"gcp-buckets-for-workspace-backups"}">GCP Buckets for workspace backups<a href="${"#gcp-buckets-for-workspace-backups"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-workspace-syncer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.objectAdmin
gcloud iam service-accounts keys create gitpod-workspace-syncer-key.json --iam-account=gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h3 id="${"gcp-registry"}">GCP Registry<a href="${"#gcp-registry"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Push and Pull access to the registry</p>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-registry-full
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h2 id="${"install"}">Install<a href="${"#install"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>cluster init:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl create -f tiller-sa.yaml
helm init --service-account tiller</code>`}</pre>
<p>install gitpod:</p>
<pre class="${"language-null"}">${`<code class="language-null">cd gitpod
helm dependencies update
helm install -f values.yaml [[-f &lt;optional-values.yaml&gt;]...] --name gitpod .</code>`}</pre>`
  })}`;
});
var installOnGcpManual$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_manual$2,
  metadata: metadata$1Q,
  prerender: prerender$1Q
});
const metadata$1P = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Install Gitpod on Google Cloud Platform"
};
const prerender$1P = true;
const Install_on_gcp_script$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1P), {}, {
    default: () => `<h1 id="${"install-gitpod-on-google-cloud-platform"}">Install Gitpod on Google Cloud Platform<a href="${"#install-gitpod-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>At its core setting up Gitpod on GCP does not differ much from installing it on any other Kubernetes platform.
However, Gitpod supports a range of integrations with the Google Cloud Platform that increase performance and reliability.
This section describes the neccesary steps to prepare a new GCP project for a Gitpod installation.</p>
<blockquote><p>We have automated this process. If you want to get up and running as quickly as possible, that\u2019s the way to go.</p></blockquote>
<p>You can perform the set up of the GCP resources yourself. See the <a href="${"./install-on-gcp-manual"}">manual GCP setup</a> section for more details.</p>
<p>This installation script configures your GCP project and produces the required Helm configuration for installing Gitpod in that project.
Once all GCP setup is complete, you will only have to manually set up <a href="${"./oauth"}">OAuth</a> and optionally <a href="${"./https-certs"}">HTTPS</a>.</p>
<p>You can install Gitpod self-hosted in your GCP project from within Gitpod. This way you don\u2019t have to install the Google Cloud SDK or other required tools.</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Ensure you have the <a href="${"./prepare-installation"}">general installation prerequisites</a> available.</li>
<li><a href="${"https://cloud.google.com/sdk/install"}" rel="${"nofollow"}">Google Cloud SDK</a></li>
<li><a href="${"https://golang.org/doc/install"}" rel="${"nofollow"}">Go (at least 1.12)</a></li>
<li>mysql client</li></ul>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The <a href="${"https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}">Gitpod self-hosted repository</a> contains the configuration files this guide is refering to.
The installation script will modify the configuration files found in that repository.
We recommend you to fork this repository so that you can easily rebase your changes on the latest version.</p>
<pre class="${"language-null"}">${`<code class="language-null">git clone https://github.com/gitpod-io/self-hosted
cd self-hosted
git remote rename origin upstream</code>`}</pre>
<p>Configure at least your <code>values.yaml</code>. Set your domain and the <a href="${"./oauth"}">OAuth</a> section.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To start the automated setup, run <a href="${"https://github.com/gitpod-io/self-hosted/blob/master/utils/create-gcp-resources.go"}" rel="${"nofollow"}"><code>./utils/create-gcp-resources.go</code></a> from the root of the self-hosted repo.
The script will guide you through the process. We will ask for confirmation before doing any modifications or enabling anything that costs money.</p>`
  })}`;
});
var installOnGcpScript$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_script$4,
  metadata: metadata$1P,
  prerender: prerender$1P
});
const metadata$1O = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Install Gitpod Self-Hosted on Kubernetes"
};
const prerender$1O = true;
const Install_on_kubernetes$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1O), {}, {
    default: () => `<h1 id="${"install-gitpod-self-hosted-on-kubernetes"}">Install Gitpod Self-Hosted on Kubernetes<a href="${"#install-gitpod-self-hosted-on-kubernetes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section describes how to install Gitpod on a vanilla Kubernetes cluster.
Gitpod also provides more optimized installations offering better performance for particular cloud providers:</p>
<ul><li><em>Google Cloud Platform</em>: Install Gitpod in a blank GCP project, either <a href="${"./install-on-gcp-script"}">using a script that automates the procedure</a> or <a href="${"./install-on-gcp-manual"}">manually step-by-step</a>.</li></ul>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Ensure you have the <a href="${"./prepare-installation"}">general installation prerequisites</a> available.</li>
<li><code>kubectl</code> with access to that cluster.</li>
<li><code>helm</code>. We recommend version 3.x. Any version &gt;= 2.11 will also work, but requires you to have <a href="${"./helm-2x"}">tiller configured</a>.</li></ul>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The <a href="${"https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}">Gitpod self-hosted repository</a> contains the configuration files this guide is refering to.
Throughout this guide you will be modifying the files found in this repo.
We recommend you fork this repository so that you can easily rebase your changes on the latest version.</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">git</span> clone https://github.com/gitpod-io/self-hosted
<span class="token builtin class-name">cd</span> self-hosted
<span class="token function">git</span> remote <span class="token function">rename</span> origin upstream</code>`}</pre>
<p>For the rest of this guide we will assume that you are located in the root of a working copy of this repository.</p>
<h3 id="${"domain-name-and-ip-address"}">Domain name and IP address<a href="${"#domain-name-and-ip-address"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod requires a domain name which resolves to the IP of your Kubernetes cluster. In this document we\u2019ll use <code>your-domain.com</code> as example. Set your real domain in the <code>values.yaml</code> under <code>gitpod.hostname</code>.
By default Gitpod deploys a <a href="${"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer"}" rel="${"nofollow"}"><code>LoadBalancer</code> service</a> as means of ingress.
If you have a fixed IP address that you want to use, set the <code>gitpod.components.proxy.loadBalancerIP</code> field to the external IP of your cluster/load balancer.
If this field is not set, Kubernetes will assign you a load balancer IP during deployment.
Once you know your IP address, configure your three domain names to resolve to that IP address:</p>
<ul><li><code>your-domain.com</code></li>
<li><code>*.your-domain.com</code></li>
<li><code>*.ws.your-domain.com</code></li></ul>
<h3 id="${"oauth-integration"}">OAuth integration<a href="${"#oauth-integration"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod delegates authentication to a configurable <a href="${"./prepare-installation#user-authorization-and-git-integration"}">OAuth provider</a>.</p>
<p>Follow <a href="${"./oauth"}">the steps</a> to set up GitHub or GitLab as OAuth provider.</p>
<h3 id="${"https-certificates-or-external-docker-registry"}">HTTPS certificates or external Docker registry<a href="${"#https-certificates-or-external-docker-registry"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod builds docker images on demand and runs them in Kubernetes pods as workspaces.
Since Kubernetes by default only pulls images from secure Docker registries,
you will either need to have <a href="${"./https-certs"}">HTTPS certificates</a> configured if you want to use the internal docker registry,
or use an <a href="${"./docker-registry"}">external docker registry</a>.</p>
<h2 id="${"recommended-configuration"}">Recommended Configuration<a href="${"#recommended-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To get Gitpod running quickly, you may skip this chapter.
For production scenarios, however, we highly recomend this configuration.</p>
<ul><li><a href="${"./docker-registry"}"><strong>Docker Registry</strong></a>: Use your own Docker registry instead of the built-in one.</li>
<li><a href="${"./https-certs"}"><strong>HTTPS certificates</strong></a>: Configure HTTPS certificates for secure access to Gitpod.</li>
<li><a href="${"./database"}"><strong>Database</strong></a>: Use your own MySQL database instead of the built-in one.</li></ul>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash">helm repo <span class="token function">add</span> charts.gitpod.io https://charts.gitpod.io
helm dep update
helm upgrade --install <span class="token variable"><span class="token variable">$(</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">$(</span>cat configuration.txt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"-f <span class="token variable">$i</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token variable">)</span></span> gitpod <span class="token builtin class-name">.</span></code>`}</pre>
<p>Visit <code>https://&lt;your-domain.com&gt;/</code> and check that you can login and start workspaces just like on gitpod.io.
Launch a workpace. Launching the first workspace can take significantly longer (up to 15min), this is because Docker images are being pulled.</p>
<h2 id="${"customization"}">Customization<a href="${"#customization"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"./storage"}"><strong>Storage</strong></a>: Configure where Gitpod stores stopped workspaces.</li>
<li><a href="${"./nodes"}"><strong>Kubernetes Nodes</strong></a>: Configure file system layout and the workspace\u2019s node associativity.</li>
<li><a href="${"./workspaces"}"><strong>Workspaces</strong></a>: Configure workspace sizing.</li></ul>`
  })}`;
});
var installOnKubernetes$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_kubernetes$4,
  metadata: metadata$1O,
  prerender: prerender$1O
});
const metadata$1N = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Prerequisites"
};
const prerender$1N = true;
const Prepare_installation = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1N), {}, {
    default: () => `<h1 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This document describes the prerequisites for a Gitpod installation. Upon completing the steps described herein,
you will have everything in place to successfully finish the installation.</p>
<h2 id="${"kubernetes"}">Kubernetes<a href="${"#kubernetes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod runs on Kubernetes where Gitpod workspaces are Kubernetes pods. Gitpod is installed on Kubernetes using Helm.
Gitpod requires <strong>Kubernetes 1.13</strong> or newer.</p>
<h2 id="${"domain"}">Domain<a href="${"#domain"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. <code>your-domain.com</code>).
As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.
For example:</p>
<p>your-domain.com
<em>.your-domain.com
</em>.ws.your-domain.com</p>
<p>Installing Gitpod on a subdomain works as well. For example:</p>
<p>gitpod.your-domain.com
<em>.gitpod.your-domain.com
</em>.gitpod.ws.your-domain.com\`</p>
<h2 id="${"user-authorization-and-git-integration"}">User Authorization and Git Integration<a href="${"#user-authorization-and-git-integration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod does not implement user authentication itself, but integrates with other auth provider using <a href="${"https://oauth.net/2/"}" rel="${"nofollow"}">OAuth2</a>.
Usually your Git hosting solution (e.g. GitHub or GitLab) acts as OAuth auth provider. This way we control access to Gitpod while at
the same time making sure every user has proper access to their Git repository.</p>
<p>Gitpod supports the following authentication providers:</p>
<ul><li>github.com</li>
<li>GitHub Enterprise in version 2.16.x and higher</li>
<li>gitlab.com</li>
<li>GitLab Community Edition in version 11.7.x and higher</li>
<li>GitLab Enterprise Edition in version 11.7.x and higher</li>
<li>Bitbucket \u2014 coming soon</li>
<li>Custom Auth Provider \u2013 Inquiry TypeFox for a quote</li></ul>
<h2 id="${"https-certificates-optional"}">HTTPS certificates (Optional)<a href="${"#https-certificates-optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While we highly recommend operating Gitpod using HTTPS, Gitpod is able to run on insecure HTTP.
The caveat of using HTTP is that the builtin Docker registry will not function as Docker/containerd do not pull from insecure registries by default.
You can either resort to using an <a href="${"#docker-registry-optional"}">external registry</a> or use HTTPS. For running Gitpod on insecure HTTP, no HTTPS certificates are needed and you can skip this section.</p>
<p>The most accessible means of obtaining HTTPS certificates is using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> which provides free certificats to anybody who can prove ownership of a domain.
Gitpod requires <a href="${"https://en.wikipedia.org/wiki/Wildcard_certificate"}" rel="${"nofollow"}">wildcard certificates</a> (e.g. <code>*.ws.your-domain.com</code>) which <a href="${"https://community.letsencrypt.org/t/acme-v2-production-environment-wildcards/55578"}" rel="${"nofollow"}">can be obtained via Let\u2019s Encrypt</a> but require <a href="${"https://letsencrypt.org/docs/challenge-types/#dns-01-challenge"}" rel="${"nofollow"}">proof of ownership via DNS</a>.
There is a <a href="${"https://www.google.com/search?q=letsencrypt+wildcard"}" rel="${"nofollow"}">plethora of tutorials</a> how to <a href="${"https://medium.com/@saurabh6790/generate-wildcard-ssl-certificate-using-lets-encrypt-certbot-273e432794d7"}" rel="${"nofollow"}">generate wildcard certificates</a> using Let\u2019s Encrypt.
Things get considerably easier when your domain is registered with a service for which a <a href="${"https://certbot.eff.org/docs/using.html#dns-plugins"}" rel="${"nofollow"}">Certbot DNS plugin exists</a>.</p>
<p>See <a href="${"./https-certs"}">here</a> for more details on how the certificates are used during installation.</p>
<h2 id="${"mysql-database-optional"}">MySQL Database (Optional)<a href="${"#mysql-database-optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li><p>Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.
The database uses a Kubernetes PersistentVolume. We do not recommend using this option fo a production setting.</p></li>
<li><p>Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.</p></li></ul>
<h2 id="${"docker-registry-optional"}">Docker Registry (Optional)<a href="${"#docker-registry-optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.
To this end, Gitpod requires a container registry where it can push the images it builds.</p>
<p>By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li>Integrated docker registry: If not disabled, this docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.
The docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.</li>
<li>Own docker registry: Gitpod can connect to your own docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.</li></ul>
<h2 id="${"bucket-storage-optional"}">Bucket Storage (Optional)<a href="${"#bucket-storage-optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod uses bucket storage to persist the contents of workspaces. Each workspace tarballed into a single archive file which is then uploaded to the bucket.</p>
<p>By default Gitpod ships with <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> as built-in bucket storage. If you operate your own MinIO instance, or have access to Google Cloud Bucket storage you can use that one. You have the following options:</p>
<ul><li>Integrated MinIO: If not disabled, Gitpod installs MinIO in Kubernetes as a dependency of Gitpod\u2019s helm charts.
MinIO itself can serve as <a href="${"https://github.com/minio/minio/tree/master/docs/gateway"}" rel="${"nofollow"}">gateway</a> to other storage providers.
When storing the data itself, MinIO relies on a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"}" rel="${"nofollow"}">persistent volume</a> which in turn supports a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes"}" rel="${"nofollow"}">wide range of storage backends</a>.</li>
<li>Own storage buckets: Gitpod can be configured to connect to your own installation of MinIO or Google Cloud Storage compatible storage solution.</li></ul>`
  })}`;
});
var prepareInstallation = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Prepare_installation,
  metadata: metadata$1N,
  prerender: prerender$1N
});
const metadata$1M = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Docker Registry"
};
const prerender$1M = true;
const Docker_registry$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1M), {}, {
    default: () => `<h1 id="${"docker-registry"}">Docker Registry<a href="${"#docker-registry"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses a Docker registry to push the workspace images it builds.
This helm chart can either deploy its own registry (default but requires <a href="${"./https-certs"}">HTTPS certs</a>) or use an existing one.
To connect to an existing Docker registry, do the following steps:</p>
<pre class="${"language-null"}">${`<code class="language-null">echo values/registry.yaml &gt;&gt; configuration.txt</code>`}</pre>
<p>In <code>values/registry.yaml</code> replace <code>your.registry.com</code> with the name of your registry.</p>
<p>Login to the registry and safe the authentication</p>
<pre class="${"language-null"}">${`<code class="language-null">docker --config secrets/ login your.registry.com &amp;&amp; mv secrets/config.json secrets/registry-auth.json</code>`}</pre>
<p>Make sure the resulting JSON file contains the credentials (there should be an <code>auth</code> section containing them as base64 encoded string).</p>
<p>If that\u2019s not the case you might have a credential store/helper set up (e.g. on macOS the <em>Securely store Docker logins in macOS keychain</em> setting).</p>`
  })}`;
});
var dockerRegistry$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_registry$4,
  metadata: metadata$1M,
  prerender: prerender$1M
});
const metadata$1L = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "HTTPS certificates"
};
const prerender$1L = true;
const Https_certs$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1L), {}, {
    default: () => `<h1 id="${"https-certificates"}">HTTPS certificates<a href="${"#https-certificates"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod needs HTTPS certificates, your own Docker registry, or both to function properly. If you don\u2019t have certificates, but a Docker registry available, jump to the <a href="${"./docker-registry"}">next step</a>.</p>
<blockquote><p>Important: The HTTPS certificates for your domain must include <code>your-domain.com</code>, <code>*.your-domain.com</code> and <code>*.ws.your-domain.com</code>. Beware that wildcard certificates are valid for one level only (i.e. <code>*.a.com</code> is not valid for <code>c.b.a.com</code>).</p></blockquote>
<p>To use the HTTPS certificates for your domain</p>
<ul><li><code>echo values/https.yaml &gt;&gt; configuration.txt</code></li>
<li>place your certificates in <code>secrets/https-certificates/</code> like so:</li></ul>
<pre class="${"language-null"}">${`<code class="language-null"> secrets/https-certificates:
  |- cert.pem
  |- chain.pem
  |- fullchain.pem
  |- privkey.pem</code>`}</pre>
<p>Generate the <a href="${"https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"}" rel="${"nofollow"}">dhparams.pem</a> file using</p>
<pre class="${"language-null"}">${`<code class="language-null">openssl dhparam -out secrets/https-certificates/dhparams.pem 2048</code>`}</pre>
<h2 id="${"using-lets-encrypt"}">Using Let\u2019s Encrypt<a href="${"#using-lets-encrypt"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you do not have HTTPS certificates for your domain already, you can generate some using <a href="${"https://medium.com/@saurabh6790/generate-wildcard-ssl-certificate-using-lets-encrypt-certbot-273e432794d7"}" rel="${"nofollow"}">Let\u2019s Encrypt</a>.
Asuming you have <code>certbot</code> installed, the following script will generate and configure the required certificates (notice the placeholders):</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOMAIN</span><span class="token operator">=</span>your-domain.cm
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EMAIL</span><span class="token operator">=</span>your@email.here
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKDIR</span><span class="token operator">=</span>/workspace/letsencrypt

certbot certonly <span class="token punctuation"></span>
    --config-dir <span class="token variable">$WORKDIR</span>/config <span class="token punctuation"></span>
    --work-dir <span class="token variable">$WORKDIR</span>/work <span class="token punctuation"></span>
    --logs-dir <span class="token variable">$WORKDIR</span>/logs <span class="token punctuation"></span>
    --manual <span class="token punctuation"></span>
    --preferred-challenges<span class="token operator">=</span>dns <span class="token punctuation"></span>
    --email <span class="token variable">$EMAIL</span> <span class="token punctuation"></span>
    --server https://acme-v02.api.letsencrypt.org/directory <span class="token punctuation"></span>
    --agree-tos <span class="token punctuation"></span>
    -d *.ws.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d *.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d <span class="token variable">$DOMAIN</span>

<span class="token comment"># move them into place</span>
<span class="token function">mkdir</span> secrets/https-certificates
<span class="token function">find</span> <span class="token variable">$WORKDIR</span>/config/live -name <span class="token string">"*.pem"</span> -exec <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> secrets/https-certificates <span class="token punctuation"></span><span class="token punctuation">;</span>

<span class="token comment"># Generate dhparams</span>
openssl dhparam -out secrets/https-certificates/dhparams.pem <span class="token number">2048</span>

<span class="token comment"># Enable HTTPS</span>
<span class="token builtin class-name">echo</span> values/https.yaml <span class="token operator">>></span> configuration.txt</code>`}</pre>`
  })}`;
});
var httpsCerts$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Https_certs$2,
  metadata: metadata$1L,
  prerender: prerender$1L
});
const metadata$1K = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Workspaces"
};
const prerender$1K = true;
const Workspaces$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1K), {}, {
    default: () => `<h1 id="${"workspaces"}">Workspaces<a href="${"#workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"sizing"}">Sizing<a href="${"#sizing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.
If you want to change the default sizing (~ 8GiB per workspace) you should</p>
<ul><li><code>echo values.workspace-sizing.yaml &gt;&gt; configuration.txt</code></li>
<li>adapt the values in <code>values.workspace-sizing.yaml</code> to match your installation.</li></ul>`
  })}`;
});
var workspaces$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces$5,
  metadata: metadata$1K,
  prerender: prerender$1K
});
const metadata$1J = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Database"
};
const prerender$1J = true;
const Database$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1J), {}, {
    default: () => `<h1 id="${"database"}">Database<a href="${"#database"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This chart installs a MySQL database which gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a porper MySQL installation:</p>
<ul><li>initialize your MySQL database using the SQL files in <code>database/</code>. E.g. in a mysql session connected to your database server run:<pre class="${"language-null"}">${`<code class="language-null">SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, &#39;your-password-goes-here&#39;);
source database/01-create-user.sql;
source database/02-create-and-init-sessions-db.sql;
source database/03-recreate-gitpod-db.sql;</code>`}</pre></li>
<li><code>echo values/database.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values/database.yaml</code> change the values in <code>gitpod.db</code> to match your installation</li></ul>`
  })}`;
});
var database$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Database$4,
  metadata: metadata$1J,
  prerender: prerender$1J
});
const metadata$1I = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Helm"
};
const prerender$1I = true;
const Helm_2x$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1I), {}, {
    default: () => `<h1 id="${"helm"}">Helm<a href="${"#helm"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>If you haven\u2019t done so before, install helm in the cluster:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl create -f utils/helm-2-tiller-sa-crb.yaml
helm init --service-account tiller</code>`}</pre>
<p>verify that helm was installed properly using <code>helm version</code>.</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl get nodes</code>`}</pre>
<pre class="${"language-null"}">${`<code class="language-null">helm version</code>`}</pre>`
  })}`;
});
var helm2x$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Helm_2x$2,
  metadata: metadata$1I,
  prerender: prerender$1I
});
const metadata$1H = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Workspace Storage"
};
const prerender$1H = true;
const Storage$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1H), {}, {
    default: () => `<h1 id="${"workspace-storage"}">Workspace Storage<a href="${"#workspace-storage"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod creates a backup of workspaces when they\u2019re shut down.
This helm chart ships with a <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> installation for this purpose.
Alternatively, you can connect to your own <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> installation using</p>
<ul><li><code>echo values/minio.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values.minio.yaml</code> change the values to match your installation</li></ul>`
  })}`;
});
var storage$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Storage$4,
  metadata: metadata$1H,
  prerender: prerender$1H
});
const metadata$1G = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Kubernetes Nodes"
};
const prerender$1G = true;
const Nodes$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1G), {}, {
    default: () => `<h1 id="${"kubernetes-nodes"}">Kubernetes Nodes<a href="${"#kubernetes-nodes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configure the nodes (computers or virtual machines) that Kuberntes runs Gitpod\u2019s workspace pods on.</p>
<h2 id="${"assign-workload-to-nodes"}">Assign workload to Nodes<a href="${"#assign-workload-to-nodes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as <em>meta</em>) and the workspaces. Ideally both types of workloads run on seperate nodes to make makes scaling easier.
Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:</p>
<ul><li><code>gitpod.io/workload_meta=true</code> which marks the \u201Cmeta\u201D nodes and</li>
<li><code>gitpod.io/workload_workspace=true </code> which marks the workspace nodes.</li></ul>
<p>If you want to \u201Cmix \u2018n match\u201D, i.e. don\u2019t seperate the nodes you can simply run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true</code>`}</pre>
<h2 id="${"node-filesystem-layout"}">Node Filesystem Layout<a href="${"#node-filesystem-layout"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod relies on the node\u2019s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in <code>/data</code> and Theia is copied to <code>/theia</code>. Depending on your node setup the root filesystem maybe <strong>read-only</strong> or <strong>slow</strong>.
We recommend you change those two paths so that they\u2019re located on an SSD or some other form of fast local storage.</p>
<p>To do this:</p>
<ul><li><code>echo values/node-layout.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values/node-layout.yaml</code> change the values to match your installation</li></ul>`
  })}`;
});
var nodes$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Nodes$4,
  metadata: metadata$1G,
  prerender: prerender$1G
});
const metadata$1F = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "How To integrate Gitpod with OAuth providers"
};
const prerender$1F = true;
const Oauth$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1F), {}, {
    default: () => `<h1 id="${"how-to-integrate-gitpod-with-oauth-providers"}">How To integrate Gitpod with OAuth providers<a href="${"#how-to-integrate-gitpod-with-oauth-providers"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Currently Gitpod supports GitHub, GitHub Enterprise and GitLab.</p>
<h2 id="${"github"}">GitHub<a href="${"#github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitHub you need to create a <a href="${"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"}" rel="${"nofollow"}">GitHub OAuth App</a>.
Follow the guide linked above and:</p>
<ul><li><p>set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/github/callback</your-domain.com></p></li>
<li><p>copy the following values and configure them in <code>values.yaml</code>:</p>
<ul><li><code>clientId</code></li>
<li><code>clientSecret</code></li></ul></li></ul>
<h2 id="${"gitlab"}">GitLab<a href="${"#gitlab"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitLab you need to create an <a href="${"https://docs.gitlab.com/ee/integration/oauth_provider.html"}" rel="${"nofollow"}">GitLab OAuth application</a>.
Follow the guide linked above and:</p>
<ul><li><p>set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback</gitlab.com-OR-your-gitlab.com></your-domain.com></p></li>
<li><p>set \u201CScopes\u201D to <code>api</code>, <code>read_user</code> and <code>read_repository</code>.</p></li>
<li><p>copy the following values and configure them in <code>values.yaml</code>:</p>
<ul><li><code>clientId</code> is the \u201CApplication ID\u201D from the GitLab OAuth application</li>
<li><code>clientSecret</code> is the \u201CSecret\u201D from the GitLab OAuth application</li></ul></li></ul>`
  })}`;
});
var oauth$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Oauth$4,
  metadata: metadata$1F,
  prerender: prerender$1F
});
const metadata$1E = {
  section: "self-hosted/0.3.0/self-hosted",
  title: "Administrate Gitpod Self-Hosted"
};
const prerender$1E = true;
const Admin$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1E), {}, {
    default: () => `<h1 id="${"administrate-gitpod-self-hosted"}">Administrate Gitpod Self-Hosted<a href="${"#administrate-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we are working on the administration experience, there is already a lot you can do if you know where to look.</p>
<h2 id="${"download-a-backup-of-a-workspace"}">Download a backup of a workspace<a href="${"#download-a-backup-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Workpaces are stored as tar files in Minio or Google Storage buckets (depending on your configuration).
The tar files can be downloaded from there and unpacked locally.</p>
<h2 id="${"list-all-running-workspaces"}">List all running workspaces<a href="${"#list-all-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>SELECT</code>\u2026</p>
<p><code>kubectl get pods</code></p>
<h2 id="${"stop-a-running-workspace"}">Stop a running workspace<a href="${"#stop-a-running-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl delete pod</code></p>
<h2 id="${"connect-to-built-in-registry"}">Connect to built-in Registry<a href="${"#connect-to-built-in-registry"}"><span class="${"icon icon-link"}"></span></a></h2>`
  })}`;
});
var admin$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Admin$4,
  metadata: metadata$1E,
  prerender: prerender$1E
});
const metadata$1D = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Gitpod Self-Hosted"
};
const prerender$1D = true;
const Self_hosted$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1D), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted"}">Gitpod Self-Hosted<a href="${"#gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod, just as you know it from <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can find all configuration templates and installation scripts in this repository:</p>
<blockquote><p><a href="${"https://github.com/gitpod-io/self-hosted/"}" rel="${"nofollow"}">https://github.com/gitpod-io/self-hosted/</a></p></blockquote>
<h3 id="${"install-on-google-cloud-platform"}">Install on Google Cloud Platform<a href="${"#install-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The easiest way to install Gitpod Self-Hosted is currently on Google Cloud Platform (that\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed). GCP is the recommended platform for most users:</p>
<ul><li><a href="${"/docs/self-hosted/0.4.0/install/install-on-gcp-script"}">Install Gitpod on Google Cloud Platform</a></li></ul>
<h3 id="${"install-on-any-kubernetes-cluster"}">Install on any Kubernetes cluster<a href="${"#install-on-any-kubernetes-cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you manage your own Kubernetes cluster, please follow this guide:</p>
<ul><li><a href="${"/docs/self-hosted/0.4.0/install/install-on-kubernetes"}">Install Gitpod on self-managed Kubernetes</a></li></ul>
<p>Note: Dedicated installation steps for AWS, Azure, and OpenShift are coming soon.</p>`
  })}`;
});
var selfHosted$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted$3,
  metadata: metadata$1D,
  prerender: prerender$1D
});
const metadata$1C = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Manually Install Gitpod on Google Cloud Platform"
};
const prerender$1C = true;
const Install_on_gcp_manual$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1C), {}, {
    default: () => `<h1 id="${"manually-install-gitpod-on-google-cloud-platform"}">Manually Install Gitpod on Google Cloud Platform<a href="${"#manually-install-gitpod-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h1>
<blockquote><p><strong>TODO</strong> This document is a stub only.</p></blockquote>
<h2 id="${"before-you-begin"}">Before you begin<a href="${"#before-you-begin"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>install <a href="${"https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version"}" rel="${"nofollow"}">gcloud cli</a><ul><li><code>gcloud components install beta</code></li></ul></li>
<li>setup Google cloud project</li>
<li>choose a <a href="${"https://cloud.google.com/compute/docs/regions-zones/#available"}" rel="${"nofollow"}">zone and region</a> to install your Gitpod cluster</li>
<li><a href="${"https://cloud.google.com/endpoints/docs/openapi/enable-api#enabling_an_api"}" rel="${"nofollow"}">Enable APIs</a>:<ul><li>Identity and Access Management (IAM)</li>
<li>Cloud SQL Admin API</li></ul></li></ul>
<pre class="${"language-null"}">${`<code class="language-null">gcloud auth login
gcloud config set core/project &lt;gcloud-project&gt;
gcloud config set compute/region &lt;gcloud-region&gt;
gcloud config set compute/zone &lt;gcloud-zone&gt;

PROJECT_ID=&lt;gcloud-project-id&gt;
REGION=&lt;gcloud-region&gt;</code>`}</pre>
<h3 id="${"ip"}">IP<a href="${"#ip"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud compute addresses create gitpod-inbound-ip --region=$REGION
IP_ADDRESS=$(gcloud compute addresses describe gitpod-inbound-ip --region $REGION | grep &quot;address:&quot; | cut -d&#39; &#39; -f2)</code>`}</pre>
<p>Now that you have a reserved IP address, you will have to set up the following DNS A records resolving to that IP address:</p>
<ul><li><code>your-base-domain</code></li>
<li><code>*.your-base-domain</code></li>
<li><code>*.ws.your-base-domain</code></li></ul>
<h3 id="${"vpc-network"}">VPC Network<a href="${"#vpc-network"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud compute networks create gitpod-vpc --bgp-routing-mode=regional --subnet-mode=auto</code>`}</pre>
<h3 id="${"cluster"}">Cluster<a href="${"#cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-nodes-meta
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/clouddebugger.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudtrace.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/errorreporting.writer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.viewer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.logWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.metricWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.viewer

gcloud iam service-accounts create gitpod-nodes-workspace
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/clouddebugger.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudtrace.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/errorreporting.writer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.viewer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.logWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.metricWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.viewer</code>`}</pre>
<p>Choose one (or more) zones to install your cluster to</p>
<pre class="${"language-null"}">${`<code class="language-null">ZONES=us-west1-a,us-west1-b
gcloud beta container clusters create gitpod-cluster         --region=$REGION            --node-locations=$ZONES         --cluster-version=&quot;1.13.7-gke.24&quot;         --addons=NetworkPolicy                  --no-enable-basic-auth         --no-issue-client-certificate                 --enable-ip-alias         --cluster-ipv4-cidr=&quot;10.8.0.0/14&quot;         --services-ipv4-cidr=&quot;10.0.0.0/20&quot;         --network=gitpod-vpc                 --enable-network-policy         --enable-pod-security-policy                 --metadata disable-legacy-endpoints=true         --num-nodes=1         --enable-autoscaling --min-nodes=1 --max-nodes=3         --service-account=gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com         --node-labels=&quot;gitpod.io/workload_meta=true&quot;         --machine-type=n1-standard-4         --image-type=cos         --disk-size=100         --disk-type=pd-ssd         --enable-autorepair         --local-ssd-count=0         --workload-metadata-from-node=SECURE

gcloud beta container node-pools create workspace-pool-1         --region=$REGION            --cluster=gitpod-cluster                 --metadata disable-legacy-endpoints=true         --num-nodes=0         --enable-autoscaling --min-nodes=0 --max-nodes=10         --service-account=gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com         --node-labels=&quot;gitpod.io/workload_workspace=true&quot;         --machine-type=n1-standard-16         --image-type=ubuntu         --disk-size=200         --disk-type=pd-ssd         --enable-autorepair         --local-ssd-count=1</code>`}</pre>
<h2 id="${"optional"}">Optional<a href="${"#optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"gcp-managed-db"}">GCP Managed DB<a href="${"#gcp-managed-db"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">DB_PW=$(openssl rand -base64 20)
DB_NAME=gitpod-db
BACKUP_TIME=&quot;04:00&quot;
gcloud sql instances create $DB_NAME     --database-version MYSQL_5_7     --storage-size=100     --storage-auto-increase     --tier=db-n1-standard-4     --region=$REGION     --backup-start-time=$BACKUP_TIME     --failover-replica-name=$DB_NAME-failover     --replica-type=FAILOVER     --enable-bin-log

gcloud sql users set-password root --host % --instance $DB_NAME --password $DB_PW
echo &quot;Database root password: $DB_PW&quot;</code>`}</pre>
<p>Note: Store password securely for later use!</p>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-cloudsql-client
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-cloudsql-client@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudsql.client
gcloud iam service-accounts keys create gitpod-cloudsql-client-key.json --iam-account=gitpod-cloudsql-client@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h4 id="${"initialize-db"}">Initialize DB<a href="${"#initialize-db"}"><span class="${"icon icon-link"}"></span></a></h4>
<ol><li><p><a href="${"https://cloud.google.com/sql/docs/mysql/sql-proxy#install"}" rel="${"nofollow"}">Get <code>cloud_sql_proxy</code> binary</a></p>
<pre class="${"language-null"}">${`<code class="language-null">wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
chmod +x cloud_sql_proxy</code>`}</pre></li>
<li><p>Connect to DB</p>
<pre class="${"language-null"}">${`<code class="language-null">./cloud_sql_proxy -instances=$PROJECT_ID:$REGION:$DB_NAME=tcp:0.0.0.0:3306 -credential_file=./gitpod-cloudsql-client-key.json</code>`}</pre>
<p>2nd terminal: login with root password</p>
<pre class="${"language-null"}">${`<code class="language-null">mysql -u root -P 3306 -h 127.0.0.1 -p</code>`}</pre></li>
<li><p>Execute init scripts
Generate password for gitpod user:</p>
<pre class="${"language-null"}">${`<code class="language-null">GITPOD_DB_PW=$(openssl rand -base64 20)</code>`}</pre>
<pre class="${"language-null"}">${`<code class="language-null">set @gitpodDbPassword = &lt;GITPOD_DB_PW&gt;;

source config/db/init/00-create-user.sql
source config/db/init/01-recreate-gitpod-db.sql
source config/db/init/02-create-and-init-sessions-db.sql</code>`}</pre></li></ol>
<h3 id="${"gcp-buckets-for-workspace-backups"}">GCP Buckets for workspace backups<a href="${"#gcp-buckets-for-workspace-backups"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-workspace-syncer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.objectAdmin
gcloud iam service-accounts keys create gitpod-workspace-syncer-key.json --iam-account=gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h3 id="${"gcp-registry"}">GCP Registry<a href="${"#gcp-registry"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Push and Pull access to the registry</p>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-registry-full
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h2 id="${"install"}">Install<a href="${"#install"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>cluster init:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl create -f tiller-sa.yaml
helm init --service-account tiller</code>`}</pre>
<p>install gitpod:</p>
<pre class="${"language-null"}">${`<code class="language-null">cd gitpod
helm dependencies update
helm install -f values.yaml [[-f &lt;optional-values.yaml&gt;]...] --name gitpod .</code>`}</pre>`
  })}`;
});
var installOnGcpManual$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_manual$1,
  metadata: metadata$1C,
  prerender: prerender$1C
});
const metadata$1B = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Install Gitpod on Google Cloud Platform"
};
const prerender$1B = true;
const Install_on_gcp_script$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1B), {}, {
    default: () => `<h1 id="${"install-gitpod-on-google-cloud-platform"}">Install Gitpod on Google Cloud Platform<a href="${"#install-gitpod-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod runs best on GCP. That\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed and operated at scale.</p>
<p>The easiest way to install Gitpod on GCP is by using our automated installation script. You can find it in this repository:</p>
<blockquote><p><a href="${"https://github.com/gitpod-io/self-hosted/"}" rel="${"nofollow"}">https://github.com/gitpod-io/self-hosted/</a></p></blockquote>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<p>This script will configure your GCP project, and produce the required Helm configuration to install Gitpod in that project.
Once the setup is complete, you will simply need to set up <a href="${"./oauth"}">OAuth</a> and <a href="${"./https-certs"}">HTTPS</a>.</p>
<p>Alternatively, you can set up the GCP resources manually yourself. See the <a href="${"./install-on-gcp-manual"}">manual GCP setup</a> section for more details.</p>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>A <a href="${"https://cloud.google.com"}" rel="${"nofollow"}">Google Cloud</a> project</li>
<li>A <a href="${"./domain"}">Domain</a></li>
<li>Optional: <a href="${"./https-certs"}">HTTPS Certificates</a></li></ul>
<p>Note that Google Cloud offers a <a href="${"https://console.cloud.google.com/freetrial"}" rel="${"nofollow"}">free trial</a> with $300 worth of resources, which allows deploying and evaluating Gitpod Self-Hosted for free.</p>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The <a href="${"https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}">Gitpod Self-Hosted repository</a> contains all the configuration files.</p>
<p>In particular, you will want to configure your <code>values.yaml</code>, by setting up your domain and the <a href="${"./oauth"}">OAuth</a> section.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To start the automated setup, simply run <a href="${"https://github.com/gitpod-io/self-hosted/blob/master/utils/create-gcp-resources.go"}" rel="${"nofollow"}"><code>./utils/create-gcp-resources.go</code></a> from the root of the <code>self-hosted</code> repository.</p>
<p>The script will guide you through the process, and modify the relevant configuration files when needed. It will also ask for your confirmation before performing any changes or starting any service in GCP.</p>`
  })}`;
});
var installOnGcpScript$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_script$3,
  metadata: metadata$1B,
  prerender: prerender$1B
});
const metadata$1A = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Install Gitpod Self-Hosted on Kubernetes"
};
const prerender$1A = true;
const Install_on_kubernetes$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1A), {}, {
    default: () => `<h1 id="${"install-gitpod-self-hosted-on-kubernetes"}">Install Gitpod Self-Hosted on Kubernetes<a href="${"#install-gitpod-self-hosted-on-kubernetes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section describes how to install Gitpod on a vanilla Kubernetes cluster.
Gitpod also provides more optimized installations offering better performance for particular cloud providers:</p>
<ul><li><em>Google Cloud Platform</em>: Install Gitpod in a blank GCP project, either <a href="${"./install-on-gcp-script"}">using a script that automates the procedure</a> or <a href="${"./install-on-gcp-manual"}">manually step-by-step</a>.</li></ul>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>A Kubernetes Cluster in Version 1.13 or newer.</li>
<li><a href="${"./domain"}">Domain</a></li>
<li><a href="${"./https-certs"}">HTTPS Certificates</a>: Optional, if you use an external docker registry.</li>
<li><code>kubectl</code> with access to that cluster.</li>
<li><code>helm</code>. We recommend version 3.x. Any version &gt;= 2.11 will also work, but requires you to have <a href="${"./helm-2x"}">tiller configured</a>.</li>
<li>Optional: A MySQL Database</li>
<li>Optional: A Docker Registry</li>
<li>Optional: Buckets Storage, e.g. Minio</li></ul>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The <a href="${"https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}">Gitpod self-hosted repository</a> contains the configuration files this guide is refering to.
Throughout this guide you will be modifying the files found in this repo.
We recommend you fork this repository so that you can easily rebase your changes on the latest version.</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">git</span> clone https://github.com/gitpod-io/self-hosted
<span class="token builtin class-name">cd</span> self-hosted
<span class="token function">git</span> remote <span class="token function">rename</span> origin upstream</code>`}</pre>
<p>For the rest of this guide we will assume that you are located in the root of a working copy of this repository.</p>
<h3 id="${"domain-name-and-ip-address"}">Domain name and IP address<a href="${"#domain-name-and-ip-address"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod requires <a href="${"./domain"}">domain names</a> which resolve to the IP of your Kubernetes cluster.
Set your domain in the <code>values.yaml</code> under <code>gitpod.hostname</code>.</p>
<p>By default Gitpod deploys a <a href="${"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer"}" rel="${"nofollow"}"><code>LoadBalancer</code> service</a> as means of ingress.
If you have a fixed IP address that you want to use, set the <code>gitpod.components.proxy.loadBalancerIP</code> field to the external IP of your cluster/load balancer.
If this field is not set, Kubernetes will assign you a load balancer IP during deployment.
Once you know your IP address, configure your three domain names to resolve to that IP address.</p>
<h3 id="${"oauth-integration"}">OAuth integration<a href="${"#oauth-integration"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod delegates authentication to a configurable OAuth provider.</p>
<p>Follow <a href="${"./oauth"}">the steps</a> to set up GitHub or GitLab as OAuth provider.</p>
<h3 id="${"https-certificates-or-external-docker-registry"}">HTTPS certificates or external Docker registry<a href="${"#https-certificates-or-external-docker-registry"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod builds docker images on demand and runs them in Kubernetes pods as workspaces.
Since Kubernetes by default only pulls images from secure Docker registries,
you will either need to have <a href="${"./https-certs"}">HTTPS certificates</a> configured if you want to use the internal docker registry,
or use an <a href="${"./docker-registry"}">external docker registry</a>.</p>
<h2 id="${"recommended-configuration"}">Recommended Configuration<a href="${"#recommended-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To get Gitpod running quickly, you may skip this chapter.
For production scenarios, however, we highly recomend this configuration.</p>
<ul><li><a href="${"./docker-registry"}"><strong>Docker Registry</strong></a>: Use your own Docker registry instead of the built-in one.</li>
<li><a href="${"./https-certs"}"><strong>HTTPS certificates</strong></a>: Configure HTTPS certificates for secure access to Gitpod.</li>
<li><a href="${"./database"}"><strong>Database</strong></a>: Use your own MySQL database instead of the built-in one.</li></ul>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash">helm repo <span class="token function">add</span> charts.gitpod.io https://charts.gitpod.io
helm dep update
helm upgrade --install <span class="token variable"><span class="token variable">$(</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">$(</span>cat configuration.txt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"-f <span class="token variable">$i</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token variable">)</span></span> gitpod <span class="token builtin class-name">.</span></code>`}</pre>
<p>Visit <code>https://&lt;your-domain.com&gt;/</code> and check that you can login and start workspaces just like on gitpod.io.
Launch a workpace. Launching the first workspace can take significantly longer (up to 15min), this is because Docker images are being pulled.</p>
<h2 id="${"customization"}">Customization<a href="${"#customization"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"./storage"}"><strong>Storage</strong></a>: Configure where Gitpod stores stopped workspaces.</li>
<li><a href="${"./nodes"}"><strong>Kubernetes Nodes</strong></a>: Configure file system layout and the workspace\u2019s node associativity.</li>
<li><a href="${"./workspaces"}"><strong>Workspaces</strong></a>: Configure workspace sizing.</li></ul>`
  })}`;
});
var installOnKubernetes$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_kubernetes$3,
  metadata: metadata$1A,
  prerender: prerender$1A
});
const metadata$1z = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Docker Registry"
};
const prerender$1z = true;
const Docker_registry$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1z), {}, {
    default: () => `<h1 id="${"docker-registry"}">Docker Registry<a href="${"#docker-registry"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.
To this end, Gitpod requires a container registry where it can push the images it builds.</p>
<p>By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li>Integrated docker registry: If not disabled, this docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.
The docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.</li>
<li>Own docker registry: Gitpod can connect to your own docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.</li></ul>
<p>This helm chart can either deploy its own registry (default but requires <a href="${"./https-certs"}">HTTPS certs</a>) or use an existing one.
To connect to an existing Docker registry, do the following steps:</p>
<pre class="${"language-null"}">${`<code class="language-null">echo values/registry.yaml &gt;&gt; configuration.txt</code>`}</pre>
<p>In <code>values/registry.yaml</code> replace <code>your.registry.com</code> with the name of your registry.</p>
<p>Login to the registry and safe the authentication</p>
<pre class="${"language-null"}">${`<code class="language-null">docker --config secrets/ login your.registry.com &amp;&amp; mv secrets/config.json secrets/registry-auth.json</code>`}</pre>
<p>Make sure the resulting JSON file contains the credentials (there should be an <code>auth</code> section containing them as base64 encoded string).</p>
<p>If that\u2019s not the case you might have a credential store/helper set up (e.g. on macOS the <em>Securely store Docker logins in macOS keychain</em> setting).</p>`
  })}`;
});
var dockerRegistry$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_registry$3,
  metadata: metadata$1z,
  prerender: prerender$1z
});
const metadata$1y = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "HTTPS certificates"
};
const prerender$1y = true;
const Https_certs$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1y), {}, {
    default: () => `<h1 id="${"https-certificates"}">HTTPS certificates<a href="${"#https-certificates"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we highly recommend operating Gitpod using HTTPS, Gitpod is able to run on insecure HTTP.
If you use Gitpod\u2019s inernal docker registry, the downside of not using HTTPS is that Kubernetes won\u2019t be able to pull images from the registry because it considers the registry insecure.
You can either resort to using an <a href="${"#docker-registry-optional"}">external registry</a> or use HTTPS. For running Gitpod on insecure HTTP, no HTTPS certificates are needed and you can skip this section.</p>
<blockquote><p>Important: The HTTPS certificates for your domain must include <code>your-domain.com</code>, <code>*.your-domain.com</code> and <code>*.ws.your-domain.com</code>. Beware that wildcard certificates are valid for one level only (i.e. <code>*.a.com</code> is not valid for <code>c.b.a.com</code>).</p></blockquote>
<p>To use the HTTPS certificates for your domain</p>
<ul><li><code>echo values/https.yaml &gt;&gt; configuration.txt</code></li>
<li>place your certificates in <code>secrets/https-certificates/</code> like so:</li></ul>
<pre class="${"language-null"}">${`<code class="language-null"> secrets/https-certificates:
  |- cert.pem
  |- chain.pem
  |- fullchain.pem
  |- privkey.pem</code>`}</pre>
<p>Generate the <a href="${"https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"}" rel="${"nofollow"}">dhparams.pem</a> file using</p>
<pre class="${"language-null"}">${`<code class="language-null">openssl dhparam -out secrets/https-certificates/dhparams.pem 2048</code>`}</pre>
<h2 id="${"using-lets-encrypt"}">Using Let\u2019s Encrypt<a href="${"#using-lets-encrypt"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The most accessible means of obtaining HTTPS certificates is using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> which provides free certificats to anybody who can prove ownership of a domain.
Gitpod requires <a href="${"https://en.wikipedia.org/wiki/Wildcard_certificate"}" rel="${"nofollow"}">wildcard certificates</a> (e.g. <code>*.ws.your-domain.com</code>) which <a href="${"https://community.letsencrypt.org/t/acme-v2-production-environment-wildcards/55578"}" rel="${"nofollow"}">can be obtained via Let\u2019s Encrypt</a> but require <a href="${"https://letsencrypt.org/docs/challenge-types/#dns-01-challenge"}" rel="${"nofollow"}">proof of ownership via DNS</a>.
There is a <a href="${"https://www.google.com/search?q=letsencrypt+wildcard"}" rel="${"nofollow"}">plethora of tutorials</a> how to <a href="${"https://medium.com/@saurabh6790/generate-wildcard-ssl-certificate-using-lets-encrypt-certbot-273e432794d7"}" rel="${"nofollow"}">generate wildcard certificates</a> using Let\u2019s Encrypt.
Things get considerably easier when your domain is registered with a service for which a <a href="${"https://certbot.eff.org/docs/using.html#dns-plugins"}" rel="${"nofollow"}">Certbot DNS plugin exists</a>.</p>
<p>Asuming you have <code>certbot</code> installed, the following script will generate and configure the required certificates (notice the placeholders):</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOMAIN</span><span class="token operator">=</span>your-domain.cm
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EMAIL</span><span class="token operator">=</span>your@email.here
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKDIR</span><span class="token operator">=</span>/workspace/letsencrypt

certbot certonly <span class="token punctuation"></span>
    --config-dir <span class="token variable">$WORKDIR</span>/config <span class="token punctuation"></span>
    --work-dir <span class="token variable">$WORKDIR</span>/work <span class="token punctuation"></span>
    --logs-dir <span class="token variable">$WORKDIR</span>/logs <span class="token punctuation"></span>
    --manual <span class="token punctuation"></span>
    --preferred-challenges<span class="token operator">=</span>dns <span class="token punctuation"></span>
    --email <span class="token variable">$EMAIL</span> <span class="token punctuation"></span>
    --server https://acme-v02.api.letsencrypt.org/directory <span class="token punctuation"></span>
    --agree-tos <span class="token punctuation"></span>
    -d *.ws.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d *.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d <span class="token variable">$DOMAIN</span>

<span class="token comment"># move them into place</span>
<span class="token function">mkdir</span> secrets/https-certificates
<span class="token function">find</span> <span class="token variable">$WORKDIR</span>/config/live -name <span class="token string">"*.pem"</span> -exec <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> secrets/https-certificates <span class="token punctuation"></span><span class="token punctuation">;</span>

<span class="token comment"># Generate dhparams</span>
openssl dhparam -out secrets/https-certificates/dhparams.pem <span class="token number">2048</span>

<span class="token comment"># Enable HTTPS</span>
<span class="token builtin class-name">echo</span> values/https.yaml <span class="token operator">>></span> configuration.txt</code>`}</pre>`
  })}`;
});
var httpsCerts$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Https_certs$1,
  metadata: metadata$1y,
  prerender: prerender$1y
});
const metadata$1x = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Workspaces"
};
const prerender$1x = true;
const Workspaces$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1x), {}, {
    default: () => `<h1 id="${"workspaces"}">Workspaces<a href="${"#workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"sizing"}">Sizing<a href="${"#sizing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.
If you want to change the default sizing (~ 8GiB per workspace) you should</p>
<ul><li><code>echo values.workspace-sizing.yaml &gt;&gt; configuration.txt</code></li>
<li>adapt the values in <code>values.workspace-sizing.yaml</code> to match your installation.</li></ul>`
  })}`;
});
var workspaces$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces$4,
  metadata: metadata$1x,
  prerender: prerender$1x
});
const metadata$1w = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Database"
};
const prerender$1w = true;
const Database$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1w), {}, {
    default: () => `<h1 id="${"database"}">Database<a href="${"#database"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li><p>Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.
The database uses a Kubernetes PersistentVolume. We do not recommend using this option fo a production setting.</p></li>
<li><p>Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.</p></li></ul>
<p>This chart installs a MySQL database which gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a porper MySQL installation:</p>
<ul><li>initialize your MySQL database using the SQL files in <code>database/</code>. E.g. in a mysql session connected to your database server run:<pre class="${"language-null"}">${`<code class="language-null">SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, &#39;your-password-goes-here&#39;);
source database/01-create-user.sql;
source database/02-create-and-init-sessions-db.sql;
source database/03-recreate-gitpod-db.sql;</code>`}</pre></li>
<li><code>echo values/database.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values/database.yaml</code> change the values in <code>gitpod.db</code> to match your installation</li></ul>`
  })}`;
});
var database$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Database$3,
  metadata: metadata$1w,
  prerender: prerender$1w
});
const metadata$1v = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Helm"
};
const prerender$1v = true;
const Helm_2x$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1v), {}, {
    default: () => `<h1 id="${"helm"}">Helm<a href="${"#helm"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>If you haven\u2019t done so before, install helm in the cluster:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl create -f utils/helm-2-tiller-sa-crb.yaml
helm init --service-account tiller</code>`}</pre>
<p>verify that helm was installed properly using <code>helm version</code>.</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl get nodes</code>`}</pre>
<pre class="${"language-null"}">${`<code class="language-null">helm version</code>`}</pre>`
  })}`;
});
var helm2x$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Helm_2x$1,
  metadata: metadata$1v,
  prerender: prerender$1v
});
const metadata$1u = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Workspace Storage"
};
const prerender$1u = true;
const Storage$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1u), {}, {
    default: () => `<h1 id="${"workspace-storage"}">Workspace Storage<a href="${"#workspace-storage"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to the bucket.</p>
<p>By default Gitpod ships with <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> as built-in bucket storage. If you operate your own MinIO instance, or have access to Google Cloud Bucket storage you can use that one. You have the following options:</p>
<ul><li>Integrated MinIO: If not disabled, Gitpod installs MinIO in Kubernetes as a dependency of Gitpod\u2019s helm charts.
MinIO itself can serve as a <a href="${"https://github.com/minio/minio/tree/master/docs/gateway"}" rel="${"nofollow"}">gateway</a> to other storage providers.
When storing the data itself, MinIO relies on a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"}" rel="${"nofollow"}">persistent volume</a> which in turn supports a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes"}" rel="${"nofollow"}">wide range of storage backends</a>.</li>
<li>Bring your own storage bucket: Gitpod can be configured to connect to your own installation of MinIO or Google Cloud Storage compatible storage solution.</li></ul>
<p>This helm chart ships with a <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> installation for this purpose.
Alternatively, you can connect to your own <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> installation using</p>
<ul><li><code>echo values/minio.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values.minio.yaml</code> change the values to match your installation</li></ul>`
  })}`;
});
var storage$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Storage$3,
  metadata: metadata$1u,
  prerender: prerender$1u
});
const metadata$1t = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Domain"
};
const prerender$1t = true;
const Domain$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1t), {}, {
    default: () => `<h1 id="${"domain"}">Domain<a href="${"#domain"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. <code>your-domain.com</code>).
As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.
For example:</p>
<p>your-domain.com
<em>.your-domain.com
</em>.ws.your-domain.com</p>
<p>Installing Gitpod on a subdomain works as well. For example:</p>
<p>gitpod.your-domain.com
<em>.gitpod.your-domain.com
</em>.ws.gitpod.your-domain.com</p>`
  })}`;
});
var domain$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Domain$1,
  metadata: metadata$1t,
  prerender: prerender$1t
});
const metadata$1s = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Kubernetes Nodes"
};
const prerender$1s = true;
const Nodes$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1s), {}, {
    default: () => `<h1 id="${"kubernetes-nodes"}">Kubernetes Nodes<a href="${"#kubernetes-nodes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configure the nodes (computers or virtual machines) that Kuberntes runs Gitpod\u2019s workspace pods on.</p>
<h2 id="${"assign-workload-to-nodes"}">Assign workload to Nodes<a href="${"#assign-workload-to-nodes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as <em>meta</em>) and the workspaces. Ideally both types of workloads run on seperate nodes to make makes scaling easier.
Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:</p>
<ul><li><code>gitpod.io/workload_meta=true</code> which marks the \u201Cmeta\u201D nodes and</li>
<li><code>gitpod.io/workload_workspace=true </code> which marks the workspace nodes.</li></ul>
<p>If you want to \u201Cmix \u2018n match\u201D, i.e. don\u2019t seperate the nodes you can simply run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true</code>`}</pre>
<h2 id="${"node-filesystem-layout"}">Node Filesystem Layout<a href="${"#node-filesystem-layout"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod relies on the node\u2019s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in <code>/data</code> and Theia is copied to <code>/theia</code>. Depending on your node setup the root filesystem maybe <strong>read-only</strong> or <strong>slow</strong>.
We recommend you change those two paths so that they\u2019re located on an SSD or some other form of fast local storage.</p>
<p>To do this:</p>
<ul><li><code>echo values/node-layout.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values/node-layout.yaml</code> change the values to match your installation</li></ul>`
  })}`;
});
var nodes$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Nodes$3,
  metadata: metadata$1s,
  prerender: prerender$1s
});
const metadata$1r = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "How To integrate Gitpod with OAuth providers"
};
const prerender$1r = true;
const Oauth$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1r), {}, {
    default: () => `<h1 id="${"how-to-integrate-gitpod-with-oauth-providers"}">How To integrate Gitpod with OAuth providers<a href="${"#how-to-integrate-gitpod-with-oauth-providers"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod does not implement user authentication itself, but integrates with other auth provider using <a href="${"https://oauth.net/2/"}" rel="${"nofollow"}">OAuth2</a>.
Usually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at
the same time making sure every user has proper access to their Git repository.</p>
<p>Gitpod supports the following authentication providers:</p>
<ul><li>github.com</li>
<li>GitHub Enterprise in version 2.16.x and higher</li>
<li>gitlab.com</li>
<li>GitLab Community Edition in version 11.7.x and higher</li>
<li>GitLab Enterprise Edition in version 11.7.x and higher</li>
<li>Bitbucket \u2014 coming soon</li>
<li>Custom Auth Provider \u2013 Inquiry TypeFox for a quote</li></ul>
<h2 id="${"github"}">GitHub<a href="${"#github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitHub you need to create a <a href="${"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"}" rel="${"nofollow"}">GitHub OAuth App</a>.
Follow the guide linked above and:</p>
<ul><li><p>set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/github/callback</your-domain.com></p></li>
<li><p>copy the following values and configure them in <code>values.yaml</code>:</p>
<ul><li><code>clientId</code></li>
<li><code>clientSecret</code></li></ul></li></ul>
<h2 id="${"gitlab"}">GitLab<a href="${"#gitlab"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitLab you need to create an <a href="${"https://docs.gitlab.com/ee/integration/oauth_provider.html"}" rel="${"nofollow"}">GitLab OAuth application</a>.
Follow the guide linked above and:</p>
<ul><li><p>set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback</gitlab.com-OR-your-gitlab.com></your-domain.com></p></li>
<li><p>set \u201CScopes\u201D to <code>api</code>, <code>read_user</code> and <code>read_repository</code>.</p></li>
<li><p>copy the following values and configure them in <code>values.yaml</code>:</p>
<ul><li><code>clientId</code> is the \u201CApplication ID\u201D from the GitLab OAuth application</li>
<li><code>clientSecret</code> is the \u201CSecret\u201D from the GitLab OAuth application</li></ul></li></ul>`
  })}`;
});
var oauth$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Oauth$3,
  metadata: metadata$1r,
  prerender: prerender$1r
});
const metadata$1q = {
  section: "self-hosted/0.4.0/self-hosted",
  title: "Administrate Gitpod Self-Hosted"
};
const prerender$1q = true;
const Admin$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1q), {}, {
    default: () => `<h1 id="${"administrate-gitpod-self-hosted"}">Administrate Gitpod Self-Hosted<a href="${"#administrate-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we are working on the administration experience, there is already a lot you can do if you know where to look.</p>
<h2 id="${"download-a-backup-of-a-workspace"}">Download a backup of a workspace<a href="${"#download-a-backup-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Workpaces are stored as tar files in Minio or Google Storage buckets (depending on your configuration).
The tar files can be downloaded from there and unpacked locally.</p>
<h2 id="${"list-all-running-workspaces"}">List all running workspaces<a href="${"#list-all-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>SELECT</code>\u2026</p>
<p><code>kubectl get pods</code></p>
<h2 id="${"stop-a-running-workspace"}">Stop a running workspace<a href="${"#stop-a-running-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl delete pod</code></p>
<h2 id="${"connect-to-built-in-registry"}">Connect to built-in Registry<a href="${"#connect-to-built-in-registry"}"><span class="${"icon icon-link"}"></span></a></h2>`
  })}`;
});
var admin$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Admin$3,
  metadata: metadata$1q,
  prerender: prerender$1q
});
const metadata$1p = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Gitpod Self-Hosted"
};
const prerender$1p = true;
const Self_hosted$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1p), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted"}">Gitpod Self-Hosted<a href="${"#gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod, just as you know it from <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.</p>
<h2 id="${"install-on-google-cloud-platform"}">Install on Google Cloud Platform<a href="${"#install-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The easiest way to install Gitpod Self-Hosted is currently on Google Cloud Platform (that\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed). GCP is the recommended platform for most users:</p>
<ul><li><a href="${"/docs/self-hosted/0.5.0/install/install-on-gcp-script"}">Install Gitpod on Google Cloud Platform</a></li></ul>
<h2 id="${"install-on-any-kubernetes-cluster"}">Install on any Kubernetes cluster<a href="${"#install-on-any-kubernetes-cluster"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you manage your own Kubernetes cluster, please follow this guide:</p>
<ul><li><a href="${"/docs/self-hosted/0.5.0/install/install-on-kubernetes"}">Install Gitpod on self-managed Kubernetes</a></li></ul>
<p>Note: Dedicated installation steps for AWS, Azure, and OpenShift are coming soon.</p>`
  })}`;
});
var selfHosted$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted$2,
  metadata: metadata$1p,
  prerender: prerender$1p
});
const metadata$1o = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Getting started with Gitpod on AWS"
};
const prerender$1o = true;
const Install_on_aws_script$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1o), {}, {
    default: () => `<h1 id="${"getting-started-with-gitpod-on-aws"}">Getting started with Gitpod on AWS<a href="${"#getting-started-with-gitpod-on-aws"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This guide explains how to install an instance of Gitpod with 3 simple steps:</p>
<h2 id="${"1-get-your-aws-credentials"}">1. Get your AWS credentials<a href="${"#1-get-your-aws-credentials"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You need an <a href="${"https://aws.amazon.com/"}" rel="${"nofollow"}">AWS account</a>. Once you have access to an account, follow <a href="${"https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html"}" rel="${"nofollow"}">these steps</a> to obtain valid credentials.</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_ACCESS_KEY_ID</span><span class="token operator">=</span><span class="token punctuation">..</span>.
<span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_SECRET_ACCESS_KEY</span><span class="token operator">=</span><span class="token punctuation">..</span>.</code>`}</pre>
<h3 id="${"note"}">Note:<a href="${"#note"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Setting up an AWS account the first time can take some time as they require - and test for - a valid credit card.</li></ul>
<h2 id="${"2-run-the-installer-image"}">2. Run the installer image<a href="${"#2-run-the-installer-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash">docker run --rm -it <span class="token punctuation"></span>
    -e AWS_ACCESS_KEY_ID <span class="token punctuation"></span>
    -e AWS_SECRET_ACCESS_KEY <span class="token punctuation"></span>
    -v <span class="token string">"<span class="token environment constant">$PWD</span>/awsinstall"</span><span class="token builtin class-name">:</span><span class="token string">"/workspace"</span> <span class="token punctuation"></span>
    eu.gcr.io/gitpod-io/self-hosted/installer:latest aws</code>`}</pre>
<p>This will kickstart the installation process, authenticate with AWS and automatically set up your Gitpod deployment using Docker and Terraform.</p>
<h3 id="${"note-1"}">Note:<a href="${"#note-1"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>This guide assumes you have the <a href="${"https://docs.docker.com/engine/install/"}" rel="${"nofollow"}">docker</a> installed.</p></li>
<li><p>The final step - creating the cluster - might take around 30 minutes on AWS. Good time to grab a cup of coffee!</p></li></ul>
<h2 id="${"3-launch-the-first-workspace"}">3. Launch the first workspace<a href="${"#3-launch-the-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once finished, the installer will print the URL at which your Gitpod installation can be found. There you need to connect Gitpod to at least one Git provider:</p>
<ul><li><a href="${"/docs/gitlab-integration#oauth-application"}">Configure an OAuth application for GitLab</a></li>
<li><a href="${"/docs/github-integration#oauth-application"}">Configure an OAuth application for GitHub</a></li></ul>
<h2 id="${"4-configure-the-browser-extension"}">4. Configure the Browser extension<a href="${"#4-configure-the-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Afterwards you can jump right into your first workspace, by prefixing the repository URL with your Gitpod Self-Hosted URL.</p>
<p>Examples:</p>
<ul><li>GitLab: <code>&lt;your-installation-url&gt;/#https://gitlab.com/gitpod/spring-petclinic</code></li>
<li>GitHub: <code>&lt;your-installation-url&gt;/#https://github.com/gitpod-io/spring-petclinic</code></li></ul>
<h3 id="${"note-2"}">Note:<a href="${"#note-2"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>The local mount point <code>./awsinstall</code> will hold your Terraform config files. You can always modify them and re-run the install script in order to make changes to your Gitpod deployment.</p></li>
<li><p>The first workspace start might take a up to 10 minutes because it needs to pull several docker images and initialize the registry.</p></li></ul>
<h2 id="${"faq"}">FAQ<a href="${"#faq"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"q-i-get-optinrequired-you-are-not-subscribed-to-this-service-please-go-to-httpawsamazoncom-to-subscribe"}">Q: I get \u201COptInRequired: You are not subscribed to this service. Please go to <a href="${"http://aws.amazon.com"}" rel="${"nofollow"}">http://aws.amazon.com</a> to subscribe.\u201D<a href="${"#q-i-get-optinrequired-you-are-not-subscribed-to-this-service-please-go-to-httpawsamazoncom-to-subscribe"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Your account seems to be missing a credit card. Go to <a href="${"https://portal.aws.amazon.com/billing/signup?type=resubscribe#/resubscribed"}" rel="${"nofollow"}">https://portal.aws.amazon.com/billing/signup?type=resubscribe#/resubscribed</a> and finish the subscription process.</p>
<h3 id="${"q-i-get-status-reason-the-requested-configuration-is-currently-not-supported"}">Q: I get \u201CStatus Reason: The requested configuration is currently not supported\u201D<a href="${"#q-i-get-status-reason-the-requested-configuration-is-currently-not-supported"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Switch to another <a href="${"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html"}" rel="${"nofollow"}">AWS region</a> often helps. Some machine types/configurations are not available in all regions.</p>
<h3 id="${"q-i-get-error-service-proxy-is-invalid-specports0nodeport-invalid-value-31080-provided-port-is-already-allocated-on-re-applying-the-terraform-script"}">Q: I get \u201CError: Service \u201Cproxy\u201D is invalid: spec.ports[0].nodePort: Invalid value: 31080: provided port is already allocated\u201D on re-applying the terraform script<a href="${"#q-i-get-error-service-proxy-is-invalid-specports0nodeport-invalid-value-31080-provided-port-is-already-allocated-on-re-applying-the-terraform-script"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: This is a kubernetes issue on AWS. Please wait for 2-5 minutes and retry (cmp. Kubernetes issues <a href="${"https://github.com/kubernetes/kubernetes/issues/32987"}" rel="${"nofollow"}">32987</a> and <a href="${"https://github.com/kubernetes/kubernetes/issues/73140"}" rel="${"nofollow"}">73140</a>).</p>
<h3 id="${"q-one-of-my-pods-throws-errors-reading-networkplugin-cni-failed-to-set-up-pod-lt-name-gt-network-add-cmd-failed-to-assign-an-ip-address-to-container"}">Q: One of my pods throws errors reading \u201CnetworkPlugin cni failed to set up pod \u201D<code>&lt; name &gt;</code>\u201D network: add cmd: failed to assign an IP address to container\u201D<a href="${"#q-one-of-my-pods-throws-errors-reading-networkplugin-cni-failed-to-set-up-pod-lt-name-gt-network-add-cmd-failed-to-assign-an-ip-address-to-container"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Seems like the pod-per-node limit is reached: <a href="${"https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt"}" rel="${"nofollow"}">https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt</a> . Please report this as this as a bug <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">here</a>.</p>`
  })}`;
});
var installOnAwsScript$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_aws_script$2,
  metadata: metadata$1o,
  prerender: prerender$1o
});
const metadata$1n = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Manually Install Gitpod on Google Cloud Platform"
};
const prerender$1n = true;
const Install_on_gcp_manual = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1n), {}, {
    default: () => `<h1 id="${"manually-install-gitpod-on-google-cloud-platform"}">Manually Install Gitpod on Google Cloud Platform<a href="${"#manually-install-gitpod-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h1>
<blockquote><p><strong>TODO</strong> This document is a stub only.</p></blockquote>
<h2 id="${"before-you-begin"}">Before you begin<a href="${"#before-you-begin"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>install <a href="${"https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version"}" rel="${"nofollow"}">gcloud cli</a><ul><li><code>gcloud components install beta</code></li></ul></li>
<li>setup Google cloud project</li>
<li>choose a <a href="${"https://cloud.google.com/compute/docs/regions-zones/#available"}" rel="${"nofollow"}">zone and region</a> to install your Gitpod cluster</li>
<li><a href="${"https://cloud.google.com/endpoints/docs/openapi/enable-api#enabling_an_api"}" rel="${"nofollow"}">Enable APIs</a>:<ul><li>Identity and Access Management (IAM)</li>
<li>Cloud SQL Admin API</li></ul></li></ul>
<pre class="${"language-null"}">${`<code class="language-null">gcloud auth login
gcloud config set core/project &lt;gcloud-project&gt;
gcloud config set compute/region &lt;gcloud-region&gt;
gcloud config set compute/zone &lt;gcloud-zone&gt;

PROJECT_ID=&lt;gcloud-project-id&gt;
REGION=&lt;gcloud-region&gt;</code>`}</pre>
<h3 id="${"ip"}">IP<a href="${"#ip"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud compute addresses create gitpod-inbound-ip --region=$REGION
IP_ADDRESS=$(gcloud compute addresses describe gitpod-inbound-ip --region $REGION | grep &quot;address:&quot; | cut -d&#39; &#39; -f2)</code>`}</pre>
<p>Now that you have a reserved IP address, you will have to set up the following DNS A records resolving to that IP address:</p>
<ul><li><code>your-base-domain</code></li>
<li><code>*.your-base-domain</code></li>
<li><code>*.ws.your-base-domain</code></li></ul>
<h3 id="${"vpc-network"}">VPC Network<a href="${"#vpc-network"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud compute networks create gitpod-vpc --bgp-routing-mode=regional --subnet-mode=auto</code>`}</pre>
<h3 id="${"cluster"}">Cluster<a href="${"#cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-nodes-meta
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/clouddebugger.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudtrace.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/errorreporting.writer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.viewer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.logWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.metricWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.viewer

gcloud iam service-accounts create gitpod-nodes-workspace
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/clouddebugger.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudtrace.agent
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/errorreporting.writer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.viewer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/logging.logWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.metricWriter
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/monitoring.viewer</code>`}</pre>
<p>Choose one (or more) zones to install your cluster to</p>
<pre class="${"language-null"}">${`<code class="language-null">ZONES=us-west1-a,us-west1-b
gcloud beta container clusters create gitpod-cluster         --region=$REGION            --node-locations=$ZONES         --cluster-version=&quot;1.13.7-gke.24&quot;         --addons=NetworkPolicy                  --no-enable-basic-auth         --no-issue-client-certificate                 --enable-ip-alias         --cluster-ipv4-cidr=&quot;10.8.0.0/14&quot;         --services-ipv4-cidr=&quot;10.0.0.0/20&quot;         --network=gitpod-vpc                 --enable-network-policy         --enable-pod-security-policy                 --metadata disable-legacy-endpoints=true         --num-nodes=1         --enable-autoscaling --min-nodes=1 --max-nodes=3         --service-account=gitpod-nodes-meta@$PROJECT_ID.iam.gserviceaccount.com         --node-labels=&quot;gitpod.io/workload_meta=true&quot;         --machine-type=n1-standard-4         --image-type=cos         --disk-size=100         --disk-type=pd-ssd         --enable-autorepair         --local-ssd-count=0         --workload-metadata-from-node=SECURE

gcloud beta container node-pools create workspace-pool-1         --region=$REGION            --cluster=gitpod-cluster                 --metadata disable-legacy-endpoints=true         --num-nodes=0         --enable-autoscaling --min-nodes=0 --max-nodes=10         --service-account=gitpod-nodes-workspace@$PROJECT_ID.iam.gserviceaccount.com         --node-labels=&quot;gitpod.io/workload_workspace=true&quot;         --machine-type=n1-standard-16         --image-type=ubuntu         --disk-size=200         --disk-type=pd-ssd         --enable-autorepair         --local-ssd-count=1</code>`}</pre>
<h2 id="${"optional"}">Optional<a href="${"#optional"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"gcp-managed-db"}">GCP Managed DB<a href="${"#gcp-managed-db"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">DB_PW=$(openssl rand -base64 20)
DB_NAME=gitpod-db
BACKUP_TIME=&quot;04:00&quot;
gcloud sql instances create $DB_NAME     --database-version MYSQL_5_7     --storage-size=100     --storage-auto-increase     --tier=db-n1-standard-4     --region=$REGION     --backup-start-time=$BACKUP_TIME     --failover-replica-name=$DB_NAME-failover     --replica-type=FAILOVER     --enable-bin-log

gcloud sql users set-password root --host % --instance $DB_NAME --password $DB_PW
echo &quot;Database root password: $DB_PW&quot;</code>`}</pre>
<p>Note: Store password securely for later use!</p>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-cloudsql-client
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-cloudsql-client@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/cloudsql.client
gcloud iam service-accounts keys create gitpod-cloudsql-client-key.json --iam-account=gitpod-cloudsql-client@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h4 id="${"initialize-db"}">Initialize DB<a href="${"#initialize-db"}"><span class="${"icon icon-link"}"></span></a></h4>
<ol><li><p><a href="${"https://cloud.google.com/sql/docs/mysql/sql-proxy#install"}" rel="${"nofollow"}">Get <code>cloud_sql_proxy</code> binary</a></p>
<pre class="${"language-null"}">${`<code class="language-null">wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
chmod +x cloud_sql_proxy</code>`}</pre></li>
<li><p>Connect to DB</p>
<pre class="${"language-null"}">${`<code class="language-null">./cloud_sql_proxy -instances=$PROJECT_ID:$REGION:$DB_NAME=tcp:0.0.0.0:3306 -credential_file=./gitpod-cloudsql-client-key.json</code>`}</pre>
<p>2nd terminal: login with root password</p>
<pre class="${"language-null"}">${`<code class="language-null">mysql -u root -P 3306 -h 127.0.0.1 -p</code>`}</pre></li>
<li><p>Execute init scripts
Generate password for gitpod user:</p>
<pre class="${"language-null"}">${`<code class="language-null">GITPOD_DB_PW=$(openssl rand -base64 20)</code>`}</pre>
<pre class="${"language-null"}">${`<code class="language-null">set @gitpodDbPassword = &lt;GITPOD_DB_PW&gt;;

source config/db/init/00-create-user.sql
source config/db/init/01-recreate-gitpod-db.sql
source config/db/init/02-create-and-init-sessions-db.sql</code>`}</pre></li></ol>
<h3 id="${"gcp-buckets-for-workspace-backups"}">GCP Buckets for workspace backups<a href="${"#gcp-buckets-for-workspace-backups"}"><span class="${"icon icon-link"}"></span></a></h3>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-workspace-syncer
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.objectAdmin
gcloud iam service-accounts keys create gitpod-workspace-syncer-key.json --iam-account=gitpod-workspace-syncer@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h3 id="${"gcp-registry"}">GCP Registry<a href="${"#gcp-registry"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Push and Pull access to the registry</p>
<pre class="${"language-null"}">${`<code class="language-null">gcloud iam service-accounts create gitpod-registry-full
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com</code>`}</pre>
<h2 id="${"install"}">Install<a href="${"#install"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>cluster init:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl create -f tiller-sa.yaml
helm init --service-account tiller</code>`}</pre>
<p>install gitpod:</p>
<pre class="${"language-null"}">${`<code class="language-null">cd gitpod
helm dependencies update
helm install -f values.yaml [[-f &lt;optional-values.yaml&gt;]...] --name gitpod .</code>`}</pre>`
  })}`;
});
var installOnGcpManual = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_manual,
  metadata: metadata$1n,
  prerender: prerender$1n
});
const metadata$1m = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Getting started with Gitpod on GCP"
};
const prerender$1m = true;
const Install_on_gcp_script$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1m), {}, {
    default: () => `<h1 id="${"getting-started-with-gitpod-on-gcp"}">Getting started with Gitpod on GCP<a href="${"#getting-started-with-gitpod-on-gcp"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod runs best on Google Cloud Platform. That\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed and operated at scale.
This guide explains how to install an instance of Gitpod with 3 simple steps:</p>
<h2 id="${"1-get-a-gcp-project"}">1. Get a GCP project<a href="${"#1-get-a-gcp-project"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You need a fresh <a href="${"https://cloud.google.com/resource-manager/docs/creating-managing-projects"}" rel="${"nofollow"}">Google Cloud project</a>, for which you can also use the <a href="${"https://console.cloud.google.com/freetrial"}" rel="${"nofollow"}">Google Cloud Platform trial</a> with $300 worth of resources.</p>
<p>Once you have the project, keep its project ID handy.</p>
<h2 id="${"2-run-the-installer-image"}">2. Run the installer image<a href="${"#2-run-the-installer-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash">docker run --rm -it <span class="token punctuation"></span>
    -v <span class="token environment constant">$PWD</span>/gcloud:/root/.config/gcloud <span class="token punctuation"></span>
    -v <span class="token environment constant">$PWD</span>/gpinstall:/workspace <span class="token punctuation"></span>
    eu.gcr.io/gitpod-io/self-hosted/installer:latest <span class="token punctuation"></span>
    gcp</code>`}</pre>
<p>This will kickstart the installation process, log in with Google Cloud, and automatically set up your Gitpod deployment using <a href="${"https://www.terraform.io"}" rel="${"nofollow"}">Terraform</a> and <a href="${"https://helm.sh"}" rel="${"nofollow"}">Helm</a>.</p>
<h3 id="${"note"}">Note:<a href="${"#note"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>This guide assumes you have the <a href="${"https://docs.docker.com/engine/install/"}" rel="${"nofollow"}">docker</a> installed.</p></li>
<li><p>The local mount point <code>$PWD/gpinstall</code> will hold your Terraform config files. You can always modify them and re-run the install script in order to make changes to your Gitpod deployment.</p></li>
<li><p>The local mount point <code>$PWD/gcloud</code> will cache your Google Cloud credentials. It is safe to delete this folder if you don\u2019t wish to leave any tokens behind.</p></li></ul>
<p>Once the installation process is complete, the script will print the URL at which your Gitpod installation can be accessed.</p>
<h2 id="${"3-launch-the-first-workspace"}">3. Launch the first workspace<a href="${"#3-launch-the-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once finished, the installer will print the URL at which your Gitpod installation can be found. There you need to connect Gitpod to at least one Git provider:</p>
<ul><li><a href="${"/docs/gitlab-integration#oauth-application"}">Configure an OAuth application for GitLab</a></li>
<li><a href="${"/docs/github-integration#oauth-application"}">Configure an OAuth application for GitHub</a></li></ul>
<h2 id="${"4-configure-the-browser-extension"}">4. Configure the Browser extension<a href="${"#4-configure-the-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Afterwards you can jump right into your first workspace, by prefixing the repository URL with your Gitpod Self-Hosted URL.</p>
<p>Examples:</p>
<ul><li>GitLab: <code>&lt;your-installation-url&gt;/#https://gitlab.com/gitpod/spring-petclinic</code></li>
<li>GitHub: <code>&lt;your-installation-url&gt;/#https://github.com/gitpod-io/spring-petclinic</code></li></ul>
<h2 id="${"going-further"}">Going further<a href="${"#going-further"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Using a <a href="${"./domain"}">custom domain</a></li>
<li>Configuring a <a href="${"./docker-registry"}">custom Docker registry</a></li>
<li>Configuring a <a href="${"./storage"}">storage backend</a></li>
<li>Configuring <a href="${"./workspaces"}">workspace sizes</a></li></ul>`
  })}`;
});
var installOnGcpScript$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_script$2,
  metadata: metadata$1m,
  prerender: prerender$1m
});
const metadata$1l = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Install Gitpod Self-Hosted on Kubernetes"
};
const prerender$1l = true;
const Install_on_kubernetes$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1l), {}, {
    default: () => `<h1 id="${"install-gitpod-self-hosted-on-kubernetes"}">Install Gitpod Self-Hosted on Kubernetes<a href="${"#install-gitpod-self-hosted-on-kubernetes"}"><span class="${"icon icon-link"}"></span></a></h1>
<blockquote><p><strong>Note:</strong> We currently working on improving the experience of Gitpod installations on vanilla Kubernetes clusters. The documention on this page is slightly outdated. We have <a href="${"https://github.com/gitpod-io/gitpod/tree/master/chart"}" rel="${"nofollow"}">helm charts</a> on <a href="${"https://charts.gitpod.io/"}" rel="${"nofollow"}">https://charts.gitpod.io/</a> and a <a href="${"https://github.com/gitpod-io/gitpod/tree/master/install/docker/examples"}" rel="${"nofollow"}">Docker image that runs Gitpod</a> based on <a href="${"https://k3s.io"}" rel="${"nofollow"}">k3s</a>. Detailed documentation will follow shortly. <em>Stay tuned.</em></p></blockquote>
<p>This section describes how to install Gitpod on a vanilla Kubernetes cluster.
Gitpod also provides more optimized installations offering better performance for particular cloud providers:</p>
<ul><li><em>Google Cloud Platform</em>: Install Gitpod in a blank GCP project, either <a href="${"./install-on-gcp-script"}">using a script that automates the procedure</a> or <a href="${"./install-on-gcp-manual"}">manually step-by-step</a>.</li></ul>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>A Kubernetes Cluster in Version 1.13 or newer.</li>
<li><a href="${"./domain"}">Domain</a></li>
<li><a href="${"./https-certs"}">HTTPS Certificates</a>: Optional, if you use an external docker registry.</li>
<li><code>kubectl</code> with access to that cluster.</li>
<li><code>helm</code>. We recommend version 3.x. Any version &gt;= 2.11 will also work, but requires you to have <a href="${"./helm-2x"}">tiller configured</a>.</li>
<li>Optional: A MySQL Database</li>
<li>Optional: A Docker Registry</li>
<li>Optional: Buckets Storage, e.g. Minio</li></ul>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The <a href="${"https://github.com/gitpod-io/self-hosted"}" rel="${"nofollow"}">Gitpod self-hosted repository</a> contains the configuration files this guide is refering to.
Throughout this guide you will be modifying the files found in this repo.
We recommend you fork this repository so that you can easily rebase your changes on the latest version.</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">git</span> clone https://github.com/gitpod-io/self-hosted
<span class="token builtin class-name">cd</span> self-hosted
<span class="token function">git</span> remote <span class="token function">rename</span> origin upstream</code>`}</pre>
<p>For the rest of this guide we will assume that you are located in the root of a working copy of this repository.</p>
<h3 id="${"domain-name-and-ip-address"}">Domain name and IP address<a href="${"#domain-name-and-ip-address"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod requires <a href="${"./domain"}">domain names</a> which resolve to the IP of your Kubernetes cluster.
Set your domain in the <code>values.yaml</code> under <code>gitpod.hostname</code>.</p>
<p>By default Gitpod deploys a <a href="${"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer"}" rel="${"nofollow"}"><code>LoadBalancer</code> service</a> as means of ingress.
If you have a fixed IP address that you want to use, set the <code>gitpod.components.proxy.loadBalancerIP</code> field to the external IP of your cluster/load balancer.
If this field is not set, Kubernetes will assign you a load balancer IP during deployment.
Once you know your IP address, configure your three domain names to resolve to that IP address.</p>
<h3 id="${"oauth-integration"}">OAuth integration<a href="${"#oauth-integration"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod delegates authentication to a configurable OAuth provider.</p>
<p>Follow <a href="${"./oauth"}">the steps</a> to set up GitHub or GitLab as OAuth provider.</p>
<h3 id="${"https-certificates-or-external-docker-registry"}">HTTPS certificates or external Docker registry<a href="${"#https-certificates-or-external-docker-registry"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod builds docker images on demand and runs them in Kubernetes pods as workspaces.
Since Kubernetes by default only pulls images from secure Docker registries,
you will either need to have <a href="${"./https-certs"}">HTTPS certificates</a> configured if you want to use the internal docker registry,
or use an <a href="${"./docker-registry"}">external docker registry</a>.</p>
<h2 id="${"recommended-configuration"}">Recommended Configuration<a href="${"#recommended-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To get Gitpod running quickly, you may skip this chapter.
For production scenarios, however, we highly recomend this configuration.</p>
<ul><li><a href="${"./docker-registry"}"><strong>Docker Registry</strong></a>: Use your own Docker registry instead of the built-in one.</li>
<li><a href="${"./https-certs"}"><strong>HTTPS certificates</strong></a>: Configure HTTPS certificates for secure access to Gitpod.</li>
<li><a href="${"./database"}"><strong>Database</strong></a>: Use your own MySQL database instead of the built-in one.</li></ul>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash">helm repo <span class="token function">add</span> charts.gitpod.io https://charts.gitpod.io
helm dep update
helm upgrade --install <span class="token variable"><span class="token variable">$(</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">$(</span>cat configuration.txt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"-f <span class="token variable">$i</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token variable">)</span></span> gitpod <span class="token builtin class-name">.</span></code>`}</pre>
<p>Visit <code>https://&lt;your-domain.com&gt;/</code> and check that you can login and start workspaces just like on gitpod.io.
Launch a workpace. Launching the first workspace can take significantly longer (up to 15min), this is because Docker images are being pulled.</p>
<h2 id="${"customization"}">Customization<a href="${"#customization"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"./storage"}"><strong>Storage</strong></a>: Configure where Gitpod stores stopped workspaces.</li>
<li><a href="${"./nodes"}"><strong>Kubernetes Nodes</strong></a>: Configure file system layout and the workspace\u2019s node associativity.</li>
<li><a href="${"./workspaces"}"><strong>Workspaces</strong></a>: Configure workspace sizing.</li></ul>`
  })}`;
});
var installOnKubernetes$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_kubernetes$2,
  metadata: metadata$1l,
  prerender: prerender$1l
});
const metadata$1k = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Docker Registry"
};
const prerender$1k = true;
const Docker_registry$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1k), {}, {
    default: () => `<h1 id="${"docker-registry"}">Docker Registry<a href="${"#docker-registry"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.
To this end, Gitpod requires a container registry where it can push the images it builds.</p>
<p>By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li>Integrated docker registry: If not disabled, this docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.
The docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.</li>
<li>Own docker registry: Gitpod can connect to your own docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.</li></ul>
<p>This helm chart can either deploy its own registry (default but requires <a href="${"./https-certs"}">HTTPS certs</a>) or use an existing one.
To connect to an existing Docker registry, do the following steps:</p>
<pre class="${"language-null"}">${`<code class="language-null">echo values/registry.yaml &gt;&gt; configuration.txt</code>`}</pre>
<p>In <code>values/registry.yaml</code> replace <code>your.registry.com</code> with the name of your registry.</p>
<p>Login to the registry and safe the authentication</p>
<pre class="${"language-null"}">${`<code class="language-null">docker --config secrets/ login your.registry.com &amp;&amp; mv secrets/config.json secrets/registry-auth.json</code>`}</pre>
<p>Make sure the resulting JSON file contains the credentials (there should be an <code>auth</code> section containing them as base64 encoded string).</p>
<p>If that\u2019s not the case you might have a credential store/helper set up (e.g. on macOS the <em>Securely store Docker logins in macOS keychain</em> setting).</p>`
  })}`;
});
var dockerRegistry$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_registry$2,
  metadata: metadata$1k,
  prerender: prerender$1k
});
const metadata$1j = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "HTTPS certificates"
};
const prerender$1j = true;
const Https_certs = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1j), {}, {
    default: () => `<h1 id="${"https-certificates"}">HTTPS certificates<a href="${"#https-certificates"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we highly recommend operating Gitpod using HTTPS, Gitpod is able to run on insecure HTTP.
If you use Gitpod\u2019s internal Docker registry, the downside of not using HTTPS is that Kubernetes won\u2019t be able to pull images from the registry because it considers the registry insecure.
You can either resort to using an <a href="${"#docker-registry-optional"}">external registry</a> or use HTTPS. For running Gitpod on insecure HTTP, no HTTPS certificates are needed and you can skip this section.</p>
<blockquote><p>Important: The HTTPS certificates for your domain must include <code>your-domain.com</code>, <code>*.your-domain.com</code> and <code>*.ws.your-domain.com</code>. Beware that wildcard certificates are valid for one level only (i.e. <code>*.a.com</code> is not valid for <code>c.b.a.com</code>).</p></blockquote>
<p>To use the HTTPS certificates for your domain</p>
<ul><li><code>echo values/https.yaml &gt;&gt; configuration.txt</code></li>
<li>place your certificates in <code>secrets/https-certificates/</code> like so:</li></ul>
<pre class="${"language-null"}">${`<code class="language-null"> secrets/https-certificates:
  |- cert.pem
  |- chain.pem
  |- fullchain.pem
  |- privkey.pem</code>`}</pre>
<p>Generate the <a href="${"https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"}" rel="${"nofollow"}">dhparams.pem</a> file using</p>
<pre class="${"language-null"}">${`<code class="language-null">openssl dhparam -out secrets/https-certificates/dhparams.pem 2048</code>`}</pre>
<h2 id="${"using-lets-encrypt"}">Using Let\u2019s Encrypt<a href="${"#using-lets-encrypt"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The most accessible means of obtaining HTTPS certificates is using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> which provides free certificats to anybody who can prove ownership of a domain.
Gitpod requires <a href="${"https://en.wikipedia.org/wiki/Wildcard_certificate"}" rel="${"nofollow"}">wildcard certificates</a> (e.g. <code>*.ws.your-domain.com</code>) which <a href="${"https://community.letsencrypt.org/t/acme-v2-production-environment-wildcards/55578"}" rel="${"nofollow"}">can be obtained via Let\u2019s Encrypt</a> but require <a href="${"https://letsencrypt.org/docs/challenge-types/#dns-01-challenge"}" rel="${"nofollow"}">proof of ownership via DNS</a>.
There is a <a href="${"https://www.google.com/search?q=letsencrypt+wildcard"}" rel="${"nofollow"}">plethora of tutorials</a> how to <a href="${"https://medium.com/@saurabh6790/generate-wildcard-ssl-certificate-using-lets-encrypt-certbot-273e432794d7"}" rel="${"nofollow"}">generate wildcard certificates</a> using Let\u2019s Encrypt.
Things get considerably easier when your domain is registered with a service for which a <a href="${"https://certbot.eff.org/docs/using.html#dns-plugins"}" rel="${"nofollow"}">Certbot DNS plugin exists</a>.</p>
<p>Assuming you have <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> installed, the following script will generate and configure the required certificates (notice the placeholders):</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOMAIN</span><span class="token operator">=</span>your-domain.cm
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EMAIL</span><span class="token operator">=</span>your@email.here
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKDIR</span><span class="token operator">=</span>/workspace/letsencrypt

certbot certonly <span class="token punctuation"></span>
    --config-dir <span class="token variable">$WORKDIR</span>/config <span class="token punctuation"></span>
    --work-dir <span class="token variable">$WORKDIR</span>/work <span class="token punctuation"></span>
    --logs-dir <span class="token variable">$WORKDIR</span>/logs <span class="token punctuation"></span>
    --manual <span class="token punctuation"></span>
    --preferred-challenges<span class="token operator">=</span>dns <span class="token punctuation"></span>
    --email <span class="token variable">$EMAIL</span> <span class="token punctuation"></span>
    --server https://acme-v02.api.letsencrypt.org/directory <span class="token punctuation"></span>
    --agree-tos <span class="token punctuation"></span>
    -d *.ws.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d *.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d <span class="token variable">$DOMAIN</span>

<span class="token comment"># move them into place</span>
<span class="token function">mkdir</span> secrets/https-certificates
<span class="token function">find</span> <span class="token variable">$WORKDIR</span>/config/live -name <span class="token string">"*.pem"</span> -exec <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> secrets/https-certificates <span class="token punctuation"></span><span class="token punctuation">;</span>

<span class="token comment"># Generate dhparams</span>
openssl dhparam -out secrets/https-certificates/dhparams.pem <span class="token number">2048</span>

<span class="token comment"># Enable HTTPS</span>
<span class="token builtin class-name">echo</span> values/https.yaml <span class="token operator">>></span> configuration.txt</code>`}</pre>`
  })}`;
});
var httpsCerts = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Https_certs,
  metadata: metadata$1j,
  prerender: prerender$1j
});
const metadata$1i = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Workspaces"
};
const prerender$1i = true;
const Workspaces$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1i), {}, {
    default: () => `<h1 id="${"workspaces"}">Workspaces<a href="${"#workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"sizing"}">Sizing<a href="${"#sizing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.
If you want to change the default sizing (~ 8GiB per workspace) you should</p>
<ul><li><code>echo values.workspace-sizing.yaml &gt;&gt; configuration.txt</code></li>
<li>adapt the values in <code>values.workspace-sizing.yaml</code> to match your installation.</li></ul>`
  })}`;
});
var workspaces$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces$3,
  metadata: metadata$1i,
  prerender: prerender$1i
});
const metadata$1h = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Database"
};
const prerender$1h = true;
const Database$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1h), {}, {
    default: () => `<h1 id="${"database"}">Database<a href="${"#database"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li><p>Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.
The database uses a Kubernetes PersistentVolume. We do not recommend using this option fo a production setting.</p></li>
<li><p>Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.</p></li></ul>
<p>This chart installs a MySQL database which gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a porper MySQL installation:</p>
<ul><li>initialize your MySQL database using the SQL files in <code>database/</code>. E.g. in a mysql session connected to your database server run:<pre class="${"language-null"}">${`<code class="language-null">SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, &#39;your-password-goes-here&#39;);
source database/01-create-user.sql;
source database/02-create-and-init-sessions-db.sql;
source database/03-recreate-gitpod-db.sql;</code>`}</pre></li>
<li><code>echo values/database.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values/database.yaml</code> change the values in <code>gitpod.db</code> to match your installation</li></ul>`
  })}`;
});
var database$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Database$2,
  metadata: metadata$1h,
  prerender: prerender$1h
});
const metadata$1g = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Helm"
};
const prerender$1g = true;
const Helm_2x = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1g), {}, {
    default: () => `<h1 id="${"helm"}">Helm<a href="${"#helm"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>If you haven\u2019t done so before, install helm in the cluster:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl create -f utils/helm-2-tiller-sa-crb.yaml
helm init --service-account tiller</code>`}</pre>
<p>verify that helm was installed properly using <code>helm version</code>.</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl get nodes</code>`}</pre>
<pre class="${"language-null"}">${`<code class="language-null">helm version</code>`}</pre>`
  })}`;
});
var helm2x = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Helm_2x,
  metadata: metadata$1g,
  prerender: prerender$1g
});
const metadata$1f = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Workspace Storage"
};
const prerender$1f = true;
const Storage$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1f), {}, {
    default: () => `<h1 id="${"workspace-storage"}">Workspace Storage<a href="${"#workspace-storage"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to the bucket.</p>
<p>By default Gitpod ships with <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> as built-in bucket storage. If you operate your own MinIO instance, or have access to Google Cloud Bucket storage you can use that one. You have the following options:</p>
<ul><li>Integrated MinIO: If not disabled, Gitpod installs MinIO in Kubernetes as a dependency of Gitpod\u2019s helm charts.
MinIO itself can serve as a <a href="${"https://github.com/minio/minio/tree/master/docs/gateway"}" rel="${"nofollow"}">gateway</a> to other storage providers.
When storing the data itself, MinIO relies on a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"}" rel="${"nofollow"}">persistent volume</a> which in turn supports a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes"}" rel="${"nofollow"}">wide range of storage backends</a>.</li>
<li>Bring your own storage bucket: Gitpod can be configured to connect to your own installation of MinIO or Google Cloud Storage compatible storage solution.</li></ul>
<p>This helm chart ships with a <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> installation for this purpose.
Alternatively, you can connect to your own <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> installation using</p>
<ul><li><code>echo values/minio.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values.minio.yaml</code> change the values to match your installation</li></ul>`
  })}`;
});
var storage$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Storage$2,
  metadata: metadata$1f,
  prerender: prerender$1f
});
const metadata$1e = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Domain"
};
const prerender$1e = true;
const Domain = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1e), {}, {
    default: () => `<h1 id="${"domain"}">Domain<a href="${"#domain"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. <code>your-domain.com</code>).
As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.
For example:</p>
<p>your-domain.com
<em>.your-domain.com
</em>.ws.your-domain.com</p>
<p>Installing Gitpod on a subdomain works as well. For example:</p>
<p>gitpod.your-domain.com
<em>.gitpod.your-domain.com
</em>.ws.gitpod.your-domain.com</p>`
  })}`;
});
var domain = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Domain,
  metadata: metadata$1e,
  prerender: prerender$1e
});
const metadata$1d = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Kubernetes Nodes"
};
const prerender$1d = true;
const Nodes$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1d), {}, {
    default: () => `<h1 id="${"kubernetes-nodes"}">Kubernetes Nodes<a href="${"#kubernetes-nodes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configure the nodes (computers or virtual machines) that Kuberntes runs Gitpod\u2019s workspace pods on.</p>
<h2 id="${"assign-workload-to-nodes"}">Assign workload to Nodes<a href="${"#assign-workload-to-nodes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as <em>meta</em>) and the workspaces. Ideally both types of workloads run on seperate nodes to make makes scaling easier.
Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:</p>
<ul><li><code>gitpod.io/workload_meta=true</code> which marks the \u201Cmeta\u201D nodes and</li>
<li><code>gitpod.io/workload_workspace=true </code> which marks the workspace nodes.</li></ul>
<p>If you want to \u201Cmix \u2018n match\u201D, i.e. don\u2019t seperate the nodes you can simply run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true</code>`}</pre>
<h2 id="${"node-filesystem-layout"}">Node Filesystem Layout<a href="${"#node-filesystem-layout"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod relies on the node\u2019s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in <code>/data</code> and Theia is copied to <code>/theia</code>. Depending on your node setup the root filesystem maybe <strong>read-only</strong> or <strong>slow</strong>.
We recommend you change those two paths so that they\u2019re located on an SSD or some other form of fast local storage.</p>
<p>To do this:</p>
<ul><li><code>echo values/node-layout.yaml &gt;&gt; configuration.txt</code></li>
<li>in <code>values/node-layout.yaml</code> change the values to match your installation</li></ul>`
  })}`;
});
var nodes$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Nodes$2,
  metadata: metadata$1d,
  prerender: prerender$1d
});
const metadata$1c = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "How To integrate Gitpod with OAuth providers"
};
const prerender$1c = true;
const Oauth$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1c), {}, {
    default: () => `<h1 id="${"how-to-integrate-gitpod-with-oauth-providers"}">How To integrate Gitpod with OAuth providers<a href="${"#how-to-integrate-gitpod-with-oauth-providers"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod does not implement user authentication itself, but integrates with other auth provider using <a href="${"https://oauth.net/2/"}" rel="${"nofollow"}">OAuth2</a>.
Usually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at
the same time making sure every user has proper access to their Git repository.</p>
<p>Gitpod supports the following authentication providers:</p>
<ul><li>github.com</li>
<li>GitHub Enterprise in version 2.16.x and higher</li>
<li>gitlab.com</li>
<li>GitLab Community Edition in version 11.7.x and higher</li>
<li>GitLab Enterprise Edition in version 11.7.x and higher</li>
<li>Bitbucket \u2014 coming soon</li>
<li>Custom Auth Provider \u2013 Inquiry TypeFox for a quote</li></ul>
<h2 id="${"github"}">GitHub<a href="${"#github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitHub you need to create a <a href="${"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"}" rel="${"nofollow"}">GitHub OAuth App</a>.
Follow the guide linked above and:</p>
<ul><li><p>set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/github/callback</your-domain.com></p></li>
<li><p>copy the following values and configure them in <code>values.yaml</code>:</p>
<ul><li><code>clientId</code></li>
<li><code>clientSecret</code></li></ul></li></ul>
<h2 id="${"gitlab"}">GitLab<a href="${"#gitlab"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitLab you need to create an <a href="${"https://docs.gitlab.com/ee/integration/oauth_provider.html"}" rel="${"nofollow"}">GitLab OAuth application</a>.
Follow the guide linked above and:</p>
<ul><li><p>set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback</gitlab.com-OR-your-gitlab.com></your-domain.com></p></li>
<li><p>set \u201CScopes\u201D to <code>api</code>, <code>read_user</code> and <code>read_repository</code>.</p></li>
<li><p>copy the following values and configure them in <code>values.yaml</code>:</p>
<ul><li><code>clientId</code> is the \u201CApplication ID\u201D from the GitLab OAuth application</li>
<li><code>clientSecret</code> is the \u201CSecret\u201D from the GitLab OAuth application</li></ul></li></ul>`
  })}`;
});
var oauth$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Oauth$2,
  metadata: metadata$1c,
  prerender: prerender$1c
});
const metadata$1b = {
  section: "self-hosted/0.5.0/self-hosted",
  title: "Administrate Gitpod Self-Hosted"
};
const prerender$1b = true;
const Admin$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1b), {}, {
    default: () => `<h1 id="${"administrate-gitpod-self-hosted"}">Administrate Gitpod Self-Hosted<a href="${"#administrate-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we are working on the administration experience, there is already a lot you can do if you know where to look.</p>
<h2 id="${"download-a-backup-of-a-workspace"}">Download a backup of a workspace<a href="${"#download-a-backup-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Workpaces are stored as tar files in Minio or Google Storage buckets (depending on your configuration).
The tar files can be downloaded from there and unpacked locally.</p>
<h2 id="${"list-all-running-workspaces"}">List all running workspaces<a href="${"#list-all-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>SELECT</code>\u2026</p>
<p><code>kubectl get pods</code></p>
<h2 id="${"stop-a-running-workspace"}">Stop a running workspace<a href="${"#stop-a-running-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl delete pod</code></p>
<h2 id="${"connect-to-built-in-registry"}">Connect to built-in Registry<a href="${"#connect-to-built-in-registry"}"><span class="${"icon icon-link"}"></span></a></h2>`
  })}`;
});
var admin$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Admin$2,
  metadata: metadata$1b,
  prerender: prerender$1b
});
const metadata$1a = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Gitpod Self-Hosted"
};
const prerender$1a = true;
const Self_hosted$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1a), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted"}">Gitpod Self-Hosted<a href="${"#gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod, just as you know it from <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can find all configuration templates and installation scripts in the Gitpod repository:</p>
<blockquote><p><a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">https://github.com/gitpod-io/gitpod</a></p></blockquote>
<h3 id="${"install-on-google-cloud-platform"}">Install on Google Cloud Platform<a href="${"#install-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The easiest way to install Gitpod Self-Hosted is currently on Google Cloud Platform (that\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed). GCP is the recommended platform for most users:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-gcp-script"}">Install Gitpod on Google Cloud Platform</a></li></ul>
<h3 id="${"install-on-aws"}">Install on AWS<a href="${"#install-on-aws"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Alternatively, Gitpod comes with a setup for AWS that integrates with some AWS resource, like Load Balancers or S3 for storing workspace data:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-aws-script"}">Install Gitpod on AWS</a></li></ul>
<h3 id="${"install-on-any-kubernetes-cluster"}">Install on any Kubernetes cluster<a href="${"#install-on-any-kubernetes-cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you already have a Kubernetes cluster, or don\u2019t want/cannot use AWS or GCP, please follow the generic guide:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-kubernetes"}">Install Gitpod on Kubernetes</a></li></ul>
<p>Note: Dedicated installation steps for Azure and OpenShift are on our roadmap.</p>`
  })}`;
});
var selfHosted$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted$1,
  metadata: metadata$1a,
  prerender: prerender$1a
});
const metadata$19 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Getting started with Gitpod on AWS"
};
const prerender$19 = true;
const Install_on_aws_script$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$19), {}, {
    default: () => `<blockquote><p>Since the <code>0.6.0</code> release (December 2019) the installers are broken. We\u2019re working on bringing those back with one of the next releases.</p></blockquote>
<h1 id="${"getting-started-with-gitpod-on-aws"}">Getting started with Gitpod on AWS<a href="${"#getting-started-with-gitpod-on-aws"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This guide explains how to install an instance of Gitpod with 3 simple steps:</p>
<h2 id="${"1-get-your-aws-credentials"}">1. Get your AWS credentials<a href="${"#1-get-your-aws-credentials"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You need an <a href="${"https://aws.amazon.com/"}" rel="${"nofollow"}">AWS account</a>. Once you have access to an account, follow <a href="${"https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html"}" rel="${"nofollow"}">these steps</a> to obtain valid credentials.</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_ACCESS_KEY_ID</span><span class="token operator">=</span><span class="token punctuation">..</span>.
<span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_SECRET_ACCESS_KEY</span><span class="token operator">=</span><span class="token punctuation">..</span>.</code>`}</pre>
<h3 id="${"note"}">Note:<a href="${"#note"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Setting up an AWS account the first time can take some time as they require - and test for - a valid credit card.</li></ul>
<h2 id="${"2-run-the-installer-image"}">2. Run the installer image<a href="${"#2-run-the-installer-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$PWD</span>/awsinstall
docker run --rm -it <span class="token punctuation"></span>
    -e AWS_ACCESS_KEY_ID <span class="token punctuation"></span>
    -e AWS_SECRET_ACCESS_KEY <span class="token punctuation"></span>
    -v <span class="token string">"<span class="token environment constant">$PWD</span>/awsinstall"</span><span class="token builtin class-name">:</span><span class="token string">"/workspace"</span> <span class="token punctuation"></span>
    gcr.io/gitpod-io/self-hosted/installer:0.7.0 aws</code>`}</pre>
<p>This will kickstart the installation process, authenticate with AWS and automatically set up your Gitpod deployment using Docker and Terraform.</p>
<h3 id="${"note-1"}">Note:<a href="${"#note-1"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>This guide assumes you have the <a href="${"https://docs.docker.com/engine/install/"}" rel="${"nofollow"}">docker</a> installed.</p></li>
<li><p>The final step - creating the cluster - might take around 30 minutes on AWS. Good time to grab a cup of coffee!</p></li></ul>
<h2 id="${"3-launch-the-first-workspace"}">3. Launch the first workspace<a href="${"#3-launch-the-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once finished, the installer will print the URL at which your Gitpod installation can be found. There you need to connect Gitpod to at least one Git provider:</p>
<ul><li><a href="${"/docs/gitlab-integration#oauth-application"}">Configure an OAuth application for GitLab</a></li>
<li><a href="${"/docs/github-integration#oauth-application"}">Configure an OAuth application for GitHub</a></li></ul>
<h2 id="${"4-configure-the-browser-extension"}">4. Configure the Browser extension<a href="${"#4-configure-the-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Afterwards you can jump right into your first workspace, by prefixing the repository URL with your Gitpod Self-Hosted URL.</p>
<p>Examples:</p>
<ul><li>GitLab: <code>&lt;your-installation-url&gt;/#https://gitlab.com/gitpod/spring-petclinic</code></li>
<li>GitHub: <code>&lt;your-installation-url&gt;/#https://github.com/gitpod-io/spring-petclinic</code></li></ul>
<h3 id="${"note-2"}">Note:<a href="${"#note-2"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>The local mount point <code>./awsinstall</code> will hold your Terraform config files. You can always modify them and re-run the install script in order to make changes to your Gitpod deployment.</p></li>
<li><p>The first workspace start might take a up to 10 minutes because it needs to pull several docker images and initialize the registry.</p></li></ul>
<h2 id="${"faq"}">FAQ<a href="${"#faq"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"q-i-get-optinrequired-you-are-not-subscribed-to-this-service-please-go-to-httpawsamazoncom-to-subscribe"}">Q: I get \u201COptInRequired: You are not subscribed to this service. Please go to <a href="${"http://aws.amazon.com"}" rel="${"nofollow"}">http://aws.amazon.com</a> to subscribe.\u201D<a href="${"#q-i-get-optinrequired-you-are-not-subscribed-to-this-service-please-go-to-httpawsamazoncom-to-subscribe"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Your account seems to be missing a credit card. Go to <a href="${"https://portal.aws.amazon.com/billing/signup?type=resubscribe#/resubscribed"}" rel="${"nofollow"}">https://portal.aws.amazon.com/billing/signup?type=resubscribe#/resubscribed</a> and finish the subscription process.</p>
<h3 id="${"q-i-get-status-reason-the-requested-configuration-is-currently-not-supported"}">Q: I get \u201CStatus Reason: The requested configuration is currently not supported\u201D<a href="${"#q-i-get-status-reason-the-requested-configuration-is-currently-not-supported"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Switch to another <a href="${"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html"}" rel="${"nofollow"}">AWS region</a> often helps. Some machine types/configurations are not available in all regions.</p>
<h3 id="${"q-i-get-error-service-proxy-is-invalid-specports0nodeport-invalid-value-31080-provided-port-is-already-allocated-on-re-applying-the-terraform-script"}">Q: I get \u201CError: Service \u201Cproxy\u201D is invalid: spec.ports[0].nodePort: Invalid value: 31080: provided port is already allocated\u201D on re-applying the terraform script<a href="${"#q-i-get-error-service-proxy-is-invalid-specports0nodeport-invalid-value-31080-provided-port-is-already-allocated-on-re-applying-the-terraform-script"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: This is a kubernetes issue on AWS. Please wait for 2-5 minutes and retry (cmp. Kubernetes issues <a href="${"https://github.com/kubernetes/kubernetes/issues/32987"}" rel="${"nofollow"}">32987</a> and <a href="${"https://github.com/kubernetes/kubernetes/issues/73140"}" rel="${"nofollow"}">73140</a>).</p>
<h3 id="${"q-one-of-my-pods-throws-errors-reading-networkplugin-cni-failed-to-set-up-pod-lt-name-gt-network-add-cmd-failed-to-assign-an-ip-address-to-container"}">Q: One of my pods throws errors reading \u201CnetworkPlugin cni failed to set up pod \u201D<code>&lt; name &gt;</code>\u201D network: add cmd: failed to assign an IP address to container\u201D<a href="${"#q-one-of-my-pods-throws-errors-reading-networkplugin-cni-failed-to-set-up-pod-lt-name-gt-network-add-cmd-failed-to-assign-an-ip-address-to-container"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Seems like the pod-per-node limit is reached: <a href="${"https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt"}" rel="${"nofollow"}">https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt</a> . Please report this as this as a bug <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">here</a>.</p>`
  })}`;
});
var installOnAwsScript$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_aws_script$1,
  metadata: metadata$19,
  prerender: prerender$19
});
const metadata$18 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Getting started with Gitpod on GCP"
};
const prerender$18 = true;
const Install_on_gcp_script$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$18), {}, {
    default: () => `<blockquote><p>Since the <code>0.6.0</code> release (December 2019) the installers are broken. We\u2019re working on bringing those back with one of the next releases.</p></blockquote>
<h1 id="${"getting-started-with-gitpod-on-gcp"}">Getting started with Gitpod on GCP<a href="${"#getting-started-with-gitpod-on-gcp"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod runs best on Google Cloud Platform. That\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed and operated at scale.
This guide explains how to install an instance of Gitpod with 4 simple steps:</p>
<h2 id="${"1-get-a-gcp-project"}">1. Get a GCP project<a href="${"#1-get-a-gcp-project"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You need a fresh <a href="${"https://cloud.google.com/resource-manager/docs/creating-managing-projects"}" rel="${"nofollow"}">Google Cloud project</a>, for which you can also use the <a href="${"https://console.cloud.google.com/freetrial"}" rel="${"nofollow"}">Google Cloud Platform trial</a> with $300 worth of resources.</p>
<p>Once you have the project, keep its project ID handy.</p>
<h2 id="${"2-run-the-installer-image"}">2. Run the installer image<a href="${"#2-run-the-installer-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$PWD</span>/gpinstall
docker run --rm -it <span class="token punctuation"></span>
    -v <span class="token environment constant">$PWD</span>/gcloud:/root/.config/gcloud <span class="token punctuation"></span>
    -v <span class="token environment constant">$PWD</span>/gpinstall:/workspace <span class="token punctuation"></span>
    gcr.io/gitpod-io/self-hosted/installer:0.7.0 <span class="token punctuation"></span>
    gcp</code>`}</pre>
<p>This will kickstart the installation process, log in with Google Cloud, and automatically set up your Gitpod deployment using <a href="${"https://www.terraform.io"}" rel="${"nofollow"}">Terraform</a> and <a href="${"https://helm.sh"}" rel="${"nofollow"}">Helm</a>.</p>
<h3 id="${"note"}">Note:<a href="${"#note"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>This guide assumes you have the <a href="${"https://docs.docker.com/engine/install/"}" rel="${"nofollow"}">docker</a> installed.</p></li>
<li><p>The local mount point <code>$PWD/gpinstall</code> will hold your Terraform config files. You can always modify them and re-run the install script in order to make changes to your Gitpod deployment.</p></li>
<li><p>The local mount point <code>$PWD/gcloud</code> will cache your Google Cloud credentials. It is safe to delete this folder if you don\u2019t wish to leave any tokens behind.</p></li></ul>
<p>Once the installation process is complete, the script will print the URL at which your Gitpod installation can be accessed.</p>
<h2 id="${"3-launch-the-first-workspace"}">3. Launch the first workspace<a href="${"#3-launch-the-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once finished, the installer will print the URL at which your Gitpod installation can be found. There you need to connect Gitpod to at least one Git provider:</p>
<ul><li><a href="${"/docs/gitlab-integration#oauth-application"}">Configure an OAuth application for GitLab</a></li>
<li><a href="${"/docs/github-integration#oauth-application"}">Configure an OAuth application for GitHub</a></li></ul>
<h2 id="${"4-configure-the-browser-extension"}">4. Configure the Browser extension<a href="${"#4-configure-the-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Afterwards you can jump right into your first workspace, by prefixing the repository URL with your Gitpod Self-Hosted URL.</p>
<p>Examples:</p>
<ul><li>GitLab: <code>&lt;your-installation-url&gt;/#https://gitlab.com/gitpod/spring-petclinic</code></li>
<li>GitHub: <code>&lt;your-installation-url&gt;/#https://github.com/gitpod-io/spring-petclinic</code></li></ul>
<h1 id="${"going-further"}">Going further<a href="${"#going-further"}"><span class="${"icon icon-link"}"></span></a></h1>
<ul><li>Configuring a <a href="${"./docker-registry"}">custom Docker registry</a></li>
<li>Configuring a <a href="${"./storage"}">storage backend</a></li>
<li>Configuring <a href="${"./workspaces"}">workspace sizes</a></li></ul>`
  })}`;
});
var installOnGcpScript$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_script$1,
  metadata: metadata$18,
  prerender: prerender$18
});
const metadata$17 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Install Gitpod Self-Hosted on Kubernetes"
};
const prerender$17 = true;
const Install_on_kubernetes$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$17), {}, {
    default: () => `<h1 id="${"install-gitpod-self-hosted-on-kubernetes"}">Install Gitpod Self-Hosted on Kubernetes<a href="${"#install-gitpod-self-hosted-on-kubernetes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section describes how to install Gitpod on any Kubernetes cluster using <a href="${"https://helm.sh"}" rel="${"nofollow"}">Helm</a>. This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository <a href="${"https://charts.gitpod.io"}" rel="${"nofollow"}">charts.gitpod.io</a>, charts for branch-builds can be found <a href="${"#install-branch-build"}">here</a>, and the source of the charts is in our <a href="${"https://github.com/gitpod-io/gitpod/blob/master/chart"}" rel="${"nofollow"}">public git repository</a>.</p>
<p>For some cloud providers, we offer <a href="${"https://www.terraform.io"}" rel="${"nofollow"}">Terraform</a> scripts packaged into an installer. The installer aims to use the managed services from your cloud provider (Kubernetes Cluster, database, storage, image registry) rather than installing them along with the chart. Also, the script configures the cluster for best performance and cost-efficiency. We recommend using the installer if your cloud provider is supported. Once the installer has created the cluster, it will pre-configure and install this Gitpod helm chart into it.</p>
<ul><li><a href="${"./install-on-gcp-script"}">Installer for Google Cloud Platform (GCP)</a>.</li>
<li><a href="${"./install-on-aws-script"}">Installer for Amazon Web Services (AWS)</a>.</li></ul>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><p>A Kubernetes cluster in version <code>1.15 &lt;= x &lt;= 1.17</code>.</p></li>
<li><p>local <code>kubectl</code> with connection to your cluster</p></li>
<li><p>local <code>helm</code> in version &gt;= 3.</p></li></ul>
<p>Gitpod should work on small Kubernetes nodes out of the box (2vCPUs, 8GB RAM). For a better experience we recommend at least 4vCPUs and 16GB RAM for workspaces nodes. For cost efficiency, we recommend to enable cluster-autoscaling.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install Gitpod in your Kubernetes cluster, follow these steps:</p>
<ol><li><p>Create a file <code>values.custom.yaml</code> with the following content:</p>
<pre class="${"language-null"}">${`<code class="language-null">minio:
  accessKey: your-random-access-key
  secretKey: your-random-secret-key</code>`}</pre>
<p>You should replace the keys with 2 different random strings unique for your installation.</p></li>
<li><p>Run the following commands in your local terminal:</p>
<pre class="${"language-console"}">${`<code class="language-console">helm repo add gitpod.io https://charts.gitpod.io

helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code>`}</pre></li>
<li><p>Configure <a href="${"./configure-ingress"}">domain and https</a>.</p></li>
<li><p>Run <code>kubectl get pods</code> and verify that all pods are in state <code>RUNNING</code>. If some are not, please see the <a href="${"./troubleshooting"}">Troubleshooting Guide</a>.</p></li>
<li><p>Go to <a href="${"https://%3Cyour-domain.com%3E"}" rel="${"nofollow"}">https://\\<your-domain.com></your-domain.com></a> and follow the steps to complete the installation.</p></li></ol>
<h2 id="${"upgrade"}">Upgrade<a href="${"#upgrade"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li><p>Check the <a href="${"./upgrade"}">Upgrade Guide</a> and follow the steps outlined there.</p></li>
<li><p>Run the update</p>
<pre class="${"language-console"}">${`<code class="language-console">helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code>`}</pre></li>
<li><p>Run <code>kubectl get pods</code> and verify that all pods are in state <code>RUNNING</code>. If some are not, please see the <a href="${"./troubleshooting"}">Troubleshooting Guide</a>.</p></li></ol>
<h2 id="${"recommended-configuration"}">Recommended Configuration<a href="${"#recommended-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use and/or a bigger audience:</p>
<ul><li><a href="${"./database"}"><strong>Database</strong></a>: Configure where Gitpod stores all internal runtime data.</li>
<li><a href="${"./storage"}"><strong>Storage</strong></a>: Configure where Gitpod persists workspace content.</li>
<li><a href="${"./docker-registry"}"><strong>Docker Registry</strong></a>: Configure where Gitpod stores workspace images.</li></ul>
<h2 id="${"customization"}">Customization<a href="${"#customization"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Further customizations:</p>
<ul><li><a href="${"./nodes"}"><strong>Kubernetes Nodes</strong></a>: Configure file system layout and the workspace\u2019s node associativity.</li>
<li><a href="${"./workspaces"}"><strong>Workspaces</strong></a>: Configure workspace sizing.</li></ul>
<h2 id="${"install-branch-build"}">Install Branch Build<a href="${"#install-branch-build"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To try the latest version of Gitpod, freshly build form the <code>master</code> branch of our git repository or any other branch, follow these steps:</p>
<ol><li><p>Obtain the version name from <a href="${"https://werft.gitpod-dev.com"}" rel="${"nofollow"}">werft.gitpod-dev.com</a>. The version has the format <code>&lt;branchname&gt;.&lt;buildnumber&gt;</code> (e.g <code>master.354</code>).</p></li>
<li><p>The Helm chart ships as part of our <code>installer</code> docker image. You can extract it by running:</p>
<pre class="${"language-console"}">${`<code class="language-console">docker run --entrypoint cp -v $PWD:/workspace gcr.io/gitpod-io/self-hosted/installer:&lt;version&gt; -R /dist/helm/ /workspace</code>`}</pre></li></ol>`
  })}`;
});
var installOnKubernetes$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_kubernetes$1,
  metadata: metadata$17,
  prerender: prerender$17
});
const metadata$16 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Configure Ingress to your Gitpod installation"
};
const prerender$16 = true;
const Configure_ingress$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$16), {}, {
    default: () => `<h1 id="${"configure-ingress-to-your-gitpod-installation"}">Configure Ingress to your Gitpod installation<a href="${"#configure-ingress-to-your-gitpod-installation"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configuring ingress into your Gitpod installation requires two things:</p>
<ul><li>three DNS entries pointing at the IP of Gitpod\u2019s proxy service, and</li>
<li>HTTPS certificates.</li></ul>
<h2 id="${"1-dns-entries"}">1. DNS Entries<a href="${"#1-dns-entries"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. <code>your-domain.com</code>).
As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.
For example:</p>
<p>your-domain.com
<em>.your-domain.com
</em>.ws.your-domain.com</p>
<p>Installing Gitpod on a subdomain works as well. For example:</p>
<p>gitpod.your-domain.com
<em>.gitpod.your-domain.com
</em>.ws.gitpod.your-domain.com</p>
<ol><li><p>Setup <code>A</code> records for all three (sub)domains. To learn your installation\u2019s IP run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl describe svc proxy | grep -i ingress</code>`}</pre></li>
<li><p>Create a file <code>values.custom.yaml</code> with the following content:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">hostname</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>domain.com</code>`}</pre></li></ol>
<h2 id="${"2-https"}">2. HTTPS<a href="${"#2-https"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires HTTPS certificates to function properly. We recommend using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> for retrieving certificates as we do for <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>.</p>
<blockquote><p>Important: The HTTPS certificates for your domain must include <code>your-domain.com</code>, <code>*.your-domain.com</code> and <code>*.ws.your-domain.com</code>. Beware that wildcard certificates are valid for one level only (i.e. <code>*.a.com</code> is not valid for <code>c.b.a.com</code>).</p></blockquote>
<p>To configure the HTTPS certificates for your domain</p>
<ol><li><a href="${"#using-lets-encrypt-to-generate-https-certificates"}">Generate certificates</a> and put your certificate files under <code>secrets/https-certificates/</code>:<pre class="${"language-null"}">${`<code class="language-null">secrets/https-certificates:
  |- cert.pem
  |- chain.pem
  |- fullchain.pem
  |- privkey.pem</code>`}</pre></li>
<li>Generate the <a href="${"https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"}" rel="${"nofollow"}">dhparams.pem</a> file using:<pre class="${"language-bash"}">${`<code class="language-bash">openssl dhparam -out secrets/https-certificates/dhparams.pem <span class="token number">2048</span></code>`}</pre></li>
<li>Create a kubernetes secret using:<pre class="${"language-bash"}">${`<code class="language-bash">kubectl create secret generic https-certificates --from-file<span class="token operator">=</span>secrets/https-certificates</code>`}</pre></li>
<li>Afterwards, do an <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</li></ol>
<h3 id="${"using-lets-encrypt-to-generate-https-certificates"}">Using Let\u2019s Encrypt to generate HTTPS certificates<a href="${"#using-lets-encrypt-to-generate-https-certificates"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The most accessible means of obtaining HTTPS certificates is using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a>. It provides free certificates to anybody who can prove ownership of a domain.
Let\u2019s Encrypt offers a program called <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> to make acquiring certificates as striaght forward as possible.</p>
<p>Assuming you have <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> installed, the following script will generate and configure the required certificates (notice the placeholders):</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOMAIN</span><span class="token operator">=</span>your-domain.com
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EMAIL</span><span class="token operator">=</span>your@email.here
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKDIR</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/letsencrypt

certbot certonly <span class="token punctuation"></span>
    --config-dir <span class="token variable">$WORKDIR</span>/config <span class="token punctuation"></span>
    --work-dir <span class="token variable">$WORKDIR</span>/work <span class="token punctuation"></span>
    --logs-dir <span class="token variable">$WORKDIR</span>/logs <span class="token punctuation"></span>
    --manual <span class="token punctuation"></span>
    --preferred-challenges<span class="token operator">=</span>dns <span class="token punctuation"></span>
    --email <span class="token variable">$EMAIL</span> <span class="token punctuation"></span>
    --server https://acme-v02.api.letsencrypt.org/directory <span class="token punctuation"></span>
    --agree-tos <span class="token punctuation"></span>
    -d *.ws.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d *.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d <span class="token variable">$DOMAIN</span>

<span class="token comment"># move them into place</span>
<span class="token function">mkdir</span> -p secrets/https-certificates
<span class="token function">find</span> <span class="token variable">$WORKDIR</span>/config/live -name <span class="token string">"*.pem"</span> -exec <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> secrets/https-certificates <span class="token punctuation"></span><span class="token punctuation">;</span></code>`}</pre>
<blockquote><p>Note: Do not refrain if <code>certbot</code> fails on first execution: Depending on the challenge used you might have to restart it <em>once</em>.</p></blockquote>`
  })}`;
});
var configureIngress$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Configure_ingress$1,
  metadata: metadata$16,
  prerender: prerender$16
});
const metadata$15 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Docker Registry"
};
const prerender$15 = true;
const Docker_registry$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$15), {}, {
    default: () => `<h1 id="${"docker-registry"}">Docker Registry<a href="${"#docker-registry"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.
To this end, Gitpod requires a container registry where it can push the images it builds.</p>
<p>By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li>Integrated docker registry: If not disabled, this docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.
The docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.</li>
<li>Own docker registry: Gitpod can connect to your own docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.</li></ul>
<p>This helm chart can either deploy its own registry (default but requires <a href="${"./configure-ingress"}">HTTPS certs</a>) or use an existing one.</p>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To connect to an existing Docker registry, perform the following steps:</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">components:
  imageBuilder:
    registryCerts: []
    registry:
      # name must not end with a &quot;/&quot;
      name: your.registry.com/gitpod
      secretName: image-builder-registry-secret
      path: secrets/registry-auth.json

  workspace:
    pullSecret:
      secretName: image-builder-registry-secret

docker-registry:
  enabled: false</code>`}</pre>
<p>Replace <code>your.registry.com/gitpod</code> with the domain your registry is available at.</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li>
<li><p>Login to the registry and safe the authentication</p>
<pre class="${"language-null"}">${`<code class="language-null">mkdir -p secrets
docker login your.registry.com/gitpod &amp;&amp; cp ~/.docker/config.json secrets/registry-auth.json</code>`}</pre>
<blockquote><p>This does not work for Google Cloud Registries because their login tokens are short-lived. See the <a href="${"#example-google-cloud-registry-credentials"}">example</a> below on how to configure it.</p></blockquote></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</p></li></ol>
<p>Make sure the resulting JSON file contains the credentials (there should be an <code>auths</code> section containing them as base64 encoded string).</p>
<p>If that\u2019s not the case you might have a credential store/helper set up (e.g. on macOS the <em>Securely store Docker logins in macOS keychain</em> setting).</p>
<h3 id="${"example-google-cloud-registry-credentials"}">Example Google Cloud Registry Credentials<a href="${"#example-google-cloud-registry-credentials"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Prerequisites:</p>
<ul><li><code>gcloud</code> <a href="${"https://cloud.google.com/sdk/docs/quickstart"}" rel="${"nofollow"}">installed</a> and <a href="${"https://cloud.google.com/sdk/gcloud/reference/auth/login"}" rel="${"nofollow"}">authenticated</a></li></ul>
<p>How to use Google Cloud Registry as Docker registry for Gitpod:</p>
<ol><li><p>Go to <a href="${"https://console.cloud.google.com/gcr/images/%3Cyour-project-id%3E?project=%3Cyour-project-id%3E"}" rel="${"nofollow"}">https://console.cloud.google.com/gcr/images/\\<your-project-id>?project=\\<your-project-id></your-project-id></your-project-id></a> and hit \u201CEnable Registry API\u201D (if not already enabled).</p></li>
<li><p>Execute the following commands:</p>
<pre class="${"language-null"}">${`<code class="language-null">export PROJECT_ID=&quot;&lt;your-project-id&gt;&quot;

gcloud iam service-accounts create gitpod-registry-full --project=$PROJECT_ID
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com

echo &quot;&#123;&quot;auths&quot;:&#123;&quot;gcr.io&quot;: &#123;&quot;auth&quot;: &quot;$(echo -n &quot;$(echo -n &quot;_json_key:&quot;; cat gitpod-registry-full-key.json)&quot; | base64 -w 0)&quot;&#125;&#125;&#125;&quot; &gt; secrets/registry-auth.json</code>`}</pre>
<p>This should result in a <code>secrets/registry-auth.json</code> like this:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"auths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"gcr.io"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"&lt;long-base64-string>"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<blockquote><p>If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.</p></blockquote></li></ol>`
  })}`;
});
var dockerRegistry$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_registry$1,
  metadata: metadata$15,
  prerender: prerender$15
});
const metadata$14 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Troubleshooting"
};
const prerender$14 = true;
const Troubleshooting$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$14), {}, {
    default: () => `<h1 id="${"troubleshooting"}">Troubleshooting<a href="${"#troubleshooting"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section should solve all errors that might come up during installation of Gitpod.</p>
<h2 id="${"1-ws-daemon-is-stuck-in-init-01"}">1. <code>ws-daemon</code> is stuck in <code>Init: 0/1</code><a href="${"#1-ws-daemon-is-stuck-in-init-01"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl describe pod ws-daemon-...</code> gives:
<code>MountVolume.SetUp failed for volume &quot;node-fs1&quot; : hostPath type check failed: /run/containerd/io.containerd.runtime.v1.linux/k8s.io is not a directory</code></p>
<h3 id="${"solution"}">Solution<a href="${"#solution"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li><p><code>ssh</code> onto the node, <code>mount | grep rootfs</code> and find the directory where your containers are stored. Common paths are:</p>
<ul><li><code>/run/containerd/io.containerd.runtime.v1.linux/k8s.io</code></li>
<li><code>/run/containerd/io.containerd.runtime.v1.linux/moby</code></li>
<li><code>/run/containerd/io.containerd.runtime.v2.task/k8s.io</code></li></ul></li>
<li><p><em>Merge</em> the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">components:
  wsDaemon:
    containerRuntime:
      nodeRoots:
      - &lt;your path here&gt;</code>`}</pre></li>
<li><p>Do an <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</p></li></ol>
<h2 id="${"2-helm-install-fails-with-minio-access-key-is-required-please-add-a-value-to-your-valuesyaml"}">2. <code>helm install</code> fails with: \u201Cminio access key is required, please add a value to your values.yaml\u201D<a href="${"#2-helm-install-fails-with-minio-access-key-is-required-please-add-a-value-to-your-valuesyaml"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Since <code>0.7.0</code> minio requires custom credentials to be configured.</p>
<h3 id="${"solution-1"}">Solution<a href="${"#solution-1"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li>Follow the <a href="${"./upgrade"}">Upgrade Guide</a>.</li></ol>
<h2 id="${"3-after-upgrade-the-minio-pod-is-stuck-in-containercreating"}">3. After upgrade, the <code>minio</code> Pod is stuck in <code>ContainerCreating</code><a href="${"#3-after-upgrade-the-minio-pod-is-stuck-in-containercreating"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This is caused by a bug in the minio Helm chart which blocks itself on updates.</p>
<h3 id="${"solution-2"}">Solution<a href="${"#solution-2"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li><p><code>kubectl scale deployments/minio --replicas=0</code></p></li>
<li><p><code>kubectl scale deployments/minio --replicas=1</code></p></li>
<li><p>Wait until the pod comes up.</p></li></ol>`
  })}`;
});
var troubleshooting$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Troubleshooting$2,
  metadata: metadata$14,
  prerender: prerender$14
});
const metadata$13 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Workspaces"
};
const prerender$13 = true;
const Workspaces$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$13), {}, {
    default: () => `<h1 id="${"workspaces"}">Workspaces<a href="${"#workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"sizing"}">Sizing<a href="${"#sizing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.
If you want to change the default sizing (~ 8GiB per workspace) you should</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token comment"># workspaceSizing configures the resources available to each workspace. These settings directly impact how</span>
<span class="token comment"># desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.</span>
<span class="token comment">#</span>
<span class="token comment"># Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which</span>
<span class="token comment"># results in a broken user experience.</span>
<span class="token key atrule">workspaceSizing</span><span class="token punctuation">:</span>
  <span class="token key atrule">requests</span><span class="token punctuation">:</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"1m"</span>
    <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"2.25Gi"</span>
    <span class="token key atrule">storage</span><span class="token punctuation">:</span> <span class="token string">"5Gi"</span>
  <span class="token key atrule">limits</span><span class="token punctuation">:</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"5"</span>
    <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"12Gi"</span>
  <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>
    <span class="token comment"># Gitpod supports dynamic CPU limiting. We express those limits in "buckets of CPU time" (jiffies where 1 jiffie is 1% of a vCPU).</span>
    <span class="token comment"># Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).</span>
    <span class="token comment">#</span>
    <span class="token comment"># For example:</span>
    <span class="token comment">#   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000</span>
    <span class="token comment">#   - budget: 90000</span>
    <span class="token comment">#     limit: 500</span>
    <span class="token comment">#   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000</span>
    <span class="token comment">#   - budget: 120000</span>
    <span class="token comment">#     limit: 400</span>
    <span class="token comment">#   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:</span>
    <span class="token comment">#   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000</span>
    <span class="token comment">#   - budget: 54000</span>
    <span class="token comment">#     limit: 200</span>
    <span class="token comment">#</span>
    <span class="token comment"># if there are no buckets configured, the dynamic CPU limiting is disabled.</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span>
      <span class="token key atrule">buckets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token key atrule">samplingPeriod</span><span class="token punctuation">:</span> <span class="token string">"10s"</span>
      <span class="token key atrule">controlPeriod</span><span class="token punctuation">:</span> <span class="token string">"15m"</span></code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</p></li></ol>`
  })}`;
});
var workspaces$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces$2,
  metadata: metadata$13,
  prerender: prerender$13
});
const metadata$12 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Database"
};
const prerender$12 = true;
const Database$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$12), {}, {
    default: () => `<h1 id="${"database"}">Database<a href="${"#database"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li><p>Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.
The database uses a Kubernetes PersistentVolume. We do not recommend using this option fo a production setting.</p></li>
<li><p>Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.</p></li></ul>
<p>This chart installs a MySQL database which gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a proper MySQL installation:</p>
<ol><li><p>Copy the DB init scripts into your local folder:</p>
<pre class="${"language-null"}">${`<code class="language-null">mkdir -p gpinstall
echo exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash
mkdir -p ./db-init
cp gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/
rm -Rf gpinstall</code>`}</pre></li>
<li><p>Initialize your MySQL database using the SQL files in <code>config/db/init/</code>. E.g. in a mysql session connected to your database server run:</p>
<pre class="${"language-null"}">${`<code class="language-null">SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, &#39;your-password-goes-here&#39;);
source db-init/00-testdb-user.sql;
source db-init/01-create-user.sql;
source db-init/02-create-and-init-sessions-db.sql;
source db-init/03-recreate-gitpod-db.sql;</code>`}</pre></li>
<li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">db</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> db
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>password<span class="token punctuation">-</span>goes<span class="token punctuation">-</span>here

<span class="token comment"># Disable built-in MySQL instance</span>
<span class="token key atrule">mysql</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</p></li></ol>`
  })}`;
});
var database$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Database$1,
  metadata: metadata$12,
  prerender: prerender$12
});
const metadata$11 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Workspace Storage"
};
const prerender$11 = true;
const Storage$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$11), {}, {
    default: () => `<h1 id="${"workspace-storage"}">Workspace Storage<a href="${"#workspace-storage"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to a separate bucket.</p>
<p>By default Gitpod installs <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> as built-in bucket storage which uses a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"}" rel="${"nofollow"}">persistent volume</a> to store workspace content.</p>
<p>For more complex use case we recommend configuring more permanent means of persistence by either:</p>
<ul><li>Configure the contained MinIO-instance to serve as a <a href="${"https://github.com/minio/minio/tree/master/docs/gateway"}" rel="${"nofollow"}">gateway</a> OR configure one of a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes"}" rel="${"nofollow"}">wide range of storage backends</a>.</li>
<li>Bring your own storage bucket: Configure Gitpod to either connect to:<ul><li>your own installation of MinIO</li>
<li>a Google Cloud Storage compatible storage solution</li></ul></li></ul>
<h2 id="${"a-configure-custom-minio-instance"}">a) Configure custom MinIO instance<a href="${"#a-configure-custom-minio-instance"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li><p>Create a file <code>values.custom.yaml</code> with this content:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">contentService</span><span class="token punctuation">:</span>
    <span class="token key atrule">remoteStorage</span><span class="token punctuation">:</span>
      <span class="token key atrule">kind</span><span class="token punctuation">:</span> minio
      <span class="token key atrule">minio</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>minio<span class="token punctuation">-</span>installation.somewhere<span class="token punctuation">-</span>else.com<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> enterKeyHere
        <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> superSecretKeyGoesHere
        <span class="token key atrule">tmpdir</span><span class="token punctuation">:</span> /tmp

<span class="token comment"># Disable built-in minio instance</span>
<span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre></li>
<li><p>Redeploy Gitpod using <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li></ol>
<h2 id="${"b-configure-the-built-in-minio-instance"}">b) Configure the built-in MinIO instance<a href="${"#b-configure-the-built-in-minio-instance"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li>Consult the chart\u2019s documentation at <a href="${"https://helm.min.io/"}" rel="${"nofollow"}">https://helm.min.io/</a></li>
<li>Create a file <code>values.custom.yaml</code> with this content:<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> add<span class="token punctuation">-</span>a<span class="token punctuation">-</span>radom<span class="token punctuation">-</span>access<span class="token punctuation">-</span>key<span class="token punctuation">-</span>here
  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> add<span class="token punctuation">-</span>a<span class="token punctuation">-</span>radom<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>key<span class="token punctuation">-</span>here
  <span class="token comment"># insert custom config here</span></code>`}</pre></li>
<li>Redeploy Gitpod using <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes</li></ol>`
  })}`;
});
var storage$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Storage$1,
  metadata: metadata$11,
  prerender: prerender$11
});
const metadata$10 = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Gitpod Self-Hosted Upgrade Notes"
};
const prerender$10 = true;
const Upgrade$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$10), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted-upgrade-notes"}">Gitpod Self-Hosted Upgrade Notes<a href="${"#gitpod-self-hosted-upgrade-notes"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"upgrading-gitpod-from-v060-to-v070"}">Upgrading Gitpod from v0.6.0 to v0.7.0<a href="${"#upgrading-gitpod-from-v060-to-v070"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With version 0.7.0 there are two major changes that require a user action. Both relate to the remote storage.</p>
<h3 id="${"built-in-minio-is-now-accessable-at-minioyour-gitpod-domaincom"}">Built-in MinIO is now accessable at minio.your-gitpod-domain.com<a href="${"#built-in-minio-is-now-accessable-at-minioyour-gitpod-domaincom"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>When you install Gitpod on your own Kubernetes installation, it brings a built-in MinIO object storage (unless disabled). As of v0.7.0, the built-in MinIO instance is accessable at <a href="${"https://minio.your-gitpod-domain.com."}" rel="${"nofollow"}">https://minio.your-gitpod-domain.com.</a> That\u2019s the reason that (for security reasons) we do not set a default access and secret key for the built-in MinIO installation anymore. That means, you need to add your own random keys in your values files like this:</p>
<pre class="${"language-null"}">${`<code class="language-null">minio:
  accessKey: add-a-radom-access-key-here
  secretKey: add-a-radom-secret-key-here</code>`}</pre>
<p>If you don\u2019t do this, <code>helm</code> will fail with the following message:</p>
<blockquote><p>minio access key is required, please add a value to your values.yaml</p></blockquote>
<h3 id="${"remote-storage-config-has-been-moved-to-a-new-component"}">Remote storage config has been moved to a new component<a href="${"#remote-storage-config-has-been-moved-to-a-new-component"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component <code>wsDaemon</code> to the new component <code>contentService</code>. See the <a href="${"./storage"}">Storage Guide</a> for an example.</p>`
  })}`;
});
var upgrade$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Upgrade$1,
  metadata: metadata$10,
  prerender: prerender$10
});
const metadata$$ = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Kubernetes Nodes"
};
const prerender$$ = true;
const Nodes$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$$), {}, {
    default: () => `<h1 id="${"kubernetes-nodes"}">Kubernetes Nodes<a href="${"#kubernetes-nodes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configure the nodes (computers or virtual machines) that Kubernetes runs Gitpod\u2019s workspace pods on.</p>
<h2 id="${"assign-workload-to-nodes"}">Assign workload to Nodes<a href="${"#assign-workload-to-nodes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as <em>meta</em>) and the workspaces. Ideally both types of workloads run on seperate nodes to make makes scaling easier.
Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:</p>
<ul><li><code>gitpod.io/workload_meta=true</code> which marks the \u201Cmeta\u201D nodes and</li>
<li><code>gitpod.io/workload_workspace=true </code> which marks the workspace nodes.</li></ul>
<p>If you want to \u201Cmix \u2018n match\u201D, i.e., don\u2019t separate the nodes, you can simply run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true</code>`}</pre>
<h2 id="${"node-filesystem-layout"}">Node Filesystem Layout<a href="${"#node-filesystem-layout"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod relies on the node\u2019s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in <code>/data</code> and Theia is copied to <code>/theia</code>. Depending on your node setup the root filesystem maybe <strong>read-only</strong> or <strong>slow</strong>.
We recommend you change those two paths so that they\u2019re located on an SSD or some other form of fast local storage.</p>
<p>To do this:</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">imageBuilder</span><span class="token punctuation">:</span>
    <span class="token comment"># The image builder deploys a Docker-in-Docker-daemon. By default that Docker daemon works in an empty-dir on the node.</span>
    <span class="token comment"># Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon</span>
    <span class="token comment"># fast storage on the node, e.g. an SSD.</span>
    <span class="token key atrule">hostDindData</span><span class="token punctuation">:</span> /mnt/disks/ssd0/docker
  <span class="token key atrule">wsDaemon</span><span class="token punctuation">:</span>
    <span class="token comment"># Workspace data is stored on the nodes. This setting configures where on the ndoe the workspace data lives.</span>
    <span class="token comment"># The faster this location is (in terms of IO) the faster workspaces will initialize.</span>
    <span class="token key atrule">hostWorkspaceArea</span><span class="token punctuation">:</span> /mnt/disks/ssd0/workspaces</code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li></ol>`
  })}`;
});
var nodes$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Nodes$1,
  metadata: metadata$$,
  prerender: prerender$$
});
const metadata$_ = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "How To integrate Gitpod with OAuth providers"
};
const prerender$_ = true;
const Oauth$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$_), {}, {
    default: () => `<h1 id="${"how-to-integrate-gitpod-with-oauth-providers"}">How To integrate Gitpod with OAuth providers<a href="${"#how-to-integrate-gitpod-with-oauth-providers"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod does not implement user authentication itself, but integrates with other auth provider using <a href="${"https://oauth.net/2/"}" rel="${"nofollow"}">OAuth2</a>.
Usually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at
the same time making sure every user has proper access to their Git repository.</p>
<p>Gitpod supports the following authentication providers:</p>
<ul><li>github.com</li>
<li>GitHub Enterprise in version 2.16.x and higher</li>
<li>gitlab.com</li>
<li>GitLab Community/Enterprise Edition in version 11.7.x and higher</li>
<li>Bitbucket.com</li></ul>
<p>On first access, a fresh Gitpod installation guides the first users to configure one or more OAuth providers.</p>
<p>Alternatively, you can configure it per Helm values file:</p>
<ol><li><p>Configure an OAuth app per instructions linked below (cmp. <a href="${"#GitHub"}">GitHub</a> or <a href="${"#GitLab"}">GitLab</a>) and copy the <code>clientId</code> and <code>clientSecret</code>.</p></li>
<li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">authProviders</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token string">"Public-GitHub"</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"github.com"</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"GitHub"</span>
    <span class="token key atrule">oauth</span><span class="token punctuation">:</span>
      <span class="token key atrule">clientId</span><span class="token punctuation">:</span> <span class="token string">"CLIENT_ID"</span>
      <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">"SECRET"</span>
      <span class="token key atrule">callBackUrl</span><span class="token punctuation">:</span> <span class="token string">"https://gitpod.io/auth/github/callback"</span>
      <span class="token key atrule">settingsUrl</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/settings/connections/applications/CLIENT_ID"</span>
    <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">""</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token string">"Public-GitLab"</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"gitlab.com"</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"GitLab"</span>
    <span class="token key atrule">oauth</span><span class="token punctuation">:</span>
      <span class="token key atrule">clientId</span><span class="token punctuation">:</span> <span class="token string">"CLIENT_ID"</span>
      <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">"SECRET"</span>
      <span class="token key atrule">callBackUrl</span><span class="token punctuation">:</span> <span class="token string">"https://gitpod.io/auth/gitlab/callback"</span>
      <span class="token key atrule">settingsUrl</span><span class="token punctuation">:</span> <span class="token string">"https://gitlab.com/profile/applications"</span>
    <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">""</span></code>`}</pre>
<p>Replace <code>CLIENT_ID</code> and <code>SECRET</code> with their respective values.</p></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.7.0</code> to apply the changes.</p></li></ol>
<h2 id="${"github"}">GitHub<a href="${"#github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitHub you need to create a <a href="${"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"}" rel="${"nofollow"}">GitHub OAuth App</a>.
Follow the guide linked above and:</p>
<ul><li><p>Set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/github/callback</your-domain.com></p></li>
<li><p>Copy <code>clientId</code> and <code>clientSecret</code></p></li></ul>
<h2 id="${"gitlab"}">GitLab<a href="${"#gitlab"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitLab you need to create an <a href="${"https://docs.gitlab.com/ee/integration/oauth_provider.html"}" rel="${"nofollow"}">GitLab OAuth application</a>.
Follow the guide linked above and:</p>
<ul><li><p>Set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback</gitlab.com-OR-your-gitlab.com></your-domain.com></p></li>
<li><p>Set \u201CScopes\u201D to <code>api</code>, <code>read_user</code> and <code>read_repository</code>.</p></li>
<li><p>Copy the following values:</p>
<ul><li><code>clientId</code> is the \u201CApplication ID\u201D from the GitLab OAuth appication</li>
<li><code>clientSecret</code> is the \u201CSecret\u201D from the GitLab OAuth appication</li></ul></li></ul>`
  })}`;
});
var oauth$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Oauth$1,
  metadata: metadata$_,
  prerender: prerender$_
});
const metadata$Z = {
  section: "self-hosted/0.7.0/self-hosted",
  title: "Administrate Gitpod Self-Hosted"
};
const prerender$Z = true;
const Admin$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$Z), {}, {
    default: () => `<h1 id="${"administrate-gitpod-self-hosted"}">Administrate Gitpod Self-Hosted<a href="${"#administrate-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we are working on the administration experience, there is already a lot you can do if you know where to look.</p>
<h2 id="${"download-a-backup-of-a-workspace"}">Download a backup of a workspace<a href="${"#download-a-backup-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Workpaces are stored as tar files in Minio or Google Storage buckets (depending on your configuration).
The tar files can be downloaded from there and unpacked locally.</p>
<h2 id="${"list-all-running-workspaces"}">List all running workspaces<a href="${"#list-all-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>SELECT</code>\u2026</p>
<p><code>kubectl get pods</code></p>
<h2 id="${"stop-a-running-workspace"}">Stop a running workspace<a href="${"#stop-a-running-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl delete pod</code></p>
<h2 id="${"connect-to-built-in-registry"}">Connect to built-in Registry<a href="${"#connect-to-built-in-registry"}"><span class="${"icon icon-link"}"></span></a></h2>`
  })}`;
});
var admin$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Admin$1,
  metadata: metadata$Z,
  prerender: prerender$Z
});
const metadata$Y = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Gitpod Self-Hosted"
};
const prerender$Y = true;
const Self_hosted = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$Y), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted"}">Gitpod Self-Hosted<a href="${"#gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod, just as you know it from <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>, can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can find all configuration templates and installation scripts in the Gitpod repository:</p>
<blockquote><p><a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">https://github.com/gitpod-io/gitpod</a></p></blockquote>
<h3 id="${"install-on-google-cloud-platform"}">Install on Google Cloud Platform<a href="${"#install-on-google-cloud-platform"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The easiest way to install Gitpod Self-Hosted is currently on Google Cloud Platform (that\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed). GCP is the recommended platform for most users:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-gcp-script"}">Install Gitpod on Google Cloud Platform</a></li></ul>
<h3 id="${"install-on-aws"}">Install on AWS<a href="${"#install-on-aws"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Alternatively, Gitpod comes with a setup for AWS that integrates with some AWS resource, like Load Balancers or S3 for storing workspace data:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-aws-script"}">Install Gitpod on AWS</a></li></ul>
<h3 id="${"install-on-any-kubernetes-cluster"}">Install on any Kubernetes cluster<a href="${"#install-on-any-kubernetes-cluster"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you already have a Kubernetes cluster, or don\u2019t want/cannot use AWS or GCP, please follow the generic guide:</p>
<ul><li><a href="${"/docs/self-hosted/latest/install/install-on-kubernetes"}">Install Gitpod on Kubernetes</a></li></ul>
<p>Note: Dedicated installation steps for Azure and OpenShift are on our roadmap.</p>`
  })}`;
});
var selfHosted = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Self_hosted,
  metadata: metadata$Y,
  prerender: prerender$Y
});
const metadata$X = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Getting started with Gitpod on AWS"
};
const prerender$X = true;
const Install_on_aws_script = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$X), {}, {
    default: () => `<blockquote><p>Since the <code>0.6.0</code> release (December 2019) the installers are deprecated. They are no longer working to their full extend and will be removed in a future release.</p></blockquote>
<h1 id="${"getting-started-with-gitpod-on-aws"}">Getting started with Gitpod on AWS<a href="${"#getting-started-with-gitpod-on-aws"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This guide explains how to install an instance of Gitpod with 3 simple steps:</p>
<h2 id="${"1-get-your-aws-credentials"}">1. Get your AWS credentials<a href="${"#1-get-your-aws-credentials"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You need an <a href="${"https://aws.amazon.com/"}" rel="${"nofollow"}">AWS account</a>. Once you have access to an account, follow <a href="${"https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html"}" rel="${"nofollow"}">these steps</a> to obtain valid credentials.</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_ACCESS_KEY_ID</span><span class="token operator">=</span><span class="token punctuation">..</span>.
<span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_SECRET_ACCESS_KEY</span><span class="token operator">=</span><span class="token punctuation">..</span>.</code>`}</pre>
<h3 id="${"note"}">Note:<a href="${"#note"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Setting up an AWS account the first time can take some time as they require - and test for - a valid credit card.</li></ul>
<h2 id="${"2-run-the-installer-image"}">2. Run the installer image<a href="${"#2-run-the-installer-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$PWD</span>/awsinstall
docker run --rm -it <span class="token punctuation"></span>
    -e AWS_ACCESS_KEY_ID <span class="token punctuation"></span>
    -e AWS_SECRET_ACCESS_KEY <span class="token punctuation"></span>
    -v <span class="token string">"<span class="token environment constant">$PWD</span>/awsinstall"</span><span class="token builtin class-name">:</span><span class="token string">"/workspace"</span> <span class="token punctuation"></span>
    gcr.io/gitpod-io/self-hosted/installer:0.8.0 aws</code>`}</pre>
<p>This will kickstart the installation process, authenticate with AWS and automatically set up your Gitpod deployment using Docker and Terraform.</p>
<h3 id="${"note-1"}">Note:<a href="${"#note-1"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>This guide assumes you have the <a href="${"https://docs.docker.com/engine/install/"}" rel="${"nofollow"}">docker</a> installed.</p></li>
<li><p>The final step - creating the cluster - might take around 30 minutes on AWS. Good time to grab a cup of coffee!</p></li></ul>
<h2 id="${"3-launch-the-first-workspace"}">3. Launch the first workspace<a href="${"#3-launch-the-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once finished, the installer will print the URL at which your Gitpod installation can be found. There you need to connect Gitpod to at least one Git provider:</p>
<ul><li><a href="${"/docs/gitlab-integration#oauth-application"}">Configure an OAuth application for GitLab</a></li>
<li><a href="${"/docs/github-integration#oauth-application"}">Configure an OAuth application for GitHub</a></li></ul>
<h2 id="${"4-configure-the-browser-extension"}">4. Configure the Browser extension<a href="${"#4-configure-the-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Afterwards you can jump right into your first workspace, by prefixing the repository URL with your Gitpod Self-Hosted URL.</p>
<p>Examples:</p>
<ul><li>GitLab: <code>&lt;your-installation-url&gt;/#https://gitlab.com/gitpod/spring-petclinic</code></li>
<li>GitHub: <code>&lt;your-installation-url&gt;/#https://github.com/gitpod-io/spring-petclinic</code></li></ul>
<h3 id="${"note-2"}">Note:<a href="${"#note-2"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>The local mount point <code>./awsinstall</code> will hold your Terraform config files. You can always modify them and re-run the install script in order to make changes to your Gitpod deployment.</p></li>
<li><p>The first workspace start might take a up to 10 minutes because it needs to pull several docker images and initialize the registry.</p></li></ul>
<h2 id="${"faq"}">FAQ<a href="${"#faq"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"q-i-get-optinrequired-you-are-not-subscribed-to-this-service-please-go-to-httpawsamazoncom-to-subscribe"}">Q: I get \u201COptInRequired: You are not subscribed to this service. Please go to <a href="${"http://aws.amazon.com"}" rel="${"nofollow"}">http://aws.amazon.com</a> to subscribe.\u201D<a href="${"#q-i-get-optinrequired-you-are-not-subscribed-to-this-service-please-go-to-httpawsamazoncom-to-subscribe"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Your account seems to be missing a credit card. Go to <a href="${"https://portal.aws.amazon.com/billing/signup?type=resubscribe#/resubscribed"}" rel="${"nofollow"}">https://portal.aws.amazon.com/billing/signup?type=resubscribe#/resubscribed</a> and finish the subscription process.</p>
<h3 id="${"q-i-get-status-reason-the-requested-configuration-is-currently-not-supported"}">Q: I get \u201CStatus Reason: The requested configuration is currently not supported\u201D<a href="${"#q-i-get-status-reason-the-requested-configuration-is-currently-not-supported"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Switch to another <a href="${"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html"}" rel="${"nofollow"}">AWS region</a> often helps. Some machine types/configurations are not available in all regions.</p>
<h3 id="${"q-i-get-error-service-proxy-is-invalid-specports0nodeport-invalid-value-31080-provided-port-is-already-allocated-on-re-applying-the-terraform-script"}">Q: I get \u201CError: Service \u201Cproxy\u201D is invalid: spec.ports[0].nodePort: Invalid value: 31080: provided port is already allocated\u201D on re-applying the terraform script<a href="${"#q-i-get-error-service-proxy-is-invalid-specports0nodeport-invalid-value-31080-provided-port-is-already-allocated-on-re-applying-the-terraform-script"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: This is a kubernetes issue on AWS. Please wait for 2-5 minutes and retry (cmp. Kubernetes issues <a href="${"https://github.com/kubernetes/kubernetes/issues/32987"}" rel="${"nofollow"}">32987</a> and <a href="${"https://github.com/kubernetes/kubernetes/issues/73140"}" rel="${"nofollow"}">73140</a>).</p>
<h3 id="${"q-one-of-my-pods-throws-errors-reading-networkplugin-cni-failed-to-set-up-pod-lt-name-gt-network-add-cmd-failed-to-assign-an-ip-address-to-container"}">Q: One of my pods throws errors reading \u201CnetworkPlugin cni failed to set up pod \u201D<code>&lt; name &gt;</code>\u201D network: add cmd: failed to assign an IP address to container\u201D<a href="${"#q-one-of-my-pods-throws-errors-reading-networkplugin-cni-failed-to-set-up-pod-lt-name-gt-network-add-cmd-failed-to-assign-an-ip-address-to-container"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A: Seems like the pod-per-node limit is reached: <a href="${"https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt"}" rel="${"nofollow"}">https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt</a> . Please report this as this as a bug <a href="${"https://github.com/gitpod-io/gitpod/issues"}" rel="${"nofollow"}">here</a>.</p>`
  })}`;
});
var installOnAwsScript = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_aws_script,
  metadata: metadata$X,
  prerender: prerender$X
});
const metadata$W = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Getting started with Gitpod on GCP"
};
const prerender$W = true;
const Install_on_gcp_script = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$W), {}, {
    default: () => `<blockquote><p>Since the <code>0.6.0</code> release (December 2019) the installers are deprecated. They are no longer working to their full extend and will be removed in a future release.</p></blockquote>
<h1 id="${"getting-started-with-gitpod-on-gcp"}">Getting started with Gitpod on GCP<a href="${"#getting-started-with-gitpod-on-gcp"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod runs best on Google Cloud Platform. That\u2019s also where <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a> is deployed and operated at scale.
This guide explains how to install an instance of Gitpod with 4 simple steps:</p>
<h2 id="${"1-get-a-gcp-project"}">1. Get a GCP project<a href="${"#1-get-a-gcp-project"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You need a fresh <a href="${"https://cloud.google.com/resource-manager/docs/creating-managing-projects"}" rel="${"nofollow"}">Google Cloud project</a>, for which you can also use the <a href="${"https://console.cloud.google.com/freetrial"}" rel="${"nofollow"}">Google Cloud Platform trial</a> with $300 worth of resources.</p>
<p>Once you have the project, keep its project ID handy.</p>
<h2 id="${"2-run-the-installer-image"}">2. Run the installer image<a href="${"#2-run-the-installer-image"}"><span class="${"icon icon-link"}"></span></a></h2>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$PWD</span>/gpinstall
docker run --rm -it <span class="token punctuation"></span>
    -v <span class="token environment constant">$PWD</span>/gcloud:/root/.config/gcloud <span class="token punctuation"></span>
    -v <span class="token environment constant">$PWD</span>/gpinstall:/workspace <span class="token punctuation"></span>
    gcr.io/gitpod-io/self-hosted/installer:0.8.0 <span class="token punctuation"></span>
    gcp</code>`}</pre>
<p>This will kickstart the installation process, log in with Google Cloud, and automatically set up your Gitpod deployment using <a href="${"https://www.terraform.io"}" rel="${"nofollow"}">Terraform</a> and <a href="${"https://helm.sh"}" rel="${"nofollow"}">Helm</a>.</p>
<h3 id="${"note"}">Note:<a href="${"#note"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>This guide assumes you have the <a href="${"https://docs.docker.com/engine/install/"}" rel="${"nofollow"}">docker</a> installed.</p></li>
<li><p>The local mount point <code>$PWD/gpinstall</code> will hold your Terraform config files. You can always modify them and re-run the install script in order to make changes to your Gitpod deployment.</p></li>
<li><p>The local mount point <code>$PWD/gcloud</code> will cache your Google Cloud credentials. It is safe to delete this folder if you don\u2019t wish to leave any tokens behind.</p></li></ul>
<p>Once the installation process is complete, the script will print the URL at which your Gitpod installation can be accessed.</p>
<h2 id="${"3-launch-the-first-workspace"}">3. Launch the first workspace<a href="${"#3-launch-the-first-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once finished, the installer will print the URL at which your Gitpod installation can be found. There you need to connect Gitpod to at least one Git provider:</p>
<ul><li><a href="${"/docs/gitlab-integration#oauth-application"}">Configure an OAuth application for GitLab</a></li>
<li><a href="${"/docs/github-integration#oauth-application"}">Configure an OAuth application for GitHub</a></li></ul>
<h2 id="${"4-configure-the-browser-extension"}">4. Configure the Browser extension<a href="${"#4-configure-the-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Afterwards you can jump right into your first workspace, by prefixing the repository URL with your Gitpod Self-Hosted URL.</p>
<p>Examples:</p>
<ul><li>GitLab: <code>&lt;your-installation-url&gt;/#https://gitlab.com/gitpod/spring-petclinic</code></li>
<li>GitHub: <code>&lt;your-installation-url&gt;/#https://github.com/gitpod-io/spring-petclinic</code></li></ul>
<h1 id="${"going-further"}">Going further<a href="${"#going-further"}"><span class="${"icon icon-link"}"></span></a></h1>
<ul><li>Configuring a <a href="${"./docker-registry"}">custom Docker registry</a></li>
<li>Configuring a <a href="${"./storage"}">storage backend</a></li>
<li>Configuring <a href="${"./workspaces"}">workspace sizes</a></li></ul>`
  })}`;
});
var installOnGcpScript = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_gcp_script,
  metadata: metadata$W,
  prerender: prerender$W
});
const metadata$V = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Install Gitpod Self-Hosted on Kubernetes"
};
const prerender$V = true;
const Install_on_kubernetes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$V), {}, {
    default: () => `<h1 id="${"install-gitpod-self-hosted-on-kubernetes"}">Install Gitpod Self-Hosted on Kubernetes<a href="${"#install-gitpod-self-hosted-on-kubernetes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section describes how to install Gitpod on any Kubernetes cluster using <a href="${"https://helm.sh"}" rel="${"nofollow"}">Helm</a>. This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository <a href="${"https://charts.gitpod.io"}" rel="${"nofollow"}">charts.gitpod.io</a>, charts for branch-builds can be found <a href="${"#install-branch-build"}">here</a>, and the source of the charts is in our <a href="${"https://github.com/gitpod-io/gitpod/blob/master/chart/"}" rel="${"nofollow"}">public git repository</a>.</p>
<p>For some cloud providers, we offer <a href="${"https://www.terraform.io/"}" rel="${"nofollow"}">Terraform</a> scripts packaged into an installer. The installer aims to use the managed services from your cloud provider (Kubernetes Cluster, database, storage, image registry) rather than installing them along with the chart. Also, the script configures the cluster for best performance and cost-efficiency. We recommend using the installer if your cloud provider is supported. Once the installer has created the cluster, it will pre-configure and install this Gitpod helm chart into it.</p>
<ul><li><a href="${"./install-on-gcp-script"}">Installer for Google Cloud Platform (GCP)</a>.</li>
<li><a href="${"./install-on-aws-script"}">Installer for Amazon Web Services (AWS)</a>.</li></ul>
<h2 id="${"prerequisites"}">Prerequisites<a href="${"#prerequisites"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><p>A Kubernetes cluster in version <code>1.15 &lt;= x &lt;= 1.17</code>.</p></li>
<li><p>local <code>kubectl</code> with connection to your cluster</p></li>
<li><p>local <code>helm</code> in version &gt;= 3.</p></li></ul>
<p>Gitpod should work on small Kubernetes nodes out of the box (2vCPUs, 8GB RAM). For a better experience we recommend at least 4vCPUs and 16GB RAM for workspaces nodes. For cost efficiency, we recommend to enable cluster-autoscaling.</p>
<h2 id="${"installation"}">Installation<a href="${"#installation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install Gitpod in your Kubernetes cluster, follow these steps:</p>
<ol><li><p>Create a file <code>values.custom.yaml</code> with the following content:</p>
<pre class="${"language-null"}">${`<code class="language-null">minio:
  accessKey: your-random-access-key
  secretKey: your-random-secret-key</code>`}</pre>
<p>You should replace the keys with 2 different random strings unique for your installation.</p></li>
<li><p>Run the following commands in your local terminal:</p>
<pre class="${"language-console"}">${`<code class="language-console">helm repo add gitpod.io https://charts.gitpod.io

helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code>`}</pre></li>
<li><p>Configure <a href="${"./configure-ingress"}">domain and https</a>.</p></li>
<li><p>Run <code>kubectl get pods</code> and verify that all pods are in state <code>RUNNING</code>. If some are not, please see the <a href="${"./troubleshooting"}">Troubleshooting Guide</a>.</p></li>
<li><p>Go to <a href="${"https://%3Cyour-domain.com%3E"}" rel="${"nofollow"}">https://\\<your-domain.com></your-domain.com></a> and follow the steps to complete the installation.</p></li></ol>
<h2 id="${"upgrade"}">Upgrade<a href="${"#upgrade"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li><p>Check the <a href="${"./upgrade"}">Upgrade Guide</a> and follow the steps outlined there.</p></li>
<li><p>Run the update</p>
<pre class="${"language-console"}">${`<code class="language-console">helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code>`}</pre></li>
<li><p>Run <code>kubectl get pods</code> and verify that all pods are in state <code>RUNNING</code>. If some are not, please see the <a href="${"./troubleshooting"}">Troubleshooting Guide</a>.</p></li></ol>
<h2 id="${"recommended-configuration"}">Recommended Configuration<a href="${"#recommended-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use and/or a bigger audience:</p>
<ul><li><a href="${"./database"}"><strong>Database</strong></a>: Configure where Gitpod stores all internal runtime data.</li>
<li><a href="${"./storage"}"><strong>Storage</strong></a>: Configure where Gitpod persists workspace content.</li>
<li><a href="${"./docker-registry"}"><strong>Docker Registry</strong></a>: Configure where Gitpod stores workspace images.</li></ul>
<h2 id="${"customization"}">Customization<a href="${"#customization"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Further customizations:</p>
<ul><li><a href="${"./nodes"}"><strong>Kubernetes Nodes</strong></a>: Configure file system layout and the workspace\u2019s node associativity.</li>
<li><a href="${"./workspaces"}"><strong>Workspaces</strong></a>: Configure workspace sizing.</li></ul>
<h2 id="${"install-branch-build"}">Install Branch Build<a href="${"#install-branch-build"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To try the latest version of Gitpod, freshly build form the <code>master</code> branch of our git repository or any other branch, follow these steps:</p>
<ol><li><p>Obtain the version name from <a href="${"https://werft.gitpod-dev.com"}" rel="${"nofollow"}">werft.gitpod-dev.com</a>. The version has the format <code>&lt;branchname&gt;.&lt;buildnumber&gt;</code> (e.g <code>master.354</code>).</p></li>
<li><p>The Helm chart ships as part of our <code>installer</code> docker image. You can extract it by running:</p>
<pre class="${"language-console"}">${`<code class="language-console">docker run --entrypoint cp -v $PWD:/workspace gcr.io/gitpod-io/self-hosted/installer:&lt;version&gt; -R /dist/helm/ /workspace</code>`}</pre></li></ol>`
  })}`;
});
var installOnKubernetes = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Install_on_kubernetes,
  metadata: metadata$V,
  prerender: prerender$V
});
const metadata$U = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Configure Ingress to your Gitpod installation"
};
const prerender$U = true;
const Configure_ingress = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$U), {}, {
    default: () => `<h1 id="${"configure-ingress-to-your-gitpod-installation"}">Configure Ingress to your Gitpod installation<a href="${"#configure-ingress-to-your-gitpod-installation"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configuring ingress into your Gitpod installation requires two things:</p>
<ul><li>three DNS entries pointing at the IP of Gitpod\u2019s proxy service, and</li>
<li>HTTPS certificates.</li></ul>
<h2 id="${"1-dns-entries"}">1. DNS Entries<a href="${"#1-dns-entries"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. <code>your-domain.com</code>).
As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.
For example:</p>
<p>your-domain.com
<em>.your-domain.com
</em>.ws.your-domain.com</p>
<p>Installing Gitpod on a subdomain works as well. For example:</p>
<p>gitpod.your-domain.com
<em>.gitpod.your-domain.com
</em>.ws.gitpod.your-domain.com</p>
<ol><li><p>Setup <code>A</code> records for all three (sub)domains. To learn your installation\u2019s IP run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl describe svc proxy | grep -i ingress</code>`}</pre></li>
<li><p>Create a file <code>values.custom.yaml</code> with the following content:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">hostname</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>domain.com</code>`}</pre></li></ol>
<h2 id="${"2-https"}">2. HTTPS<a href="${"#2-https"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod requires HTTPS certificates to function properly. We recommend using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> for retrieving certificates as we do for <a href="${"https://gitpod.io"}" rel="${"nofollow"}">gitpod.io</a>.</p>
<blockquote><p>Important: The HTTPS certificates for your domain must include <code>your-domain.com</code>, <code>*.your-domain.com</code> and <code>*.ws.your-domain.com</code>. Beware that wildcard certificates are valid for one level only (i.e. <code>*.a.com</code> is not valid for <code>c.b.a.com</code>).</p></blockquote>
<p>To configure the HTTPS certificates for your domain</p>
<ol><li><a href="${"#using-lets-encrypt-to-generate-https-certificates"}">Generate certificates</a> and put your certificate files under <code>secrets/https-certificates/</code>:<pre class="${"language-null"}">${`<code class="language-null">secrets/https-certificates:
  |- cert.pem
  |- chain.pem
  |- fullchain.pem
  |- privkey.pem</code>`}</pre></li>
<li>Generate the <a href="${"https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"}" rel="${"nofollow"}">dhparams.pem</a> file using:<pre class="${"language-bash"}">${`<code class="language-bash">openssl dhparam -out secrets/https-certificates/dhparams.pem <span class="token number">2048</span></code>`}</pre></li>
<li>Create a kubernetes secret using:<pre class="${"language-bash"}">${`<code class="language-bash">kubectl create secret generic https-certificates --from-file<span class="token operator">=</span>secrets/https-certificates</code>`}</pre></li>
<li>Afterwards, do an <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</li></ol>
<h3 id="${"using-lets-encrypt-to-generate-https-certificates"}">Using Let\u2019s Encrypt to generate HTTPS certificates<a href="${"#using-lets-encrypt-to-generate-https-certificates"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The most accessible means of obtaining HTTPS certificates is using <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a>. It provides free certificates to anybody who can prove ownership of a domain.
Let\u2019s Encrypt offers a program called <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> to make acquiring certificates as striaght forward as possible.</p>
<p>Assuming you have <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">certbot</a> installed, the following script will generate and configure the required certificates (notice the placeholders):</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOMAIN</span><span class="token operator">=</span>your-domain.com
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EMAIL</span><span class="token operator">=</span>your@email.here
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKDIR</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/letsencrypt

certbot certonly <span class="token punctuation"></span>
    --config-dir <span class="token variable">$WORKDIR</span>/config <span class="token punctuation"></span>
    --work-dir <span class="token variable">$WORKDIR</span>/work <span class="token punctuation"></span>
    --logs-dir <span class="token variable">$WORKDIR</span>/logs <span class="token punctuation"></span>
    --manual <span class="token punctuation"></span>
    --preferred-challenges<span class="token operator">=</span>dns <span class="token punctuation"></span>
    --email <span class="token variable">$EMAIL</span> <span class="token punctuation"></span>
    --server https://acme-v02.api.letsencrypt.org/directory <span class="token punctuation"></span>
    --agree-tos <span class="token punctuation"></span>
    -d *.ws.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d *.<span class="token variable">$DOMAIN</span> <span class="token punctuation"></span>
    -d <span class="token variable">$DOMAIN</span>

<span class="token comment"># move them into place</span>
<span class="token function">mkdir</span> -p secrets/https-certificates
<span class="token function">find</span> <span class="token variable">$WORKDIR</span>/config/live -name <span class="token string">"*.pem"</span> -exec <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> secrets/https-certificates <span class="token punctuation"></span><span class="token punctuation">;</span></code>`}</pre>
<blockquote><p>Note: Do not refrain if <code>certbot</code> fails on first execution: Depending on the challenge used you might have to restart it <em>once</em>.</p></blockquote>`
  })}`;
});
var configureIngress = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Configure_ingress,
  metadata: metadata$U,
  prerender: prerender$U
});
const metadata$T = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Docker Registry"
};
const prerender$T = true;
const Docker_registry = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$T), {}, {
    default: () => `<h1 id="${"docker-registry"}">Docker Registry<a href="${"#docker-registry"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.
To this end, Gitpod requires a container registry where it can push the images it builds.</p>
<p>By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li>Integrated docker registry: If not disabled, this docker registry is installed in a Kubernetes Pod as a dependency of Gitpod\u2019s Helm chart.
The docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.</li>
<li>Own docker registry: Gitpod can connect to your own docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.</li></ul>
<p>This helm chart can either deploy its own registry (default but requires <a href="${"./configure-ingress"}">HTTPS certs</a>) or use an existing one.</p>
<h2 id="${"configuration"}">Configuration<a href="${"#configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To connect to an existing Docker registry, perform the following steps:</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">components:
  imageBuilder:
    registryCerts: []
    registry:
      # name must not end with a &quot;/&quot;
      name: your.registry.com/gitpod
      secretName: image-builder-registry-secret
      path: secrets/registry-auth.json

  workspace:
    pullSecret:
      secretName: image-builder-registry-secret

docker-registry:
  enabled: false</code>`}</pre>
<p>Replace <code>your.registry.com/gitpod</code> with the domain your registry is available at.</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li>
<li><p>Login to the registry and safe the authentication</p>
<pre class="${"language-null"}">${`<code class="language-null">mkdir -p secrets
docker login your.registry.com/gitpod &amp;&amp; cp ~/.docker/config.json secrets/registry-auth.json</code>`}</pre>
<blockquote><p>This does not work for Google Cloud Registries because their login tokens are short-lived. See the <a href="${"#example-google-cloud-registry-credentials"}">example</a> below on how to configure it.</p></blockquote></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</p></li></ol>
<p>Make sure the resulting JSON file contains the credentials (there should be an <code>auths</code> section containing them as base64 encoded string).</p>
<p>If that\u2019s not the case you might have a credential store/helper set up (e.g. on macOS the <em>Securely store Docker logins in macOS keychain</em> setting).</p>
<h3 id="${"example-google-cloud-registry-credentials"}">Example Google Cloud Registry Credentials<a href="${"#example-google-cloud-registry-credentials"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Prerequisites:</p>
<ul><li><code>gcloud</code> <a href="${"https://cloud.google.com/sdk/docs/quickstart"}" rel="${"nofollow"}">installed</a> and <a href="${"https://cloud.google.com/sdk/gcloud/reference/auth/login"}" rel="${"nofollow"}">authenticated</a></li></ul>
<p>How to use Google Cloud Registry as Docker registry for Gitpod:</p>
<ol><li><p>Go to <a href="${"https://console.cloud.google.com/gcr/images/%3Cyour-project-id%3E?project=%3Cyour-project-id%3E"}" rel="${"nofollow"}">https://console.cloud.google.com/gcr/images/\\<your-project-id>?project=\\<your-project-id></your-project-id></your-project-id></a> and hit \u201CEnable Registry API\u201D (if not already enabled).</p></li>
<li><p>Execute the following commands:</p>
<pre class="${"language-null"}">${`<code class="language-null">export PROJECT_ID=&quot;&lt;your-project-id&gt;&quot;

gcloud iam service-accounts create gitpod-registry-full --project=$PROJECT_ID
gcloud projects add-iam-policy-binding $PROJECT_ID --member=&quot;serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com&quot; --role=roles/storage.admin
gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com

echo &quot;&#123;&quot;auths&quot;:&#123;&quot;gcr.io&quot;: &#123;&quot;auth&quot;: &quot;$(echo -n &quot;$(echo -n &quot;_json_key:&quot;; cat gitpod-registry-full-key.json)&quot; | base64 -w 0)&quot;&#125;&#125;&#125;&quot; &gt; secrets/registry-auth.json</code>`}</pre>
<p>This should result in a <code>secrets/registry-auth.json</code> like this:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"auths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"gcr.io"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"&lt;long-base64-string>"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<blockquote><p>If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.</p></blockquote></li></ol>`
  })}`;
});
var dockerRegistry = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Docker_registry,
  metadata: metadata$T,
  prerender: prerender$T
});
const metadata$S = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Troubleshooting"
};
const prerender$S = true;
const Troubleshooting$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$S), {}, {
    default: () => `<h1 id="${"troubleshooting"}">Troubleshooting<a href="${"#troubleshooting"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This section should solve all errors that might come up during installation of Gitpod.</p>
<h2 id="${"1-ws-daemon-is-stuck-in-init-01"}">1. <code>ws-daemon</code> is stuck in <code>Init: 0/1</code><a href="${"#1-ws-daemon-is-stuck-in-init-01"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl describe pod ws-daemon-...</code> gives:
<code>MountVolume.SetUp failed for volume &quot;node-fs1&quot; : hostPath type check failed: /run/containerd/io.containerd.runtime.v1.linux/k8s.io is not a directory</code></p>
<h3 id="${"solution"}">Solution<a href="${"#solution"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li><p><code>ssh</code> onto the node, <code>mount | grep rootfs</code> and find the directory where your containers are stored. Common paths are:</p>
<ul><li><code>/run/containerd/io.containerd.runtime.v1.linux/k8s.io</code></li>
<li><code>/run/containerd/io.containerd.runtime.v1.linux/moby</code></li>
<li><code>/run/containerd/io.containerd.runtime.v2.task/k8s.io</code></li></ul></li>
<li><p><em>Merge</em> the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">components:
  wsDaemon:
    containerRuntime:
      nodeRoots:
      - &lt;your path here&gt;</code>`}</pre></li>
<li><p>Do an <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</p></li></ol>
<h2 id="${"2-helm-install-fails-with-minio-access-key-is-required-please-add-a-value-to-your-valuesyaml"}">2. <code>helm install</code> fails with: \u201Cminio access key is required, please add a value to your values.yaml\u201D<a href="${"#2-helm-install-fails-with-minio-access-key-is-required-please-add-a-value-to-your-valuesyaml"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Since <code>0.7.0</code> minio requires custom credentials to be configured.</p>
<h3 id="${"solution-1"}">Solution<a href="${"#solution-1"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li>Follow the <a href="${"./upgrade"}">Upgrade Guide</a>.</li></ol>
<h2 id="${"3-after-upgrade-the-minio-pod-is-stuck-in-containercreating"}">3. After upgrade, the <code>minio</code> Pod is stuck in <code>ContainerCreating</code><a href="${"#3-after-upgrade-the-minio-pod-is-stuck-in-containercreating"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This is caused by a bug in the minio Helm chart which blocks itself on updates.</p>
<h3 id="${"solution-2"}">Solution<a href="${"#solution-2"}"><span class="${"icon icon-link"}"></span></a></h3>
<ol><li><p><code>kubectl scale deployments/minio --replicas=0</code></p></li>
<li><p><code>kubectl scale deployments/minio --replicas=1</code></p></li>
<li><p>Wait until the pod comes up.</p></li></ol>`
  })}`;
});
var troubleshooting$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Troubleshooting$1,
  metadata: metadata$S,
  prerender: prerender$S
});
const metadata$R = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Workspaces"
};
const prerender$R = true;
const Workspaces$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$R), {}, {
    default: () => `<h1 id="${"workspaces"}">Workspaces<a href="${"#workspaces"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"sizing"}">Sizing<a href="${"#sizing"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.
If you want to change the default sizing (~ 8GiB per workspace) you should</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token comment"># workspaceSizing configures the resources available to each workspace. These settings directly impact how</span>
<span class="token comment"># desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.</span>
<span class="token comment">#</span>
<span class="token comment"># Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which</span>
<span class="token comment"># results in a broken user experience.</span>
<span class="token key atrule">workspaceSizing</span><span class="token punctuation">:</span>
  <span class="token key atrule">requests</span><span class="token punctuation">:</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"1m"</span>
    <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"2.25Gi"</span>
    <span class="token key atrule">storage</span><span class="token punctuation">:</span> <span class="token string">"5Gi"</span>
  <span class="token key atrule">limits</span><span class="token punctuation">:</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"5"</span>
    <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"12Gi"</span>
  <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>
    <span class="token comment"># Gitpod supports dynamic CPU limiting. We express those limits in "buckets of CPU time" (jiffies where 1 jiffie is 1% of a vCPU).</span>
    <span class="token comment"># Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).</span>
    <span class="token comment">#</span>
    <span class="token comment"># For example:</span>
    <span class="token comment">#   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000</span>
    <span class="token comment">#   - budget: 90000</span>
    <span class="token comment">#     limit: 500</span>
    <span class="token comment">#   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000</span>
    <span class="token comment">#   - budget: 120000</span>
    <span class="token comment">#     limit: 400</span>
    <span class="token comment">#   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:</span>
    <span class="token comment">#   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000</span>
    <span class="token comment">#   - budget: 54000</span>
    <span class="token comment">#     limit: 200</span>
    <span class="token comment">#</span>
    <span class="token comment"># if there are no buckets configured, the dynamic CPU limiting is disabled.</span>
    <span class="token key atrule">cpu</span><span class="token punctuation">:</span>
      <span class="token key atrule">buckets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token key atrule">samplingPeriod</span><span class="token punctuation">:</span> <span class="token string">"10s"</span>
      <span class="token key atrule">controlPeriod</span><span class="token punctuation">:</span> <span class="token string">"15m"</span></code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</p></li></ol>`
  })}`;
});
var workspaces$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces$1,
  metadata: metadata$R,
  prerender: prerender$R
});
const metadata$Q = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Database"
};
const prerender$Q = true;
const Database = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$Q), {}, {
    default: () => `<h1 id="${"database"}">Database<a href="${"#database"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we\u2019d recommend in a production setting) you can use that one. You have the following options:</p>
<ul><li><p>Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod\u2019s Helm chart.
The database uses a Kubernetes PersistentVolume. We do not recommend using this option for a production setting.</p></li>
<li><p>Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.</p></li></ul>
<p>This chart installs a MySQL database that gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a proper MySQL installation:</p>
<ol><li><p>Copy the DB init scripts into your local folder:</p>
<pre class="${"language-null"}">${`<code class="language-null">mkdir -p gpinstall
echo exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash
mkdir -p ./db-init
cp gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/
rm -Rf gpinstall</code>`}</pre></li>
<li><p>Initialize your MySQL database using the SQL files in <code>config/db/init/</code>. E.g. in a mysql session connected to your database server run:</p>
<pre class="${"language-null"}">${`<code class="language-null">SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, &#39;your-password-goes-here&#39;);
source db-init/00-testdb-user.sql;
source db-init/01-create-user.sql;
source db-init/02-create-and-init-sessions-db.sql;
source db-init/03-recreate-gitpod-db.sql;</code>`}</pre></li>
<li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">db</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> db
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>password<span class="token punctuation">-</span>goes<span class="token punctuation">-</span>here

<span class="token comment"># Disable built-in MySQL instance</span>
<span class="token key atrule">mysql</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</p></li></ol>`
  })}`;
});
var database = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Database,
  metadata: metadata$Q,
  prerender: prerender$Q
});
const metadata$P = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Workspace Storage"
};
const prerender$P = true;
const Storage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$P), {}, {
    default: () => `<h1 id="${"workspace-storage"}">Workspace Storage<a href="${"#workspace-storage"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to a separate bucket.</p>
<p>By default Gitpod installs <a href="${"https://min.io/"}" rel="${"nofollow"}">MinIO</a> as built-in bucket storage which uses a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"}" rel="${"nofollow"}">persistent volume</a> to store workspace content.</p>
<p>For more complex use case we recommend configuring more permanent means of persistence by either:</p>
<ul><li>Configure the contained MinIO-instance to serve as a <a href="${"https://github.com/minio/minio/tree/master/docs/gateway"}" rel="${"nofollow"}">gateway</a> OR configure one of a <a href="${"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes"}" rel="${"nofollow"}">wide range of storage backends</a>.</li>
<li>Bring your own storage bucket: Configure Gitpod to either connect to:<ul><li>your own installation of MinIO</li>
<li>a Google Cloud Storage compatible storage solution</li></ul></li></ul>
<h2 id="${"a-configure-custom-minio-instance"}">a) Configure custom MinIO instance<a href="${"#a-configure-custom-minio-instance"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li><p>Create a file <code>values.custom.yaml</code> with this content:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">contentService</span><span class="token punctuation">:</span>
    <span class="token key atrule">remoteStorage</span><span class="token punctuation">:</span>
      <span class="token key atrule">kind</span><span class="token punctuation">:</span> minio
      <span class="token key atrule">minio</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>minio<span class="token punctuation">-</span>installation.somewhere<span class="token punctuation">-</span>else.com<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> enterKeyHere
        <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> superSecretKeyGoesHere
        <span class="token key atrule">tmpdir</span><span class="token punctuation">:</span> /tmp

<span class="token comment"># Disable built-in minio instance</span>
<span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre></li>
<li><p>Redeploy Gitpod using <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li></ol>
<h2 id="${"b-configure-the-built-in-minio-instance"}">b) Configure the built-in MinIO instance<a href="${"#b-configure-the-built-in-minio-instance"}"><span class="${"icon icon-link"}"></span></a></h2>
<ol><li>Consult the chart\u2019s documentation at <a href="${"https://helm.min.io/"}" rel="${"nofollow"}">https://helm.min.io/</a></li>
<li>Create a file <code>values.custom.yaml</code> with this content:<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> add<span class="token punctuation">-</span>a<span class="token punctuation">-</span>radom<span class="token punctuation">-</span>access<span class="token punctuation">-</span>key<span class="token punctuation">-</span>here
  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> add<span class="token punctuation">-</span>a<span class="token punctuation">-</span>radom<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>key<span class="token punctuation">-</span>here
  <span class="token comment"># insert custom config here</span></code>`}</pre></li>
<li>Redeploy Gitpod using <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes</li></ol>`
  })}`;
});
var storage = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Storage,
  metadata: metadata$P,
  prerender: prerender$P
});
const metadata$O = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Gitpod Self-Hosted Upgrade Notes"
};
const prerender$O = true;
const Upgrade = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$O), {}, {
    default: () => `<h1 id="${"gitpod-self-hosted-upgrade-notes"}">Gitpod Self-Hosted Upgrade Notes<a href="${"#gitpod-self-hosted-upgrade-notes"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"upgrading-gitpod-from-v060-to-v080"}">Upgrading Gitpod from v0.6.0 to v0.8.0<a href="${"#upgrading-gitpod-from-v060-to-v080"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With version 0.8.0 there are two major changes that require a user action. Both relate to the remote storage.</p>
<h3 id="${"built-in-minio-is-now-accessable-at-minioyour-gitpod-domaincom"}">Built-in MinIO is now accessable at minio.your-gitpod-domain.com<a href="${"#built-in-minio-is-now-accessable-at-minioyour-gitpod-domaincom"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>When you install Gitpod on your own Kubernetes installation, it brings a built-in MinIO object storage (unless disabled). As of v0.8.0, the built-in MinIO instance is accessable at <a href="${"https://minio.your-gitpod-domain.com."}" rel="${"nofollow"}">https://minio.your-gitpod-domain.com.</a> That\u2019s the reason that (for security reasons) we do not set a default access and secret key for the built-in MinIO installation anymore. That means, you need to add your own random keys in your values files like this:</p>
<pre class="${"language-null"}">${`<code class="language-null">minio:
  accessKey: add-a-radom-access-key-here
  secretKey: add-a-radom-secret-key-here</code>`}</pre>
<p>If you don\u2019t do this, <code>helm</code> will fail with the following message:</p>
<blockquote><p>minio access key is required, please add a value to your values.yaml</p></blockquote>
<h3 id="${"remote-storage-config-has-been-moved-to-a-new-component"}">Remote storage config has been moved to a new component<a href="${"#remote-storage-config-has-been-moved-to-a-new-component"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component <code>wsDaemon</code> to the new component <code>contentService</code>. See the <a href="${"./storage"}">Storage Guide</a> for an example.</p>`
  })}`;
});
var upgrade = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Upgrade,
  metadata: metadata$O,
  prerender: prerender$O
});
const metadata$N = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Kubernetes Nodes"
};
const prerender$N = true;
const Nodes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$N), {}, {
    default: () => `<h1 id="${"kubernetes-nodes"}">Kubernetes Nodes<a href="${"#kubernetes-nodes"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Configure the nodes (computers or virtual machines) that Kubernetes runs Gitpod\u2019s workspace pods on.</p>
<h2 id="${"assign-workload-to-nodes"}">Assign workload to Nodes<a href="${"#assign-workload-to-nodes"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as <em>meta</em>) and the workspaces. Ideally both types of workloads run on seperate nodes to make makes scaling easier.
Depending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:</p>
<ul><li><code>gitpod.io/workload_meta=true</code> which marks the \u201Cmeta\u201D nodes and</li>
<li><code>gitpod.io/workload_workspace=true </code> which marks the workspace nodes.</li></ul>
<p>If you want to \u201Cmix \u2018n match\u201D, i.e., don\u2019t separate the nodes, you can simply run:</p>
<pre class="${"language-null"}">${`<code class="language-null">kubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true</code>`}</pre>
<h2 id="${"node-filesystem-layout"}">Node Filesystem Layout<a href="${"#node-filesystem-layout"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod relies on the node\u2019s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in <code>/data</code> and Theia is copied to <code>/theia</code>. Depending on your node setup the root filesystem maybe <strong>read-only</strong> or <strong>slow</strong>.
We recommend you change those two paths so that they\u2019re located on an SSD or some other form of fast local storage.</p>
<p>To do this:</p>
<ol><li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">imageBuilder</span><span class="token punctuation">:</span>
    <span class="token comment"># The image builder deploys a Docker-in-Docker-daemon. By default that Docker daemon works in an empty-dir on the node.</span>
    <span class="token comment"># Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon</span>
    <span class="token comment"># fast storage on the node, e.g. an SSD.</span>
    <span class="token key atrule">hostDindData</span><span class="token punctuation">:</span> /mnt/disks/ssd0/docker
  <span class="token key atrule">wsDaemon</span><span class="token punctuation">:</span>
    <span class="token comment"># Workspace data is stored on the nodes. This setting configures where on the ndoe the workspace data lives.</span>
    <span class="token comment"># The faster this location is (in terms of IO) the faster workspaces will initialize.</span>
    <span class="token key atrule">hostWorkspaceArea</span><span class="token punctuation">:</span> /mnt/disks/ssd0/workspaces</code>`}</pre></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</p>
<blockquote><p>Note that Helm does <em>not</em> merge hierarchies in a single file. Please make sure there is only ever <em>one</em> <code>components</code> hierarchy or the last one overwrites all previous values.</p></blockquote></li></ol>`
  })}`;
});
var nodes = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Nodes,
  metadata: metadata$N,
  prerender: prerender$N
});
const metadata$M = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "How To integrate Gitpod with OAuth providers"
};
const prerender$M = true;
const Oauth = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$M), {}, {
    default: () => `<h1 id="${"how-to-integrate-gitpod-with-oauth-providers"}">How To integrate Gitpod with OAuth providers<a href="${"#how-to-integrate-gitpod-with-oauth-providers"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod does not implement user authentication itself, but integrates with other auth provider using <a href="${"https://oauth.net/2/"}" rel="${"nofollow"}">OAuth2</a>.
Usually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at
the same time making sure every user has proper access to their Git repository.</p>
<p>Gitpod supports the following authentication providers:</p>
<ul><li>github.com</li>
<li>GitHub Enterprise in version 2.16.x and higher</li>
<li>gitlab.com</li>
<li>GitLab Community/Enterprise Edition in version 11.7.x and higher</li>
<li>Bitbucket.com</li></ul>
<p>On first access, a fresh Gitpod installation guides the first users to configure one or more OAuth providers.</p>
<p>Alternatively, you can configure it per Helm values file:</p>
<ol><li><p>Configure an OAuth app per instructions linked below (cmp. <a href="${"#GitHub"}">GitHub</a> or <a href="${"#GitLab"}">GitLab</a>) and copy the <code>clientId</code> and <code>clientSecret</code>.</p></li>
<li><p>Merge the following into your <code>values.custom.yaml</code>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">authProviders</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token string">"Public-GitHub"</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"github.com"</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"GitHub"</span>
    <span class="token key atrule">oauth</span><span class="token punctuation">:</span>
      <span class="token key atrule">clientId</span><span class="token punctuation">:</span> <span class="token string">"CLIENT_ID"</span>
      <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">"SECRET"</span>
      <span class="token key atrule">callBackUrl</span><span class="token punctuation">:</span> <span class="token string">"https://gitpod.io/auth/github/callback"</span>
      <span class="token key atrule">settingsUrl</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/settings/connections/applications/CLIENT_ID"</span>
    <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">""</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token string">"Public-GitLab"</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"gitlab.com"</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"GitLab"</span>
    <span class="token key atrule">oauth</span><span class="token punctuation">:</span>
      <span class="token key atrule">clientId</span><span class="token punctuation">:</span> <span class="token string">"CLIENT_ID"</span>
      <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">"SECRET"</span>
      <span class="token key atrule">callBackUrl</span><span class="token punctuation">:</span> <span class="token string">"https://gitpod.io/auth/gitlab/callback"</span>
      <span class="token key atrule">settingsUrl</span><span class="token punctuation">:</span> <span class="token string">"https://gitlab.com/profile/applications"</span>
    <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">""</span></code>`}</pre>
<p>Replace <code>CLIENT_ID</code> and <code>SECRET</code> with their respective values.</p></li>
<li><p>Do a <code>helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.8.0</code> to apply the changes.</p></li></ol>
<h2 id="${"github"}">GitHub<a href="${"#github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitHub you need to create a <a href="${"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"}" rel="${"nofollow"}">GitHub OAuth App</a>.
Follow the guide linked above and:</p>
<ul><li><p>Set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/github/callback</your-domain.com></p></li>
<li><p>Copy <code>clientId</code> and <code>clientSecret</code></p></li></ul>
<h2 id="${"gitlab"}">GitLab<a href="${"#gitlab"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To authenticate your users with GitLab you need to create an <a href="${"https://docs.gitlab.com/ee/integration/oauth_provider.html"}" rel="${"nofollow"}">GitLab OAuth application</a>.
Follow the guide linked above and:</p>
<ul><li><p>Set \u201CAuthentication callback URL\u201D to:</p>
<p>https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback</gitlab.com-OR-your-gitlab.com></your-domain.com></p></li>
<li><p>Set \u201CScopes\u201D to <code>api</code>, <code>read_user</code> and <code>read_repository</code>.</p></li>
<li><p>Copy the following values:</p>
<ul><li><code>clientId</code> is the \u201CApplication ID\u201D from the GitLab OAuth appication</li>
<li><code>clientSecret</code> is the \u201CSecret\u201D from the GitLab OAuth appication</li></ul></li></ul>`
  })}`;
});
var oauth = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Oauth,
  metadata: metadata$M,
  prerender: prerender$M
});
const metadata$L = {
  section: "self-hosted/0.8.0/self-hosted",
  title: "Administrate Gitpod Self-Hosted"
};
const prerender$L = true;
const Admin = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$L), {}, {
    default: () => `<h1 id="${"administrate-gitpod-self-hosted"}">Administrate Gitpod Self-Hosted<a href="${"#administrate-gitpod-self-hosted"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>While we are working on the administration experience, there is already a lot you can do if you know where to look.</p>
<h2 id="${"download-a-backup-of-a-workspace"}">Download a backup of a workspace<a href="${"#download-a-backup-of-a-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Workpaces are stored as tar files in Minio or Google Storage buckets (depending on your configuration).
The tar files can be downloaded from there and unpacked locally.</p>
<h2 id="${"list-all-running-workspaces"}">List all running workspaces<a href="${"#list-all-running-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>SELECT</code>\u2026</p>
<p><code>kubectl get pods</code></p>
<h2 id="${"stop-a-running-workspace"}">Stop a running workspace<a href="${"#stop-a-running-workspace"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><code>kubectl delete pod</code></p>
<h2 id="${"connect-to-built-in-registry"}">Connect to built-in Registry<a href="${"#connect-to-built-in-registry"}"><span class="${"icon icon-link"}"></span></a></h2>`
  })}`;
});
var admin = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Admin,
  metadata: metadata$L,
  prerender: prerender$L
});
const metadata$K = {
  section: "quickstart",
  title: "Quickstart"
};
const prerender$K = true;
const Quickstart = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$K), {}, {
    default: () => `<h1 id="${"quickstart"}">Quickstart<a href="${"#quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to start using Gitpod on an example project that is hosted on GitHub in less than 5 minutes. For simplicity we use GitHub as the git hoster but the steps outlined work equally well for GitLab and Bitbucket. This section helps you understand the features and advantages of Gitpod in a learning environment. All templates are pre-configured to use Gitpod and ready-to-code:</p>
<ul><li><a href="${"/docs/quickstart/deno"}">Deno</a></li>
<li><a href="${"/docs/quickstart/go"}">Go</a></li>
<li><a href="${"/docs/quickstart/java"}">Java Spring</a></li>
<li><a href="${"/docs/quickstart/typescript"}">Node/TypeScript/Express</a></li>
<li><a href="${"/docs/quickstart/drupal"}">PHP Drupal</a></li>
<li><a href="${"/docs/quickstart/laravel"}">PHP Laravel</a></li>
<li><a href="${"/docs/quickstart/python"}">Python Django</a></li>
<li><a href="${"/docs/quickstart/flask"}">Python Flask</a></li>
<li><a href="${"/docs/quickstart/react"}">React</a></li>
<li><a href="${"/docs/quickstart/ruby-on-rails"}">Ruby on Rails</a></li>
<li><a href="${"/docs/quickstart/rust"}">Rust</a></li>
<li><a href="${"/docs/quickstart/svelte"}">Svelte</a></li></ul>
<h2 id="${"installing-the-gitpod-browser-extension"}">Installing the Gitpod browser extension<a href="${"#installing-the-gitpod-browser-extension"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can install the Gitpod browser extension in any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browser such as Google Chrome, Microsoft Edge, Brave, and others, or in <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a>.</p>
<p>The Gitpod extension adds a Gitpod button on every project and branch across GitLab, GitHub, and Bitbucket so that you can easily open a new workspace for any project.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>With Gitpod you start treating your dev environments as something ephemeral: you start them, you code, you push your code, and you forget about them. For your next task, you\u2019ll use a fresh dev environment.</p>
<ul><li><a href="${"/docs/getting-started"}">Getting started with your own project</a></li></ul>`
  })}`;
});
var index$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Quickstart,
  metadata: metadata$K,
  prerender: prerender$K
});
const metadata$J = {
  section: "quickstart",
  title: "Ruby on Rails template"
};
const prerender$J = true;
const Ruby_on_rails = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$J), {}, {
    default: () => `<h1 id="${"ruby-on-rails-quickstart"}">Ruby on Rails Quickstart<a href="${"#ruby-on-rails-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-ruby-on-rails-postgres"}" rel="${"nofollow"}">Ruby on Rails</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-ruby-on-rails-postgres/generate"}" rel="${"nofollow"}">Ruby on Rails template</a>.</li>
<li>Name it e.g. <code>my-ruby-on-rails-template</code>.</li></ul>
<h3 id="${"step-2-install-the-gitpod-app"}">Step 2: Install the Gitpod app<a href="${"#step-2-install-the-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-ruby-on-rails-template&gt;</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var rubyOnRails = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Ruby_on_rails,
  metadata: metadata$J,
  prerender: prerender$J
});
const metadata$I = {
  section: "quickstart",
  title: "Node/TypeScript/Express template"
};
const prerender$I = true;
const Typescript = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$I), {}, {
    default: () => `<h1 id="${"nodetypescriptexpress-quickstart"}">Node/TypeScript/Express Quickstart<a href="${"#nodetypescriptexpress-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-typescript-node"}" rel="${"nofollow"}">Node/TypeScript/Express</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-typescript-node/generate"}" rel="${"nofollow"}">Node/TypeScript template</a>.</li>
<li>Name it e.g. <code>my-typescript-template</code>.</li></ul>
<h3 id="${"step-2-install-gitpod-app"}">Step 2: Install Gitpod app<a href="${"#step-2-install-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-typescript-template</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var typescript = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Typescript,
  metadata: metadata$I,
  prerender: prerender$I
});
const metadata$H = {
  section: "quickstart",
  title: "Laravel template"
};
const prerender$H = true;
const Laravel = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$H), {}, {
    default: () => `<h1 id="${"laravel-quickstart"}">Laravel Quickstart<a href="${"#laravel-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-php-laravel-mysql"}" rel="${"nofollow"}">Laravel</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-php-laravel-mysql/generate"}" rel="${"nofollow"}">Laravel template</a>.</li>
<li>Name it e.g. <code>my-laravel-template</code>.</li></ul>
<h3 id="${"step-2-install-the-gitpod-app"}">Step 2: Install the Gitpod app<a href="${"#step-2-install-the-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-laravel-template&gt;</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var laravel = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Laravel,
  metadata: metadata$H,
  prerender: prerender$H
});
const metadata$G = {
  section: "quickstart",
  title: "Drupal template"
};
const prerender$G = true;
const Drupal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$G), {}, {
    default: () => `<h1 id="${"drupal-quickstart"}">Drupal Quickstart<a href="${"#drupal-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-php-drupal-ddev"}" rel="${"nofollow"}">Drupal</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-php-drupal-ddev/generate"}" rel="${"nofollow"}">Drupal template</a>.</li>
<li>Name it e.g. <code>my-drupal-template</code>.</li></ul>
<h3 id="${"step-2-install-the-gitpod-app"}">Step 2: Install the Gitpod app<a href="${"#step-2-install-the-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-drupal-template&gt;</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var drupal = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Drupal,
  metadata: metadata$G,
  prerender: prerender$G
});
const metadata$F = {
  section: "quickstart",
  title: "Python template"
};
const prerender$F = true;
const Python$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$F), {}, {
    default: () => `<h1 id="${"python-django-quickstart"}">Python Django Quickstart<a href="${"#python-django-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-python-django"}" rel="${"nofollow"}">Python</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-python-django/generate"}" rel="${"nofollow"}">Python template</a>.</li>
<li>Name it e.g. <code>my-python-template</code>.</li></ul>
<h3 id="${"step-2-install-the-gitpod-app"}">Step 2: Install the Gitpod app<a href="${"#step-2-install-the-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-python-template&gt;</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var python$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Python$1,
  metadata: metadata$F,
  prerender: prerender$F
});
const metadata$E = {
  section: "quickstart",
  title: "Svelte template"
};
const prerender$E = true;
const Svelte$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$E), {}, {
    default: () => `<h1 id="${"svelte-quickstart"}">Svelte Quickstart<a href="${"#svelte-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-sveltejs"}" rel="${"nofollow"}">SvelteJS</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-sveltejs/generate"}" rel="${"nofollow"}">SvelteJS template</a>.</li>
<li>Name it e.g. <code>my-svelte-template</code>.</li></ul>
<h3 id="${"step-2-install-gitpod-app"}">Step 2: Install Gitpod app<a href="${"#step-2-install-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-svelte-template</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var svelte$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Svelte$1,
  metadata: metadata$E,
  prerender: prerender$E
});
const metadata$D = {
  section: "quickstart",
  title: "Flask template"
};
const prerender$D = true;
const Flask = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$D), {}, {
    default: () => `<h1 id="${"flask-quickstart"}">Flask Quickstart<a href="${"#flask-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-python-flask"}" rel="${"nofollow"}">Flask</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-python-flask/generate"}" rel="${"nofollow"}">Flask template</a>.</li>
<li>Name it e.g. <code>my-flask-template</code>.</li></ul>
<h3 id="${"step-2-install-the-gitpod-app"}">Step 2: Install the Gitpod app<a href="${"#step-2-install-the-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-flask-template&gt;</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var flask = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Flask,
  metadata: metadata$D,
  prerender: prerender$D
});
const metadata$C = {
  section: "quickstart",
  title: "React template"
};
const prerender$C = true;
const React = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$C), {}, {
    default: () => `<h1 id="${"react-quickstart"}">React Quickstart<a href="${"#react-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-typescript-react"}" rel="${"nofollow"}">React</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-typescript-react/generate"}" rel="${"nofollow"}">React template</a>.</li>
<li>Name it e.g. <code>my-react-template</code>.</li></ul>
<h3 id="${"step-2-install-the-gitpod-app"}">Step 2: Install the Gitpod app<a href="${"#step-2-install-the-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-react-template&gt;</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var react = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: React,
  metadata: metadata$C,
  prerender: prerender$C
});
const metadata$B = {
  section: "quickstart",
  title: "Deno template"
};
const prerender$B = true;
const Deno$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$B), {}, {
    default: () => `<h1 id="${"deno-quickstart"}">Deno Quickstart<a href="${"#deno-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-typescript-deno"}" rel="${"nofollow"}">Deno</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-typescript-deno/generate"}" rel="${"nofollow"}">Deno template</a>.</li>
<li>Name it e.g. <code>my-typescript-deno-template</code>.</li></ul>
<h3 id="${"step-2-install-gitpod-app"}">Step 2: Install Gitpod app<a href="${"#step-2-install-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-typescript-deno-template</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var deno$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Deno$1,
  metadata: metadata$B,
  prerender: prerender$B
});
const metadata$A = {
  section: "quickstart",
  title: "Java template"
};
const prerender$A = true;
const Java$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$A), {}, {
    default: () => `<h1 id="${"java-quickstart"}">Java Quickstart<a href="${"#java-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}">Java Spring</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/spring-petclinic/generate"}" rel="${"nofollow"}">Java template</a>.</li>
<li>Name it e.g. <code>my-java-template</code>.</li></ul>
<h3 id="${"step-2-install-gitpod-app"}">Step 2: Install Gitpod app<a href="${"#step-2-install-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/spring-petclinic</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var java$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Java$1,
  metadata: metadata$A,
  prerender: prerender$A
});
const metadata$z = {
  section: "quickstart",
  title: "Rust template"
};
const prerender$z = true;
const Rust$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$z), {}, {
    default: () => `<h1 id="${"rust-quickstart"}">Rust Quickstart<a href="${"#rust-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-rust-cli"}" rel="${"nofollow"}">Rust</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-rust-cli/generate"}" rel="${"nofollow"}">Rust template</a>.</li>
<li>Name it e.g. <code>my-rust-template</code>.</li></ul>
<h3 id="${"step-2-install-gitpod-app"}">Step 2: Install Gitpod app<a href="${"#step-2-install-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-rust-template</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var rust$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Rust$1,
  metadata: metadata$z,
  prerender: prerender$z
});
const metadata$y = {
  section: "quickstart",
  title: "Go template"
};
const prerender$y = true;
const Go$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$y), {}, {
    default: () => `<h1 id="${"go-quickstart"}">Go Quickstart<a href="${"#go-quickstart"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Learn how to set-up and understand the benefits of Gitpod <strong>in less than 5 min</strong> with our <a href="${"https://github.com/gitpod-io/template-golang-cli"}" rel="${"nofollow"}">Go</a> template.</p>
<p>The following guide will:</p>
<ul><li>Walk you through a real world example with an existing Gitpod config</li>
<li>Introduce you to prebuilds</li>
<li>Demonstrate the benefits of ephemeral development environments</li></ul>
<p>For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.</p>
<h3 id="${"step-1-clone-git-repository"}">Step 1: Clone Git repository<a href="${"#step-1-clone-git-repository"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Create a new repository based on the <a href="${"https://github.com/gitpod-io/template-golang-cli/generate"}" rel="${"nofollow"}">Go template</a>.</li>
<li>Name it e.g. <code>my-go-template</code>.</li></ul>
<h3 id="${"step-2-install-gitpod-app"}">Step 2: Install Gitpod app<a href="${"#step-2-install-gitpod-app"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li><p>Install the <a href="${"https://github.com/apps/gitpod-io/installations/new"}" rel="${"nofollow"}">Gitpod App</a>.</p>
<p>Gitpod\u2019s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don\u2019t have to wait for Maven or NPM downloading the internet when you want to start coding.</p></li></ul>
<h3 id="${"step-3-first-prebuild"}">Step 3: First prebuild<a href="${"#step-3-first-prebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<ul><li>Start your first workspace with a prebuild by prefixing <strong><a href="${"https://gitpod.io#prebuild/"}" rel="${"nofollow"}">https://gitpod.io#prebuild/</a></strong> to the URL of the repository.</li></ul>
<p>The revised URL is: <code>https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/template-golang-cli</code></p>
<p>Gitpod displays the prebuild progress status by running the <code>init</code> commands in the <em>.gitpod.yml</em> file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see <a href="${"/docs/prebuilds"}">prebuilds</a>.</p>
<h3 id="${"step-4-enjoy-being-ready-to-code-\u{1F919}"}">Step 4: Enjoy being ready-to-code \u{1F919}<a href="${"#step-4-enjoy-being-ready-to-code-%F0%9F%A4%99"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.</p>
<p>Other developers made their setup even more productive and supercharged their workflows with the following quick steps:</p>
<ol><li><strong>Installing the browser extension</strong></li></ol>
<p>You can install the Gitpod browser extension on any <a href="${"https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki"}" rel="${"nofollow"}">Chromium-based</a> browsers such as Microsoft Edge, Brave, Chrome, and others, or on a <a href="${"https://addons.mozilla.org/firefox/addon/gitpod/"}" rel="${"nofollow"}">Firefox</a> browser.</p>
<p>The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with <code>gitpod.io/#</code> so that you can easily open a new workspace from any git context.</p>
<p><img src="${"/images/docs/browser-extension-lense.png"}" alt="${"Browser Extension"}"></p>
<p>For our partner GitLab we have a native integration into their UI that you can enable here.</p>
<ol start="${"2"}"><li><strong>Add your favorite VS Code themes and extensions</strong></li></ol>
<p>You have access to all Visual Studio Code extensions published under the vendor neutral <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a>. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.</p>
<p>Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.</p>
<ol start="${"3"}"><li><strong>Start throwing away workspaces like paper towels</strong></li></ol>
<p>You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.</p>
<p>You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.</p>
<p>Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). \u{1F913}</p>
<h2 id="${"next-steps"}">Next Steps<a href="${"#next-steps"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You\u2019ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:</p>
<ul><li><a href="${"https://www.gitpod.io/docs/configure"}" rel="${"nofollow"}">Getting started with your own project</a></li>
<li><a href="${"/docs/integrations"}">Git Integrations</a></li></ul>`
  })}`;
});
var go$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Go$1,
  metadata: metadata$y,
  prerender: prerender$y
});
const metadata$x = {
  section: "references",
  title: "References"
};
const prerender$x = true;
const References = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$x), {}, {
    default: () => `<h1 id="${"references"}">References<a href="${"#references"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Below are links to Gitpod reference material you may find helpful:</p>
<ul><li><a href="${"/docs/references/gitpod-yml"}"><code>.gitpod.yml</code></a></li>
<li><a href="${"/docs/references/changelog"}">Changelog</a></li>
<li><a href="${"/docs/references/roadmap"}">Roadmap</a></li></ul>`
  })}`;
});
var index$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: References,
  metadata: metadata$x,
  prerender: prerender$x
});
const metadata$w = {
  section: "references",
  title: "Custom Docker image"
};
const prerender$w = true;
const Gitpod_dockerfile = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$w), {}, {
    default: () => `<h1 id="${"custom-docker-image"}">Custom Docker image<a href="${"#custom-docker-image"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Welcome \u{1F44B}! You arrived here a bit early as we are currently (May 2021) in the process of rewriting the Gitpod documentation.</p>
<p>Please head over to <a href="${"https://github.com/gitpod-io/website/issues/461"}" rel="${"nofollow"}">https://github.com/gitpod-io/website/issues/461</a> if you\u2019d like to provide any feedback - we\u2019d love to hear from you \u{1F64F}.</p>`
  })}`;
});
var gitpodDockerfile = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_dockerfile,
  metadata: metadata$w,
  prerender: prerender$w
});
const metadata$v = {
  section: "references",
  title: "Troubleshooting"
};
const prerender$v = true;
const Troubleshooting = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$v), {}, {
    default: () => `<h1 id="${"troubleshooting"}">Troubleshooting<a href="${"#troubleshooting"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Welcome \u{1F44B}! You arrived here a bit early as we are currently (May 2021) in the process of rewriting the Gitpod documentation.</p>
<p>Please head over to <a href="${"https://github.com/gitpod-io/website/issues/461"}" rel="${"nofollow"}">https://github.com/gitpod-io/website/issues/461</a> if you\u2019d like to provide any feedback - we\u2019d love to hear from you \u{1F64F}.</p>`
  })}`;
});
var troubleshooting = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Troubleshooting,
  metadata: metadata$v,
  prerender: prerender$v
});
const metadata$u = {
  section: "references",
  title: "Architecture"
};
const prerender$u = true;
const Architecture = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$u), {}, {
    default: () => `<h1 id="${"architecture"}">Architecture<a href="${"#architecture"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Welcome \u{1F44B}! You arrived here a bit early as we are currently (May 2021) in the process of rewriting the Gitpod documentation.</p>
<p>Please head over to <a href="${"https://github.com/gitpod-io/website/issues/461"}" rel="${"nofollow"}">https://github.com/gitpod-io/website/issues/461</a> if you\u2019d like to provide any feedback - we\u2019d love to hear from you \u{1F64F}.</p>`
  })}`;
});
var architecture = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Architecture,
  metadata: metadata$u,
  prerender: prerender$u
});
const metadata$t = {
  section: "references",
  title: ".gitpod.yml Reference"
};
const prerender$t = true;
const Gitpod_yml = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$t), {}, {
    default: () => `<h1 id="${"gitpodyml-reference"}">.gitpod.yml Reference<a href="${"#gitpodyml-reference"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>The <code>.gitpod.yml</code> file at the root of your project is where you tell Gitpod how to prepare &amp; build your project, start development servers and configure continuous <a href="${"/docs/prebuilds"}">prebuilds</a> for GitHub.</p>
<p>Below is a full reference of all available properties. To see the underlying schema, please refer to <a href="${"https://github.com/gitpod-io/gitpod/blob/main/components/gitpod-protocol/data/gitpod-schema.json"}" rel="${"nofollow"}"><code>gitpod-io/gitpod</code></a> in the <a href="${"https://github.com/gitpod-io/gitpod"}" rel="${"nofollow"}">gitpod-io/gitpod</a> repository.</p>
<ul><li><a href="${"#checkoutlocation"}"><code>checkoutLocation</code></a></li>
<li><a href="${"#gitconfig"}"><code>gitConfig</code></a></li>
<li><a href="${"#github"}"><code>github</code></a><ul><li><a href="${"#prebuildsaddbadge"}"><code>prebuilds.addBadge</code></a></li>
<li><a href="${"#prebuildsaddcheck"}"><code>prebuilds.addCheck</code></a></li>
<li><a href="${"#prebuildsaddcomment"}"><code>prebuilds.addComment</code></a></li>
<li><a href="${"#prebuildsaddlabel"}"><code>prebuilds.addLabel</code></a></li>
<li><a href="${"#prebuildsbranches"}"><code>prebuilds.branches</code></a></li>
<li><a href="${"#prebuildsmaster"}"><code>prebuilds.master</code></a></li>
<li><a href="${"#prebuildspullrequests"}"><code>prebuilds.pullRequests</code></a></li>
<li><a href="${"#prebuildspullrequestsfromforks"}"><code>prebuilds.pullRequestsFromForks</code></a></li></ul></li>
<li><a href="${"#image"}"><code>image</code></a><ul><li><a href="${"#imagefile"}"><code>image.file</code></a></li>
<li><a href="${"#imagecontext"}"><code>image.context</code></a></li></ul></li>
<li><a href="${"#ports"}"><code>ports</code></a><ul><li><a href="${"#portsnonopen"}"><code>ports[n].onOpen</code></a></li>
<li><a href="${"#portsnport"}"><code>ports[n].port</code></a></li>
<li><a href="${"#portsnvisibility"}"><code>ports[n].visibility</code></a></li></ul></li>
<li><a href="${"#tasks"}"><code>tasks</code></a><ul><li><a href="${"#tasksnbefore"}"><code>tasks[n].before</code></a></li>
<li><a href="${"#tasksncommand"}"><code>tasks[n].command</code></a></li>
<li><a href="${"#tasksnenv"}"><code>tasks[n].env</code></a></li>
<li><a href="${"#tasksninit"}"><code>tasks[n].init</code></a></li>
<li><a href="${"#tasksnname"}"><code>tasks[n].name</code></a></li>
<li><a href="${"#tasksnopenin"}"><code>tasks[n].openIn</code></a></li>
<li><a href="${"#tasksnopenmode"}"><code>tasks[n].openMode</code></a></li>
<li><a href="${"#tasksnprebuild"}"><code>tasks[n].prebuild</code></a></li></ul></li>
<li><a href="${"#vscode"}"><code>vscode</code></a><ul><li><a href="${"#vscodeextensions"}"><code>vscode.extensions</code></a></li></ul></li>
<li><a href="${"#workspacelocation"}"><code>workspaceLocation</code></a></li></ul>
<h2 id="${"checkoutlocation"}"><code>checkoutLocation</code><a href="${"#checkoutlocation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Define where Gitpod checks out the project\u2019s code, relative to <code>/workspace</code>.</p>
<p>In most cases, this is not needed. If you work on an older Go project, please see <a href="${"/docs/checkout-location"}">Checkout and Workspace Location</a> for more details.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>/workspace</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">checkoutLocation</span><span class="token punctuation">:</span> <span class="token string">"go/src/github.com/demo-apps/go-gin-app"</span></code>`}</pre>
<h2 id="${"gitconfig"}"><code>gitConfig</code><a href="${"#gitconfig"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Define a workspace\u2019s git configuration as key-value pairs.</p>
<p>Please refer to <a href="${"https://git-scm.com/docs/git-config#_values"}" rel="${"nofollow"}">https://git-scm.com/docs/git-config#_values</a> for a list of accepted values.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>object</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">gitConfig</span><span class="token punctuation">:</span>
  <span class="token key atrule">alias.st</span><span class="token punctuation">:</span> status
  <span class="token key atrule">core.autocrlf</span><span class="token punctuation">:</span> input</code>`}</pre>
<h2 id="${"github"}"><code>github</code><a href="${"#github"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Configure the <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">GitHub Gitpod</a> app. At this time, the following configuration is used to configure <a href="${"/docs/prebuilds"}">continuous prebuilds</a> for GitHub repositories.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>object</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">github</span><span class="token punctuation">:</span>
  <span class="token key atrule">prebuilds</span><span class="token punctuation">:</span>
    <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">pullRequests</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">pullRequestsFromForks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">addCheck</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">addComment</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">addBadge</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code>`}</pre>
<h3 id="${"prebuildsaddbadge"}"><code>prebuilds.addBadge</code><a href="${"#prebuildsaddbadge"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod can modify the description of a pull request to add an \u201COpen in Gitpod\u201D button. This approach produces fewer GitHub notifications than <a href="${"#prebuildsaddcomment"}">adding a comment</a>, but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.</p>
<p><img src="${"../../../images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-badge.png"}" alt="${"An Open in Gitpod badge in a PR description"}"></p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>false</code></td></tr></tbody></table>
<h3 id="${"prebuildsaddcheck"}"><code>prebuilds.addCheck</code><a href="${"#prebuildsaddcheck"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Configure whether Gitpod registers itself as a status check to pull requests - much like a continuous integration system would do. To learn more about status checks, please see the GitHub documentation <a href="${"https://docs.github.com/en/github/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks"}" rel="${"nofollow"}">about status checks</a>.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>true</code></td></tr></tbody></table>
<h3 id="${"prebuildsaddcomment"}"><code>prebuilds.addComment</code><a href="${"#prebuildsaddcomment"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod can add a comment with an \u201COpen in Gitpod\u201D button to your pull requests. Alternatively, you could <a href="${"#prebuildsaddbadge"}">add a badge</a> to the pull request\u2019s description.</p>
<p><img src="${"../../../images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-comment.png"}" alt="${"An Open in Gitpod badge in a PR description"}"></p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>false</code></td></tr></tbody></table>
<h3 id="${"prebuildsaddlabel"}"><code>prebuilds.addLabel</code><a href="${"#prebuildsaddlabel"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Deprecated.</p>
<h3 id="${"prebuildsbranches"}"><code>prebuilds.branches</code><a href="${"#prebuildsbranches"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define whether Gitpod creates prebuilds for all branches.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>false</code></td></tr></tbody></table>
<h3 id="${"prebuildsmaster"}"><code>prebuilds.master</code><a href="${"#prebuildsmaster"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define whether Gitpod creates prebuilds for the default branch.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>true</code></td></tr></tbody></table>
<h3 id="${"prebuildspullrequests"}"><code>prebuilds.pullRequests</code><a href="${"#prebuildspullrequests"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define whether Gitpod creates prebuilds for pull requests from the original repository.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>true</code></td></tr></tbody></table>
<h3 id="${"prebuildspullrequestsfromforks"}"><code>prebuilds.pullRequestsFromForks</code><a href="${"#prebuildspullrequestsfromforks"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define whether Gitpod creates prebuilds for pull requests from forks.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>boolean</code></td>
<td><code>false</code></td></tr></tbody></table>
<h2 id="${"image"}"><code>image</code><a href="${"#image"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Define a custom Docker image to be used for workspaces. To learn more, please review <a href="${"/docs/config-docker"}">Custom Docker Image</a>.</p>
<p>Public images are hosted on <a href="${"https://hub.docker.com/u/gitpod/"}" rel="${"nofollow"}">Docker Hub</a> and can be referenced by their name, e.g. <code>ubuntu:latest</code>.</p>
<p>To see a list of Gitpod-provided images, please see <a href="${"https://github.com/gitpod-io/workspace-images"}" rel="${"nofollow"}">gitpod-io/workspace-images</a>.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>object</code> or <code>string</code></td>
<td><code>gitpod/workspace-full</code></td></tr></tbody></table>
<p><strong>Examples</strong></p>
<p><em>With a public image</em></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span>latest</code>`}</pre>
<p><em>With a custom image</em></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile</code>`}</pre>
<p><em>With an optional context</em></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile
  <span class="token key atrule">context</span><span class="token punctuation">:</span> ./docker<span class="token punctuation">-</span>content</code>`}</pre>
<h3 id="${"imagefile"}"><code>image.file</code><a href="${"#imagefile"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To define a custom Docker image, you can use the following configuration:</p>
<p>For a list of examples, please see <a href="${"https://github.com/gitpod-io/workspace-images"}" rel="${"nofollow"}">https://github.com/gitpod-io/workspace-images</a>.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"imagecontext"}"><code>image.context</code><a href="${"#imagecontext"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Optionally, you can set the <code>image.context</code>. This is useful when you want to copy files into the Docker image. The <a href="${"https://docs.docker.com/engine/reference/builder/#usage"}" rel="${"nofollow"}">Docker docs</a> describe this in more detail.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h2 id="${"ports"}"><code>ports</code><a href="${"#ports"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Configure how Gitpod treats various ports your application may listen on. You can learn more about this in the <a href="${"/docs/config-ports"}">Exposing Ports</a> documentation.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>array</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3000</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10000</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore</code>`}</pre>
<h3 id="${"portsnonopen"}"><code>ports[n].onOpen</code><a href="${"#portsnonopen"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define what to do when Gitpod detects a given port is being listened on.</p>
<table><thead><tr><th>Type</th>
<th>Default</th>
<th>Values</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td>
<td><code>open-browser</code>,<br><br><code>open-preview</code>,<br><br><code>notify</code>,<br><br><code>ignore</code></td></tr></tbody></table>
<h3 id="${"portsnport"}"><code>ports[n].port</code><a href="${"#portsnport"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define a single port or a range of ports, e.g. <code>3000-3100</code>.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>number</code> or <code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"portsnvisibility"}"><code>ports[n].visibility</code><a href="${"#portsnvisibility"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define whether to expose the port publicly or keep it private.</p>
<p>A public port allows you to share a URL for a given port with team members, for example if you want to get their feedback on a new feature you develop.</p>
<table><thead><tr><th>Type</th>
<th>Default</th>
<th>Values</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>public</code></td>
<td><code>private</code>,<br><br><code>public</code></td></tr></tbody></table>
<h2 id="${"tasks"}"><code>tasks</code><a href="${"#tasks"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Define how Gitpod prepares &amp; builds your project and how it can start the project\u2019s development server(s). To learn more, please visit <a href="${"/docs/config-start-tasks"}">Start Tasks</a>. Each array element opens in its own terminal.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>array</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">before</span><span class="token punctuation">:</span> sh ./scripts/setup.sh
    <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Database
    <span class="token key atrule">init</span><span class="token punctuation">:</span> sh ./scripts/seed<span class="token punctuation">-</span>database.sh
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm start<span class="token punctuation">-</span>db
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
      <span class="token key atrule">DB_HOST</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">3306</span>
      <span class="token key atrule">DB_USER</span><span class="token punctuation">:</span> readOnlyUser</code>`}</pre>
<h3 id="${"tasksnbefore"}"><code>tasks[n].before</code><a href="${"#tasksnbefore"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A shell command to run before <code>init</code> and the main <code>command</code>. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.</p>
<p>Learn more about <a href="${"/docs/config-start-tasks"}">Start Tasks</a> in the docs.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"tasksncommand"}"><code>tasks[n].command</code><a href="${"#tasksncommand"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The main shell command to run after <code>before</code> and <code>init</code>. This command is executed last on every start and doesn\u2019t have to terminate.</p>
<p>Learn more about <a href="${"/docs/config-start-tasks"}">Start Tasks</a> in the docs.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"tasksnenv"}"><code>tasks[n].env</code><a href="${"#tasksnenv"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define environment variables that will be available in the workspace.</p>
<p>Learn more about <a href="${"/docs/environment-variables"}">Environment Variables</a> in the docs.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>object</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"tasksninit"}"><code>tasks[n].init</code><a href="${"#tasksninit"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A shell command to run between <code>before</code> and the main <code>command</code>.</p>
<p>This task is executed only once. When you start a workspace that does not have a <a href="${"/docs/prebuilds"}">prebuild</a>, <code>init</code> is executed at workspace start. When you start a workspace that has a prebuild, <code>init</code> executes as part of the prebuild, but does NOT execute again at workspace start.</p>
<p>This task is expected to terminate. If it fails, the <code>command</code> property will not be executed.</p>
<p>Learn more about <a href="${"/docs/config-start-tasks"}">Start Tasks</a> in the docs.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"tasksnname"}"><code>tasks[n].name</code><a href="${"#tasksnname"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>A name for the task, also shown on the terminal tab.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"tasksnopenin"}"><code>tasks[n].openIn</code><a href="${"#tasksnopenin"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Deprecated. This does not have an impact in VS Code.</p>
<h3 id="${"tasksnopenmode"}"><code>tasks[n].openMode</code><a href="${"#tasksnopenmode"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Configure how the terminal should be opened relative to the previous task.</p>
<table><thead><tr><th>Type</th>
<th>Default</th>
<th>Values</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>&lt;empty&gt;</code></td>
<td><code>tab-after</code>,<br><br><code>tab-before</code>,<br><br><code>split-right</code>,<br><br><code>split-left</code></td></tr></tbody></table>
<p>Note: <code>split-top</code> and <code>split-bottom</code> are deprecated values.</p>
<h3 id="${"tasksnprebuild"}"><code>tasks[n].prebuild</code><a href="${"#tasksnprebuild"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Deprecated. Please use the <a href="${"#tasksninit"}"><code>init</code></a> task instead.</p>
<h2 id="${"vscode"}"><code>vscode</code><a href="${"#vscode"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Configure the VS Code editor.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>object</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<h3 id="${"vscodeextensions"}"><code>vscode.extensions</code><a href="${"#vscodeextensions"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Define a list of extensions which should be installed for users of this workspace. The identifier of an extension is always <code>\${publisher}.\${name}</code>. For example: \u2018vscode.vim\u2019.</p>
<p>Please note, Gitpod uses the <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX registry</a> to find extensions. If you cannot find an extension you know exists in your local VS Code, please get in touch with us or open a new PR in the <a href="${"https://github.com/open-vsx/publish-extensions"}" rel="${"nofollow"}">open-vsx/publish-extensions</a> repository to add the extension to Open VSX \u{1F64F}.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>object</code></td>
<td><code>&lt;empty&gt;</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> svelte.svelte<span class="token punctuation">-</span>vscode
    <span class="token punctuation">-</span> bradlc.vscode<span class="token punctuation">-</span>tailwindcss</code>`}</pre>
<h2 id="${"workspacelocation"}"><code>workspaceLocation</code><a href="${"#workspacelocation"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Define which path Gitpod considers the project\u2019s workspace directory, relative to <code>/workspace</code>.</p>
<p>In most cases, this is not needed. If you work on an older Go project, please see <a href="${"/docs/checkout-location"}">Checkout and Workspace Location</a> for more details.</p>
<table><thead><tr><th>Type</th>
<th>Default</th></tr></thead>
<tbody><tr><td><code>string</code></td>
<td><code>/workspace</code></td></tr></tbody></table>
<p><strong>Example</strong></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">workspaceLocation</span><span class="token punctuation">:</span> <span class="token string">"."</span></code>`}</pre>`
  })}`;
});
var gitpodYml = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Gitpod_yml,
  metadata: metadata$t,
  prerender: prerender$t
});
const metadata$s = {
  section: "references",
  title: "Changelog"
};
const prerender$s = true;
const Changelog$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$s), {}, {
    default: () => `<h1 id="${"changelog"}">Changelog<a href="${"#changelog"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>The most up-to-date Gitpod changelog can be found at <a href="${"http://www.gitpod.io/changelog"}" rel="${"nofollow"}">www.gitpod.io/changelog</a>.</p>
<p>To provide feedback or ask for feature requests, please <a href="${"https://github.com/gitpod-io/gitpod/issues/new/choose"}" rel="${"nofollow"}">open an issue</a> in the Gitpod repository.</p>`
  })}`;
});
var changelog$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Changelog$1,
  metadata: metadata$s,
  prerender: prerender$s
});
const metadata$r = {
  section: "references",
  title: "Roadmap"
};
const prerender$r = true;
const Roadmap = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$r), {}, {
    default: () => `<h1 id="${"roadmap"}">Roadmap<a href="${"#roadmap"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>The most up-to-date Gitpod roadmap can be found at <a href="${"http://www.gitpod.io/roadmap"}" rel="${"nofollow"}">www.gitpod.io/roadmap</a>.</p>
<p>To provide feedback or ask for feature requests, please <a href="${"https://github.com/gitpod-io/gitpod/issues/new/choose"}" rel="${"nofollow"}">open an issue</a> in the Gitpod repository.</p>`
  })}`;
});
var roadmap = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Roadmap,
  metadata: metadata$r,
  prerender: prerender$r
});
const metadata$q = {
  section: "develop",
  title: "One workspace per task"
};
const prerender$q = true;
const Workspaces = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$q), {}, {
    default: () => `<h1 id="${"one-workspace-per-task"}">One workspace per task<a href="${"#one-workspace-per-task"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>On any given day, you may be involved in tasks such as the following:</p>
<ul><li>Implement a new feature</li>
<li>Fix a bug</li>
<li>Review a pull/merge request</li>
<li>Pair-program with a team member</li>
<li>Browse an open source project\u2019s source code</li></ul>
<p>For each of these tasks, you start a clean, ephemeral Gitpod workspace. You can even start <strong>multiple workspaces in parallel</strong>. For example, while you\u2019re working on a feature, you can start a second workspace to review a production hotfix. When the review is complete, you close the browser tab of that workspace and continue to work on your feature. This works for any GitLab, GitHub or Bitbucket project.</p>
<p>You can learn more about the <a href="${"/docs/life-of-workspace"}">Life of a workspace</a>.</p>
<h2 id="${"gitpod-vs-local-development"}">Gitpod vs. local development<a href="${"#gitpod-vs-local-development"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>A Gitpod workspace is similar to your local development environment, except for two key differentiators:</p>
<ol><li>It is configured as code</li>
<li>It is ephemeral and only lives for as long as you work on a task</li></ol>
<h3 id="${"configuration-vs-manual-setup"}">Configuration vs. manual setup<a href="${"#configuration-vs-manual-setup"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Your project\u2019s <code>.gitpod.yml</code> and optional <code>.gitpod.Dockerfile</code> files control what tools will be available in your Gitpod workspace. Both files are version-controlled and let you monitor changes to the development environment over time. There is no longer a need to <code>@channel</code> in your team\u2019s communication software to tell everyone to upgrade their version of Node.js, only to find out that some people were on vacation and didn\u2019t see the message.</p>
<h3 id="${"ephemeral-vs-long-lived"}">Ephemeral vs. long-lived<a href="${"#ephemeral-vs-long-lived"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Thanks to the fact that Gitpod workspaces are configured as code, you can start and stop them as frequently as you want. You know that each workspace has the tools it needs and even more importantly, has the latest code from your default branch checked out! You no longer have to pull the latest default branch a few times per day because each time you start a new workspace, it has the latest code already available.</p>`
  })}`;
});
var workspaces = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Workspaces,
  metadata: metadata$q,
  prerender: prerender$q
});
const metadata$p = {
  section: "changelog",
  title: "Changelog"
};
const prerender$p = true;
const Changelog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$p), {}, {
    default: () => `<h1 id="${"changelog---archived"}">Changelog - Archived<a href="${"#changelog---archived"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Please refer to <a href="${"/changelog"}">/changelog</a> for the most up-to-date changelog. Below is an archive of previous releases up to June 2020.</p>
<h2 id="${"2020-06-03"}">2020-06-03<a href="${"#2020-06-03"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>[theia] Allow adding Gitpod to homescreen on iOS/iPad to get a fullscreen app experience <a href="${"https://github.com/eclipse-theia/theia/issues/7607"}" rel="${"nofollow"}">eclipse-theia/theia#7607</a></li>
<li>[theia] Upgrade Theia IDE to <a href="${"https://github.com/eclipse-theia/theia/blob/master/CHANGELOG.md#v120"}" rel="${"nofollow"}">v1.2.0</a></li>
<li>[theia] Upgrade built-in VS Code extensions for JS, TypeScript, Python, Rust, C++, Go, Java, Ruby, PHP, C#, F#, Swift, Objective-C, Clojure, Lua, PowerShell, SQL, Yaml, XML, EditorConfig, and refresh themes</li>
<li>[theia] New Preferences UI <a href="${"https://github.com/eclipse-theia/theia/pull/7105"}" rel="${"nofollow"}">eclipse-theia/theia#7105</a></li>
<li>[theia] Improve Git view, add Tree View mode <a href="${"https://github.com/eclipse-theia/theia/pull/7505"}" rel="${"nofollow"}">eclipse-theia/theia#7505</a></li>
<li>[theia] Improve and expand VS Code extension support</li>
<li>[theia] Add dedicated \u2018Workspace\u2019 menu in IDE top menu bar</li>
<li>[theia] Fix various keybindings and focus handling issues</li>
<li>[backend] Harden workspace initialization and backup in out-of-the-ordinary situations</li>
<li>[backend] Also garbage-collect expired workspaces in error state</li>
<li>[backend] Increase maximum workspace size from 20 GiB \u2192 30 GiB</li>
<li>Improve Team Subscriptions: Add dedicated <a href="${"https://gitpod.io/teams/"}" rel="${"nofollow"}">My Teams</a> menu item, fix dialogs and invite links, clarify descriptions</li>
<li>Improve IDE Setup Assistant and auto-detect <a href="${"https://github.com/gitpod-io/gitpod-yml-inferrer/compare/5710153c...2212efac"}" rel="${"nofollow"}">more tools</a></li>
<li>Bump Node.js version following a <a href="${"https://twitter.com/liran_tal/status/1267519052731289600"}" rel="${"nofollow"}">security alert</a>: <a href="${"https://github.com/gitpod-io/workspace-images/pull/243"}" rel="${"nofollow"}">gitpod-io/workspace-images#243</a></li></ul>
<h2 id="${"2020-06-02"}">2020-06-02<a href="${"#2020-06-02"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Upgrade all Go tools to get the latest <code>gopls</code>, remove broken <code>golangci-lint</code> <a href="${"https://github.com/gitpod-io/workspace-images/pull/237"}" rel="${"nofollow"}">gitpod-io/workspace-images#237</a></li>
<li>Make Python 3 the default <code>python</code> version (use <code>pyenv local 2.7.17</code> to go back to Python 2) <a href="${"https://github.com/gitpod-io/workspace-images/pull/214"}" rel="${"nofollow"}">gitpod-io/workspace-images#214</a></li></ul>
<h2 id="${"2020-05-14"}">2020-05-14<a href="${"#2020-05-14"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Support Amazon Linux based workspace images (thanks @Kreyren!), fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1490"}" rel="${"nofollow"}">gitpod-io/gitpod#1490</a></li>
<li>[theia] Measure first time connection for IDE websocket</li>
<li>[theia] Improve &amp; optimize IDE diff view, remove a <code>O(n^2)</code> diff computation</li>
<li>[theia] Load IDE faster by defering &amp; batching VSCode extensions initialization: <a href="${"https://github.com/eclipse-theia/theia/pull/7676"}" rel="${"nofollow"}">eclipse-theia/theia#7676</a></li>
<li>[theia] Switch PHP language support from <code>felixfbecker.php-intellisense</code> \u2192 <code>bmewburn.vscode-intelephense-client</code>: Faster &amp; cached indexing, better support for Symfony projects</li>
<li>[gitlab] Fix GitLab permission check, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1464"}" rel="${"nofollow"}">gitpod-io/gitpod#1464</a></li>
<li>[workspaces-list] UX: Only show search/filter when relevant, make GC message dismissable, start workspaces in a new tab</li>
<li>[backend] Monitor Go service metrics with a new dashboard</li>
<li>[backend] Optimize Gitpod database with multiple indexes</li>
<li>[backend] Increase maximum allowed workspace startup time from 30min \u2192 60 min (for big projects), fixes <a href="${"https://community.gitpod.io/t/cannot-open-a-new-workspace-for-libreoffice/1237"}" rel="${"nofollow"}">community/cannot-open-a-new-workspace-for-libreoffice</a></li></ul>
<h2 id="${"2020-05-12"}">2020-05-12<a href="${"#2020-05-12"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Downgrade Ruby <code>2.7.1</code> \u2192 <code>2.6.6</code> (because Solargraph doesn\u2019t support latest Bundler <code>2.1.4</code> yet) <a href="${"https://github.com/gitpod-io/workspace-images/commit/e9281a207c4c6b4c7df2e91e9ec81f36ed0652ae"}" rel="${"nofollow"}">gitpod-io/workspace-images/e9281a20</a></li></ul>
<h2 id="${"2020-05-08"}">2020-05-08<a href="${"#2020-05-08"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Upgrade to Rust <code>1.43.1</code> <a href="${"https://github.com/gitpod-io/workspace-images/pull/230"}" rel="${"nofollow"}">gitpod-io/workspace-images#230</a></li>
<li>Fix the persistence of Ruby gems in <code>/workspace/.rvm</code> with a custom <code>.rvmrc</code> <a href="${"https://github.com/gitpod-io/workspace-images/pull/223"}" rel="${"nofollow"}">gitpod-io/workspace-images#223</a></li>
<li>Upgrade RVM\u2019s Ruby from <code>2.5</code> \u2192 <code>2.5.8</code> and <code>2.6</code> \u2192 <code>2.7.1</code> <a href="${"https://github.com/gitpod-io/workspace-images/pull/213"}" rel="${"nofollow"}">gitpod-io/workspace-images#213</a></li></ul>
<h2 id="${"2020-05-02"}">2020-05-02<a href="${"#2020-05-02"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Fix Ubuntu 20.04 based <code>gitpod/workspace-dotnet</code> and <code>gitpod/workspace-dotnet-vnc</code> images by installing .NET Core SDK 3.1 binaries <a href="${"https://github.com/gitpod-io/workspace-images/pull/218"}" rel="${"nofollow"}">gitpod-io/workspace-images#218</a></li></ul>
<h2 id="${"2020-04-29"}">2020-04-29<a href="${"#2020-04-29"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Best practice: Don\u2019t stay as <code>USER root</code> in <code>gitpod/workspace-full-vnc</code> <a href="${"https://github.com/gitpod-io/workspace-images/pull/215"}" rel="${"nofollow"}">gitpod-io/workspace-images#215</a></li>
<li>Add bash auto-completion for <code>cargo</code> <a href="${"https://github.com/gitpod-io/workspace-images/pull/216"}" rel="${"nofollow"}">gitpod-io/workspace-images#216</a></li></ul>
<h2 id="${"2020-04-22"}">2020-04-22<a href="${"#2020-04-22"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>[theia] Upgrade Theia v0.17.0 \u2192 <a href="${"https://github.com/eclipse-theia/theia/blob/master/CHANGELOG.md#v110"}" rel="${"nofollow"}">v1.1.0</a></li>
<li>[theia] Upgrade monaco-languageclient and monaco-editor-core</li>
<li>[theia] Get all built-in VS Code extensions from <a href="${"https://open-vsx.org"}" rel="${"nofollow"}">Open VSX</a></li>
<li>[backend] Better handle excessive resource usage in workspaces (CPU, network, disk) and implement a fair use policy</li>
<li>[backend] Implement garbage collection for prebuilt workspace snapshots that are unused for more than 7 days</li>
<li>Overhaul and improve GitHub/GitLab login code</li></ul>
<h2 id="${"2020-04-21"}">2020-04-21<a href="${"#2020-04-21"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Upgrade Pyenv\u2019s Python from 3.7.7 \u2192 3.8.2 <a href="${"https://github.com/gitpod-io/workspace-images/pull/212"}" rel="${"nofollow"}">gitpod-io/workspace-images#212</a></li>
<li>Drop support of .NET 2.2 in <code>gitpod/workspace-dotnet*</code>, because it reached <a href="${"https://dotnet.microsoft.com/platform/support/policy/dotnet-core"}" rel="${"nofollow"}">End-Of-Life</a> on 2019-12-23</li></ul>
<h2 id="${"2020-04-17"}">2020-04-17<a href="${"#2020-04-17"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Fix <code>gitpod/workspace-postgres</code> image and pin to PostgreSQL version 12 <a href="${"https://github.com/gitpod-io/workspace-images/pull/209"}" rel="${"nofollow"}">gitpod-io/workspace-images#209</a></li>
<li>Upgrade Rust 1.41.1 \u2192 1.42.0 <a href="${"https://github.com/gitpod-io/workspace-images/pull/207"}" rel="${"nofollow"}">gitpod-io/workspace-images#207</a></li>
<li>Fix <code>gitpod/workspace-mysql</code> image by updating <code>mysql.cnf</code> for MySQL 8, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1399"}" rel="${"nofollow"}">gitpod-io/gitpod#1399</a></li></ul>
<h2 id="${"2020-04-15"}">2020-04-15<a href="${"#2020-04-15"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Upgrade from Ubuntu 19.04 \u2192 Ubuntu 20.04 LTS, because 19.04 reached end-of-life and all its apt packages got deleted <a href="${"https://github.com/gitpod-io/gitpod/issues/1398"}" rel="${"nofollow"}">gitpod-io/gitpod#1398</a></li>
<li>Upgrade Java 11.0.5.fx-zulu \u2192 11.0.6.fx-zulu</li></ul>
<h2 id="${"2020-04-09"}">2020-04-09<a href="${"#2020-04-09"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>[backend] Merge the \u2018asia-east1\u2019 cluster with the \u2018us-west1\u2019 cluster</li>
<li>[backend] Increase workspace garbage collection courtesy retention from 7 days \u2192 21 days</li></ul>
<h2 id="${"2020-04-08"}">2020-04-08<a href="${"#2020-04-08"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>[backend] Rebuild workspace base image when it\u2019s missing, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1329"}" rel="${"nofollow"}">gitpod-io/gitpod#1329</a></li>
<li>[backend] Make multiple services more resilient in case of degraded network conditions</li>
<li>[backend] Improve workspace start-up time monitoring</li>
<li>[theia] Fix \u2018Open Workspaces\u2019 and \u2018Open Access Control\u2019 avatar menu links getting blocked as pop-ups</li>
<li>Fix extended &amp; boostable timeouts for Student Unlimited plans, fixes <a href="${"https://community.gitpod.io/t/boosting-timeouts-in-gitpod/1114"}" rel="${"nofollow"}">community/boosting-timeouts-in-gitpod</a></li></ul>
<h2 id="${"2020-04-06"}">2020-04-06<a href="${"#2020-04-06"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>Make noVNC (virtual desktop) automatically reconnect if the connection is dropped, and enable noVNC toolbar <a href="${"https://github.com/gitpod-io/workspace-images/pull/170"}" rel="${"nofollow"}">gitpod-io/workspace-images#170</a></li></ul>
<h2 id="${"2020-03-31"}">2020-03-31<a href="${"#2020-03-31"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>[theia] Fix opening GitHub/GitLab file URLs in Gitpod</li>
<li>Don\u2019t use no-reply@ and show proper sender name in transactional emails</li></ul>
<h2 id="${"2020-03-30"}">2020-03-30<a href="${"#2020-03-30"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>[backend] Move Gitpod prebuilds to a dedicated headless nodepool, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1328"}" rel="${"nofollow"}">gitpod-io/gitpod#1328</a></li>
<li>[backend] Harmonise and pin Kubernetes version to 1.15</li>
<li>[backend] Make workspaces more resilient to DiskPressure/MemoryPressure</li>
<li>[backend] Make workspace scheduling more efficient and robust</li>
<li>[backend] Better report errors when workspaces fail or get unknown phase</li>
<li>[workspaces-list] Add hover tooltips to buttons in the workspaces list</li>
<li>[theia] Upgrade Theia to run Node.js Debug Adapter with Theia\u2019s built-in node</li>
<li>[theia] Upgrade Java extensions</li>
<li>[theia] Share workspace immediately when opening share workspace dialog, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/665"}" rel="${"nofollow"}">gitpod-io/gitpod#665</a></li>
<li>[theia] Redeploy plugins on disconnection to backend, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1291"}" rel="${"nofollow"}">gitpod-io/gitpod#1291</a></li>
<li>[gitlab] Fix link in private repository access view for GitLab</li>
<li>[gitlab] Allow to open empty GitLab repos, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1014"}" rel="${"nofollow"}">gitpod-io/gitpod#1014</a></li>
<li>[gitlab] Add retry for user profile fetching, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1275#issuecomment-599157231"}" rel="${"nofollow"}">gitpod-io/gitpod#1275 (comment)</a></li>
<li>[gp-cli] Handle <code>gp preview 127.0.0.1</code></li>
<li>[gp-cli] Fix <code>gp url</code> without arguments, fixes <a href="${"https://github.com/gitpod-io/gitpod/issues/1333"}" rel="${"nofollow"}">gitpod-io/gitpod#1333</a></li>
<li>Implement SendGrid to allow sending transactional emails (e.g. when your subscription is about to expire)</li>
<li>Handle duplicate ports in <code>.gitpod.yml</code> more gracefully</li>
<li>Upgrade Node.js from v10 \u2192 v12 LTS (to pin a specific version, see <a href="${"https://github.com/gitpod-io/workspace-images/pull/178#issuecomment-602465333"}" rel="${"nofollow"}">this workaround</a>)</li></ul>
<br><br>
<hr>
<p>Inspired by <a href="${"https://keepachangelog.com/"}" rel="${"nofollow"}">keepachangelog.com</a>.</p>`
  })}`;
});
var changelog = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Changelog,
  metadata: metadata$p,
  prerender: prerender$p
});
const metadata$o = {
  section: "configure",
  title: "Configure Gitpod"
};
const prerender$o = true;
const Configure = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$o), {}, {
    default: () => `<h1 id="${"configure-gitpod"}">Configure Gitpod<a href="${"#configure-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>With Gitpod, you can open any repository by prefixing its URL with <code>gitpod.io/#</code> - no configuration necessary. This is great to review code or quickly browse an open source project in a familiar environment where your favourite keyboard shortcuts are available.</p>
<p>To get the most out of Gitpod though, you can create a <code>.gitpod.yml</code> configuration file at the root of your project to provide Gitpod with instructions on how to build and prepare the development environment specifically for a project.</p>
<p>The chapters in this section provide details on what you can configure.</p>`
  })}`;
});
var index$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Configure,
  metadata: metadata$o,
  prerender: prerender$o
});
const metadata$n = {
  section: "languages-and-frameworks",
  title: "JavaScript in Gitpod"
};
const prerender$n = true;
const Javascript = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$n), {}, {
    default: () => `<h1 id="${"javascript-in-gitpod"}">JavaScript in Gitpod<a href="${"#javascript-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod comes with great built-in support for JavaScript, TypeScript, and tools like Node.js, npm, and Yarn pre-installed. Still, depending on your project, you might want to further optimize the experience.</p>
<h2 id="${"examples"}">Examples<a href="${"#examples"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few JavaScript example projects that are automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/naptha/tesseract.js"}" rel="${"nofollow"}">Tesseract.js</a></td>
<td>Pure JavaScript OCR for more than 100 Languages</td>
<td><a href="${"https://gitpod.io/#https://github.com/naptha/tesseract.js"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/freeCodeCamp/freeCodeCamp"}" rel="${"nofollow"}">freeCodeCamp</a></td>
<td><a href="${"https://www.freecodecamp.org/"}" rel="${"nofollow"}">freeCodeCamp.org</a>\u2019s open source codebase and curriculum</td>
<td><a href="${"https://gitpod.io/#https://github.com/freeCodeCamp/freeCodeCamp"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/mozilla/pdf.js"}" rel="${"nofollow"}">Mozilla PDF.js</a></td>
<td>PDF.js is a PDF viewer that is built with HTML5</td>
<td><a href="${"https://gitpod.io/#https://github.com/mozilla/pdf.js"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"start-tasks"}">Start tasks<a href="${"#start-tasks"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Many JavaScript projects these days use some sort of build tool for things like bundling, linting, code-splitting and so on and they also use a package manager, typically either npm or Yarn for managing dependencies.</p>
<p>You can automate the process of installing dependencies and starting any tasks like <code>build</code>, <code>lint</code>, <code>test</code> and so on at the workspace startup, for doing so please create a <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> file in the root of your project and add the tasks you want to be automated. An example might look like this:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install <span class="token important">&amp;&amp;</span> npm run build
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev</code>`}</pre>
<span aria-hidden="${"true"}">\u{1F446}</span> In the above example, we are telling Gitpod to run what is in the \`init\` phase at the time of workspace initialization and then afterwards run whatever is in the \`command\` phase.
<p>You can read more about start tasks <a href="${"/docs/config-start-tasks"}">here</a>.</p>
<h2 id="${"node-versions"}">Node Versions<a href="${"#node-versions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod comes with the latest stable Node.js version pre-installed but let\u2019s say your project uses a different version of <code>node</code> (say 8 for example), well the good news is that Gitpod also comes with <code>nvm</code> (a tool used to manage multiple active Node.js versions) installed. To install and configure the desired version of node create a <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a> and add the following to it:</p>
<pre class="${"language-dockerfile"}">${`<code class="language-dockerfile"><span class="token keyword">FROM</span> gitpod/workspace<span class="token punctuation">-</span>full<span class="token punctuation">:</span>latest

<span class="token keyword">RUN</span> bash <span class="token punctuation">-</span>c <span class="token string">". .nvm/nvm.sh     &amp;&amp; nvm install 8     &amp;&amp; nvm use 8     &amp;&amp; nvm alias default 8"</span>

<span class="token keyword">RUN</span> echo <span class="token string">"nvm use default &amp;>/dev/null"</span> <span class="token punctuation">></span><span class="token punctuation">></span> ~/.bashrc.d/51<span class="token punctuation">-</span>nvm<span class="token punctuation">-</span>fix</code>`}</pre>
<p>and then in your <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> reference your <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a> as shown below:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile</code>`}</pre>
<p>Then, after committing your changes, start a new workspace, the version for that workspace will be what you\u2019ve specified in your <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a>.</p>
<h2 id="${"using-eslint-for-linting"}">Using Eslint for linting<a href="${"#using-eslint-for-linting"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If your project\u2019s <code>package.json</code> does not mention Eslint as a dependency then you have to install it first. For installing it add the following to the end of the <code>init</code> phase of your <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> as shown:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install <span class="token important">&amp;&amp;</span> npm run build <span class="token important">&amp;&amp;</span> npm install <span class="token punctuation">-</span>g eslint</code>`}</pre>
<p>and then search for <code>eslint</code> in the extensions tab and then install it from there using the install button as shown in the screenshot.</p>
<p><img src="${"/images/docs/eslint-extension.png"}" alt="${"Install Eslint in Gitpod"}"></p>
<h2 id="${"making-live-reload-work-in-rollup-based-projects-like-svelte"}">Making Live Reload work in Rollup based projects like Svelte<a href="${"#making-live-reload-work-in-rollup-based-projects-like-svelte"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>This section was moved into <a href="${"/docs/languages/svelte"}">Svelte guide</a>.</p>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"/blog/node-js-development"}">Sustainable Node.js development with only a browser</a>.</li>
<li><a href="${"/blog/developing-nuxtjs-in-browser"}">Developing a Nuxt.js app entirely in your browser</a></li>
<li><a href="${"/blog/gitpodify"}">Gitpodifying \u2014 The Ultimate Guide</a></li>
<li><a href="${"/blog/node-js-gitpod"}">Debugging Node.js applications in Theia</a></li></ul>`
  })}`;
});
var javascript = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Javascript,
  metadata: metadata$n,
  prerender: prerender$n
});
const metadata$m = {
  section: "languages-and-frameworks",
  title: ".NET in Gitpod"
};
const prerender$m = true;
const Dotnet = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$m), {}, {
    default: () => `<h1 id="${"net-in-gitpod"}">.NET in Gitpod<a href="${"#net-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/gitpod-io/example-dotnet-core"}" rel="${"nofollow"}">dotnetcore</a></td>
<td>C# .NET Core template</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/example-dotnet-core"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/unoplatform/uno"}" rel="${"nofollow"}">uno</a></td>
<td>Build Mobile, Desktop and WebAssembly apps with C# and XAML</td>
<td><a href="${"https://gitpod.io/#https://github.com/unoplatform/uno"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/unoplatform/uno.quickstart"}" rel="${"nofollow"}">uno.quickstart</a></td>
<td>An Uno \u201CHello world!\u201D project using Windows UWP, iOS, Android and WebAssembly</td>
<td><a href="${"https://gitpod.io/#https://github.com/unoplatform/uno.quickstart"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"installing-the-net-tools"}">Installing the .NET Tools<a href="${"#installing-the-net-tools"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To get all the .NET tools that you need pre-installed in your Gitpod workspaces, use the following base image in your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a>:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image: gitpod/workspace-dotnet</code>`}</pre>
<p>If your project requires a GUI or Virtual Desktop, please use this image instead:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image: gitpod/workspace-dotnet-vnc</code>`}</pre>
<p>This will give you a full GUI Virtual Desktop for your .NET application! The Virtual Desktop will be running on port <code>6080</code>.</p>
<h2 id="${"compiling-net-code-in-gitpod"}">Compiling .NET Code in Gitpod<a href="${"#compiling-net-code-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To compile your <strong>C#</strong> or <strong>F#</strong> Code in Gitpod, run <code>dotnet build &lt;FILE&gt;</code>, where <code>&lt;FILE&gt;</code> is the path to the C# or F# project file or .NET solution file you want to compile.</p>
<h2 id="${"running-net-code-in-gitpod"}">Running .NET Code in Gitpod<a href="${"#running-net-code-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To run your code after it has been compiled run <code>dotnet &lt;FILE&gt;</code> where <code>&lt;FILE&gt;</code> is the path to the EXE file you want to run. You can also run application with <code>dotnet run &lt;FILE&gt;</code> where <code>&lt;FILE&gt;</code> is the path to the C# or F# project file you want to compile and run.</p>
<h2 id="${"running-net-code-in-watch-mode"}">Running .NET Code in watch-mode<a href="${"#running-net-code-in-watch-mode"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Alternatively, you can also run your application in so-called watch-mode. In such configuration the application will recompile and rerun itself every time you save any source file belonging to the project. To run your code in watch-mode use <code>dotnet watch --project &lt;FILE&gt; run</code> where <code>&lt;FILE&gt;</code> is the path to the C# or F# project file you want to compile and run.</p>
<h2 id="${"useful-vscode-extensions"}">Useful VSCode Extensions<a href="${"#useful-vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"pcp"}"><p>C#</p><a href="${"#pcp"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The official C# extension from Microsoft <a href="${"https://aka.ms/VSCode-DotNet-DbgLicense"}" rel="${"nofollow"}">is proprietary</a> and unfortunately cannot be used. The MIT licensed <a href="${"https://open-vsx.org/extension/muhammad-sammy/csharp"}" rel="${"nofollow"}">muhammad-sammy.csharp</a> extension from Samsung brings code completion, snippets, auto-formatting, peek definition, refactoring, hover documentation and breakpoint debugging for C# however!</p>
<p><img src="${"/images/docs/CSharpDemo.png"}" alt="${"C# Extension Demo"}"></p>
<p>To add this extension to your repository, add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> muhammad<span class="token punctuation">-</span>sammy.csharp</code>`}</pre>
<h3 id="${"pfp"}"><p>F#</p><a href="${"#pfp"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The <a href="${"https://ionide.io/"}" rel="${"nofollow"}">Ionide-fsharp</a> extensin gives F# developers the following features:</p>
<ul><li>A Widget for your F# needs</li>
<li>Auto completion</li>
<li>Shows errors inline</li>
<li>Quickfix</li>
<li>Goto definition</li>
<li>Peek definition</li>
<li>And more\u2026</li></ul>
<p><img src="${"/images/docs/Iondine_Example.png"}" alt="${"Ionide fsharp Example"}"></p>
<p>To add this extension to your repository, add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Ionide.Ionide<span class="token punctuation">-</span>fsharp@4.6.2<span class="token punctuation">:</span>yBkAE6j7z7gJ5WEcyMjEOg==</code>`}</pre>`
  })}`;
});
var dotnet = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Dotnet,
  metadata: metadata$m,
  prerender: prerender$m
});
const metadata$l = {
  section: "languages-and-frameworks",
  title: "Kotlin in Gitpod"
};
const prerender$l = true;
const Kotlin = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$l), {}, {
    default: () => `<h1 id="${"kotlin-in-gitpod"}">Kotlin in Gitpod<a href="${"#kotlin-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>To work with Kotlin in Gitpod, you will need to properly configure your repository. Here is how to do it.</p>
<h2 id="${"installing-kotlin"}">Installing Kotlin<a href="${"#installing-kotlin"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install Kotlin in Gitpod add the following to your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN brew install kotlin</code>`}</pre>
<p>A full example could look like this:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

USER gitpod
RUN brew install kotlin</code>`}</pre>
<h2 id="${"vs-code-extensions"}">VS Code Extensions<a href="${"#vs-code-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"kotlin-language"}">Kotlin Language<a href="${"#kotlin-language"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>This extension provides Kotlin language support for Gitpod and other IDEs, with:</p>
<ul><li>Syntax highlighting</li>
<li>Code snippets</li>
<li>Region code folding</li></ul>
<p>To get it, open Gitpod\u2019s <strong>Extensions</strong> panel (left vertical menu), then search for \u201CKotlin\u201D and install the extension by Mathias Fr\xF6hlich for your project. Next, commit the <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> file that was automatically created (or updated) by Gitpod.</p>
<h3 id="${"code-runner"}">Code Runner<a href="${"#code-runner"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>While this extension isn\u2019t Kotlin-specific, but allows to run code snippets in many different languages, including Kotlin.</p>
<p>To get it, open Gitpod\u2019s Extensions panel, then search for \u201CCode Runner\u201D and install it for your project.</p>
<h2 id="${"try-it"}">Try it<a href="${"#try-it"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Please use the button below to see a gitpodified <a href="${"https://github.com/gitpod-io/Gitpod-Kotlin"}" rel="${"nofollow"}">Kotlin example project</a> in Gitpod:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Kotlin"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>`
  })}`;
});
var kotlin = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Kotlin,
  metadata: metadata$l,
  prerender: prerender$l
});
const metadata$k = {
  section: "languages-and-frameworks",
  title: "Python in Gitpod"
};
const prerender$k = true;
const Python = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$k), {}, {
    default: () => `<h1 id="${"python-in-gitpod"}">Python in Gitpod<a href="${"#python-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod comes with great support for Python built-in. Still, depending on your project, you might want to further optimize the experience.</p>
<h2 id="${"python-project-examples"}">Python Project Examples<a href="${"#python-project-examples"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Before we get started, here are some examples of already-<a href="${"https://www.gitpod.io/blog/gitpodify/"}" rel="${"nofollow"}">gitpodified</a> repositories!</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/breatheco-de/python-flask-api-tutorial"}" rel="${"nofollow"}">python-flask-api-tutorial</a></td>
<td>A step by step Todo List API tutorial with Flask + Python</td>
<td><a href="${"https://gitpod.io/#https://github.com/breatheco-de/python-flask-api-tutorial"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/gitpod-io/django-locallibrary-tutorial"}" rel="${"nofollow"}">django-locallibrary-tutorial</a></td>
<td>An example website written in Django by MDN</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/django-locallibrary-tutorial"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/gitpod-io/Gitpod-PyQt"}" rel="${"nofollow"}">Gitpod-PyQt</a></td>
<td>A PyQt example for Gitpod</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/gitpod-io/wxPython-example"}" rel="${"nofollow"}">wxPython-example</a></td>
<td>A wxPython example for Gitpod</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/wxPython-example"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"python-versions"}">Python Versions<a href="${"#python-versions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Run <code>pyenv versions</code> to see which Python versions are pre-installed in Gitpod.</p>
<p>The easiest way to install a new Python version is to use <code>pyenv install &lt;VERSION&gt;</code>. For example, suppose you wanted to install Python <code>3.6.4</code>, you would run <code>pyenv install 3.6.4</code>.</p>
<p>You can switch between Python versions using <code>pyenv local &lt;VERSION&gt;</code>. For example, if you wanted to switch to Python version <code>2.7.17</code> you would run <code>pyenv local 2.7.17</code>. This will create a <code>.python-version</code> file that controls which Python version is the default in your project. (Note: When running it in a Dockerfile, replace <code>local</code> with <code>global</code> to change the system default.)</p>
<h2 id="${"start-tasks"}"><a href="${"https://www.gitpod.io/docs/config-start-tasks"}" rel="${"nofollow"}">Start tasks</a><a href="${"#start-tasks"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can start building your project when, or even <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">before</a> you start your Gitpod workspace. Are you using a <code>requirements.txt</code> file to manage dependencies? If so, add this to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> to automatically pre-install all dependencies when starting a workspace:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> pip3 install <span class="token punctuation">-</span>r requirements.txt
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python3 main.py</code>`}</pre>
<h2 id="${"linting"}">Linting<a href="${"#linting"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>You can <a class="${"no-nowrap"}" href="${"https://github.com/palantir/python-language-server#configuration"}">create a <code>setup.cfg</code> or a <code>pycodestyle.cfg</code> in the project root</a> and <a href="${"http://pycodestyle.pycqa.org/en/latest/intro.html#configuration"}" rel="${"nofollow"}">adjust pycodestyle</a> rules there like this:</p>
<pre class="${"language-toml"}">${`<code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">pycodestyle</span><span class="token punctuation">]</span>
<span class="token key property">ignore</span> <span class="token punctuation">=</span> E226<span class="token punctuation">,</span>E302<span class="token punctuation">,</span>E41
<span class="token key property">max-line-length</span> <span class="token punctuation">=</span> <span class="token number">160</span>
<span class="token key property">statistics</span> <span class="token punctuation">=</span> True</code>`}</pre>
<p>You\u2019ll need to refresh the browser in order to update these rule. <a href="${"https://github.com/gitpod-io/gitpod/issues/640#issuecomment-506622491"}" rel="${"nofollow"}">Source</a>.</p>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>While the most popular Python VSCode extensions are built into Gitpod, here are a few \u201Cnice to have\u201D extensions that you can use as well.</p>
<h3 id="${"arepl-for-python"}">ARepl for Python<a href="${"#arepl-for-python"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/AReplExample.gif"}" alt="${"ARepl extension example"}">
ARepl for Python is helpful for constantly checking your code and debugging.
To install this extension for your repository, add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a>:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> almenon.arepl@1.0.20<span class="token punctuation">:</span>Uu7lIOwyLgmNWpTwCl/iqQ==</code>`}</pre>
<h3 id="${"python-test-explorer"}">Python Test Explorer<a href="${"#python-test-explorer"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/python_Test_In_Gitpod.png"}" alt="${"Python test explorer example"}">
Easily test your python extensions with the Python Test Explorer.
To add this to your repository add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> littlefoxteam.vscode<span class="token punctuation">-</span>python<span class="token punctuation">-</span>test<span class="token punctuation">-</span>adapter@0.3.16<span class="token punctuation">:</span>tZ/6xOSSdKUaq6JCUVkD+A==</code>`}</pre>
<h2 id="${"gui-applications-with-wxpython"}">GUI Applications with wxPython<a href="${"#gui-applications-with-wxpython"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install wxPython to your repository please add the following to your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>. If you don\u2019t have one, simply run <a href="${"https://www.gitpod.io/docs/command-line-interface/"}" rel="${"nofollow"}"><code>gp init</code></a> and commit the two generated files.</p>
<pre class="${"language-dockerfile"}">${`<code class="language-dockerfile"><span class="token comment"># This will pull the official Gitpod &#96;vnc&#96; image</span>
<span class="token comment"># which has much of what you need to start</span>
<span class="token keyword">FROM</span> gitpod/workspace<span class="token punctuation">-</span>full<span class="token punctuation">-</span>vnc

<span class="token keyword">USER</span> gitpod

<span class="token comment"># Install wxPython dependencies</span>
<span class="token keyword">RUN</span> sudo apt<span class="token punctuation">-</span>get <span class="token punctuation">-</span>q update &amp;&amp;     sudo DEBIAN_FRONTEND=noninteractive apt<span class="token punctuation">-</span>get install <span class="token punctuation">-</span>yq freeglut3<span class="token punctuation">-</span>dev python3.7<span class="token punctuation">-</span>dev libpython3.7<span class="token punctuation">-</span>dev libgl1<span class="token punctuation">-</span>mesa<span class="token punctuation">-</span>dev libglu1<span class="token punctuation">-</span>mesa<span class="token punctuation">-</span>dev libgstreamer<span class="token punctuation">-</span>plugins<span class="token punctuation">-</span>base1.0<span class="token punctuation">-</span>dev libgtk<span class="token punctuation">-</span>3<span class="token punctuation">-</span>dev libnotify<span class="token punctuation">-</span>dev libsdl2<span class="token punctuation">-</span>dev libwebkit2gtk<span class="token punctuation">-</span>4.0<span class="token punctuation">-</span>dev libxtst<span class="token punctuation">-</span>dev libgtk2.0<span class="token punctuation">-</span>dev &amp;&amp;     sudo rm <span class="token punctuation">-</span>rf /var/lib/apt/lists/*

<span class="token comment"># Install wxPython</span>
<span class="token keyword">RUN</span> pip3 install <span class="token punctuation">-</span>U <span class="token punctuation">-</span>f https<span class="token punctuation">:</span>//extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu<span class="token punctuation">-</span>18.04/ wxPython</code>`}</pre>
<p>Here is a corresponding <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> example:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile

<span class="token comment"># This will expose all necessary ports needed for your VNC image</span>
<span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6080</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5900</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">35900</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore

<span class="token comment"># This will make it so that on workspace start it will run a file called &#96;app.py&#96;</span>
<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> python3 app.py</code>`}</pre>
<br>
We also support other GUI frameworks such as \`Kivy\` and \`PyQt\`
<br>
Here are some other examples of Python GUI applications in Gitpod:
<div class="${"table-container"}"><table><thead><tr><th>Name</th>
<th>Framework</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/JesterOrNot/Tic-Tac-Toe-GUI"}" rel="${"nofollow"}">Tic-Tac-Toe-GUI</a></td>
<td>Kivy</td>
<td><a href="${"https://gitpod.io/#https://github.com/JesterOrNot/Tic-Tac-Toe-GUI"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/JesterOrNot/Pong"}" rel="${"nofollow"}">Pong</a></td>
<td>Kivy</td>
<td><a href="${"https://gitpod.io/#https://github.com/JesterOrNot/Pong"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/gitpod-io/Gitpod-PyQt"}" rel="${"nofollow"}">Gitpod-PyQt</a></td>
<td>PyQt</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<br>
<h2 id="${"debugging"}">Debugging<a href="${"#debugging"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here is a quick clip on how to automatically configure debugging for Python!</p>
<p><img src="${"/images/docs/PythonDebug.gif"}" alt="${"Python debugging example"}"></p>
<p>So, basically in this video we:</p>
<ol><li>First, open the Python file that we want to debug</li>
<li>Then, go to the debug menu and select \u201CAdd Configuration\u2026\u201D</li>
<li>Next, in the dropdown choose \u201CPython\u201D</li>
<li>Next, choose \u201CPython File\u201D as the debug configuration</li>
<li>Finally, start debugging your Python program!</li></ol>
<p>You can also create the Python debug configuration file manually</p>
<p>To start debugging your Python application in Gitpod, please create a new directory called <code>.theia/</code>, and inside add a file called <code>launch.json</code>, finally, add the following to it:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Python: Current File"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>
      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
      <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>
      <span class="token property">"console"</span><span class="token operator">:</span> <span class="token string">"internalConsole"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Then, simply open the Python file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \u201CRun\u201D button.</p>
<br>
<p>To see a basic repository with Python debugging enabled, please check out <a href="${"https://github.com/gitpod-io/Gitpod-Python-Debug"}" rel="${"nofollow"}">gitpod-io/Gitpod-Python-Debug</a>:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Python-Debug"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<br>
<h2 id="${"pandas"}">Pandas<a href="${"#pandas"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Welcome data scientists! This part of the guide will show you how to configure Gitpod for Pandas development.</p>
<h2 id="${"try-pandas-in-gitpod"}">Try Pandas in Gitpod<a href="${"#try-pandas-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To see a minimal project with Pandas installed and configured, please check out <a href="${"https://github.com/gitpod-io/Gitpod-Pandas"}" rel="${"nofollow"}">gitpod-io/Gitpod-Pandas</a>:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Pandas"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><strong><em><a href="${"https://code.visualstudio.com/docs/python/debugging"}" rel="${"nofollow"}">VSCode documentation for Python debugging</a></em></strong> All the information there should also apply to Gitpod as well.</li>
<li><strong><em><a href="${"https://github.com/gitpod-io/gitpod/issues/795"}" rel="${"nofollow"}">Troubleshooting Matplotlib/TK</a></em></strong> Here is how to troubleshoot Matplotlib/TK issues for Python GUI applications.</li>
<li><strong><em><a href="${"https://community.gitpod.io/t/django-debugging/381/6"}" rel="${"nofollow"}">Debugging Django</a></em></strong> This is how to debug Django applications in Gitpod.</li></ul>`
  })}`;
});
var python = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Python,
  metadata: metadata$k,
  prerender: prerender$k
});
const metadata$j = {
  section: "languages-and-frameworks",
  title: "Svelte in Gitpod"
};
const prerender$j = true;
const Svelte = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$j), {}, {
    default: () => `<h1 id="${"svelte-in-gitpod"}">Svelte in Gitpod<a href="${"#svelte-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>To work with Svelte in Gitpod, you will need to properly configure your repository. Here is how to do that, assuming that you\u2019re using the official sveltejs <a href="${"https://github.com/sveltejs/template"}" rel="${"nofollow"}">template</a> which uses Rollup:</p>
<h2 id="${"create-a-gitpodyml"}">Create a .gitpod.yml<a href="${"#create-a-gitpodyml"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Start by creating a <code>.gitpod.yml</code> file in the root of your project and add the following to it:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> npm install
    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run dev

<span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5000</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> open<span class="token punctuation">-</span>preview
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">35729</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore</code>`}</pre>
<p>After committing and pushing this file to your repository, start a new Gitpod workspace. You\u2019ll see that Gitpod will automatically install the dependencies; start the dev server; and open a preview on the side for port <code>5000</code>.</p>
<p><img src="${"/images/docs/svelte-template-in-gitpod.png"}" alt="${"Sveltejs Template in Gitpod"}"></p>
<h2 id="${"making-live-reload-work"}">Making Live Reload work<a href="${"#making-live-reload-work"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In order to make live reload work we need to add a bit of configuration as specified below:</p>
<ul><li><p>Setup an environment variable called <code>CLIENT_URL</code> in the <code>.gitpod.yml</code> config file as shown below please make sure that you set it up before the task which starts the dev server(which is <code>npm run dev</code> in this case):</p>
<pre class="${"language-bash"}">${`<code class="language-bash">- init: <span class="token function">npm</span> <span class="token function">install</span>
    command: <span class="token operator">|</span>
      <span class="token builtin class-name">export</span> <span class="token assign-left variable">CLIENT_URL</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>gp url <span class="token number">35729</span><span class="token variable">)</span></span>/livereload.js?snipver=1&amp;port=443"</span>
      <span class="token function">npm</span> run dev</code>`}</pre></li>
<li><p>Pass the value of <code>CLIENT_URL</code> environment variable to the <code>rollup-plugin-livereload</code> in <code>rollup-config.js</code> inside of the <code>plugins</code> array as shown:</p>
<pre class="${"language-js"}">${`<code class="language-js">plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token operator">!</span>production <span class="token operator">&amp;&amp;</span>
    <span class="token function">livereload</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      watch<span class="token operator">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span>
      clientUrl<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CLIENT_URL</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`}</pre>
<p>This will set <code>CLIENT_URL</code> to the workspace url of port <code>35729</code> (default port for livereload in Gitpod).</p></li></ul>
<h2 id="${"example-projects"}">Example Projects<a href="${"#example-projects"}"><span class="${"icon icon-link"}"></span></a></h2>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/gitpod-io/sveltejs-template"}" rel="${"nofollow"}">SvelteJS template</a></td>
<td>A project template for Svelte apps</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/sveltejs-template"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"svelte-for-vs-code"}">Svelte for VS Code<a href="${"#svelte-for-vs-code"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Svelte for VS Code Provides syntax highlighting and rich intellisense for Svelte components in VS Code, utilising the <a href="${"https://github.com/sveltejs/language-tools/tree/master/packages/language-server"}" rel="${"nofollow"}">svelte language server</a>.</p>
<p>To add this extension to your repository, simply head to Gitpod\u2019s <a href="${"https://www.gitpod.io/docs/vscode-extensions"}" rel="${"nofollow"}">Extensions panel</a> (find it in the IDE\u2019s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.</p>
<p><a href="${"https://github.com/gitpod-io/sveltejs-template"}" rel="${"nofollow"}">https://github.com/gitpod-io/sveltejs-template</a> repo is a working example of the config described above <span aria-hidden="${"true"}">\u{1F446}</span>.</p>`
  })}`;
});
var svelte = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Svelte,
  metadata: metadata$j,
  prerender: prerender$j
});
const metadata$i = {
  section: "languages-and-frameworks",
  title: "Julia in Gitpod"
};
const prerender$i = true;
const Julia = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$i), {}, {
    default: () => `<h1 id="${"julia-in-gitpod"}">Julia in Gitpod<a href="${"#julia-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Julia example projects that are already automated with Gitpod:</p>
<p>A minimal example of a ready-to-code Julia development environment is <a href="${"https://github.com/JesterOrNot/Gitpod-Julia"}" rel="${"nofollow"}">JesterOrNot/Gitpod-Julia</a>. Feel free to take a look.</p>
<p>And to showcase a real-world Julia project in Gitpod, we\u2019ve gitpodified the <a href="${"https://github.com/JesterOrNot/Julia"}" rel="${"nofollow"}">Julia repository</a> itself! Try it via the following button:</p>
<p><a href="${"https://gitpod.io/#https://github.com/JesterOrNot/Julia"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"JesterOrNot/Julia"}"></a></p>`
  })}`;
});
var julia = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Julia,
  metadata: metadata$i,
  prerender: prerender$i
});
const metadata$h = {
  section: "languages-and-frameworks",
  title: "LaTeX in Gitpod"
};
const prerender$h = true;
const Latex = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$h), {}, {
    default: () => `<h1 id="${"latex-in-gitpod"}">LaTeX in Gitpod<a href="${"#latex-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>This tutorial will demonstrate how to configure Gitpod to work with <a href="${"https://www.latex-project.org/"}" rel="${"nofollow"}">LaTeX</a> files. You can find a complete <a href="${"https://github.com/ptrottier/latex"}" rel="${"nofollow"}">example repository</a> at the end.</p>
<h2 id="${"installing-latex"}">Installing LaTeX<a href="${"#installing-latex"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>First, you will probably want to install LaTeX in Gitpod. To do this, add a new file to your repository called <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>, and add the following content to it:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

# Install LaTeX
RUN sudo apt-get -q update &amp;&amp;     sudo apt-get install -yq texlive &amp;&amp;     sudo rm -rf /var/lib/apt/lists/*</code>`}</pre>
<p>Next, create a file called <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> and add the following to it:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image:
  file: .gitpod.Dockerfile</code>`}</pre>
<p>Now commit both files into source control, and push them to your GitHub or GitLab repository.</p>
<p>This will be your base configuration for LaTeX in Gitpod \u2014 from now on, every time you create a new Gitpod workspace for your repository, it will be configured as specified in your <code>.gitpod.yml</code> and <code>.gitpod.Dockerfile</code>.</p>
<h2 id="${"automatically-compiling-latex-files-on-save"}">Automatically compiling LaTeX files on save<a href="${"#automatically-compiling-latex-files-on-save"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>One way to achieve this is to install <code>inotify-tools</code> by modifying your earlier <code>.gitpod.Dockerfile</code> like so:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

# Install LaTeX
RUN sudo apt-get -q update &amp;&amp;     sudo apt-get install -yq texlive-full inotify-tools &amp;&amp;     sudo rm -rf /var/lib/apt/lists/*</code>`}</pre>
<p>Next, modify your <code>.gitpod.yml</code> like so:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image:
  file: .gitpod.Dockerfile

tasks:
  - name: LaTeX auto-rebuild
    command: &gt;
      while find . -name &#39;*.tex&#39; | xargs inotifywait -qqre modify .; do         latexmk -pdf ;       done
  - name: Terminal</code>`}</pre>
<p>This will start a watcher process that automatically recompiles your <code>*.tex</code> files when they are changed. Note: The watcher process will start in a separate Terminal on every workspace start.</p>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"texlab"}">TexLab<a href="${"#texlab"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>This extension provides rich editing support for the LaTeX typesetting system powered by the <a href="${"https://github.com/latex-lsp/texlab-vscode"}" rel="${"nofollow"}">TexLab</a> language server.</p>
<p>To install it in Gitpod, simply download the corresponding <code>*.vsix</code> file <a href="${"https://open-vsx.org/"}" rel="${"nofollow"}">Open VSX</a>, and then drag-and-drop it into Gitpod\u2019s Extensions view (which can be found in the left vertical menu bar).</p>
<p>This will automatically append something like this to your <code>.gitpod.yml</code> file:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> efoerster.texlab@1.10.0<span class="token punctuation">:</span>/Vq+k9Ug/81LYWajjTgMpA==</code>`}</pre>
<p>(Note: You can also append these lines yourself if you don\u2019t want to download &amp; re-upload the <code>*.vsix</code> file.)</p>
<h3 id="${"latex-workshop"}">LaTeX Workshop<a href="${"#latex-workshop"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Another great LaTeX extension is <a href="${"https://github.com/James-Yu/LaTeX-Workshop"}" rel="${"nofollow"}">LaTeX Workshop</a>:</p>
<blockquote><p>Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.</p></blockquote>
<p>It is also available <a href="${"https://open-vsx.org/extension/James-Yu/latex-workshop"}" rel="${"nofollow"}">on Open VSX</a>.</p>
<h3 id="${"latex-snippets"}">LaTeX Snippets<a href="${"#latex-snippets"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>There is also <a href="${"https://github.com/JeffersonQin/VSCode-LaTeX-Snippets"}" rel="${"nofollow"}">LaTeX Snippets</a>:</p>
<blockquote><p>This extension includes a variety of snippets for LaTeX including making environments and plotting images for functions, etc.</p></blockquote>
<h2 id="${"try-it"}">Try it!<a href="${"#try-it"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To see a complete minimal example repository with a Gitpod configuration for LaTeX, including most of the tools we\u2019ve covered, see <a href="${"https://github.com/ptrottier/latex"}" rel="${"nofollow"}">ptrottier/latex</a>. You can try it in your browser:</p>
<p><a href="${"https://gitpod.io/#https://github.com/ptrottier/latex"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>`
  })}`;
});
var latex = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Latex,
  metadata: metadata$h,
  prerender: prerender$h
});
const metadata$g = {
  section: "languages-and-frameworks",
  title: "Scala in Gitpod"
};
const prerender$g = true;
const Scala = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$g), {}, {
    default: () => `<h1 id="${"scala-in-gitpod"}">Scala in Gitpod<a href="${"#scala-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Welcome, Scala programmer. Today we will show you how to configure Gitpod for your project.</p>
<h2 id="${"installing-scala"}">Installing Scala<a href="${"#installing-scala"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>First, you\u2019ll probably want to install Scala. To do this, add a new file to your repository called <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>, and add the following content to it:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN brew install scala</code>`}</pre>
<p>Additionally create a file called <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> and add the following:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image:
  file: .gitpod.Dockerfile</code>`}</pre>
<p>Now commit both files into source control.</p>
<h3 id="${"what-are-these-files-for"}">What are these files for?<a href="${"#what-are-these-files-for"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Let\u2019s break this down. First, in <code>.gitpod.Dockerfile</code>, we declare <code>FROM gitpod/workspace-full</code> to have your project use Gitpod\u2019s default workspace image (recommended). You can use other images too, but some Gitpod features might not work as well with untested images.</p>
<p>Next, we declare <code>RUN brew install scala</code>. This simply installs Scala into the workspace image via HomeBrew.</p>
<p>Then, we register our custom Dockerfile in Gitpod\u2019s configuration file <code>.gitpod.yml</code>, so that Gitpod knows it should pick it up and build it on-the-fly when booting up new workspaces.</p>
<p>Finally, please note that these changes will only take effect in new workspaces. To try out your new automated dev setup, simply commit both files; push them to GitHub; and then open a new Gitpod workspace for your repository. \u{1F680}</p>
<h2 id="${"using-the-ammonite-repl"}">Using the Ammonite REPL<a href="${"#using-the-ammonite-repl"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"/images/docs/AmmoniteRepl.png"}" alt="${"The Ammonite REPL in action"}"></p>
<p>To install the <a href="${"https://ammonite.io/"}" rel="${"nofollow"}">Ammonite REPL</a> in Gitpod, you must add the following to our previously-created <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN sudo sh -c &#39;(echo &quot;#!/usr/bin/env sh&quot; &amp;&amp; curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) &gt; /usr/local/bin/amm &amp;&amp; chmod +x /usr/local/bin/amm&#39;</code>`}</pre>
<p>Then commit the changes and push to your repository. Finally, when you open a new workspace, you will be able to type <code>amm</code> in the terminal, and behold a super cool Scala REPL in your workspace!</p>
<h2 id="${"building-projects-with-sbt"}">Building projects with sbt<a href="${"#building-projects-with-sbt"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To use <a href="${"https://www.scala-sbt.org/"}" rel="${"nofollow"}">sbt</a> (simple build tool) in Gitpod, you can add the following to that <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> we created:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN brew install sbt</code>`}</pre>
<p>As usual, commit and push the changes, and <code>sbt</code> will be installed in all future workspaces.</p>
<h2 id="${"managing-scala-versions-with-scalaenv"}">Managing Scala versions with scalaenv<a href="${"#managing-scala-versions-with-scalaenv"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Say your project needs a specific Scala version. You can use <a href="${"https://github.com/scalaenv/scalaenv"}" rel="${"nofollow"}">scalaenv</a>, a version manager for Scala, to switch between different Scala versions. But first, we must install <code>scalaenv</code>. As usual, we need to change our <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>, by adding this to it:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN brew install scalaenv</code>`}</pre>
<p>Then, say you need Scala version <code>2.12.11</code>, you would add the following line as well:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN scalaenv install scala-2.12.11 &amp;&amp; scalaenv global scala-2.12.11</code>`}</pre>
<h2 id="${"using-coursier-an-artifact-fetcher-for-scala"}">Using coursier, an artifact fetcher for Scala<a href="${"#using-coursier-an-artifact-fetcher-for-scala"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><a href="${"https://get-coursier.io/"}" rel="${"nofollow"}">coursier</a> is useful for building certain Scala projects and installing different tools.</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN brew install coursier/formulas/coursier</code>`}</pre>
<p>(Don\u2019t forget to commit and push this change!)</p>
<h2 id="${"formatting-scala-code-with-scalafmt"}">Formatting Scala code with scalafmt<a href="${"#formatting-scala-code-with-scalafmt"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install <a href="${"https://scalameta.org/scalafmt/"}" rel="${"nofollow"}">scalafmt</a> for your repository, add the following to your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN sudo env &quot;PATH=$PATH&quot; coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2   -r sonatype:snapshots   -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli</code>`}</pre>
<p>Then to format your code simply run <code>scalafmt</code>!</p>
<h2 id="${"putting-it-all-together"}">Putting it all together<a href="${"#putting-it-all-together"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>A full example of a <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> configured for Scala could look something like:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN sudo sh -c &#39;(echo &quot;#!/usr/bin/env sh&quot; &amp;&amp; curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) &gt; /usr/local/bin/amm &amp;&amp; chmod +x /usr/local/bin/amm&#39;

RUN brew install scala coursier/formulas/coursier sbt scalaenv

RUN sudo env &quot;PATH=$PATH&quot; coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2   -r sonatype:snapshots   -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli

RUN scalaenv install scala-2.12.11 &amp;&amp; scalaenv global scala-2.12.11</code>`}</pre>
<p>You will notice that all the <code>brew install</code> commands are on the same line. We recommend grouping similar commands together to minimize the number of <a href="${"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#minimize-the-number-of-layers"}" rel="${"nofollow"}">Docker layers</a>.</p>
<p>Additionally, your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> file should still look like this:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image:
  file: .gitpod.Dockerfile</code>`}</pre>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"scala-syntax-official"}">Scala Syntax (official)<a href="${"#scala-syntax-official"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/scala-syntax.png"}" alt="${"Scala Syntax demo"}"></p>
<p>Scala Syntax adds basic syntax highlighting for Scala and <code>sbt</code> files.</p>
<p>To get it, open Gitpod\u2019s <strong>Extensions</strong> panel (left vertical menu in the IDE), then search for \u201CScala Syntax\u201D, and install it \u201Cfor this project\u201D. Then, commit the automatic <code>.gitpod.yml</code> change that was made by Gitpod.</p>
<h3 id="${"metals"}">Metals<a href="${"#metals"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/metals-demo.png"}" alt="${"An example of the metals in Gitpod"}"></p>
<p>Metals adds helpful Scala features to Gitpod, for example, advanced autocompletion and debugging support just to name a few. Although to use it you must also have the previously mentioned Scala Syntax.</p>
<p>To get it, open Gitpod\u2019s <strong>Extensions</strong> panel (left vertical menu in the IDE), then search for \u201CScala Metals\u201D, and install it \u201Cfor this project\u201D. Then, commit the automatic <code>.gitpod.yml</code> change that was made by Gitpod.</p>
<p>Boom! You\u2019re done! (Just a reminder, don\u2019t forget to push the changes.)</p>
<h2 id="${"debugging-scala-code"}">Debugging Scala code<a href="${"#debugging-scala-code"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To debug Scala code in Gitpod you should use the Metals extension which we just went over. Here is an example of Scala Debugging in action:</p>
<p><img src="${"/images/docs/scala-debug.gif"}" alt="${"Example of debugging Scala in Gitpod"}"></p>
<p>In general when debugging Scala code, go to the main method, and click the Debug button over it! And boom you\u2019re debugging.</p>
<h2 id="${"try-it"}">Try it!<a href="${"#try-it"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To see a minimal repository with a Gitpod configuration that installs all the tools we\u2019ve covered, see <a href="${"https://github.com/gitpod-io/Gitpod-Scala"}" rel="${"nofollow"}">gitpod-io/Gitpod-Scala</a>. You can try it in your browser:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Scala"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<h2 id="${"need-help"}">Need help?<a href="${"#need-help"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>If you are having trouble and need help please find us in the <a href="${"https://community.gitpod.io/"}" rel="${"nofollow"}">Gitpod community</a>, or, <a href="${"https://github.com/gitpod-io/gitpod/issues/new/choose"}" rel="${"nofollow"}">file an issue on GitHub</a>.</p>
<h2 id="${"feedback"}">Feedback<a href="${"#feedback"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>We love feedback and want to continuously improve all of our guides and documentation. If you found a grammar mistake, or we left out your favorite Scala tool, or you just have general feedback on the guide, please feel free to <a href="${"https://gitpod.io/#https://github.com/gitpod-io/website/blob/master/src/docs/languages/scala.md"}" rel="${"nofollow"}">edit this guide</a> or to <a href="${"https://github.com/gitpod-io/website/issues/new/choose"}" rel="${"nofollow"}">file a website issue on GitHub</a>.</p>`
  })}`;
});
var scala = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Scala,
  metadata: metadata$g,
  prerender: prerender$g
});
const metadata$f = {
  section: "languages-and-frameworks",
  title: "Bash in Gitpod"
};
const prerender$f = true;
const Bash = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$f), {}, {
    default: () => `<h1 id="${"bash-in-gitpod"}">Bash in Gitpod<a href="${"#bash-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Bash is the default shell for Gitpod. However, if you\u2019re developing a Bash script yourself, you may want to configure additional language support.</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Bash example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try It</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/inlets/inlets"}" rel="${"nofollow"}">inlets/inlets</a></td>
<td>Reverse proxy and service tunnel</td>
<td><a href="${"https://gitpod.io/#https://github.com/inlets/inlets"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"shellcheck"}">ShellCheck<a href="${"#shellcheck"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>ShellCheck provides linting for common mistakes in your shell script.</p>
<p>To use ShellCheck in Gitpod, first, we must install the <code>shellcheck</code> tool. Here is a simple Dockerfile to get you started:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

USER gitpod

RUN brew install shellcheck</code>`}</pre>
<p>You should also install the shellcheck VS Code extension in Gitpod, by adding a <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> configuration file to your repository that looks like this (notice the <code>vscode</code> extensions section):</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile

<span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> timonwong.shellcheck@0.9.0<span class="token punctuation">:</span>hsU/Rd39aqPYowTqL+DbXg==</code>`}</pre>
<p>Not sure about ShellCheck? Try it in Gitpod!</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-ShellCheck"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"gitpod-io/Gitpod-ShellCheck"}"></a></p>
<h3 id="${"bash-ide"}">Bash IDE<a href="${"#bash-ide"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/bashIDE.png"}" alt="${"A Bash IDE demonstration"}"></p>
<p>Just to name a few things Bash IDE adds: Code completion, hovers, and diagnostic reporting.</p>
<p>To install Bash IDE to your repository add the following to your <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a></p>
<pre class="${"language-dockerfile"}">${`<code class="language-dockerfile"><span class="token keyword">RUN</span> npm i <span class="token punctuation">-</span>g bash<span class="token punctuation">-</span>language<span class="token punctuation">-</span>server</code>`}</pre>
<p>Also the following in your
<a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mads<span class="token punctuation">-</span>hartmann.bash<span class="token punctuation">-</span>ide<span class="token punctuation">-</span>vscode@1.4.0<span class="token punctuation">:</span>/qx+rdXE/fGTGWhelNf3aQ==</code>`}</pre>
<p>Not sure about Bash IDE? Try it in Gitpod</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-BashIDE"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>For more information about ShellCheck please see <a href="${"https://shellcheck.net"}" rel="${"nofollow"}">shellcheck.net</a></li></ul>
<h2 id="${"known-issues"}">Known issues<a href="${"#known-issues"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"the-shellcheck-program-was-not-found"}">The shellcheck program was not found<a href="${"#the-shellcheck-program-was-not-found"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><a href="${"https://github.com/gitpod-io/gitpod/issues/1461#issuecomment-621232166"}" rel="${"nofollow"}">It has been reported</a> that shellcheck extension fails to detect shellcheck from homebrew which results in:
<img src="${"https://user-images.githubusercontent.com/11302521/80605581-91110b80-8a33-11ea-9247-44cb33134cc9.png"}" alt="${"shellcheck notification"}"></p>
<p>To resolve this you need to set <code>&quot;shellcheck.executablePath&quot;: &quot;/home/linuxbrew/.linuxbrew/bin/shellcheck&quot;,</code> (or to path that point to shellcheck on your system), See <a href="${"https://github.com/vivek-verma202/GWAS_FM/pull/3/files"}" rel="${"nofollow"}">https://github.com/vivek-verma202/GWAS_FM/pull/3/files</a></p>`
  })}`;
});
var bash = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Bash,
  metadata: metadata$f,
  prerender: prerender$f
});
const metadata$e = {
  section: "languages-and-frameworks",
  title: "Dart in Gitpod"
};
const prerender$e = true;
const Dart = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$e), {}, {
    default: () => `<h1 id="${"dart-in-gitpod"}">Dart in Gitpod<a href="${"#dart-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Dart example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/gitpod-io/flutter_stock_example"}" rel="${"nofollow"}">flutter_stock_example</a></td>
<td>The Flutter stock example configured for Gitpod</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/flutter_stock_example"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"installing-dart"}">Installing Dart<a href="${"#installing-dart"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install the Dart SDK in Gitpod one must add the following to your <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a></p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN brew tap dart-lang/dart &amp;&amp; brew install dart</code>`}</pre>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"dart"}">Dart<a href="${"#dart"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>This Extension adds cool syntax highlighting</p>
<p><img src="${"/images/docs/AfterSyntaxHighlighting.png"}" alt="${"Syntax highlighting example"}"></p>
<p>It adds <a href="${"https://code.visualstudio.com/docs/editor/intellisense"}" rel="${"nofollow"}">Intellisense</a> support for autocompletion</p>
<p><img src="${"/images/docs/DartIntellisenseExample.png"}" alt="${"Dart intellisense example"}"></p>
<h2 id="${"try-it"}">Try it<a href="${"#try-it"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here is a hello world example of a <a href="${"https://www.gitpod.io/blog/gitpodify/"}" rel="${"nofollow"}">Gitpodified</a> project running in the browser, try it!</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Dart"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>`
  })}`;
});
var dart = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Dart,
  metadata: metadata$e,
  prerender: prerender$e
});
const metadata$d = {
  section: "languages-and-frameworks",
  title: "Deno in Gitpod"
};
const prerender$d = true;
const Deno = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$d), {}, {
    default: () => `<h1 id="${"deno-in-gitpod"}">Deno in Gitpod<a href="${"#deno-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>It\u2019s easy to set up Deno in Gitpod.</p>
<h2 id="${"setting-up-the-dockerfile"}">Setting up the Dockerfile<a href="${"#setting-up-the-dockerfile"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Add a Dockerfile to your project as <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN curl -fsSL https://deno.land/x/install/install.sh | sh
RUN /home/gitpod/.deno/bin/deno completions bash &gt; /home/gitpod/.bashrc.d/90-deno &amp;&amp;     echo &#39;export DENO_INSTALL=&quot;/home/gitpod/.deno&quot;&#39; &gt;&gt; /home/gitpod/.bashrc.d/90-deno &amp;&amp;     echo &#39;export PATH=&quot;$DENO_INSTALL/bin:$PATH&quot;&#39; &gt;&gt; /home/gitpod/.bashrc.d/90-deno</code>`}</pre>
<p>And configure this Dockerfile in your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a>:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image:
  file: .gitpod.Dockerfile</code>`}</pre>
<p>It\u2019ll run the latest Deno version and install the Bash completions.</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Deno example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/fknipp/fake-log-generator"}" rel="${"nofollow"}">fake-log-generator</a></td>
<td>Generator for fake log files as CLI application</td>
<td><a href="${"https://gitpod.io/#https://github.com/fknipp/fake-log-generator"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/website/blob/main/src/routes/docs/languages/deno.md"}" rel="${"nofollow"}">Edit this page</a> to add another examples.</p>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here is a useful extensions that you\u2019ll likely want to install in your Deno project.</p>
<h3 id="${"deno"}"><a href="${"https://marketplace.visualstudio.com/items?itemName=denoland.vscode-deno"}" rel="${"nofollow"}">Deno</a><a href="${"#deno"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To add this extension to your repository, simply open Gitpod\u2019s Extensions panel (see left vertical menu in the IDE), then search for \u201CDeno\u201D and install it \u201Cfor this project\u201D.</p>
<p>Next, simply commit the <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> configuration file that was automatically created (or updated) by Gitpod.</p>`
  })}`;
});
var deno = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Deno,
  metadata: metadata$d,
  prerender: prerender$d
});
const metadata$c = {
  section: "languages-and-frameworks",
  title: "HTML & CSS in Gitpod"
};
const prerender$c = true;
const Html = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$c), {}, {
    default: () => `<h1 id="${"html--css-in-gitpod"}">HTML &amp; CSS in Gitpod<a href="${"#html--css-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod has great HTML and CSS support. In fact, Gitpod was made with web development in mind. And, depending on your needs, you may want to customize this experience further!</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few HTML/CSS example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/thedaviddias/Front-End-Checklist"}" rel="${"nofollow"}">Front-End-Checklist</a></td>
<td>The perfect Front-End Checklist for modern websites and meticulous developers</td>
<td><a href="${"https://gitpod.io/#https://github.com/thedaviddias/Front-End-Checklist"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/rstacruz/cheatsheets"}" rel="${"nofollow"}">Devhints</a></td>
<td>TL;DR for developer documentation - a ridiculous collection of cheatsheets</td>
<td><a href="${"https://gitpod.io/#https://github.com/rstacruz/cheatsheets"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"emmet-support"}"><a href="${"http://emmet.io/"}" rel="${"nofollow"}">emmet</a> Support<a href="${"#emmet-support"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"/images/docs/emmet.png"}" alt="${"emmet demo"}">
Gitpod comes with <a href="${"http://emmet.io/"}" rel="${"nofollow"}">emmet</a> support right out of the box giving you access to powerful snippets and completions</p>
<h2 id="${"live-preview"}">Live Preview<a href="${"#live-preview"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"/images/docs/live_preview.png"}" alt="${"Live Preview Demo"}">
With Gitpod you can open a preview for Markdown and HTML files while you are coding.</p>
<p>To open the preview for a file, click the <code>Open Preview to the Side</code> icon in the upper right-hand corner:</p>
<p><img src="${"/images/docs/preview.png"}" alt="${"preview icon"}"></p>
<h2 id="${"try-it"}">Try It!<a href="${"#try-it"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Want to try it out? And see a minimal example in action? Great, then you can open this in Gitpod:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Web-Development-Example"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"gitpod-io/Gitpod-Web-Development-Example"}"></a></p>`
  })}`;
});
var html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Html,
  metadata: metadata$c,
  prerender: prerender$c
});
const metadata$b = {
  section: "languages-and-frameworks",
  title: "Java in Gitpod"
};
const prerender$b = true;
const Java = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$b), {}, {
    default: () => `<h1 id="${"java-in-gitpod"}">Java in Gitpod<a href="${"#java-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod comes with great support for Java builtin. Still, depending on your particular project you might want to further optimize the experience.</p>
<p>A great example of a ready-to-code Java dev environment is our <a href="${"https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}">Spring Petclinic Example</a>.</p>
<h2 id="${"ready-to-code-dev-environments-for-java"}">Ready-to-code Dev Environments for Java<a href="${"#ready-to-code-dev-environments-for-java"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To set up your project, you should run <code>gp init</code> in the terminal first. This will create the two configuration files needed to explain Gitpod what your project needs.
A dev environment is based on a Docker image. But don\u2019t fear you don\u2019t need to understand Docker to get started. In most cases, the default docker image is enough.</p>
<h3 id="${"sdkman"}">SDKMAN<a href="${"#sdkman"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>For Java, it comes readily equipped with <a href="${"https://sdkman.io/"}" rel="${"nofollow"}">SDKMAN!</a>, which is a version manager that takes care of managing and installing not only different Java versions but also a different version of other JVM languages such as Scala or Kotlin (both supported in Gitpod, too).</p>
<p>It also installs Maven and Gradle in case you don\u2019t use the <a href="${"https://docs.gradle.org/current/userguide/gradle_wrapper.html"}" rel="${"nofollow"}">wrapper version</a> that is often recommended.</p>
<p>Check out the <a href="${"https://sdkman.io/usage"}" rel="${"nofollow"}">documentation of SDKMAN!</a> to see how to use it or simply type <code>sdk help</code> in the terminal.</p>
<h4 id="${"sdkman-in-docker"}">SDKMAN in Docker<a href="${"#sdkman-in-docker"}"><span class="${"icon icon-link"}"></span></a></h4>
<p>Although you can use sdk in your terminal, you should put the tools and versions into your Dockerfile, so you and your team get the very same configuration every time.
To do that you need to alter the generated <code>.gitpod.Dockerfile</code>. Here\u2019s an example that will install Java 12 with the J9 VM from \u201CAdopt a JDK\u201D.</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN bash -c &quot;. /home/gitpod/.sdkman/bin/sdkman-init.sh              &amp;&amp; sdk install java 12.0.1.j9-adpt&quot;</code>`}</pre>
<blockquote><p>Note that you always need to run the <code>sdkman-init.sh</code> in bash before you can use SDK.</p></blockquote>
<p>You can add additional tools and versions like this:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN bash -c &quot;. /home/gitpod/.sdkman/bin/sdkman-init.sh              &amp;&amp; sdk install java 12.0.1.j9-adpt              &amp;&amp; sdk ...&quot;</code>`}</pre>
<h3 id="${"prebuilds"}">Prebuilds<a href="${"#prebuilds"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod provides disposable dev environments, which means you are getting fresh development environments for every task. So configuring them to be ready-to-code is crucial to get the most out of Gitpod.</p>
<p>In the generated <code>.gitpod.yml</code> you will find the following section:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token comment"># List the startup tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/</span>
<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> echo 'init script' <span class="token comment"># runs during prebuild</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> echo 'start script'</code>`}</pre>
<p>You can have as many tasks as you which, each will result in an opened terminal when you start a dev environment.</p>
<p>Each task supports multiple phases, most importantly <code>before</code>, <code>init</code>, <code>command</code>. To be ready to code a dev environment should not only be in sync with the git repo but also needs to have the currently checked out state built.
For instance, in the <a href="${"https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}">Spring Petclinic demo</a> the command section looks like this:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token comment"># startup tasks</span>
<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> ./mvnw package <span class="token punctuation">-</span>DskipTests
    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar target/<span class="token important">*.jar</span></code>`}</pre>
<p>Since we have installed the <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">Gitpod app</a> on that GitHub repository, Gitpod will prebuild any branch as soon as it starts. During a prebuild it will</p>
<ol><li>start a container based on the docker image,</li>
<li>clone the repository and check out the respective branch,</li>
<li>run the <code>before</code> and <code>init</code> parts of every task,</li>
<li>capture the result and store it</li></ol>
<p>Once you or your teammates start a dev environment, you will get the prebuild state. The log output from <code>init</code> is still presented in the terminal but it will have two additional lines, e.g.:</p>
<pre class="${"language-sh"}">${`<code class="language-sh">\u{1F34C} This task ran as part of a workspace prebuild.
\u{1F389} You just saved 4 minutes of watching your code build.</code>`}</pre>
<h2 id="${"ide-features"}">IDE features<a href="${"#ide-features"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"debugging"}">Debugging<a href="${"#debugging"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Here is a quick clip on how to automatically configure debugging for Java!</p>
<p><img src="${"/images/docs/JavaDebug.gif"}" alt="${"Java debugging example"}"></p>
<p>So, basically in this video we:</p>
<ol><li>First, open the Java file that we want to debug</li>
<li>Then, go to the debug menu and select \u201CAdd Configuration\u2026\u201D</li>
<li>Next, in the dropdown choose \u201CJava: Launch Program in Current File\u201D</li>
<li>Finally, start debugging your Java program!</li></ol>
<p>You can also create the Java debug configuration file manually</p>
<p>To start debugging your Java application in Gitpod, please create a new directory called <code>.theia/</code>, and inside add a file called <code>launch.json</code>, finally add the following to it:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
  <span class="token comment">// Hover to view descriptions of existing attributes.</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Debug (Launch) - Current File"</span><span class="token punctuation">,</span>
      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
      <span class="token property">"mainClass"</span><span class="token operator">:</span> <span class="token string">"$&#123;file&#125;"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Then, simply open the Java file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \u201CRun\u201D button.</p>
<br>
<p>To see a basic repository with Java debugging enabled, please check out <a href="${"https://github.com/gitpod-io/Gitpod-Java-Debugging"}" rel="${"nofollow"}">gitpod-io/Gitpod-Java-Debugging</a>:</p>
<p><a href="${"https://gitpod.io/#tps://github.com/gitpod-io/Gitpod-Java-Debugging"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<p>For more please see <a href="${"https://code.visualstudio.com/docs/java/java-debugging"}" rel="${"nofollow"}">VSCode\u2019s docs</a></p>
<h3 id="${"vscode-extensions"}">VSCode extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod comes equipped with the following VS Code extensions:</p>
<ul><li><a href="${"https://marketplace.visualstudio.com/items?itemName=redhat.java"}" rel="${"nofollow"}">Language Support for Java(TM)</a></li>
<li><a href="${"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug"}" rel="${"nofollow"}">Debugger for Java</a></li>
<li><a href="${"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency"}" rel="${"nofollow"}">Java Dependency Viewer</a></li></ul>
<p>You can <a href="${"/docs/vscode-extensions"}">install additional extensions</a> for your project if you want.</p>
<p>Most of the information you find in the <a href="${"https://code.visualstudio.com/docs/languages/java"}" rel="${"nofollow"}">Java for VS Code</a> documentation applies to Gitpod as well.</p>
<h2 id="${"vaadin-in-gitpod"}">Vaadin in Gitpod<a href="${"#vaadin-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To work with Vaadin in Gitpod, you will need to properly configure your repository. Here is how to do it.</p>
<h3 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Here are a few Vaadin example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/vaadin-learning-center/crm-tutorial"}" rel="${"nofollow"}">Vaadin CRM</a></td>
<td>Full-stack Vaadin and Spring Boot</td>
<td><a href="${"https://gitpod.io/#https://github.com/vaadin-learning-center/crm-tutorial"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/vaadin/skeleton-starter-flow-spring"}" rel="${"nofollow"}">Vaadin starter</a></td>
<td>An empty starter for a new Vaadin project</td>
<td><a href="${"https://gitpod.io/#https://github.com/vaadin/skeleton-starter-flow-spring"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h3 id="${"configuring-gitpod-for-a-vaadin-project"}">Configuring Gitpod for a Vaadin project<a href="${"#configuring-gitpod-for-a-vaadin-project"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Start by downloading a <a href="${"https://vaadin.com/start"}" rel="${"nofollow"}"><strong>Vaadin and Spring Boot</strong> project starter</a> if you don\u2019t have a Vaadin project from before.</p>
<p>Next, add a <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}"><code>.gitpod.yml</code></a> file with the follwing content to the root of the project:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">tasks:
  - command: mvn spring-boot:run
ports:
  - port: 8080
    onOpen: open-preview</code>`}</pre>
<p>This will start the development server and open up the application in the preview browser window.</p>
<p>You are now ready to push your code to GitHub.</p>
<h3 id="${"enable-prebuilds-for-a-faster-startup"}">Enable prebuilds for a faster startup<a href="${"#enable-prebuilds-for-a-faster-startup"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The first time you start a Vaadin application, it downloads both Maven and npm dependencies, which can take some time. You can speed up the GitPod startup by enabling <a href="${"https://www.gitpod.io/docs/prebuilds"}" rel="${"nofollow"}">prebuild</a> for the repository.</p>
<p>Update your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}"><code>.gitpod.yml</code></a> file with the following content:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">tasks:
  - prebuild: mvn install spring-boot:start spring-boot:stop -DskipTests
    command: mvn spring-boot:run
ports:
  - port: 8080
    onOpen: open-preview
github:
  prebuilds:
    master: true</code>`}</pre>
<p>Finally, enable prebuilds on GitHub <a href="${"https://www.gitpod.io/docs/prebuilds#enable-prebuilt-workspaces"}" rel="${"nofollow"}">as instructed in the prebuild documentation</a>.</p>
<p>Next time you push code to your repository, the <code>prebuild</code> command will download all the dependencies and make the project startup faster.</p>`
  })}`;
});
var java = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Java,
  metadata: metadata$b,
  prerender: prerender$b
});
const metadata$a = {
  section: "languages-and-frameworks",
  title: "Ruby in Gitpod"
};
const prerender$a = true;
const Ruby = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$a), {}, {
    default: () => `<h1 id="${"ruby-in-gitpod"}">Ruby in Gitpod<a href="${"#ruby-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>It\u2019s relatively easy to set up your Ruby project in Gitpod.</p>
<h2 id="${"ruby-versions"}">Ruby Versions<a href="${"#ruby-versions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>As of this writing, Gitpod comes with Ruby 2.6.6 pre-installed.</p>
<p>To use a different Ruby version (for example, 2.5.1) you can create a <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> for your project, and then add something like the second paragraph to it:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full
USER gitpod

# Install Ruby version 2.5.1 and set it as default
RUN echo &quot;rvm_gems_path=/home/gitpod/.rvm&quot; &gt; ~/.rvmrc
RUN bash -lc &quot;rvm install ruby-2.5.1 &amp;&amp;               rvm use ruby-ruby-2.5.1 --default&quot;
RUN echo &quot;rvm_gems_path=/workspace/.rvm&quot; &gt; ~/.rvmrc</code>`}</pre>
<blockquote><p>\u{1F4A1} Explanation: Gitpod initially <a href="${"https://github.com/gitpod-io/workspace-images/blob/b4b8a2b796ce570efa3aef2fc9d12d5c9803d0d2/full/Dockerfile#L228-L243"}" rel="${"nofollow"}">sets up RVM</a> in <code>/home/gitpod/.rvm</code>, but then later switches the RVM configuration directory to <code>/workspace/.rvm</code>, so that any user-made changes (like installing new gems) are persisted within a Gitpod workspace. However, during the Dockerfile build, the <code>/workspace</code> directory doesn\u2019t exist yet, so we temporarily reset RVM\u2019s configuration directory to <code>/home/gitpod/.rvm</code>.</p></blockquote>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Ruby example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/gitpod-io/ruby-on-rails"}" rel="${"nofollow"}">Ruby on Rails template</a></td>
<td>Ruby on Rails template with a PostgreSQL database</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/ruby-on-rails"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/forem/forem"}" rel="${"nofollow"}">Forem</a></td>
<td>The platform that powers <a href="${"https://dev.to"}" rel="${"nofollow"}">dev.to</a></td>
<td><a href="${"https://gitpod.io/#https://github.com/forem/forem"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://gitlab.com/gitlab-org/gitlab"}" rel="${"nofollow"}">GitLab</a></td>
<td>The open source end-to-end software development platform</td>
<td><a href="${"https://gitpod.io/#https://gitlab.com/gitlab-org/gitlab"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few useful extensions that you\u2019ll likely want to install in your Ruby project.</p>
<h3 id="${"ruby-test-explorer"}"><a href="${"https://marketplace.visualstudio.com/items?itemName=connorshea.vscode-ruby-test-adapter"}" rel="${"nofollow"}">Ruby Test Explorer</a><a href="${"#ruby-test-explorer"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>With the Ruby test explorer, you can run unit tests from within the Gitpod UI.
<img src="${"/images/docs/ruby_test_ui.png"}" alt="${"Ruby test explorer example"}">
To add this extension to your repository, simply add these lines to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> configuration file:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">vscode:
  extensions:
    - connorshea.vscode-ruby-test-adapter@0.6.1:HO9rpcRv7bmRIuo7Mty/zg==
    - hbenl.vscode-test-explorer@2.15.0:koqDUMWDPJzELp/hdS/lWw==</code>`}</pre>
<h2 id="${"ruby-on-rails"}">Ruby On Rails<a href="${"#ruby-on-rails"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>So, you want to write your cool new Ruby On Rails application in Gitpod? Well, here is an idea of how to do it. Please take a look at our <a href="${"https://github.com/gitpod-io/Gitpod-Ruby-On-Rails"}" rel="${"nofollow"}">minimal Rails example</a> running in Gitpod:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Ruby-On-Rails"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>`
  })}`;
});
var ruby = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Ruby,
  metadata: metadata$a,
  prerender: prerender$a
});
const metadata$9 = {
  section: "languages-and-frameworks",
  title: "Rust in Gitpod"
};
const prerender$9 = true;
const Rust = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$9), {}, {
    default: () => `<h1 id="${"rust-in-gitpod"}">Rust in Gitpod<a href="${"#rust-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Welcome, Rustacean!</p>
<p>Rust is a first-class language in Gitpod, and we believe that Gitpod is a great tool for Rust projects. Some of Gitpod\u2019s core developers frequently work with Rust code (in Gitpod), and several key components of Gitpod are written in Rust:</p>
<ul><li>The fantastic language support is provided by the <a href="${"https://github.com/rust-lang/rls"}" rel="${"nofollow"}">rls</a></li>
<li>The blazing-fast workspace search is powered by <a href="${"https://github.com/BurntSushi/ripgrep"}" rel="${"nofollow"}">ripgrep</a></li></ul>
<h2 id="${"rust-version"}">Rust Version<a href="${"#rust-version"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod always comes with the latest available Rust toolchain pre-installed using <a href="${"https://rustup.rs/"}" rel="${"nofollow"}">rustup</a>. (As of this writing, the Rust version is <code>1.52.1</code> and it\u2019s updated <a href="${"https://github.com/gitpod-io/workspace-images/pull/282/files"}" rel="${"nofollow"}">semi-automatically</a> on every official Rust release.)</p>
<p>You can also use <code>rustup</code> yourself in Gitpod in order to switch to a different Rust version, or to install extra components. See the <a href="${"https://rust-lang.github.io/rustup/index.html"}" rel="${"nofollow"}">the rustup book</a> to learn more about <code>rustup</code> itself.</p>
<p>Note: If you try to use <code>rustup</code> in your repository\u2019s <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a>, you might get the following error:</p>
<pre class="${"language-null"}">${`<code class="language-null">/bin/sh: rustup command not found</code>`}</pre>
<p>To fix this, simply wrap the <code>rustup</code> command in a login Bash shell, like so:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN bash -cl &quot;rustup toolchain install nightly&quot;</code>`}</pre>
<p>You can override this default by committing a <code>rustup-toolchain</code> file in the root of your repository. Say for example you need the nightly compiler for March 4th, 2020, you would create a <code>rustup-toolchain</code> file and add the following</p>
<pre class="${"language-text"}">${`<code class="language-text">nightly-2020-03-04</code>`}</pre>
<p>which will set the required Rust version and if you commit the file into source control it will set the default nightly version across all workspaces.</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Rust example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/nushell/nushell/"}" rel="${"nofollow"}">Nushell</a></td>
<td>A next-gen shell for the GitHub era</td>
<td><a href="${"https://gitpod.io/#https://github.com/nushell/nushell"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/JesterOrNot/mathlang"}" rel="${"nofollow"}">MathLang</a></td>
<td>Basic maths language in Rust</td>
<td><a href="${"https://gitpod.io/#https://github.com/JesterOrNot/MathLang"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/servo/servo"}" rel="${"nofollow"}">Servo</a></td>
<td>The Servo Browser Engine</td>
<td><a href="${"https://gitpod.io/#https://github.com/servo/servo"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>The most popular Rust VSCode extensions are already pre-installed in Gitpod. But here are a few \u201Cnice to have\u201D extensions you may choose to install as well.</p>
<p>In order to install one of these extensions for your repository, simply head to Gitpod\u2019s <a href="${"/docs/vscode-extensions"}">Extensions panel</a> (find it in the IDE\u2019s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.</p>
<h3 id="${"rust-test-explorer"}">Rust Test Explorer<a href="${"#rust-test-explorer"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/rustTest.png"}" alt="${"Rust test explorer example"}"></p>
<br>
<br>
The Rust Test Explorer makes it easy to run Rust tests.
<h3 id="${"crates"}">Crates<a href="${"#crates"}"><span class="${"icon icon-link"}"></span></a></h3>
<blockquote><p><strong><em>Note: This extension outputs emojis by default if the crate version is set at the latest. You can disable this by using <code>crates.upToDateDecorator</code> option in your preferences</em></strong> &gt; <br></p></blockquote>
<p><img src="${"/images/docs/cratesDemo.gif"}" alt="${"A crates extension demo"}">
The VSCode extension Crates makes it easier to manage your Cargo dependency versions.</p>
<h3 id="${"psearch-cratesiop"}"><p>Search Crates.io</p><a href="${"#psearch-cratesiop"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/searchCratesio.gif"}" alt="${"An example of search crates.io extension"}"></p>
<p>Do you have an idea of a library you want to use but don\u2019t know the version well just type in the name of the library and Search Crates.io will get the version.</p>
<h3 id="${"better-toml"}">Better TOML<a href="${"#better-toml"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/feature_syntax_highlight.png"}" alt="${"TOML Syntax highlighting example"}"></p>
<p>Better TOML adds syntax highlighting to your <code>Cargo.toml</code>.</p>
<h2 id="${"cross-compiling-with-musl"}">Cross-compiling with MUSL<a href="${"#cross-compiling-with-musl"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To cross-compile with MUSL in Gitpod, you can:</p>
<ul><li>Run <code>rustup target add x86_64-unknown-linux-musl</code>, for example in your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a></li>
<li>Then, build with <code>cargo build --target x86_64-unknown-linux-musl</code></li></ul>
<p>To learn more, see <a href="${"https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html"}" rel="${"nofollow"}">MUSL support for fully static binaries</a>.</p>
<h2 id="${"debugging"}">Debugging<a href="${"#debugging"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>In this section we will show you how to configure your project for debugging in Gitpod.</p>
<p>First, before we get to that we need to get some prerequisites set-up.</p>
<p>First we\u2019ll install the needed extension. If you haven\u2019t already, head over to Gitpod\u2019s <a href="${"/docs/vscode-extensions"}">Extensions panel</a> (left vertical menu in the IDE) and search for an extension called <code>Native Debug</code> by webfreak. When you see it, click to install it for your project.</p>
<p>The next prerequisite is a Docker configuration.</p>
<p>If you already have a <a href="${"/docs/config-docker"}">.gitpod.Dockerfile</a> just add the following:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN sudo apt-get -q update     &amp;&amp; sudo apt-get install -yq         libpython3.6         rust-lldb     &amp;&amp; sudo rm -rf /var/lib/apt/lists/*

ENV RUST_LLDB=/usr/bin/lldb-8</code>`}</pre>
<p>If not there are two steps. First, create a file called <code>.gitpod.Dockerfile</code> with the following content:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

USER gitpod

RUN sudo apt-get -q update     &amp;&amp; sudo apt-get install -yq         libpython3.6         rust-lldb     &amp;&amp; sudo rm -rf /var/lib/apt/lists/*

ENV RUST_LLDB=/usr/bin/lldb-8</code>`}</pre>
<p>Next, add the following to your <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> file:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile</code>`}</pre>
<p>Now that thats out of the way, here is a video on how to configure the debug configuration</p>
<p><img src="${"/images/docs/RustDebug.gif"}" alt="${"Rust debugging example"}"></p>
<p>So, basically in this video we:</p>
<ol><li>Go to the debug menu and select \u201CAdd Configuration\u2026\u201D</li>
<li>Next, in the dropdown choose \u201CGDB: Launch Program\u201D</li>
<li>Go to the <code>Cargo.toml</code> file and find the name of the program.</li>
<li>Modify the target field and change it to <code>\${workspaceFolder}/target/debug/&lt;PROGRAM_NAME&gt;</code> where <code>&lt;PROGRAM_NAME&gt;</code> is the name of the program under the name field in the <code>Cargo.toml</code> file.</li>
<li>Add another property to the created file called <code>preLaunchTask</code> and set it to \u201Ccargo\u201D</li>
<li>Go to the terminal menu and click configure tasks</li>
<li>Select cargo build from the menu that pops up</li>
<li>change the tag <code>type</code> to <code>command</code></li>
<li>change the tag <code>subcommand</code> to <code>args</code> and the value to <code>[&quot;build&quot;]</code></li>
<li>Next remove the <code>problemMatcher</code> field.</li>
<li>Add a field called <code>type</code> and set it to <code>process</code></li>
<li>Add a field called <code>label</code> and set it to <code>cargo</code></li>
<li>Go to the Rust file you want to debug</li>
<li>Add a breakpoint or two</li>
<li>Go back to the debug menu that has the crossed out spider</li>
<li>Click the green run button.</li>
<li>Finally, start debugging your Rust program!</li></ol>
<p>You can also create the Rust debug configuration file manually</p>
<p>To start debugging your Rust application in Gitpod, please create a new directory called <code>.theia/</code>, and inside add a file called <code>launch.json</code>, add the following to it:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
  <span class="token comment">// Hover to view descriptions of existing attributes.</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>
      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Debug Rust Code"</span><span class="token punctuation">,</span>
      <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"cargo"</span><span class="token punctuation">,</span>
      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/target/debug/rust_debug"</span><span class="token punctuation">,</span>
      <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>
      <span class="token property">"valuesFormatting"</span><span class="token operator">:</span> <span class="token string">"parseText"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Next create another file in the same <code>.theia/</code> directory called <code>tasks.json</code> with the following content:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cargo"</span><span class="token punctuation">,</span>
      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"build"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"process"</span><span class="token punctuation">,</span>
      <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"cargo"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Then, simply open the Rust file you want to debug, add some breakpoints, and open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \u201CRun\u201D button.</p>
<br>
<p>To see a basic repository with Rust debugging configured, please check out <a href="${"https://github.com/gitpod-io/Gitpod-Rust-Debug"}" rel="${"nofollow"}">gitpod-io/Gitpod-Rust-Debug</a>:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Rust-Debug"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<br>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><strong><em><a href="${"https://www.gitpod.io/blog/docker-in-gitpod"}" rel="${"nofollow"}">Rocket-Example</a></em></strong> For an example of how to setup a project for the <a href="${"https://rocket.rs/"}" rel="${"nofollow"}"><code>Rocket</code></a> web-development framework</li></ul>`
  })}`;
});
var rust = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Rust,
  metadata: metadata$9,
  prerender: prerender$9
});
const metadata$8 = {
  section: "languages-and-frameworks",
  title: "C++ in Gitpod"
};
const prerender$8 = true;
const Cpp = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$8), {}, {
    default: () => `<h1 id="${"c-in-gitpod"}">C++ in Gitpod<a href="${"#c-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod supports C++ right out of the box, but there are still ways to enhance your C++ experience within Gitpod.</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few C++ example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/Circuito-io/ComponentEditor"}" rel="${"nofollow"}">Component Editor</a></td>
<td>circuito.io Component Editor</td>
<td><a href="${"https://gitpod.io/#https://github.com/Circuito-io/ComponentEditor"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/ssloy/tinyraycaster"}" rel="${"nofollow"}">tinyraycaster</a></td>
<td>old-school FPS in a weekend</td>
<td><a href="${"https://gitpod.io/#https://github.com/ssloy/tinyraycaster"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/Shadouw/HelloGitPod"}" rel="${"nofollow"}">HelloGitPod</a></td>
<td>Example Gitpod C++ configuration with <code>clang-tidy</code> linter enabled</td>
<td><a href="${"https://gitpod.io/#https://github.com/Shadouw/HelloGitPod/blob/master/main.cpp"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"environment"}">Environment<a href="${"#environment"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"c-tools"}">C++ Tools<a href="${"#c-tools"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>All Gitpod workspaces come with the latest available <code>clang</code>, <code>gcc</code>, <code>cmake</code>, <code>gdb</code>, and other useful C++ tools pre-installed by default.</p>
<p>However, if you\u2019re missing some additional tools, you can simply run <code>brew install &lt;tool_name&gt;</code> to install it in the current workspace or <a href="${"https://www.gitpod.io/docs/config-docker/#creating-docker-images-for-gitpod"}" rel="${"nofollow"}">write your own .gitpod.Dockerfile</a> to install it across all workspaces for your repository.</p>
<h2 id="${"ide-features"}">IDE Features<a href="${"#ide-features"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"clangd-language-server"}">Clangd Language Server<a href="${"#clangd-language-server"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Gitpod\u2019s native C++ support is currently provided by Theia\u2019s native <a href="${"https://www.npmjs.com/package/@theia/cpp"}" rel="${"nofollow"}">C++ extension</a>, which builds upon Clangd for out-of-the-box language server support on C++ source files.</p>
<p>More complex projects may need a build system capable of outputting a <a href="${"https://clang.llvm.org/docs/JSONCompilationDatabase.html"}" rel="${"nofollow"}"><code>compile_commands.json</code> file</a> before Clangd can work fully.
The extension can be pointed to a directory containing this file as part of a build configuration within Theia\u2019s <code>settings.json</code>:</p>
<pre class="${"language-null"}">${`<code class="language-null">&#123;
  &quot;cpp.buildConfigurations&quot;: [
    &#123;
      &quot;name&quot;: &quot;Release&quot;,
      &quot;directory&quot;: &quot;/workspace/project/cmake/release/build&quot;
    &#125;,
    &#123;
      &quot;name&quot;: &quot;Debug&quot;,
      &quot;directory&quot;: &quot;/workspace/project/cmake/debug/build&quot;
    &#125;
  ]
&#125;</code>`}</pre>
<h3 id="${"debugging"}">Debugging<a href="${"#debugging"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Since <code>gdb</code> is already pre-installed in Gitpod, you can already debug any C, C++, Go, etc. program directly from the Terminal with a single command.</p>
<p>However, you can also get the IDE\u2019s Debugging features to work with your C++ program, using GDB as a backend.</p>
<p>To enable C++ debugging for your project, simply follow these steps:</p>
<ol><li><p>Open the Extensions panel (in the IDE\u2019s left vertical menu bar)</p></li>
<li><p>Use the Search feature to find the extension called \u201D<a href="${"https://open-vsx.org/extension/webfreak/debug"}" rel="${"nofollow"}">Native Debug</a>\u201D, then click on <code>Install</code>, and select <code>Install for this project</code></p></li>
<li><p>Next, open the Debug panel (also in the IDE\u2019s left vertical menu bar), and click on the Gear (\u2699\uFE0F) icon to open the <code>launch.json</code> configuration file</p></li>
<li><p>Finally, configure debugging for your project by adding a GDB launch configuration. You can use auto-completion for assistance. In the end, your <code>launch.json</code> should look something like this:</p></li></ol>
<pre class="${"language-js"}">${`<code class="language-js"><span class="token punctuation">&#123;</span>
  <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
  <span class="token comment">// Hover to view descriptions of existing attributes.</span>
  <span class="token string">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token string">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
          <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>
          <span class="token string">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
          <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"Debug Firefox (GDB)"</span><span class="token punctuation">,</span>
          <span class="token string">"target"</span><span class="token operator">:</span> <span class="token string">"./obj-x86_64-pc-linux-gnu/dist/bin/firefox"</span><span class="token punctuation">,</span>
          <span class="token string">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceRoot&#125;"</span><span class="token punctuation">,</span>
          <span class="token string">"valuesFormatting"</span><span class="token operator">:</span> <span class="token string">"parseText"</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Note: This example GDB launch configuration points to a compiled Firefox browser binary. You\u2019ll need to adjust it to point to your project\u2019s own compiled binary.</p>
<p>With this, you should be able to set breakpoints in your C++ code directly from the code editor margin, then start a debugging session from the Debug panel. The IDE should then show you debug information, hopefully pause execution on your breakpoint, and allow you to step through the code.</p>
<p>If that doesn\u2019t work, please feel free to ask for help in <a href="${"https://community.gitpod.io"}" rel="${"nofollow"}">community.gitpod.io</a> and we\u2019ll be happy to help you make debugging work for your project.</p>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a class="${"no-nowrap"}" href="${"https://community.gitpod.io/t/gitpod-and-c/622"}">How to enable the \`clang-tidy\` linter in Gitpod</a></li></ul>`
  })}`;
});
var cpp = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Cpp,
  metadata: metadata$8,
  prerender: prerender$8
});
const metadata$7 = {
  section: "languages-and-frameworks",
  title: "PHP in Gitpod"
};
const prerender$7 = true;
const Php = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$7), {}, {
    default: () => `<h1 id="${"php-in-gitpod"}">PHP in Gitpod<a href="${"#php-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod supports PHP right out of the box, but more advanced features such as debugging can be configured, so here is how to do it!</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/gitpod-io/symfony-demo"}" rel="${"nofollow"}">symfony-demo</a></td>
<td>A PHP/Symfony reference application following best practices</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/symfony-demo"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/nemke82/magento2gitpod"}" rel="${"nofollow"}">magento2gitpod</a></td>
<td>Magento 2 optimized setup for Gitpod: Nginx, MySQL, PHP 7.2, PHP-FPM and more</td>
<td><a href="${"https://gitpod.io/#https://github.com/nemke82/magento2gitpod"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/phanan/koel"}" rel="${"nofollow"}">koel</a></td>
<td>A personal music streaming server that works</td>
<td><a href="${"https://gitpod.io/#https://github.com/phanan/koel"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/bserem/gitpod-drupal-mysql-starterkit"}" rel="${"nofollow"}">drupal</a></td>
<td>Drupal 9 with MySQL, suitable for site building and contrib module development</td>
<td><a href="${"https://gitpod.io/#github.com/bserem/gitpod-drupal-mysql-starterkit"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"debugging-php-in-gitpod"}">Debugging PHP in Gitpod<a href="${"#debugging-php-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h2>
<p><img src="${"/images/docs/phpDebug.gif"}" alt="${"PHP debugging example"}"></p>
<p>The PHP Debug extension allows debugging PHP applications from within Gitpod.</p>
<p>To get this extension for your project, you must do two things:</p>
<p>First, you must create a <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> for your repository:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN sudo apt-get update -q     &amp;&amp; sudo apt-get install -y php-dev

RUN wget http://xdebug.org/files/xdebug-2.9.1.tgz     &amp;&amp; tar -xvzf xdebug-2.9.1.tgz     &amp;&amp; cd xdebug-2.9.1     &amp;&amp; phpize     &amp;&amp; ./configure     &amp;&amp; make     &amp;&amp; sudo mkdir -p /usr/lib/php/20190902     &amp;&amp; sudo cp modules/xdebug.so /usr/lib/php/20190902     &amp;&amp; sudo bash -c &quot;echo -e &#39;&#92;nzend_extension = /usr/lib/php/20190902/xdebug.so&#92;n[XDebug]&#92;nxdebug.remote_enable = 1&#92;nxdebug.remote_autostart = 1&#92;n&#39; &gt;&gt; /etc/php/7.4/cli/php.ini&quot;</code>`}</pre>
<p>Second, reference the above Dockerfile in a <a href="${"/docs/config-gitpod-file"}">.gitpod.yml</a> file, and then also install the extension, like so:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile
<span class="token comment"># This is to get rid of the annoying popup feel free to leave this out</span>
<span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span>
    <span class="token key atrule">onOpen</span><span class="token punctuation">:</span> ignore
<span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> felixfbecker.php<span class="token punctuation">-</span>debug@1.13.0<span class="token punctuation">:</span>WX8Y3EpQk3zgahy41yJtNQ==</code>`}</pre>
<p>Next create a new directory called <code>.theia</code> and in that directory add a file called <code>launch.json</code> and add the following content.</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"php"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Launch"</span><span class="token punctuation">,</span>
      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
      <span class="token property">"stopOnEntry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>
      <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceRoot&#125;"</span><span class="token punctuation">,</span>
      <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Then have fun debugging PHP</p>
<p>Finally, here is a full <a href="${"https://github.com/JesterOrNot/Gitpod-PHP-Debug"}" rel="${"nofollow"}">example repository</a> containing the complete Gitpod PHP debug configuration described above. You can try it by clicking here:</p>
<p><a href="${"https://gitpod.io/#https://github.com/JesterOrNot/Gitpod-PHP-Debug"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<h2 id="${"pecl-package-manager"}">PECL Package Manager<a href="${"#pecl-package-manager"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Gitpod\u2019s default workspace image also comes with the <a href="${"https://pecl.php.net/"}" rel="${"nofollow"}">PECL</a> package manager pre-installed. To install packages with it, you must use <code>sudo pecl install &lt;EXTENSION&gt;</code> in your repository\u2019s <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>, e.g. like so:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN sudo pecl channel-update pecl.php.net &amp;&amp;     sudo pecl install &lt;EXTENSION&gt;</code>`}</pre>
<p>where <code>&lt;EXTENSION&gt;</code> is the PHP extension you want to install, e.g. <code>xdebug</code>.</p>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a class="${"no-nowrap"}" href="${"https://notes.etin.space/posts/gitpodifying-a-new-laravel-application"}">Gitpodifying a new Laravel Application</a> by Etin Obaseki</li></ul>`
  })}`;
});
var php = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Php,
  metadata: metadata$7,
  prerender: prerender$7
});
const metadata$6 = {
  section: "languages-and-frameworks",
  title: "Vue.js in Gitpod"
};
const prerender$6 = true;
const Vue = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$6), {}, {
    default: () => `<h1 id="${"vuejs-in-gitpod"}">Vue.js in Gitpod<a href="${"#vuejs-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>To work with Vue.js in Gitpod, you will need to properly configure your repository. Here is how to do it.</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Vue.js example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th>Try it</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/vuejs/vuepress"}" rel="${"nofollow"}">vuepress</a></td>
<td>Minimalistic Vue-powered static site generator</td>
<td><a href="${"https://gitpod.io/#https://github.com/vuejs/vuepress"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/liyasthomas/postwoman"}" rel="${"nofollow"}">postwoman</a></td>
<td>A free, fast and beautiful API request builder (web alternative to Postman)</td>
<td><a href="${"https://gitpod.io/#https://github.com/liyasthomas/postwoman"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/nuxt/nuxtjs.org"}" rel="${"nofollow"}">nuxtjs.org</a></td>
<td>Nuxt.js Documentation Website (Universal Vue.js Application built with Nuxt.js)</td>
<td><a href="${"https://gitpod.io/#https://github.com/nuxt/nuxtjs.org"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"vue-cli"}">Vue-CLI<a href="${"#vue-cli"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>To install the Vue.js command-line interface in your current workspace run the following</p>
<pre class="${"language-bash"}">${`<code class="language-bash"><span class="token function">npm</span> i -g vue-cli</code>`}</pre>
<p>To install globally across all workspaces add the following to your <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a></p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">RUN npm i -g vue-cli</code>`}</pre>
<blockquote><p>Please note: If you don\u2019t already have one please run <a href="${"https://www.gitpod.io/docs/command-line-interface/#init"}" rel="${"nofollow"}"><code>gp init</code></a> which should generate two files <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> and <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a></p></blockquote>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"vetur"}">Vetur<a href="${"#vetur"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/Vetur.png"}" alt="${"Vetur extension"}"></p>
<p>Vetur provides syntax highlighting, snippets, Emmet support, linting/error checking, auto-formatting, and auto-complete for Vue files.</p>
<p>To add this extension to your repository add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a></p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> octref.vetur@0.23.0<span class="token punctuation">:</span>TEzauMObB6f3i2JqlvrOpA==</code>`}</pre>
<p>For projects that already have a <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a>, you can skip the first part and just add the provided snippet.</p>`
  })}`;
});
var vue = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Vue,
  metadata: metadata$6,
  prerender: prerender$6
});
const metadata$5 = {
  section: "languages-and-frameworks",
  title: "Go in Gitpod"
};
const prerender$5 = true;
const Go = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$5), {}, {
    default: () => `<h1 id="${"go-in-gitpod"}">Go in Gitpod<a href="${"#go-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Gitpod supports Go right out of the box, but there are still ways to optimize your Go experience within Gitpod.</p>
<h2 id="${"example-repositories"}">Example Repositories<a href="${"#example-repositories"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here are a few Go example projects that are already automated with Gitpod:</p>
<div class="${"table-container"}"><table><thead><tr><th>Repository</th>
<th>Description</th>
<th align="${"right"}">Try It</th></tr></thead>
<tbody><tr><td><a href="${"https://github.com/prometheus/prometheus"}" rel="${"nofollow"}">prometheus</a></td>
<td>The Prometheus monitoring system and time series database</td>
<td align="${"right"}"><a href="${"https://gitpod.io/#https://github.com/prometheus/prometheus"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/inlets/inlets"}" rel="${"nofollow"}">inlets</a></td>
<td>Cloud Native Tunnel for APIs</td>
<td align="${"right"}"><a href="${"https://gitpod.io/#https://github.com/inlets/inlets"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/go-swagger/go-swagger"}" rel="${"nofollow"}">go-swagger</a></td>
<td>A simple yet powerful representation of your RESTful API</td>
<td align="${"right"}"><a href="${"https://gitpod.io/#https://github.com/go-swagger/go-swagger"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/gitpod-io/go-gin-app"}" rel="${"nofollow"}">go-gin-app</a></td>
<td>Gin example running in Gitpod</td>
<td align="${"right"}"><a href="${"https://gitpod.io/#https://github.com/gitpod-io/go-gin-app"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td><a href="${"https://github.com/gosh-terminal/gosh"}" rel="${"nofollow"}">gosh-terminal</a></td>
<td>A terminal implemented in Go where you can do anything</td>
<td align="${"right"}"><a href="${"https://gitpod.io/#https://github.com/gosh-terminal/gosh"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table></div>
<h2 id="${"workspace-configuration"}">Workspace Configuration<a href="${"#workspace-configuration"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h3>
<div class="${"table-container"}"><table><thead><tr><th>Name</th>
<th>Description</th></tr></thead>
<tbody><tr><td><a href="${"https://marketplace.visualstudio.com/items?itemName=premparihar.gotestexplorer"}" rel="${"nofollow"}">Go Test Explorer</a></td>
<td>Provides Test Explorer for Go which allows you to run your tests at the click of a button!</td></tr></tbody></table></div>
<p>To install Go Test Explorer for your repository, add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a></p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">vscode:
  extensions:
    - premparihar.gotestexplorer@0.1.10:jvUM8akrQ67vQxfjaxCgCg==</code>`}</pre>
<h3 id="${"start-up-tasks"}"><strong><a href="${"https://www.gitpod.io/docs/config-start-tasks"}" rel="${"nofollow"}">Start-up tasks</a></strong><a href="${"#start-up-tasks"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Here is how to have your dependencies automatically fetched before you open your Gitpod workspace!</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> go get <span class="token punctuation">-</span>v <span class="token punctuation">-</span>t <span class="token punctuation">-</span>d ./<span class="token punctuation">...</span></code>`}</pre>
<p>A full example of a <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> file might look like this</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> gitpod/workspace<span class="token punctuation">-</span>full

<span class="token key atrule">tasks</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">init</span><span class="token punctuation">:</span> go get <span class="token punctuation">-</span>v <span class="token punctuation">-</span>t <span class="token punctuation">-</span>d ./<span class="token punctuation">...</span>

<span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> premparihar.gotestexplorer@0.1.10<span class="token punctuation">:</span>jvUM8akrQ67vQxfjaxCgCg==</code>`}</pre>
<h3 id="${"using-the-dep-dependency-manager-in-gitpod"}">Using the <code>dep</code> dependency manager in Gitpod<a href="${"#using-the-dep-dependency-manager-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>If your project uses the <a href="${"https://golang.github.io/dep/"}" rel="${"nofollow"}"><code>dep</code></a> dependency manager then you need to add a <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a> to your project. A basic example that extends the default workspace image might be something like:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

USER gitpod

RUN brew install dep</code>`}</pre>
<p>Also, don\u2019t forget to reference the above Dockerfile in your <code>.gitpod.yml</code> configuration file, like so:</p>
<pre class="${"language-YAML"}">${`<code class="language-YAML">image:
  file: .gitpod.Dockerfile

tasks:
  - init: dep ensure

vscode:
  extensions:
    - premparihar.gotestexplorer@0.1.10:jvUM8akrQ67vQxfjaxCgCg==</code>`}</pre>
<h2 id="${"debugging"}">Debugging<a href="${"#debugging"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Here is a quick clip on how to automatically configure debugging for Go!</p>
<p><img src="${"/images/docs/GoDebug.gif"}" alt="${"Go debugging example"}"></p>
<p>So, basically in this video we:</p>
<ol><li>First, open the Go file that we want to debug</li>
<li>Then, go to the debug menu and select \u201CAdd Configuration\u2026\u201D</li>
<li>Next, in the dropdown choose \u201CGo launch file\u201D</li>
<li>Finally, start debugging your Go program!</li></ol>
<p>You can also create the Go debug configuration file manually</p>
<p>To start debugging your Go application in Gitpod, please create a new directory called <code>.theia/</code>, and inside add a file called <code>launch.json</code>, finally, add the following to it:</p>
<pre class="${"language-json"}">${`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
  <span class="token comment">// Hover to view descriptions of existing attributes.</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Launch file"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"go"</span><span class="token punctuation">,</span>
      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
      <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"debug"</span><span class="token punctuation">,</span>
      <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;file&#125;"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>Then, simply open the Go file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \u201CRun\u201D button.</p>
<br>
<p>To see a basic repository with Go debugging enabled, please check out <a href="${"https://github.com/gitpod-io/Gitpod-Go-Debug"}" rel="${"nofollow"}">gitpod-io/Gitpod-Go-Debug</a>:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Go-Debug"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>
<h2 id="${"further-reading"}">Further Reading<a href="${"#further-reading"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li><a href="${"https://code.visualstudio.com/docs/languages/go"}" rel="${"nofollow"}">VSCode/Go Documentation</a> The stuff here also applies to Gitpod!</li>
<li><a href="${"https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code"}" rel="${"nofollow"}">VSCode/Go debugging</a> VSCode\u2019s Documentation on Go debugging</li></ul>`
  })}`;
});
var go = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Go,
  metadata: metadata$5,
  prerender: prerender$5
});
const metadata$4 = {
  section: "languages-and-frameworks",
  title: "R in Gitpod"
};
const prerender$4 = true;
const R = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$4), {}, {
    default: () => `<h1 id="${"r-in-gitpod"}">R in Gitpod<a href="${"#r-in-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>To work with R in Gitpod, you will need to properly configure your repository. Here is how to do it.</p>
<h2 id="${"installing-r"}">Installing R<a href="${"#installing-r"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>First, you\u2019ll probably want to install R itself. To do this, add a new file to your repository called <a href="${"https://www.gitpod.io/docs/config-docker"}" rel="${"nofollow"}">.gitpod.Dockerfile</a>, and add the following content to it:</p>
<pre class="${"language-Dockerfile"}">${`<code class="language-Dockerfile">FROM gitpod/workspace-full

RUN brew install R</code>`}</pre>
<p>Next, create a Gitpod configuration file called <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> (you can also simply run <code>gp init</code> and Gitpod will generate the file), and reference the above Dockerfile in it like so:</p>
<pre class="${"language-yml"}">${`<code class="language-yml"><span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span> .gitpod.Dockerfile</code>`}</pre>
<p>Then commit and push both files to your repository. After that, every new Gitpod workspace created for your project will have R pre-installed.</p>
<h2 id="${"vscode-extensions"}">VSCode Extensions<a href="${"#vscode-extensions"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"r-extension"}">R Extension<a href="${"#r-extension"}"><span class="${"icon icon-link"}"></span></a></h3>
<p><img src="${"/images/docs/RGitpod.png"}" alt="${"R extension"}">
To install the R extension to your repository, add the following to your <a href="${"https://www.gitpod.io/docs/config-gitpod-file"}" rel="${"nofollow"}">.gitpod.yml</a> file:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">vscode</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Ikuyadeu.r@1.2.1<span class="token punctuation">:</span>z5vr1v1bfS++U/aHLSXQ6Q==</code>`}</pre>
<p>Here is a minimal example of <a href="${"https://github.com/gitpod-io/Gitpod-R"}" rel="${"nofollow"}">R running in Gitpod</a>. You can try it here:</p>
<p><a href="${"https://gitpod.io/#https://github.com/gitpod-io/Gitpod-R"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></p>`
  })}`;
});
var r = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: R,
  metadata: metadata$4,
  prerender: prerender$4
});
const metadata$3 = {
  section: "configure",
  title: "Prebuilds"
};
const prerender$3 = true;
const Prebuilds = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$3), {}, {
    default: () => `<h1 id="${"prebuilds"}">Prebuilds<a href="${"#prebuilds"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Download &amp; install dependencies, run build scripts, you name it - tasks Gitpod takes care of <strong>before</strong> you start a new development environment so you don\u2019t have to wait for any of that.</p>
<p>With prebuilds enabled for your project, Gitpod runs the <code>before</code>, <code>init</code> and <code>prebuild</code> commands in your <a href="${"/docs/config-gitpod-file"}"><code>.gitpod.yml</code></a> file every time code is pushed to your repository. The resulting snapshot of the development environment is called a prebuilt workspace.</p>
<p>When anyone starts a new workspace, all Gitpod needs to do is load the prebuilt workspace. Since the heavy-lifting happened during the prebuild phase, the workspace starts up quickly, allowing you to start your work right away.</p>
<p><span class="${"video-container"}"><iframe title="${"Youtube Video"}" width="${"800"}" height="${"400"}" src="${"https://www.youtube.com/embed/KR8ESjGYsXI?rel=0"}" class="${"embedVideo-iframe"}" style="${"border:0"}" allowfullscreen sandbox="${"allow-same-origin allow-scripts allow-popups"}"></iframe></span></p>
<h2 id="${"enable-prebuilt-workspaces"}">Enable Prebuilt Workspaces<a href="${"#enable-prebuilt-workspaces"}"><span class="${"icon icon-link"}"></span></a></h2>
<h3 id="${"on-github"}">On GitHub<a href="${"#on-github"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To enable prebuilt workspaces for a GitHub repository, follow these steps:</p>
<ol><li>Go to the <a href="${"https://github.com/apps/gitpod-io"}" target="${"_blank"}">Gitpod GitHub app</a> and click <code>Configure</code></li>
<li>Choose the organization or account you wish to install the Gitpod app for, then click <code>Install</code></li>
<li>You will be forwarded to Gitpod where you can confirm the installation</li></ol>
<h3 id="${"on-gitlab"}">On GitLab<a href="${"#on-gitlab"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To enable prebuilt workspaces for a GitLab repository, follow these steps:</p>
<ol><li>Allow Gitpod to install repository webhooks, by granting <code>api</code> permissions in <a href="${"https://gitpod.io/integrations"}" rel="${"nofollow"}">Git Provider Integrations</a></li>
<li>Trigger a first prebuild manually, by prefixing the repository URL with <code>gitpod.io/#prebuild/</code> e.g. like so:</li></ol>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#prebuild/https://gitlab.com/gitpod-io/gitpod</code>`}</pre>
<p>This will <a href="${"#manual-execution-of-prebuild"}">start a prebuild</a>, and also install a webhook that will trigger new Gitpod prebuilds for every new push to any of your branches to your repository.</p>
<p>If you want to trigger new Gitpod prebuilds for specific branches only, you can configure this in your Gitlab <a href="${"https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#branch-filtering"}" rel="${"nofollow"}">project settings</a>.</p>
<h3 id="${"on-bitbucket"}">On Bitbucket<a href="${"#on-bitbucket"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>To enable prebuilt workspaces for a Bitbucket repository, follow these steps:</p>
<ol><li>Allow Gitpod to install repository webhooks, by granting <code>webhook</code> permissions in <a href="${"https://gitpod.io/integrations"}" rel="${"nofollow"}">Git Provider Integrations</a></li>
<li>Trigger a first prebuild manually, by prefixing the repository URL with <code>gitpod.io/#prebuild/</code> e.g. like so:</li></ol>
<pre class="${"language-null"}">${`<code class="language-null">gitpod.io/#prebuild/https://bitbucket.org/gitpod-io/gitpod</code>`}</pre>
<p>This will <a href="${"#manual-execution-of-prebuild"}">start a prebuild</a>, and also install a webhook that will trigger new Gitpod prebuilds for every new push to any of your branches to your repository.</p>
<h2 id="${"manual-execution-of-prebuild"}">Manual execution of prebuild<a href="${"#manual-execution-of-prebuild"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Alternatively, it is also possible to manually trigger a new prebuild for any repository &amp; commit by using the <code>gitpod.io/#prebuild/</code> URL prefix:</p>
<pre class="${"language-null"}">${`<code class="language-null">https://gitpod.io/#prebuild/https://github.com/ORG/REPO</code>`}</pre>
<h2 id="${"configure-prebuilds"}">Configure prebuilds<a href="${"#configure-prebuilds"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and for pull/merge requests coming from the same repository.</p>
<blockquote><p><strong>Note</strong>: Prebuilds are executed as the user who enabled them. This means that if you want to use
prebuilds on a private repository, you must give Gitpod access to private repositories.</p></blockquote>
<p>Prebuilds are configured in your repository\u2019s <a href="${"/docs/config-gitpod-file"}"><code>.gitpod.yml</code></a> file with the following start tasks:</p>
<ul><li><code>before</code></li>
<li><code>init</code></li>
<li><code>prebuild</code></li></ul>
<p>Note the absence of the <code>command</code> task. Since this task may potentially run indefinitely, e.g. if you start a dev server, Gitpod does not execute the <code>command</code> task during prebuilds. To perform long-running tasks such as executing unit tests, you can use the <code>prebuild</code> task.</p>
<h2 id="${"configure-the-github-app"}">Configure the GitHub app<a href="${"#configure-the-github-app"}"><span class="${"icon icon-link"}"></span></a></h2>
<p>Once you have installed the <a href="${"https://github.com/apps/gitpod-io"}" rel="${"nofollow"}">Gitpod GitHub app</a>, you can configure its behavior in the <code>github</code> section of your repository\u2019s <a href="${"/docs/config-gitpod-file"}"><code>.gitpod.yml</code></a>.</p>
<blockquote><p><strong>Note:</strong> The Gitpod GitHub app has no equivalent for GitLab or Bitbucket yet, so this entire section is GitHub-specific for now.</p></blockquote>
<p>See below for an example:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">github</span><span class="token punctuation">:</span>
  <span class="token key atrule">prebuilds</span><span class="token punctuation">:</span>
    <span class="token comment"># enable for the default branch (defaults to true)</span>
    <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># enable for all branches in this repo (defaults to false)</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># enable for pull requests coming from this repo (defaults to true)</span>
    <span class="token key atrule">pullRequests</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># enable for pull requests coming from forks (defaults to false)</span>
    <span class="token key atrule">pullRequestsFromForks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># add a check to pull requests (defaults to true)</span>
    <span class="token key atrule">addCheck</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># add a "Review in Gitpod" button as a comment to pull requests (defaults to false)</span>
    <span class="token key atrule">addComment</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># add a "Review in Gitpod" button to the pull request's description (defaults to false)</span>
    <span class="token key atrule">addBadge</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre>
<h3 id="${"when-a-prebuild-is-run"}">When a prebuild is run<a href="${"#when-a-prebuild-is-run"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>The <code>prebuilds</code> section in the <code>.gitpod.yml</code> file configures when prebuilds are run.
By default, prebuilds are run on push to the default branch and for each pull request coming from the same repository.
Additionally, you can enable prebuilds for all branches (<code>branches</code>) and for pull requests from forks (<code>pullRequestsFromForks</code>).</p>
<h3 id="${"github-integration"}">GitHub integration<a href="${"#github-integration"}"><span class="${"icon icon-link"}"></span></a></h3>
<p>Once the GitHub app is installed, Gitpod can add helpful annotations to your pull requests.</p>
<h4 id="${"checks"}">Checks<a href="${"#checks"}"><span class="${"icon icon-link"}"></span></a></h4>
<p>By default, Gitpod registers itself as a check to pull requests - much like a continuous integration system would do.
You can disable this behaviour in the <code>.gitpod.yml</code> file in your default branch:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">github</span><span class="token punctuation">:</span>
  <span class="token key atrule">prebuilds</span><span class="token punctuation">:</span>
    <span class="token key atrule">addCheck</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code>`}</pre>
<h4 id="${"comment"}">Comment<a href="${"#comment"}"><span class="${"icon icon-link"}"></span></a></h4>
<p>Gitpod can add a comment with an \u201COpen in Gitpod\u201D button to your pull requests.</p>
<p>You can enable this behaviour in the <code>.gitpod.yml</code> file in your default branch:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">github</span><span class="token punctuation">:</span>
  <span class="token key atrule">prebuilds</span><span class="token punctuation">:</span>
    <span class="token key atrule">addComment</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code>`}</pre>
<h4 id="${"badge"}">Badge<a href="${"#badge"}"><span class="${"icon icon-link"}"></span></a></h4>
<p>Instead of adding a comment, Gitpod can also modify the description of a pull request to add the \u201COpen in Gitpod\u201D button.
This approach produces fewer GitHub notifications, but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.</p>
<p>You can enable this behaviour in the <code>.gitpod.yml</code> file in your default branch:</p>
<pre class="${"language-yaml"}">${`<code class="language-yaml"><span class="token key atrule">github</span><span class="token punctuation">:</span>
  <span class="token key atrule">prebuilds</span><span class="token punctuation">:</span>
    <span class="token key atrule">addBadge</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code>`}</pre>
<p>The <code>addComment</code> and <code>addBadge</code> behaviours are not mutually exclusive (i.e. enabling one does not disable the other).
If you don\u2019t want the comments to be added, disable them using <code>addComment: false</code>.</p>`
  })}`;
});
var prebuilds = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Prebuilds,
  metadata: metadata$3,
  prerender: prerender$3
});
const metadata$2 = {
  section: null,
  title: "Example Projects"
};
const prerender$2 = true;
const Examples = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$2), {}, {
    default: () => `<h1 id="${"example-projects"}">Example Projects<a href="${"#example-projects"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>Here are a few example projects that have already been configured for Gitpod.</p>
<p>Take a look at their <code>.gitpod.yml</code> file and try them in Gitpod with a single click.</p>
<table><thead><tr><th>Language</th>
<th align="${"left"}">Project</th>
<th>Try it</th></tr></thead>
<tbody><tr><td>JavaScript</td>
<td align="${"left"}"><a href="${"https://github.com/gitpod-io/sveltejs-template"}" rel="${"nofollow"}">SvelteJS template</a>, a project template for <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a> apps</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/sveltejs-template"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>TypeScript</td>
<td align="${"left"}"><a href="${"https://github.com/eclipse-theia/theia"}" rel="${"nofollow"}">Theia</a>, a cloud &amp; desktop IDE framework implemented in TypeScript</td>
<td><a href="${"https://gitpod.io/#https://github.com/eclipse-theia/theia"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>Python</td>
<td align="${"left"}"><a href="${"https://github.com/breatheco-de/python-flask-api-tutorial"}" rel="${"nofollow"}">Todo List API in Python Flask</a>, an interactive tutorial about using Python Flask</td>
<td><a href="${"https://gitpod.io/#https://github.com/breatheco-de/python-flask-api-tutorial"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>Go</td>
<td align="${"left"}"><a href="${"https://github.com/prometheus/prometheus"}" rel="${"nofollow"}">Prometheus</a>, a monitoring system and time series database</td>
<td><a href="${"https://gitpod.io/#https://github.com/prometheus/prometheus"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>Rust</td>
<td align="${"left"}"><a href="${"https://github.com/nushell/nushell"}" rel="${"nofollow"}">Nushell</a>, a terminal emulator written in Rust</td>
<td><a href="${"https://gitpod.io/#https://github.com/nushell/nushell"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>Java</td>
<td align="${"left"}"><a href="${"https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}">Spring PetClinic</a>, a sample web application in Spring in Java</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>Ruby</td>
<td align="${"left"}"><a href="${"https://github.com/gitpod-io/ruby-on-rails"}" rel="${"nofollow"}">Ruby on Rails template</a> with a PostgreSQL database</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/ruby-on-rails"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>C#</td>
<td align="${"left"}"><a href="${"https://github.com/gitpod-io/example-dotnet-core"}" rel="${"nofollow"}">C# .NET Core template</a>, a simple pipeline example for a .NET Core application</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/example-dotnet-core"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr>
<tr><td>PHP</td>
<td align="${"left"}"><a href="${"https://github.com/symfony/demo"}" rel="${"nofollow"}">Symfony Demo Application</a>, a reference application for PHP developers</td>
<td><a href="${"https://gitpod.io/#https://github.com/gitpod-io/symfony-demo"}" rel="${"nofollow"}" class="${"link-with-image-as-only-child"}"><img src="${"https://gitpod.io/button/open-in-gitpod.svg"}" alt="${"Open in Gitpod"}"></a></td></tr></tbody></table>
<br>
<p>You can find more example projects in the <a href="${"/docs/languages-and-frameworks"}">Languages &amp; Frameworks</a> pages.</p>`
  })}`;
});
var examples = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Examples,
  metadata: metadata$2,
  prerender: prerender$2
});
const metadata$1 = {
  section: "develop",
  title: "Develop on Gitpod"
};
const prerender$1 = true;
const Develop = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata$1), {}, {
    default: () => `<h1 id="${"develop-on-gitpod"}">Develop on Gitpod<a href="${"#develop-on-gitpod"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>The following links describe how to develop on Gitpod and elaborate on topics briefly touched on elsewhere in the documentation:</p>
<ul><li><a href="${"/docs/workspaces"}">One workspace per task</a></li>
<li><a href="${"/docs/life-of-workspace"}">Life of a workspace</a></li>
<li><a href="${"/docs/context-urls"}">Contexts</a></li>
<li><a href="${"/docs/sharing-and-collaboration"}">Collaboration &amp; Sharing</a></li>
<li><a href="${"/docs/command-line-interface"}">Command Line Interface</a></li></ul>`
  })}`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Develop,
  metadata: metadata$1,
  prerender: prerender$1
});
const metadata = {
  section: "subscriptions",
  title: "Create a Team"
};
const prerender = true;
const Teams = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Docs_content_layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign(metadata), {}, {
    default: () => `<h1 id="${"create-a-team"}">Create a Team<a href="${"#create-a-team"}"><span class="${"icon icon-link"}"></span></a></h1>
<p>From <a href="${"https://gitpod.io/teams/"}" rel="${"nofollow"}">gitpod.io/teams/</a>, you can purchase and manage Gitpod subscriptions for your entire team with one centralized billing.</p>
<p>If you don\u2019t have a Gitpod account yet, you\u2019ll be asked to create one first. You can then choose between the Team Professional or Team Unlimited plan and add members to it.</p>
<p><img src="${"/images/docs/team-subscription-add-member.png"}" alt="${"Team Subscription Add Member"}"></p>
<p>Afterwards you can choose how many seats you wish to purchase, and in which currency you would like to be billed.
Then you have two options for adding your team members.</p>
<p>You can either directly assign a seat by entering your team member\u2019s GitHub username, or use the <code>Invite Team</code> button and get a shareable link. Send the link to your team, and they can claim a seat.</p>
<p><img src="${"/images/docs/team-subscription.png"}" alt="${"Team Subscription"}"></p>
<h2 id="${"good-to-know"}">Good to know<a href="${"#good-to-know"}"><span class="${"icon icon-link"}"></span></a></h2>
<ul><li>You don\u2019t need to have a subscription yourself in order to manage seats for your team. You can simply sign in to <a href="${"https://gitpod.io/teams/"}" rel="${"nofollow"}">https://gitpod.io/teams/</a> for free.</li>
<li>If you\u2019d like to add more seats, delete seats or reassign existing seats, you can do these changes at any time.</li></ul>`
  })}`;
});
var teams = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Teams,
  metadata,
  prerender
});
export {init, render};
